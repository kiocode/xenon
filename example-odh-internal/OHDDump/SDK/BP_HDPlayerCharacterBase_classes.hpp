#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDPlayerCharacterBase

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "HDMain_structs.hpp"
#include "HDMain_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C
// 0x0590 (0x0FD0 - 0x0A40)
class ABP_HDPlayerCharacterBase_C final : public AHDPlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        LeanComponent;                                     // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHDAIPerceptionComponent*               HDAIPerception;                                    // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetCameraPoint;                                 // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RefPoint;                                          // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Suppression_B;                                     // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Suppression_A;                                     // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Suppression_L;                                     // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Suppression_R;                                     // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HDVOIPTalker_C*                     VOIPTalker;                                        // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   PlayerNameTextRender;                              // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDFPOIComponent*                        POI;                                               // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraAnimationSlot2_CameraCurve_24954BCF4915EDB59EB9158824582DBB; // 0x0AA8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraAnimationSlot2__Direction_24954BCF4915EDB59EB9158824582DBB; // 0x0AB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB5[0x3];                                      // 0x0AB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraAnimationSlot2;                              // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraAnimationSlot1_CameraCurve_78B6BF4045FC86DC6E1F7DACE85CA8B3; // 0x0AC0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraAnimationSlot1__Direction_78B6BF4045FC86DC6E1F7DACE85CA8B3; // 0x0ACC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ACD[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraAnimationSlot1;                              // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraAnimationSlot0_CameraCurve_FCA6C1774AD24955E6AD27B43792174B; // 0x0AD8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraAnimationSlot0__Direction_FCA6C1774AD24955E6AD27B43792174B; // 0x0AE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE5[0x3];                                      // 0x0AE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraAnimationSlot0;                              // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrouchExitSpringArmTranslation_CameraVector_E70B91E543398207A70C939B80788F86; // 0x0AF0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CrouchExitSpringArmTranslation__Direction_E70B91E543398207A70C939B80788F86; // 0x0AFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AFD[0x3];                                      // 0x0AFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CrouchExitSpringArmTranslation;                    // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrouchSpringArmTranslation_CameraCurve_C4C40FDD4BBC021213AF31AA7F3DBF4B; // 0x0B08(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CrouchSpringArmTranslation__Direction_C4C40FDD4BBC021213AF31AA7F3DBF4B; // 0x0B14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B15[0x3];                                      // 0x0B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CrouchSpringArmTranslation;                        // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProneExitSpringArmTranslation_CurveVector_CEF9B5C9468424E977B84F9F84E59E08; // 0x0B20(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ProneExitSpringArmTranslation__Direction_CEF9B5C9468424E977B84F9F84E59E08; // 0x0B2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2D[0x3];                                      // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ProneExitSpringArmTranslation;                     // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProneSpringArmTranslation_CurveVector_B542793B44FD44A9C91CC7B34C17770E; // 0x0B38(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ProneSpringArmTranslation__Direction_B542793B44FD44A9C91CC7B34C17770E; // 0x0B44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B45[0x3];                                      // 0x0B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ProneSpringArmTranslation;                         // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VaultCameraTimeline_Rotation_22F2E311466556389CC02182AEE99CCA; // 0x0B50(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VaultCameraTimeline_VaultCamera_22F2E311466556389CC02182AEE99CCA; // 0x0B5C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VaultCameraTimeline__Direction_22F2E311466556389CC02182AEE99CCA; // 0x0B68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B69[0x7];                                      // 0x0B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VaultCameraTimeline;                               // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTimeline_Lerp_5E919E724A951192A68B8180576AB695; // 0x0B78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LerpTimeline__Direction_5E919E724A951192A68B8180576AB695; // 0x0B7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7D[0x3];                                      // 0x0B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LerpTimeline;                                      // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageEffectTimeline_DamageEffect_BEBC6E9841C4A26EF0A22DA008BD6CA4; // 0x0B88(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DamageEffectTimeline__Direction_BEBC6E9841C4A26EF0A22DA008BD6CA4; // 0x0B94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B95[0x3];                                      // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DamageEffectTimeline;                              // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SuppressionTimeline_SuppressionCurve_83869DB54889A3FECCAF0E83EA19C04B; // 0x0BA0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SuppressionTimeline__Direction_83869DB54889A3FECCAF0E83EA19C04B; // 0x0BAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAD[0x3];                                      // 0x0BAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SuppressionTimeline;                               // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDamageDivisor;                                 // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDamageThreshold;                               // 0x0BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EquipmentTimerDelay;                               // 0x0BC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipmentKeyPressed;                              // 0x0BC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelectingEquipmentBySlot;                         // 0x0BC5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNextItem;                                         // 0x0BC6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC7[0x1];                                      // 0x0BC7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           LastValidPlayerState;                              // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTintTeamColorForPlayerPOIs;                       // 0x0BD0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseSpecialSymbolForLocalPlayerPOIs;               // 0x0BD1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD2[0x6];                                      // 0x0BD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LocalPlayerPOISymbol;                              // 0x0BD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      VOIPSpatializedAttenuation;                        // 0x0BE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundEffectSourcePresetChain*          VOIPSpatializedSrcEffectChain;                     // 0x0BE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HealthRegenTimer;                                  // 0x0BF0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bHealthRegenEnabled;                               // 0x0BF8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthRegenAmount;                                 // 0x0BFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthRegenTimerInterval;                          // 0x0C00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalPlayerPOITint;                                // 0x0C04(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 RedTeamColor;                                      // 0x0C14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BlueTeamColor;                                     // 0x0C18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 NoTeamColor;                                       // 0x0C1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRadialMenuEnabled;                                // 0x0C20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C21[0x7];                                      // 0x0C21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HDRadialMenu_C*                    RadialMenu;                                        // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RadialMenuExitSnd;                                 // 0x0C30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             RadialMenuOptions;                                 // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRallypointsEnabled;                               // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C41[0x3];                                      // 0x0C41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialMenuRallypointTimeDeployed;                  // 0x0C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpatializedVOIPTalker;                            // 0x0C48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bOutpostsEnabled;                                  // 0x0C49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4A[0x2];                                      // 0x0C4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialMenuOutpostTimeDeployed;                     // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SuppressionSound;                                  // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SuppressionSoundVolume;                            // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBracedAim;                                        // 0x0C5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bWantsMount;                                       // 0x0C5D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bMounted;                                          // 0x0C5E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5F[0x1];                                      // 0x0C5F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MountDirection;                                    // 0x0C60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MountPosition;                                     // 0x0C6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C78[0x8];                                      // 0x0C78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MountTransform;                                    // 0x0C80(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SmoothSightDirection;                              // 0x0CB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmoothSightOffset;                                 // 0x0CBC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimSpeed;                                          // 0x0CC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightDirectionSmoothingSpeed;                      // 0x0CCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightPositionSmoothingSpeed;                       // 0x0CD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MountDistance;                                     // 0x0CD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimAlpha;                                          // 0x0CD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MountHeight;                                       // 0x0CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDWeaponBase_C*                     EquippedWeapon;                                    // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDProj_SPDeployableBase_C*          SpawnedFOB;                                        // 0x0CE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDProj_SPDeployableBase_C*          SpawnedRallypoint;                                 // 0x0CF0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSuppression;                                     // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHitDamage;                                       // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bSpottingEnabled;                                  // 0x0D18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D19[0x7];                                      // 0x0D19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           SuppressionCurve;                                  // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           HitDamageCurve;                                    // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SuppressionCameraShake;                            // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ReceiveDamageCameraShake;                          // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HitEffectValues;                                   // 0x0D40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BleedingEffectValues;                              // 0x0D50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageEffectStartPercent;                          // 0x0D60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVariationDataSet;                                 // 0x0D64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D65[0x3];                                      // 0x0D65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVaultViewYaw;                                   // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxVaultViewYaw;                                   // 0x0D6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           VaultOverCameraCurve;                              // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           SprintVaultOverCameraCurve;                        // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ClimbOntoCameraCurve;                              // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           SprintClimbOntoCameraCurve;                        // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Camera1POffsetBeforeVault;                         // 0x0D90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Mesh1POffsetBeforeVault;                           // 0x0D9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FWeightedBlendable                     SuppresionEffect;                                  // 0x0DA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FWeightedBlendable                     DamageEffect;                                      // 0x0DB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       ThirdPersonCharMatArray;                           // 0x0DC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       FirstPersonCharMatArray;                           // 0x0DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bUseSpecialSymbolForSquadMatePOIs;                 // 0x0DE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE9[0x7];                                      // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SquadMatePOISymbol;                                // 0x0DF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SquadMatePOITint;                                  // 0x0DF8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NonSquadMatePOISymbol;                             // 0x0E08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NonSquadMatePOITint;                               // 0x0E10(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSpecialSymbolForSquadLeaderPOIs;               // 0x0E20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E21[0x7];                                      // 0x0E21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SquadLeaderPOISymbol;                              // 0x0E28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SquadLeaderPOITint;                                // 0x0E30(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SquadLeaderPOITextColor;                           // 0x0E40(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NonSquadLeaderPOISymbol;                           // 0x0E50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NonSquadLeaderPOITint;                             // 0x0E58(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NonSquadLeaderPOITextColor;                        // 0x0E68(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BracedAimAlpha;                                    // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E7C[0x4];                                      // 0x0E7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraCurveVectorTimeline;                         // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReloadPressed;                                    // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E89[0x3];                                      // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadAlpha;                                       // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnequipAlpha;                                      // 0x0E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeanCompRotation;                                  // 0x0E94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LeanMovementAlpha;                                 // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0EA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA5[0x3];                                      // 0x0EA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanAlpha;                                         // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchAlpha;                                       // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpringArmLocationCache;                            // 0x0EB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraAnimationScale;                              // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FiringAlpha;                                       // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrawlingAlpha;                                     // 0x0EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCrouchState;                                      // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bProneState;                                       // 0x0EC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bProneInProgress;                                  // 0x0ECA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTransitionInProgress;                             // 0x0ECB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         EyeHeightAdjust;                                   // 0x0ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputAxis;                                     // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayCameraAnimation_0;                            // 0x0ED4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED5[0x3];                                      // 0x0ED5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAnimationAlpha_0;                            // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EDC[0x4];                                      // 0x0EDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CameraAnimationCurve_0;                            // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE8[0x8];                                      // 0x0EE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraAnimationTransform_0;                        // 0x0EF0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CameraAnimationSmoothingSpeed_0;                   // 0x0F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraAnimationTransitionSpeed_0;                  // 0x0F24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayCameraAnimation_1;                            // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F29[0x3];                                      // 0x0F29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAnimationAlpha_1;                            // 0x0F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CameraAnimationCurve_1;                            // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F38[0x8];                                      // 0x0F38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraAnimationTransform_1;                        // 0x0F40(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CameraAnimationSmoothingSpeed_1;                   // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraAnimationTransitionSpeed_1;                  // 0x0F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayCameraAnimation_2;                            // 0x0F78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F79[0x3];                                      // 0x0F79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAnimationAlpha_2;                            // 0x0F7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CameraAnimationCurve_2;                            // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F88[0x8];                                      // 0x0F88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraAnimationTransform_2;                        // 0x0F90(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CameraAnimationSmoothingSpeed_2;                   // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraAnimationTransitionSpeed_2;                  // 0x0FC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHoldForwardTrack0;                                // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHoldForwardTrack1;                                // 0x0FC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHoldForwardTrack2;                                // 0x0FCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTrackReset0;                                      // 0x0FCB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTrackReset1;                                      // 0x0FCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTrackReset2;                                      // 0x0FCD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFireModeChanged;                                  // 0x0FCE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnSuppression__DelegateSignature(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup);
	void OnHitDamage__DelegateSignature(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup);
	void ExecuteUbergraph_BP_HDPlayerCharacterBase(int32 EntryPoint);
	void SubmenuCommited(class FName Category, class FName SubItem);
	void ExitRadialMenu();
	void EnterRadialMenu();
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void ReceiveOnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void ReceiveOnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void ReceiveOnEndVault();
	void ReceiveOnStartVault();
	void ReceiveHealthChanged(float NewHealthTotal, float PrevHealthTotal);
	void ReceiveVariationDataChanged(const struct FDFCharacterVariationData& NewVariation, const struct FDFCharacterVariationData& PreviousVariation);
	void ReceivePlayHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bKilled);
	void ServerRadialMenuSelectSpot();
	void ServerRadialMenuSelectRallypoint();
	void ServerRadialMenuSelectOutpost();
	void Hit_Damage(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup);
	void ReceiveEquippedItemChanged(class ADFBaseItem* NewEquippedItem, class ADFBaseItem* PrevEquippedItem);
	void SuppressionEffect(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup, class UPrimitiveComponent* SuppressionVolume);
	void BndEvt__Suppression_R_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Suppression_L_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Suppression_A_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Suppression_B_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveOnEndAim();
	void ReceiveOnStartAim();
	void ReceiveVoipTalkerMsgReceived(class UDFCommChannel* MsgTalkerChannel, class APlayerState* MsgTalkerPS, bool bMsgIsTalking);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void ReceivePawnTeamStateUpdated(class ADFTeamState* TeamStateBeforeUpdate, class ADFTeamState* NewTeamState, bool bNewTeamStateInit);
	void EventResetHealthEffect();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void PlayerNameChanged(class APlayerState* PS, const class FString& NewPlayerName);
	void OnPCFireReleased();
	void FirstPersonToggled(bool bFirstPerson_0);
	void ReceiveBeginPlay();
	void NotifyPlayerStateChanged(class APlayerState* NewPlayerState, class APlayerState* OldPlayerState);
	void ReceiveFreeAim(float DeltaSeconds);
	void ReceivePawnTeamNumUpdated(uint8 LastTeamNum, uint8 NewTeamNum);
	void ReceiveDestroyed();
	void ReceiveRestart();
	void GenericDamageFeedback();
	void OnLanded(const struct FHitResult& Hit);
	void OnPCFirePressed();
	void ReceivePossessed(class AController* NewController);
	void RetryLoadout();
	void ReceiveCurrentLoadout();
	void OnEquipmentTimerElapsed();
	void OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_RadialMenu_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_RadialMenu_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_PointAimToggle_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_CycleWeaponSights_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_EqpSlot9_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_EqpSlot8_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_EqpSlot7_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_EqpSlot6_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_EqpSlot5_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_EqpSlot4_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_EqpSlot3_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_EqpSlot2_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_EqpSlot1_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_EqpSlot0_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_CameraToggle_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_PreviousItem_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_NextItem_K2Node_InputActionEvent_16(const struct FKey& Key);
	void CameraAnimationSlot0__UpdateFunc();
	void CameraAnimationSlot0__FinishedFunc();
	void CameraAnimationSlot1__UpdateFunc();
	void CameraAnimationSlot1__FinishedFunc();
	void CameraAnimationSlot2__UpdateFunc();
	void CameraAnimationSlot2__FinishedFunc();
	void CrouchExitSpringArmTranslation__UpdateFunc();
	void CrouchExitSpringArmTranslation__FinishedFunc();
	void CrouchSpringArmTranslation__UpdateFunc();
	void CrouchSpringArmTranslation__FinishedFunc();
	void ProneExitSpringArmTranslation__UpdateFunc();
	void ProneExitSpringArmTranslation__FinishedFunc();
	void ProneSpringArmTranslation__UpdateFunc();
	void ProneSpringArmTranslation__FinishedFunc();
	void VaultCameraTimeline__UpdateFunc();
	void VaultCameraTimeline__FinishedFunc();
	void SuppressionTimeline__UpdateFunc();
	void SuppressionTimeline__FinishedFunc();
	void DamageEffectTimeline__UpdateFunc();
	void DamageEffectTimeline__FinishedFunc();
	void LerpTimeline__UpdateFunc();
	void LerpTimeline__FinishedFunc();
	void UserConstructionScript();
	void FreeAiming();
	void StartEquipmentTimer();
	void SetEquipmentTimer();
	void SelectEquipmentBySlotNum(int32 EquipSlotNum, bool bEquipImmediately, bool bFromInput);
	void UpdateCharMeshesFromFaction();
	void UpdateCharMeshes(class USkeletalMesh* MeshFPP, class USkeletalMesh* MeshTPP);
	void ApplyCharacterVariation(const struct FDFCharacterVariationDataHandle& VariationHandle_0, bool bApplyToFPP);
	void UpdatePOIState();
	void UpdateEquipmentItems();
	void GetMostValidPlayerState(class APlayerState** PlayerState_0);
	void GetMostValidTeamState(class ADFTeamState** TeamState_0);
	void GetMostValidTeamFactionInfo(class UClass** FactionInfoClass);
	void GetMostValidLoadout(class UHDKit** PlayerLoadout);
	void EquipSelectedItemFromInventory(bool bSwitchFireModeForSelected);
	void SetupVOIPTalker();
	void CleanupVOIPTalker(bool* bDestroyedComp);
	void HealthRegenTimerElapsed();
	void SetHealthRegenTimerIfInvalid(float NewHealth);
	void ClearHealthRegenTimer();
	void LeanDebug();
	void SpawnAndInitDeployableSPAtPawn(class UClass* SPDeployableClass, const struct FVector& SpawnOffset, class ABP_HDProj_SPDeployableBase_C** SpawnedDeployableSP);
	void SelectRadialMenuItem(class FName Category, class FName SubItem);
	void RadialMenuSelectSpot();
	void RadialMenuSelectRallypoint();
	void RadialMenuSelectOutpost();
	void RadialMenuCanSelectSpot(bool* bSelectable);
	void RadialMenuCanSelectRallypoint(bool* bSelectable);
	void RadialMenuCanSelectOutpost(bool* bSelectable);
	void CanSelectAnyRadialMenuOption(bool* bSelectable);
	void GetSquadState(class AHDSquadState** SquadState);
	void IsSquadLeader(bool* bSquadLeader);
	void HasSquadLeaderKit(bool bRequireRallyPointAbility, bool* bUsingSquadLeaderKit);
	void OnRep_bSpatializedVOIPTalker();
	void GetMountPosition(const struct FVector& Direction, float WallDistance, float TraceRadius, float CornerDistance, float CapsuleHeight, bool* bCouldMount, struct FVector* Position, struct FTransform* Transform);
	void AlignSights(float MinSightDistance);
	void GetProneMountPosition(const struct FVector& BoxSize, float Distance, float MaxHeight, float MinHeight, float MinSpace, bool* bCouldMount, struct FVector* MountPosition_0);
	void GetIsSpawnedOutpostValid(bool* bIsSpawnedOutpostValid);
	void GetIsSpawnedRallypointValid(bool* bIsSpawnedRallypointValid);
	void CalcRallypointDistanceRestriction(bool* bIsRallypointDistanceRestricted);
	void CalcOutpostDistanceRestriction(bool* bIsOutpostDistanceRestricted);
	void IsRallypointNumberLimitReached(bool* bNumberLimitReached);
	void IsOutpostNumberLimitReached(bool* bNumberLimitReached);
	void CalcRallypointEnemiesNearbyRestriction(bool* bAreEnemiesNearby);
	void CalcOutpostEnemiesNearbyRestriction(bool* bAreEnemiesNearby);
	void SetSuppressionActive(bool bActive);
	void SetSuppressionCompIsActive(class UPrimitiveComponent* PrimComp, bool bNewActive);
	void UpdateCharMesh(class USkeletalMesh* NewMesh, bool bUpdateFPPMesh);
	void SetPCViewRotationYawLimits(float ViewYawMin, float ViewYawMax, bool bRelativeToActorRotation);
	void RestorePCViewRotationYawLimits();
	void GetVaultCameraCurveForBehavior(EVaultBehavior VaultBehavior, class UCurveVector** CameraCurve);
	void IsSameSquad(class ABP_HDPlayerControllerBase_C* LocalController, bool* bSameSquad);
	void SetSpringArmOffset(float CurveZ);
	void GetEyeHeightAdjustment(float* EyeHeightAdjust_0);
	void LeanRotation();
	void WeaponCollision();

	void GetMinimapWidget(class AController* Controller_0, class UDFMinimap** MinimapWidget) const;
	class USkeletalMesh* ReceiveGetDefaultPawnMesh1P() const;
	void GetPlayerFactionInfoClass(EHDTeam PlayerTeam, class UClass** FactionInfoClass) const;
	void IsMatchingTeam(class AController* LocalController, bool* bMatchingTeam) const;
	struct FVector EventGetFocalPoint() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HDPlayerCharacterBase_C">();
	}
	static class ABP_HDPlayerCharacterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HDPlayerCharacterBase_C>();
	}
};
static_assert(alignof(ABP_HDPlayerCharacterBase_C) == 0x000010, "Wrong alignment on ABP_HDPlayerCharacterBase_C");
static_assert(sizeof(ABP_HDPlayerCharacterBase_C) == 0x000FD0, "Wrong size on ABP_HDPlayerCharacterBase_C");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, UberGraphFrame) == 0x000A40, "Member 'ABP_HDPlayerCharacterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LeanComponent) == 0x000A48, "Member 'ABP_HDPlayerCharacterBase_C::LeanComponent' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HDAIPerception) == 0x000A50, "Member 'ABP_HDPlayerCharacterBase_C::HDAIPerception' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, TargetCameraPoint) == 0x000A58, "Member 'ABP_HDPlayerCharacterBase_C::TargetCameraPoint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RefPoint) == 0x000A60, "Member 'ABP_HDPlayerCharacterBase_C::RefPoint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NavigationInvoker) == 0x000A68, "Member 'ABP_HDPlayerCharacterBase_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Suppression_B) == 0x000A70, "Member 'ABP_HDPlayerCharacterBase_C::Suppression_B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Suppression_A) == 0x000A78, "Member 'ABP_HDPlayerCharacterBase_C::Suppression_A' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Suppression_L) == 0x000A80, "Member 'ABP_HDPlayerCharacterBase_C::Suppression_L' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Suppression_R) == 0x000A88, "Member 'ABP_HDPlayerCharacterBase_C::Suppression_R' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VOIPTalker) == 0x000A90, "Member 'ABP_HDPlayerCharacterBase_C::VOIPTalker' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, PlayerNameTextRender) == 0x000A98, "Member 'ABP_HDPlayerCharacterBase_C::PlayerNameTextRender' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, POI) == 0x000AA0, "Member 'ABP_HDPlayerCharacterBase_C::POI' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot2_CameraCurve_24954BCF4915EDB59EB9158824582DBB) == 0x000AA8, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot2_CameraCurve_24954BCF4915EDB59EB9158824582DBB' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot2__Direction_24954BCF4915EDB59EB9158824582DBB) == 0x000AB4, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot2__Direction_24954BCF4915EDB59EB9158824582DBB' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot2) == 0x000AB8, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot1_CameraCurve_78B6BF4045FC86DC6E1F7DACE85CA8B3) == 0x000AC0, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot1_CameraCurve_78B6BF4045FC86DC6E1F7DACE85CA8B3' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot1__Direction_78B6BF4045FC86DC6E1F7DACE85CA8B3) == 0x000ACC, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot1__Direction_78B6BF4045FC86DC6E1F7DACE85CA8B3' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot1) == 0x000AD0, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot0_CameraCurve_FCA6C1774AD24955E6AD27B43792174B) == 0x000AD8, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot0_CameraCurve_FCA6C1774AD24955E6AD27B43792174B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot0__Direction_FCA6C1774AD24955E6AD27B43792174B) == 0x000AE4, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot0__Direction_FCA6C1774AD24955E6AD27B43792174B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSlot0) == 0x000AE8, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSlot0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchExitSpringArmTranslation_CameraVector_E70B91E543398207A70C939B80788F86) == 0x000AF0, "Member 'ABP_HDPlayerCharacterBase_C::CrouchExitSpringArmTranslation_CameraVector_E70B91E543398207A70C939B80788F86' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchExitSpringArmTranslation__Direction_E70B91E543398207A70C939B80788F86) == 0x000AFC, "Member 'ABP_HDPlayerCharacterBase_C::CrouchExitSpringArmTranslation__Direction_E70B91E543398207A70C939B80788F86' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchExitSpringArmTranslation) == 0x000B00, "Member 'ABP_HDPlayerCharacterBase_C::CrouchExitSpringArmTranslation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchSpringArmTranslation_CameraCurve_C4C40FDD4BBC021213AF31AA7F3DBF4B) == 0x000B08, "Member 'ABP_HDPlayerCharacterBase_C::CrouchSpringArmTranslation_CameraCurve_C4C40FDD4BBC021213AF31AA7F3DBF4B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchSpringArmTranslation__Direction_C4C40FDD4BBC021213AF31AA7F3DBF4B) == 0x000B14, "Member 'ABP_HDPlayerCharacterBase_C::CrouchSpringArmTranslation__Direction_C4C40FDD4BBC021213AF31AA7F3DBF4B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchSpringArmTranslation) == 0x000B18, "Member 'ABP_HDPlayerCharacterBase_C::CrouchSpringArmTranslation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneExitSpringArmTranslation_CurveVector_CEF9B5C9468424E977B84F9F84E59E08) == 0x000B20, "Member 'ABP_HDPlayerCharacterBase_C::ProneExitSpringArmTranslation_CurveVector_CEF9B5C9468424E977B84F9F84E59E08' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneExitSpringArmTranslation__Direction_CEF9B5C9468424E977B84F9F84E59E08) == 0x000B2C, "Member 'ABP_HDPlayerCharacterBase_C::ProneExitSpringArmTranslation__Direction_CEF9B5C9468424E977B84F9F84E59E08' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneExitSpringArmTranslation) == 0x000B30, "Member 'ABP_HDPlayerCharacterBase_C::ProneExitSpringArmTranslation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneSpringArmTranslation_CurveVector_B542793B44FD44A9C91CC7B34C17770E) == 0x000B38, "Member 'ABP_HDPlayerCharacterBase_C::ProneSpringArmTranslation_CurveVector_B542793B44FD44A9C91CC7B34C17770E' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneSpringArmTranslation__Direction_B542793B44FD44A9C91CC7B34C17770E) == 0x000B44, "Member 'ABP_HDPlayerCharacterBase_C::ProneSpringArmTranslation__Direction_B542793B44FD44A9C91CC7B34C17770E' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ProneSpringArmTranslation) == 0x000B48, "Member 'ABP_HDPlayerCharacterBase_C::ProneSpringArmTranslation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VaultCameraTimeline_Rotation_22F2E311466556389CC02182AEE99CCA) == 0x000B50, "Member 'ABP_HDPlayerCharacterBase_C::VaultCameraTimeline_Rotation_22F2E311466556389CC02182AEE99CCA' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VaultCameraTimeline_VaultCamera_22F2E311466556389CC02182AEE99CCA) == 0x000B5C, "Member 'ABP_HDPlayerCharacterBase_C::VaultCameraTimeline_VaultCamera_22F2E311466556389CC02182AEE99CCA' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VaultCameraTimeline__Direction_22F2E311466556389CC02182AEE99CCA) == 0x000B68, "Member 'ABP_HDPlayerCharacterBase_C::VaultCameraTimeline__Direction_22F2E311466556389CC02182AEE99CCA' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VaultCameraTimeline) == 0x000B70, "Member 'ABP_HDPlayerCharacterBase_C::VaultCameraTimeline' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LerpTimeline_Lerp_5E919E724A951192A68B8180576AB695) == 0x000B78, "Member 'ABP_HDPlayerCharacterBase_C::LerpTimeline_Lerp_5E919E724A951192A68B8180576AB695' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LerpTimeline__Direction_5E919E724A951192A68B8180576AB695) == 0x000B7C, "Member 'ABP_HDPlayerCharacterBase_C::LerpTimeline__Direction_5E919E724A951192A68B8180576AB695' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LerpTimeline) == 0x000B80, "Member 'ABP_HDPlayerCharacterBase_C::LerpTimeline' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, DamageEffectTimeline_DamageEffect_BEBC6E9841C4A26EF0A22DA008BD6CA4) == 0x000B88, "Member 'ABP_HDPlayerCharacterBase_C::DamageEffectTimeline_DamageEffect_BEBC6E9841C4A26EF0A22DA008BD6CA4' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, DamageEffectTimeline__Direction_BEBC6E9841C4A26EF0A22DA008BD6CA4) == 0x000B94, "Member 'ABP_HDPlayerCharacterBase_C::DamageEffectTimeline__Direction_BEBC6E9841C4A26EF0A22DA008BD6CA4' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, DamageEffectTimeline) == 0x000B98, "Member 'ABP_HDPlayerCharacterBase_C::DamageEffectTimeline' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionTimeline_SuppressionCurve_83869DB54889A3FECCAF0E83EA19C04B) == 0x000BA0, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionTimeline_SuppressionCurve_83869DB54889A3FECCAF0E83EA19C04B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionTimeline__Direction_83869DB54889A3FECCAF0E83EA19C04B) == 0x000BAC, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionTimeline__Direction_83869DB54889A3FECCAF0E83EA19C04B' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionTimeline) == 0x000BB0, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionTimeline' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, FallDamageDivisor) == 0x000BB8, "Member 'ABP_HDPlayerCharacterBase_C::FallDamageDivisor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, FallDamageThreshold) == 0x000BBC, "Member 'ABP_HDPlayerCharacterBase_C::FallDamageThreshold' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, EquipmentTimerDelay) == 0x000BC0, "Member 'ABP_HDPlayerCharacterBase_C::EquipmentTimerDelay' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bEquipmentKeyPressed) == 0x000BC4, "Member 'ABP_HDPlayerCharacterBase_C::bEquipmentKeyPressed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bSelectingEquipmentBySlot) == 0x000BC5, "Member 'ABP_HDPlayerCharacterBase_C::bSelectingEquipmentBySlot' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bNextItem) == 0x000BC6, "Member 'ABP_HDPlayerCharacterBase_C::bNextItem' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LastValidPlayerState) == 0x000BC8, "Member 'ABP_HDPlayerCharacterBase_C::LastValidPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bTintTeamColorForPlayerPOIs) == 0x000BD0, "Member 'ABP_HDPlayerCharacterBase_C::bTintTeamColorForPlayerPOIs' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bUseSpecialSymbolForLocalPlayerPOIs) == 0x000BD1, "Member 'ABP_HDPlayerCharacterBase_C::bUseSpecialSymbolForLocalPlayerPOIs' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LocalPlayerPOISymbol) == 0x000BD8, "Member 'ABP_HDPlayerCharacterBase_C::LocalPlayerPOISymbol' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VOIPSpatializedAttenuation) == 0x000BE0, "Member 'ABP_HDPlayerCharacterBase_C::VOIPSpatializedAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VOIPSpatializedSrcEffectChain) == 0x000BE8, "Member 'ABP_HDPlayerCharacterBase_C::VOIPSpatializedSrcEffectChain' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HealthRegenTimer) == 0x000BF0, "Member 'ABP_HDPlayerCharacterBase_C::HealthRegenTimer' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bHealthRegenEnabled) == 0x000BF8, "Member 'ABP_HDPlayerCharacterBase_C::bHealthRegenEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HealthRegenAmount) == 0x000BFC, "Member 'ABP_HDPlayerCharacterBase_C::HealthRegenAmount' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HealthRegenTimerInterval) == 0x000C00, "Member 'ABP_HDPlayerCharacterBase_C::HealthRegenTimerInterval' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LocalPlayerPOITint) == 0x000C04, "Member 'ABP_HDPlayerCharacterBase_C::LocalPlayerPOITint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RedTeamColor) == 0x000C14, "Member 'ABP_HDPlayerCharacterBase_C::RedTeamColor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, BlueTeamColor) == 0x000C18, "Member 'ABP_HDPlayerCharacterBase_C::BlueTeamColor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NoTeamColor) == 0x000C1C, "Member 'ABP_HDPlayerCharacterBase_C::NoTeamColor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bRadialMenuEnabled) == 0x000C20, "Member 'ABP_HDPlayerCharacterBase_C::bRadialMenuEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RadialMenu) == 0x000C28, "Member 'ABP_HDPlayerCharacterBase_C::RadialMenu' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RadialMenuExitSnd) == 0x000C30, "Member 'ABP_HDPlayerCharacterBase_C::RadialMenuExitSnd' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RadialMenuOptions) == 0x000C38, "Member 'ABP_HDPlayerCharacterBase_C::RadialMenuOptions' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bRallypointsEnabled) == 0x000C40, "Member 'ABP_HDPlayerCharacterBase_C::bRallypointsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RadialMenuRallypointTimeDeployed) == 0x000C44, "Member 'ABP_HDPlayerCharacterBase_C::RadialMenuRallypointTimeDeployed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bSpatializedVOIPTalker) == 0x000C48, "Member 'ABP_HDPlayerCharacterBase_C::bSpatializedVOIPTalker' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bOutpostsEnabled) == 0x000C49, "Member 'ABP_HDPlayerCharacterBase_C::bOutpostsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, RadialMenuOutpostTimeDeployed) == 0x000C4C, "Member 'ABP_HDPlayerCharacterBase_C::RadialMenuOutpostTimeDeployed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionSound) == 0x000C50, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionSound' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionSoundVolume) == 0x000C58, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionSoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bBracedAim) == 0x000C5C, "Member 'ABP_HDPlayerCharacterBase_C::bBracedAim' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bWantsMount) == 0x000C5D, "Member 'ABP_HDPlayerCharacterBase_C::bWantsMount' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bMounted) == 0x000C5E, "Member 'ABP_HDPlayerCharacterBase_C::bMounted' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MountDirection) == 0x000C60, "Member 'ABP_HDPlayerCharacterBase_C::MountDirection' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MountPosition) == 0x000C6C, "Member 'ABP_HDPlayerCharacterBase_C::MountPosition' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MountTransform) == 0x000C80, "Member 'ABP_HDPlayerCharacterBase_C::MountTransform' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SmoothSightDirection) == 0x000CB0, "Member 'ABP_HDPlayerCharacterBase_C::SmoothSightDirection' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SmoothSightOffset) == 0x000CBC, "Member 'ABP_HDPlayerCharacterBase_C::SmoothSightOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, AimSpeed) == 0x000CC8, "Member 'ABP_HDPlayerCharacterBase_C::AimSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SightDirectionSmoothingSpeed) == 0x000CCC, "Member 'ABP_HDPlayerCharacterBase_C::SightDirectionSmoothingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SightPositionSmoothingSpeed) == 0x000CD0, "Member 'ABP_HDPlayerCharacterBase_C::SightPositionSmoothingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MountDistance) == 0x000CD4, "Member 'ABP_HDPlayerCharacterBase_C::MountDistance' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, AimAlpha) == 0x000CD8, "Member 'ABP_HDPlayerCharacterBase_C::AimAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MountHeight) == 0x000CDC, "Member 'ABP_HDPlayerCharacterBase_C::MountHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, EquippedWeapon) == 0x000CE0, "Member 'ABP_HDPlayerCharacterBase_C::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SpawnedFOB) == 0x000CE8, "Member 'ABP_HDPlayerCharacterBase_C::SpawnedFOB' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SpawnedRallypoint) == 0x000CF0, "Member 'ABP_HDPlayerCharacterBase_C::SpawnedRallypoint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, OnSuppression) == 0x000CF8, "Member 'ABP_HDPlayerCharacterBase_C::OnSuppression' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, OnHitDamage) == 0x000D08, "Member 'ABP_HDPlayerCharacterBase_C::OnHitDamage' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bSpottingEnabled) == 0x000D18, "Member 'ABP_HDPlayerCharacterBase_C::bSpottingEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionCurve) == 0x000D20, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HitDamageCurve) == 0x000D28, "Member 'ABP_HDPlayerCharacterBase_C::HitDamageCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppressionCameraShake) == 0x000D30, "Member 'ABP_HDPlayerCharacterBase_C::SuppressionCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ReceiveDamageCameraShake) == 0x000D38, "Member 'ABP_HDPlayerCharacterBase_C::ReceiveDamageCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, HitEffectValues) == 0x000D40, "Member 'ABP_HDPlayerCharacterBase_C::HitEffectValues' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, BleedingEffectValues) == 0x000D50, "Member 'ABP_HDPlayerCharacterBase_C::BleedingEffectValues' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, DamageEffectStartPercent) == 0x000D60, "Member 'ABP_HDPlayerCharacterBase_C::DamageEffectStartPercent' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bVariationDataSet) == 0x000D64, "Member 'ABP_HDPlayerCharacterBase_C::bVariationDataSet' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MinVaultViewYaw) == 0x000D68, "Member 'ABP_HDPlayerCharacterBase_C::MinVaultViewYaw' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MaxVaultViewYaw) == 0x000D6C, "Member 'ABP_HDPlayerCharacterBase_C::MaxVaultViewYaw' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, VaultOverCameraCurve) == 0x000D70, "Member 'ABP_HDPlayerCharacterBase_C::VaultOverCameraCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SprintVaultOverCameraCurve) == 0x000D78, "Member 'ABP_HDPlayerCharacterBase_C::SprintVaultOverCameraCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ClimbOntoCameraCurve) == 0x000D80, "Member 'ABP_HDPlayerCharacterBase_C::ClimbOntoCameraCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SprintClimbOntoCameraCurve) == 0x000D88, "Member 'ABP_HDPlayerCharacterBase_C::SprintClimbOntoCameraCurve' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Camera1POffsetBeforeVault) == 0x000D90, "Member 'ABP_HDPlayerCharacterBase_C::Camera1POffsetBeforeVault' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, Mesh1POffsetBeforeVault) == 0x000D9C, "Member 'ABP_HDPlayerCharacterBase_C::Mesh1POffsetBeforeVault' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SuppresionEffect) == 0x000DA8, "Member 'ABP_HDPlayerCharacterBase_C::SuppresionEffect' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, DamageEffect) == 0x000DB8, "Member 'ABP_HDPlayerCharacterBase_C::DamageEffect' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ThirdPersonCharMatArray) == 0x000DC8, "Member 'ABP_HDPlayerCharacterBase_C::ThirdPersonCharMatArray' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, FirstPersonCharMatArray) == 0x000DD8, "Member 'ABP_HDPlayerCharacterBase_C::FirstPersonCharMatArray' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bUseSpecialSymbolForSquadMatePOIs) == 0x000DE8, "Member 'ABP_HDPlayerCharacterBase_C::bUseSpecialSymbolForSquadMatePOIs' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SquadMatePOISymbol) == 0x000DF0, "Member 'ABP_HDPlayerCharacterBase_C::SquadMatePOISymbol' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SquadMatePOITint) == 0x000DF8, "Member 'ABP_HDPlayerCharacterBase_C::SquadMatePOITint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NonSquadMatePOISymbol) == 0x000E08, "Member 'ABP_HDPlayerCharacterBase_C::NonSquadMatePOISymbol' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NonSquadMatePOITint) == 0x000E10, "Member 'ABP_HDPlayerCharacterBase_C::NonSquadMatePOITint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bUseSpecialSymbolForSquadLeaderPOIs) == 0x000E20, "Member 'ABP_HDPlayerCharacterBase_C::bUseSpecialSymbolForSquadLeaderPOIs' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SquadLeaderPOISymbol) == 0x000E28, "Member 'ABP_HDPlayerCharacterBase_C::SquadLeaderPOISymbol' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SquadLeaderPOITint) == 0x000E30, "Member 'ABP_HDPlayerCharacterBase_C::SquadLeaderPOITint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SquadLeaderPOITextColor) == 0x000E40, "Member 'ABP_HDPlayerCharacterBase_C::SquadLeaderPOITextColor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NonSquadLeaderPOISymbol) == 0x000E50, "Member 'ABP_HDPlayerCharacterBase_C::NonSquadLeaderPOISymbol' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NonSquadLeaderPOITint) == 0x000E58, "Member 'ABP_HDPlayerCharacterBase_C::NonSquadLeaderPOITint' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, NonSquadLeaderPOITextColor) == 0x000E68, "Member 'ABP_HDPlayerCharacterBase_C::NonSquadLeaderPOITextColor' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, BracedAimAlpha) == 0x000E78, "Member 'ABP_HDPlayerCharacterBase_C::BracedAimAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraCurveVectorTimeline) == 0x000E80, "Member 'ABP_HDPlayerCharacterBase_C::CameraCurveVectorTimeline' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bReloadPressed) == 0x000E88, "Member 'ABP_HDPlayerCharacterBase_C::bReloadPressed' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, ReloadAlpha) == 0x000E8C, "Member 'ABP_HDPlayerCharacterBase_C::ReloadAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, UnequipAlpha) == 0x000E90, "Member 'ABP_HDPlayerCharacterBase_C::UnequipAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LeanCompRotation) == 0x000E94, "Member 'ABP_HDPlayerCharacterBase_C::LeanCompRotation' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LeanMovementAlpha) == 0x000EA0, "Member 'ABP_HDPlayerCharacterBase_C::LeanMovementAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, IsInAir) == 0x000EA4, "Member 'ABP_HDPlayerCharacterBase_C::IsInAir' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, LeanAlpha) == 0x000EA8, "Member 'ABP_HDPlayerCharacterBase_C::LeanAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrouchAlpha) == 0x000EAC, "Member 'ABP_HDPlayerCharacterBase_C::CrouchAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, SpringArmLocationCache) == 0x000EB0, "Member 'ABP_HDPlayerCharacterBase_C::SpringArmLocationCache' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationScale) == 0x000EBC, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationScale' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, FiringAlpha) == 0x000EC0, "Member 'ABP_HDPlayerCharacterBase_C::FiringAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CrawlingAlpha) == 0x000EC4, "Member 'ABP_HDPlayerCharacterBase_C::CrawlingAlpha' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bCrouchState) == 0x000EC8, "Member 'ABP_HDPlayerCharacterBase_C::bCrouchState' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bProneState) == 0x000EC9, "Member 'ABP_HDPlayerCharacterBase_C::bProneState' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bProneInProgress) == 0x000ECA, "Member 'ABP_HDPlayerCharacterBase_C::bProneInProgress' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bTransitionInProgress) == 0x000ECB, "Member 'ABP_HDPlayerCharacterBase_C::bTransitionInProgress' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, EyeHeightAdjust) == 0x000ECC, "Member 'ABP_HDPlayerCharacterBase_C::EyeHeightAdjust' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, MoveInputAxis) == 0x000ED0, "Member 'ABP_HDPlayerCharacterBase_C::MoveInputAxis' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bPlayCameraAnimation_0) == 0x000ED4, "Member 'ABP_HDPlayerCharacterBase_C::bPlayCameraAnimation_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationAlpha_0) == 0x000ED8, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationAlpha_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationCurve_0) == 0x000EE0, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationCurve_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransform_0) == 0x000EF0, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransform_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSmoothingSpeed_0) == 0x000F20, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSmoothingSpeed_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransitionSpeed_0) == 0x000F24, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransitionSpeed_0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bPlayCameraAnimation_1) == 0x000F28, "Member 'ABP_HDPlayerCharacterBase_C::bPlayCameraAnimation_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationAlpha_1) == 0x000F2C, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationAlpha_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationCurve_1) == 0x000F30, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationCurve_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransform_1) == 0x000F40, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransform_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSmoothingSpeed_1) == 0x000F70, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSmoothingSpeed_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransitionSpeed_1) == 0x000F74, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransitionSpeed_1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bPlayCameraAnimation_2) == 0x000F78, "Member 'ABP_HDPlayerCharacterBase_C::bPlayCameraAnimation_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationAlpha_2) == 0x000F7C, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationAlpha_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationCurve_2) == 0x000F80, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationCurve_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransform_2) == 0x000F90, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransform_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationSmoothingSpeed_2) == 0x000FC0, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationSmoothingSpeed_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, CameraAnimationTransitionSpeed_2) == 0x000FC4, "Member 'ABP_HDPlayerCharacterBase_C::CameraAnimationTransitionSpeed_2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bHoldForwardTrack0) == 0x000FC8, "Member 'ABP_HDPlayerCharacterBase_C::bHoldForwardTrack0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bHoldForwardTrack1) == 0x000FC9, "Member 'ABP_HDPlayerCharacterBase_C::bHoldForwardTrack1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bHoldForwardTrack2) == 0x000FCA, "Member 'ABP_HDPlayerCharacterBase_C::bHoldForwardTrack2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bTrackReset0) == 0x000FCB, "Member 'ABP_HDPlayerCharacterBase_C::bTrackReset0' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bTrackReset1) == 0x000FCC, "Member 'ABP_HDPlayerCharacterBase_C::bTrackReset1' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bTrackReset2) == 0x000FCD, "Member 'ABP_HDPlayerCharacterBase_C::bTrackReset2' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerCharacterBase_C, bFireModeChanged) == 0x000FCE, "Member 'ABP_HDPlayerCharacterBase_C::bFireModeChanged' has a wrong offset!");

}

