#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_HDCore

#include "Basic.hpp"

#include "HDMain_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_HDCore.BPFL_HDCore_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_HDCore_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetPredefinedSquadNameByIndex(int32 SquadCreationIdx, class UObject* __WorldContext, class FText* SquadName);
	static void AbbreviateString(const class FString& SourceString, int32 MaxStartLength, int32 MaxEndLength, const class FString& Separator, class UObject* __WorldContext, class FString* AbbrevString);
	static void GetPhoneticCodeWordByCharacter(const class FString& LetterChar, class UObject* __WorldContext, class FString* CodeWord);
	static void GetPhoneticCodeWordByIndex(int32 LetterIdx, class UObject* __WorldContext, class FString* CodeWord);
	static void GetIndexForPredefinedSquadName(const class FText& SquadName, class UObject* __WorldContext, int32* SquadNameIdx);
	static void GetIndexForPhoneticCodeWord(const class FString& CodeWord, class UObject* __WorldContext, int32* LetterIdx);
	static void GetControllerFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, class AController** OwnerC);
	static void GetPlayerControllerFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, class APlayerController** OwnerPC);
	static void GetAllMapAssets(class UObject* __WorldContext, bool* bSuccess, TArray<struct FAssetData>* LevelAssets);
	static void SplitLoadedPrimaryAssetIds(TArray<struct FPrimaryAssetId>& AssetIds, class UObject* __WorldContext, TArray<struct FPrimaryAssetId>* UnloadedAssetIds, TArray<class UObject*>* LoadedAssets);
	static void SplitLoadedPrimaryAssetClassIds(TArray<struct FPrimaryAssetId>& AssetIds, class UObject* __WorldContext, TArray<struct FPrimaryAssetId>* UnloadedAssetIds, TArray<class UClass*>* LoadedAssetClasses);
	static void AddOption(class FString& Options, class FString& StrToAdd, class UObject* __WorldContext);
	static void GetContentRootPathFromPackageName(class FString& PackageName, class UObject* __WorldContext, bool* bSuccess, class FString* ContentRootPath);
	static void GetContentRootFromPackageName(class FString& PackageName, class UObject* __WorldContext, bool* bSuccess, class FString* ContentRootName);
	static void GetPluginDisplayNameFromPath(class FString& AssetPath, class UObject* __WorldContext, class FString* ModName);
	static void GetPackageShortName(class FString& LongName, class UObject* __WorldContext, bool* bSuccess, class FString* ShortName);
	static void FindMapIdByDisplayName(class FText& MapDisplayName, TArray<struct FPrimaryAssetId>& MapIds, class UObject* __WorldContext, struct FPrimaryAssetId* FoundMapId);
	static void CheckEntitlement(TArray<struct FFEntitlementDefinition>& Entitlements, class UObject* __WorldContext, bool* bEntitled);

	static void GetHDPlayerControllerBP(int32 PlayerIndex, class UObject* __WorldContext, class ABP_HDPlayerControllerBase_C** HDPC);
	static void GetHDPlayerCharacterBP(int32 PlayerIndex, class UObject* __WorldContext, class ABP_HDPlayerCharacterBase_C** HDPlayerChar);
	static void GetHDGameInstance(class UObject* __WorldContext, class UHDGameInstance** HDGI);
	static void GetHDGameMode(class UObject* __WorldContext, class AHDBaseGameMode** HDGame);
	static void GetHDGameState(class UObject* __WorldContext, class AHDGameState** HDGameState);
	static void GetHDGameUserSettings(class UObject* __WorldContext, class UTBGameUserSettings** HDGameUserSettings);
	static void GetHDHUDBP(int32 PlayerIndex, class UObject* __WorldContext, class ABP_HDHUDBase_C** HDHUD);
	static void GetHDTeamStateForTeam(EHDTeam Team, class UObject* __WorldContext, class AHDTeamState** HDTeamState);
	static void GetHDFactionInfoForTeam(EHDTeam Team, class UObject* __WorldContext, class UClass** HDFactionInfoClass);
	static void GetBluforOpforTeamStateForTeam(EHDTeam Team, class UObject* __WorldContext, class AHDTeamState** HDTeamState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_HDCore_C">();
	}
	static class UBPFL_HDCore_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_HDCore_C>();
	}
};
static_assert(alignof(UBPFL_HDCore_C) == 0x000008, "Wrong alignment on UBPFL_HDCore_C");
static_assert(sizeof(UBPFL_HDCore_C) == 0x000028, "Wrong size on UBPFL_HDCore_C");

}

