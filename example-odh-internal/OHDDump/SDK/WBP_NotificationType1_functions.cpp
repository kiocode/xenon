#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NotificationType1

#include "Basic.hpp"

#include "WBP_NotificationType1_classes.hpp"
#include "WBP_NotificationType1_parameters.hpp"


namespace SDK
{

// Function WBP_NotificationType1.WBP_NotificationType1_C.ExecuteUbergraph_WBP_NotificationType1
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::ExecuteUbergraph_WBP_NotificationType1(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "ExecuteUbergraph_WBP_NotificationType1");

	Params::WBP_NotificationType1_C_ExecuteUbergraph_WBP_NotificationType1 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Set Vote Tally
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VotesInFavor_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VotesAgainst_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Set_Vote_Tally(int32 VotesInFavor_0, int32 VotesAgainst_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Set Vote Tally");

	Params::WBP_NotificationType1_C_Set_Vote_Tally Parms{};

	Parms.VotesInFavor_0 = VotesInFavor_0;
	Parms.VotesAgainst_0 = VotesAgainst_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Begin Shrink
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Begin_Shrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Begin Shrink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Shrink
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Shrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Shrink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Set Threshold
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Threshold_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Set_Threshold(int32 Threshold_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Set Threshold");

	Params::WBP_NotificationType1_C_Set_Threshold Parms{};

	Parms.Threshold_0 = Threshold_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Negative Vote
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Negative_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Negative Vote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Positive Vote
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Positive_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Positive Vote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Set Tray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_NotificationTray_C*          Notification_Tray                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Set_Tray(class UWBP_NotificationTray_C* Notification_Tray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Set Tray");

	Params::WBP_NotificationType1_C_Set_Tray Parms{};

	Parms.Notification_Tray = Notification_Tray;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Refreshed Position
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Refreshed_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Refreshed Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Set Top
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_NotificationType1_C::Set_Top(bool bTop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Set Top");

	Params::WBP_NotificationType1_C_Set_Top Parms{};

	Parms.bTop = bTop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Change Vote Tally
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Add_Votes_In_Favor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Add_Votes_Against                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Change_Vote_Tally(int32 Add_Votes_In_Favor, int32 Add_Votes_Against)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Change Vote Tally");

	Params::WBP_NotificationType1_C_Change_Vote_Tally Parms{};

	Parms.Add_Votes_In_Favor = Add_Votes_In_Favor;
	Parms.Add_Votes_Against = Add_Votes_Against;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Destroy For Real
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Destroy_For_Real()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Destroy For Real");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Begin Destroy
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationType1_C::Begin_Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Begin Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_NotificationType1_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "PreConstruct");

	Params::WBP_NotificationType1_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Tick");

	Params::WBP_NotificationType1_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_NotificationType1_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.GetRemainingTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Float                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::GetRemainingTime(float* Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "GetRemainingTime");

	Params::WBP_NotificationType1_C_GetRemainingTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Float != nullptr)
		*Float = Parms.Float;
}


// Function WBP_NotificationType1.WBP_NotificationType1_C.Get Is Sticky?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsSticky                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   StickyPriority_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationType1_C::Get_Is_Sticky_(bool* bIsSticky, int32* StickyPriority_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationType1_C", "Get Is Sticky?");

	Params::WBP_NotificationType1_C_Get_Is_Sticky_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSticky != nullptr)
		*bIsSticky = Parms.bIsSticky;

	if (StickyPriority_0 != nullptr)
		*StickyPriority_0 = Parms.StickyPriority_0;
}

}

