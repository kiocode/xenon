#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OWIEnhancedVehicleMovement

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct OWIEnhancedVehicleMovement.VehicleNWGearData
// 0x000C (0x000C - 0x0000)
struct FVehicleNWGearData final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRatio;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRatio;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWGearData) == 0x000004, "Wrong alignment on FVehicleNWGearData");
static_assert(sizeof(FVehicleNWGearData) == 0x00000C, "Wrong size on FVehicleNWGearData");
static_assert(offsetof(FVehicleNWGearData, Ratio) == 0x000000, "Member 'FVehicleNWGearData::Ratio' has a wrong offset!");
static_assert(offsetof(FVehicleNWGearData, DownRatio) == 0x000004, "Member 'FVehicleNWGearData::DownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWGearData, UpRatio) == 0x000008, "Member 'FVehicleNWGearData::UpRatio' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleNWTransmissionData
// 0x0040 (0x0040 - 0x0000)
struct FVehicleNWTransmissionData final
{
public:
	bool                                          bUseGearAutoBox;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearSwitchTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAutoBoxLatency;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRatio;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleNWGearData>             ForwardGears;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleNWGearData>             BackwardGears;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseGearRatio;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearUpRatio;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearDownRatio;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClutchStrength;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWTransmissionData) == 0x000008, "Wrong alignment on FVehicleNWTransmissionData");
static_assert(sizeof(FVehicleNWTransmissionData) == 0x000040, "Wrong size on FVehicleNWTransmissionData");
static_assert(offsetof(FVehicleNWTransmissionData, bUseGearAutoBox) == 0x000000, "Member 'FVehicleNWTransmissionData::bUseGearAutoBox' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, GearSwitchTime) == 0x000004, "Member 'FVehicleNWTransmissionData::GearSwitchTime' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, GearAutoBoxLatency) == 0x000008, "Member 'FVehicleNWTransmissionData::GearAutoBoxLatency' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, FinalRatio) == 0x00000C, "Member 'FVehicleNWTransmissionData::FinalRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ForwardGears) == 0x000010, "Member 'FVehicleNWTransmissionData::ForwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, BackwardGears) == 0x000020, "Member 'FVehicleNWTransmissionData::BackwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ReverseGearRatio) == 0x000030, "Member 'FVehicleNWTransmissionData::ReverseGearRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, NeutralGearUpRatio) == 0x000034, "Member 'FVehicleNWTransmissionData::NeutralGearUpRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, NeutralGearDownRatio) == 0x000038, "Member 'FVehicleNWTransmissionData::NeutralGearDownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ClutchStrength) == 0x00003C, "Member 'FVehicleNWTransmissionData::ClutchStrength' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleNWWheelDifferentialData
// 0x0001 (0x0001 - 0x0000)
struct FVehicleNWWheelDifferentialData final
{
public:
	bool                                          bDriven;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWWheelDifferentialData) == 0x000001, "Wrong alignment on FVehicleNWWheelDifferentialData");
static_assert(sizeof(FVehicleNWWheelDifferentialData) == 0x000001, "Wrong size on FVehicleNWWheelDifferentialData");
static_assert(offsetof(FVehicleNWWheelDifferentialData, bDriven) == 0x000000, "Member 'FVehicleNWWheelDifferentialData::bDriven' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleTankGearData
// 0x000C (0x000C - 0x0000)
struct FVehicleTankGearData final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRatio;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRatio;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTankGearData) == 0x000004, "Wrong alignment on FVehicleTankGearData");
static_assert(sizeof(FVehicleTankGearData) == 0x00000C, "Wrong size on FVehicleTankGearData");
static_assert(offsetof(FVehicleTankGearData, Ratio) == 0x000000, "Member 'FVehicleTankGearData::Ratio' has a wrong offset!");
static_assert(offsetof(FVehicleTankGearData, DownRatio) == 0x000004, "Member 'FVehicleTankGearData::DownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankGearData, UpRatio) == 0x000008, "Member 'FVehicleTankGearData::UpRatio' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleTankTransmissionData
// 0x0040 (0x0040 - 0x0000)
struct FVehicleTankTransmissionData final
{
public:
	bool                                          bUseGearAutoBox;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearSwitchTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAutoBoxLatency;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRatio;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleTankGearData>           ForwardGears;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleTankGearData>           BackwardGears;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseGearRatio;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearUpRatio;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearDownRatio;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClutchStrength;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTankTransmissionData) == 0x000008, "Wrong alignment on FVehicleTankTransmissionData");
static_assert(sizeof(FVehicleTankTransmissionData) == 0x000040, "Wrong size on FVehicleTankTransmissionData");
static_assert(offsetof(FVehicleTankTransmissionData, bUseGearAutoBox) == 0x000000, "Member 'FVehicleTankTransmissionData::bUseGearAutoBox' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, GearSwitchTime) == 0x000004, "Member 'FVehicleTankTransmissionData::GearSwitchTime' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, GearAutoBoxLatency) == 0x000008, "Member 'FVehicleTankTransmissionData::GearAutoBoxLatency' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, FinalRatio) == 0x00000C, "Member 'FVehicleTankTransmissionData::FinalRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ForwardGears) == 0x000010, "Member 'FVehicleTankTransmissionData::ForwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, BackwardGears) == 0x000020, "Member 'FVehicleTankTransmissionData::BackwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ReverseGearRatio) == 0x000030, "Member 'FVehicleTankTransmissionData::ReverseGearRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, NeutralGearUpRatio) == 0x000034, "Member 'FVehicleTankTransmissionData::NeutralGearUpRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, NeutralGearDownRatio) == 0x000038, "Member 'FVehicleTankTransmissionData::NeutralGearDownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ClutchStrength) == 0x00003C, "Member 'FVehicleTankTransmissionData::ClutchStrength' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleNWEngineData
// 0x00A0 (0x00A0 - 0x0000)
struct FVehicleNWEngineData final
{
public:
	struct FRuntimeFloatCurve                     TorqueCurve;                                       // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MOI;                                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateFullThrottle;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchEngaged;              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchDisengaged;           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleNWEngineData) == 0x000008, "Wrong alignment on FVehicleNWEngineData");
static_assert(sizeof(FVehicleNWEngineData) == 0x0000A0, "Wrong size on FVehicleNWEngineData");
static_assert(offsetof(FVehicleNWEngineData, TorqueCurve) == 0x000000, "Member 'FVehicleNWEngineData::TorqueCurve' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, MaxRPM) == 0x000088, "Member 'FVehicleNWEngineData::MaxRPM' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, MOI) == 0x00008C, "Member 'FVehicleNWEngineData::MOI' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateFullThrottle) == 0x000090, "Member 'FVehicleNWEngineData::DampingRateFullThrottle' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateZeroThrottleClutchEngaged) == 0x000094, "Member 'FVehicleNWEngineData::DampingRateZeroThrottleClutchEngaged' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateZeroThrottleClutchDisengaged) == 0x000098, "Member 'FVehicleNWEngineData::DampingRateZeroThrottleClutchDisengaged' has a wrong offset!");

// ScriptStruct OWIEnhancedVehicleMovement.VehicleTankEngineData
// 0x00A0 (0x00A0 - 0x0000)
struct FVehicleTankEngineData final
{
public:
	struct FRuntimeFloatCurve                     TorqueCurve;                                       // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MOI;                                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateFullThrottle;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchEngaged;              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchDisengaged;           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTankEngineData) == 0x000008, "Wrong alignment on FVehicleTankEngineData");
static_assert(sizeof(FVehicleTankEngineData) == 0x0000A0, "Wrong size on FVehicleTankEngineData");
static_assert(offsetof(FVehicleTankEngineData, TorqueCurve) == 0x000000, "Member 'FVehicleTankEngineData::TorqueCurve' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, MaxRPM) == 0x000088, "Member 'FVehicleTankEngineData::MaxRPM' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, MOI) == 0x00008C, "Member 'FVehicleTankEngineData::MOI' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateFullThrottle) == 0x000090, "Member 'FVehicleTankEngineData::DampingRateFullThrottle' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateZeroThrottleClutchEngaged) == 0x000094, "Member 'FVehicleTankEngineData::DampingRateZeroThrottleClutchEngaged' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateZeroThrottleClutchDisengaged) == 0x000098, "Member 'FVehicleTankEngineData::DampingRateZeroThrottleClutchDisengaged' has a wrong offset!");

}

