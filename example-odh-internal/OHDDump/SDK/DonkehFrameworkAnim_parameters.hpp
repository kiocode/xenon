#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFrameworkAnim

#include "Basic.hpp"

#include "DonkehFrameworkAnim_structs.hpp"


namespace SDK::Params
{

// Function DonkehFrameworkAnim.AnimNotify_PlayFootstepFX.EqualProps
// 0x01F8 (0x01F8 - 0x0000)
struct AnimNotify_PlayFootstepFX_EqualProps final
{
public:
	struct FFootstepFXSettings                    Props;                                             // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFootstepFXSettings                    OtherProps;                                        // 0x00F8(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotify_PlayFootstepFX_EqualProps) == 0x000008, "Wrong alignment on AnimNotify_PlayFootstepFX_EqualProps");
static_assert(sizeof(AnimNotify_PlayFootstepFX_EqualProps) == 0x0001F8, "Wrong size on AnimNotify_PlayFootstepFX_EqualProps");
static_assert(offsetof(AnimNotify_PlayFootstepFX_EqualProps, Props) == 0x000000, "Member 'AnimNotify_PlayFootstepFX_EqualProps::Props' has a wrong offset!");
static_assert(offsetof(AnimNotify_PlayFootstepFX_EqualProps, OtherProps) == 0x0000F8, "Member 'AnimNotify_PlayFootstepFX_EqualProps::OtherProps' has a wrong offset!");
static_assert(offsetof(AnimNotify_PlayFootstepFX_EqualProps, ReturnValue) == 0x0001F0, "Member 'AnimNotify_PlayFootstepFX_EqualProps::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkAnim.AnimNotify_PlayFootstepFX.GetFootstepNotifyProps
// 0x00F8 (0x00F8 - 0x0000)
struct AnimNotify_PlayFootstepFX_GetFootstepNotifyProps final
{
public:
	struct FFootstepFXSettings                    ReturnValue;                                       // 0x0000(0x00F8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_PlayFootstepFX_GetFootstepNotifyProps) == 0x000008, "Wrong alignment on AnimNotify_PlayFootstepFX_GetFootstepNotifyProps");
static_assert(sizeof(AnimNotify_PlayFootstepFX_GetFootstepNotifyProps) == 0x0000F8, "Wrong size on AnimNotify_PlayFootstepFX_GetFootstepNotifyProps");
static_assert(offsetof(AnimNotify_PlayFootstepFX_GetFootstepNotifyProps, ReturnValue) == 0x000000, "Member 'AnimNotify_PlayFootstepFX_GetFootstepNotifyProps::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkAnim.AnimNotify_PlayFootstepFX.SetFootstepNotifyProps
// 0x00F8 (0x00F8 - 0x0000)
struct AnimNotify_PlayFootstepFX_SetFootstepNotifyProps final
{
public:
	struct FFootstepFXSettings                    PropsToUse;                                        // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_PlayFootstepFX_SetFootstepNotifyProps) == 0x000008, "Wrong alignment on AnimNotify_PlayFootstepFX_SetFootstepNotifyProps");
static_assert(sizeof(AnimNotify_PlayFootstepFX_SetFootstepNotifyProps) == 0x0000F8, "Wrong size on AnimNotify_PlayFootstepFX_SetFootstepNotifyProps");
static_assert(offsetof(AnimNotify_PlayFootstepFX_SetFootstepNotifyProps, PropsToUse) == 0x000000, "Member 'AnimNotify_PlayFootstepFX_SetFootstepNotifyProps::PropsToUse' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.BlueprintUpdateControllerOwnerRefs
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs final
{
public:
	class AController*                            NewC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs");
static_assert(sizeof(DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs) == 0x000008, "Wrong size on DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs");
static_assert(offsetof(DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs, NewC) == 0x000000, "Member 'DFCharacterAnimInstance_BlueprintUpdateControllerOwnerRefs::NewC' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.BlueprintUpdateEquippedWeaponRefs
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs final
{
public:
	class ADFBaseItem*                            NewWeap;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs");
static_assert(sizeof(DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs) == 0x000008, "Wrong size on DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs");
static_assert(offsetof(DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs, NewWeap) == 0x000000, "Member 'DFCharacterAnimInstance_BlueprintUpdateEquippedWeaponRefs::NewWeap' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.BlueprintUpdatePawnOwnerRefs
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs final
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs");
static_assert(sizeof(DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs) == 0x000008, "Wrong size on DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs");
static_assert(offsetof(DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs, NewPawn) == 0x000000, "Member 'DFCharacterAnimInstance_BlueprintUpdatePawnOwnerRefs::NewPawn' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.EquippedWeaponChanged
// 0x0018 (0x0018 - 0x0000)
struct DFCharacterAnimInstance_EquippedWeaponChanged final
{
public:
	class ADFBaseCharacter*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            NewEquippedWeap;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            PrevEquippedWeap;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_EquippedWeaponChanged) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_EquippedWeaponChanged");
static_assert(sizeof(DFCharacterAnimInstance_EquippedWeaponChanged) == 0x000018, "Wrong size on DFCharacterAnimInstance_EquippedWeaponChanged");
static_assert(offsetof(DFCharacterAnimInstance_EquippedWeaponChanged, Character) == 0x000000, "Member 'DFCharacterAnimInstance_EquippedWeaponChanged::Character' has a wrong offset!");
static_assert(offsetof(DFCharacterAnimInstance_EquippedWeaponChanged, NewEquippedWeap) == 0x000008, "Member 'DFCharacterAnimInstance_EquippedWeaponChanged::NewEquippedWeap' has a wrong offset!");
static_assert(offsetof(DFCharacterAnimInstance_EquippedWeaponChanged, PrevEquippedWeap) == 0x000010, "Member 'DFCharacterAnimInstance_EquippedWeaponChanged::PrevEquippedWeap' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.TryGetControllerOwner
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterAnimInstance_TryGetControllerOwner final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_TryGetControllerOwner) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_TryGetControllerOwner");
static_assert(sizeof(DFCharacterAnimInstance_TryGetControllerOwner) == 0x000008, "Wrong size on DFCharacterAnimInstance_TryGetControllerOwner");
static_assert(offsetof(DFCharacterAnimInstance_TryGetControllerOwner, ReturnValue) == 0x000000, "Member 'DFCharacterAnimInstance_TryGetControllerOwner::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkAnim.DFCharacterAnimInstance.TryGetOwnerWeapon
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterAnimInstance_TryGetOwnerWeapon final
{
public:
	class ADFBaseItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCharacterAnimInstance_TryGetOwnerWeapon) == 0x000008, "Wrong alignment on DFCharacterAnimInstance_TryGetOwnerWeapon");
static_assert(sizeof(DFCharacterAnimInstance_TryGetOwnerWeapon) == 0x000008, "Wrong size on DFCharacterAnimInstance_TryGetOwnerWeapon");
static_assert(offsetof(DFCharacterAnimInstance_TryGetOwnerWeapon, ReturnValue) == 0x000000, "Member 'DFCharacterAnimInstance_TryGetOwnerWeapon::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkAnim.DFWeaponAnimInstance.BlueprintUpdateWeaponOwnerRefs
// 0x0008 (0x0008 - 0x0000)
struct DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs final
{
public:
	class ADFBaseWeapon*                          NewWeap;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs) == 0x000008, "Wrong alignment on DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs");
static_assert(sizeof(DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs) == 0x000008, "Wrong size on DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs");
static_assert(offsetof(DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs, NewWeap) == 0x000000, "Member 'DFWeaponAnimInstance_BlueprintUpdateWeaponOwnerRefs::NewWeap' has a wrong offset!");

// Function DonkehFrameworkAnim.DFWeaponAnimInstance.TryGetWeaponOwner
// 0x0008 (0x0008 - 0x0000)
struct DFWeaponAnimInstance_TryGetWeaponOwner final
{
public:
	class ADFBaseWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFWeaponAnimInstance_TryGetWeaponOwner) == 0x000008, "Wrong alignment on DFWeaponAnimInstance_TryGetWeaponOwner");
static_assert(sizeof(DFWeaponAnimInstance_TryGetWeaponOwner) == 0x000008, "Wrong size on DFWeaponAnimInstance_TryGetWeaponOwner");
static_assert(offsetof(DFWeaponAnimInstance_TryGetWeaponOwner, ReturnValue) == 0x000000, "Member 'DFWeaponAnimInstance_TryGetWeaponOwner::ReturnValue' has a wrong offset!");

}

