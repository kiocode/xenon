#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WeaponStatus

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "HDMain_structs.hpp"
#include "DonkehFramework_structs.hpp"


namespace SDK::Params
{

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.ExecuteUbergraph_WBP_WeaponStatus
// 0x0158 (0x0158 - 0x0000)
struct WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FireModeToDisplayText_ModeText;           // 0x0008(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0020(0x0018)()
	class AHDBaseWeapon*                          K2Node_Event_NewWeap;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDBaseWeapon*                          K2Node_Event_PrevWeap;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     K2Node_Event_NewFireMode;                          // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     K2Node_Event_PreviousFireMode;                     // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFromPlayerInput_1;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FireModeToDisplayText_ModeText_1;         // 0x0050(0x0018)()
	struct FHDUIWeaponAmmoState                   K2Node_Event_AmmoState;                            // 0x0068(0x0018)(ConstParm, NoDestructor)
	bool                                          K2Node_Event_bFromReload;                          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bTotalFreeAmmoUpdated;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNumFreeAmmoClipsUpdated;             // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue_1;                // 0x0088(0x0018)()
	EHDWeaponAimStyle                             K2Node_Event_NewAimStyle;                          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDWeaponAimStyle                             K2Node_Event_PrevAimStyle;                         // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFromPlayerInput;                     // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_AimStyleToDisplayText_StyleText;          // 0x00A8(0x0018)()
	class FText                                   CallFunc_AimStyleToDisplayText_StyleText_1;        // 0x00C0(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue_2;                // 0x00D8(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue_3;                // 0x00F0(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDisplayTotalAmmo_bDisplayTotalAmmo; // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0138(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus) == 0x000008, "Wrong alignment on WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus");
static_assert(sizeof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus) == 0x000158, "Wrong size on WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, EntryPoint) == 0x000000, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_MakeLiteralByte_ReturnValue) == 0x000004, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_IsDesignTime) == 0x000005, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_FireModeToDisplayText_ModeText) == 0x000008, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_FireModeToDisplayText_ModeText' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_TextToUpper_ReturnValue) == 0x000020, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_NewWeap) == 0x000038, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_NewWeap' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_PrevWeap) == 0x000040, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_PrevWeap' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000049, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_NewFireMode) == 0x00004A, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_NewFireMode' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_PreviousFireMode) == 0x00004B, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_PreviousFireMode' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_bFromPlayerInput_1) == 0x00004C, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_bFromPlayerInput_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_FireModeToDisplayText_ModeText_1) == 0x000050, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_FireModeToDisplayText_ModeText_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_AmmoState) == 0x000068, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_AmmoState' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_bFromReload) == 0x000080, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_bFromReload' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_bTotalFreeAmmoUpdated) == 0x000081, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_bTotalFreeAmmoUpdated' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_bNumFreeAmmoClipsUpdated) == 0x000082, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_bNumFreeAmmoClipsUpdated' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_TextToUpper_ReturnValue_1) == 0x000088, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_TextToUpper_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_NewAimStyle) == 0x0000A0, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_NewAimStyle' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_PrevAimStyle) == 0x0000A1, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_PrevAimStyle' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Event_bFromPlayerInput) == 0x0000A2, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Event_bFromPlayerInput' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_AimStyleToDisplayText_StyleText) == 0x0000A8, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_AimStyleToDisplayText_StyleText' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_AimStyleToDisplayText_StyleText_1) == 0x0000C0, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_AimStyleToDisplayText_StyleText_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_TextToUpper_ReturnValue_2) == 0x0000D8, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_TextToUpper_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_TextToUpper_ReturnValue_3) == 0x0000F0, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_TextToUpper_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_PlayAnimation_ReturnValue) == 0x000108, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_1) == 0x000110, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000118, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, Temp_bool_Variable) == 0x000119, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_ShouldDisplayTotalAmmo_bDisplayTotalAmmo) == 0x00011A, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_ShouldDisplayTotalAmmo_bDisplayTotalAmmo' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_2) == 0x000120, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_BooleanAND_ReturnValue) == 0x000128, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, K2Node_Select_Default) == 0x00012C, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_BooleanOR_ReturnValue) == 0x000130, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_Conv_IntToText_ReturnValue) == 0x000138, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus, CallFunc_BooleanAND_ReturnValue_1) == 0x000150, "Member 'WBP_WeaponStatus_C_ExecuteUbergraph_WBP_WeaponStatus::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.OwnerSetAimStyle
// 0x0003 (0x0003 - 0x0000)
struct WBP_WeaponStatus_C_OwnerSetAimStyle final
{
public:
	EHDWeaponAimStyle                             NewAimStyle;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDWeaponAimStyle                             PrevAimStyle;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_OwnerSetAimStyle) == 0x000001, "Wrong alignment on WBP_WeaponStatus_C_OwnerSetAimStyle");
static_assert(sizeof(WBP_WeaponStatus_C_OwnerSetAimStyle) == 0x000003, "Wrong size on WBP_WeaponStatus_C_OwnerSetAimStyle");
static_assert(offsetof(WBP_WeaponStatus_C_OwnerSetAimStyle, NewAimStyle) == 0x000000, "Member 'WBP_WeaponStatus_C_OwnerSetAimStyle::NewAimStyle' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_OwnerSetAimStyle, PrevAimStyle) == 0x000001, "Member 'WBP_WeaponStatus_C_OwnerSetAimStyle::PrevAimStyle' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_OwnerSetAimStyle, bFromPlayerInput) == 0x000002, "Member 'WBP_WeaponStatus_C_OwnerSetAimStyle::bFromPlayerInput' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.BPOwnerWeaponAmmoUpdated
// 0x0020 (0x0020 - 0x0000)
struct WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated final
{
public:
	struct FHDUIWeaponAmmoState                   AmmoState;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          bFromReload;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTotalFreeAmmoUpdated;                             // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNumFreeAmmoClipsUpdated;                          // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated) == 0x000008, "Wrong alignment on WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated");
static_assert(sizeof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated) == 0x000020, "Wrong size on WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated, AmmoState) == 0x000000, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated::AmmoState' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated, bFromReload) == 0x000018, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated::bFromReload' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated, bTotalFreeAmmoUpdated) == 0x000019, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated::bTotalFreeAmmoUpdated' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated, bNumFreeAmmoClipsUpdated) == 0x00001A, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponAmmoUpdated::bNumFreeAmmoClipsUpdated' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.BPOwnerWeaponSetFireMode
// 0x0003 (0x0003 - 0x0000)
struct WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode final
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     PreviousFireMode;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode) == 0x000001, "Wrong alignment on WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode");
static_assert(sizeof(WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode) == 0x000003, "Wrong size on WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode, NewFireMode) == 0x000000, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode::NewFireMode' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode, PreviousFireMode) == 0x000001, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode::PreviousFireMode' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode, bFromPlayerInput) == 0x000002, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponSetFireMode::bFromPlayerInput' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.BPOwnerWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct WBP_WeaponStatus_C_BPOwnerWeaponChanged final
{
public:
	class AHDBaseWeapon*                          NewWeap;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDBaseWeapon*                          PrevWeap;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WeaponStatus_C_BPOwnerWeaponChanged) == 0x000008, "Wrong alignment on WBP_WeaponStatus_C_BPOwnerWeaponChanged");
static_assert(sizeof(WBP_WeaponStatus_C_BPOwnerWeaponChanged) == 0x000010, "Wrong size on WBP_WeaponStatus_C_BPOwnerWeaponChanged");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponChanged, NewWeap) == 0x000000, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponChanged::NewWeap' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_BPOwnerWeaponChanged, PrevWeap) == 0x000008, "Member 'WBP_WeaponStatus_C_BPOwnerWeaponChanged::PrevWeap' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_WeaponStatus_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_WeaponStatus_C_PreConstruct");
static_assert(sizeof(WBP_WeaponStatus_C_PreConstruct) == 0x000001, "Wrong size on WBP_WeaponStatus_C_PreConstruct");
static_assert(offsetof(WBP_WeaponStatus_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_WeaponStatus_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.UpdateElementVisibility
// 0x0020 (0x0020 - 0x0000)
struct WBP_WeaponStatus_C_UpdateElementVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibilityDefault_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDBaseWeapon*                          CallFunc_GetOwnerEquippedWeapon_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibilityDefault_ReturnValue_1;       // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibilityDefault_ReturnValue_2;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibilityDefault_ReturnValue_3;       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WeaponStatus_C_UpdateElementVisibility) == 0x000008, "Wrong alignment on WBP_WeaponStatus_C_UpdateElementVisibility");
static_assert(sizeof(WBP_WeaponStatus_C_UpdateElementVisibility) == 0x000020, "Wrong size on WBP_WeaponStatus_C_UpdateElementVisibility");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_bool_Variable) == 0x000000, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_byte_Variable) == 0x000001, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_bool_Variable_1) == 0x000002, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_GetVisibilityDefault_ReturnValue) == 0x000005, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_GetVisibilityDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_bool_Variable_2) == 0x000006, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_byte_Variable_3) == 0x000007, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_GetOwnerEquippedWeapon_ReturnValue) == 0x000008, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_GetOwnerEquippedWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_BooleanAND_ReturnValue_1) == 0x000015, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_BooleanAND_ReturnValue_2) == 0x000016, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_GetVisibilityDefault_ReturnValue_1) == 0x000017, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_GetVisibilityDefault_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, K2Node_Select_Default) == 0x000018, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_GetVisibilityDefault_ReturnValue_2) == 0x000019, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_GetVisibilityDefault_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, K2Node_Select_Default_1) == 0x00001A, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, CallFunc_GetVisibilityDefault_ReturnValue_3) == 0x00001B, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::CallFunc_GetVisibilityDefault_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, K2Node_Select_Default_2) == 0x00001C, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, Temp_bool_Variable_3) == 0x00001D, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_UpdateElementVisibility, K2Node_Select_Default_3) == 0x00001E, "Member 'WBP_WeaponStatus_C_UpdateElementVisibility::K2Node_Select_Default_3' has a wrong offset!");

// Function WBP_WeaponStatus.WBP_WeaponStatus_C.ShouldDisplayTotalAmmo
// 0x0018 (0x0018 - 0x0000)
struct WBP_WeaponStatus_C_ShouldDisplayTotalAmmo final
{
public:
	bool                                          bDisplayTotalAmmo;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDBaseWeapon*                          CallFunc_GetOwnerEquippedWeapon_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_WeaponStatus_C_ShouldDisplayTotalAmmo) == 0x000008, "Wrong alignment on WBP_WeaponStatus_C_ShouldDisplayTotalAmmo");
static_assert(sizeof(WBP_WeaponStatus_C_ShouldDisplayTotalAmmo) == 0x000018, "Wrong size on WBP_WeaponStatus_C_ShouldDisplayTotalAmmo");
static_assert(offsetof(WBP_WeaponStatus_C_ShouldDisplayTotalAmmo, bDisplayTotalAmmo) == 0x000000, "Member 'WBP_WeaponStatus_C_ShouldDisplayTotalAmmo::bDisplayTotalAmmo' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ShouldDisplayTotalAmmo, CallFunc_GetOwnerEquippedWeapon_ReturnValue) == 0x000008, "Member 'WBP_WeaponStatus_C_ShouldDisplayTotalAmmo::CallFunc_GetOwnerEquippedWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponStatus_C_ShouldDisplayTotalAmmo, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_WeaponStatus_C_ShouldDisplayTotalAmmo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

