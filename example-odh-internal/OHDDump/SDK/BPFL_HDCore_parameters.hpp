#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_HDCore

#include "Basic.hpp"

#include "FEntitlementDefinition_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AssetRegistry_structs.hpp"
#include "HDMain_structs.hpp"


namespace SDK::Params
{

// Function BPFL_HDCore.BPFL_HDCore_C.GetPredefinedSquadNameByIndex
// 0x0050 (0x0050 - 0x0000)
struct BPFL_HDCore_C_GetPredefinedSquadNameByIndex final
{
public:
	int32                                         SquadCreationIdx;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SquadName;                                         // 0x0010(0x0018)(Parm, OutParm)
	class FString                                 CallFunc_GetPhoneticCodeWordByIndex_CodeWord;      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
};
static_assert(alignof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPredefinedSquadNameByIndex");
static_assert(sizeof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex) == 0x000050, "Wrong size on BPFL_HDCore_C_GetPredefinedSquadNameByIndex");
static_assert(offsetof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex, SquadCreationIdx) == 0x000000, "Member 'BPFL_HDCore_C_GetPredefinedSquadNameByIndex::SquadCreationIdx' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetPredefinedSquadNameByIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex, SquadName) == 0x000010, "Member 'BPFL_HDCore_C_GetPredefinedSquadNameByIndex::SquadName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex, CallFunc_GetPhoneticCodeWordByIndex_CodeWord) == 0x000028, "Member 'BPFL_HDCore_C_GetPredefinedSquadNameByIndex::CallFunc_GetPhoneticCodeWordByIndex_CodeWord' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPredefinedSquadNameByIndex, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_GetPredefinedSquadNameByIndex::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.AbbreviateString
// 0x0098 (0x0098 - 0x0000)
struct BPFL_HDCore_C_AbbreviateString final
{
public:
	class FString                                 SourceString;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         MaxStartLength;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxEndLength;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Separator;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AbbrevString;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_AbbreviateString) == 0x000008, "Wrong alignment on BPFL_HDCore_C_AbbreviateString");
static_assert(sizeof(BPFL_HDCore_C_AbbreviateString) == 0x000098, "Wrong size on BPFL_HDCore_C_AbbreviateString");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, SourceString) == 0x000000, "Member 'BPFL_HDCore_C_AbbreviateString::SourceString' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, MaxStartLength) == 0x000010, "Member 'BPFL_HDCore_C_AbbreviateString::MaxStartLength' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, MaxEndLength) == 0x000014, "Member 'BPFL_HDCore_C_AbbreviateString::MaxEndLength' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, Separator) == 0x000018, "Member 'BPFL_HDCore_C_AbbreviateString::Separator' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, __WorldContext) == 0x000028, "Member 'BPFL_HDCore_C_AbbreviateString::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, AbbrevString) == 0x000030, "Member 'BPFL_HDCore_C_AbbreviateString::AbbrevString' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Left_ReturnValue) == 0x000040, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Len_ReturnValue) == 0x000050, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Subtract_IntInt_ReturnValue) == 0x000068, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Greater_IntInt_ReturnValue) == 0x00006C, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Min_ReturnValue) == 0x000070, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Right_ReturnValue) == 0x000078, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AbbreviateString, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000088, "Member 'BPFL_HDCore_C_AbbreviateString::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetPhoneticCodeWordByCharacter
// 0x0040 (0x0040 - 0x0000)
struct BPFL_HDCore_C_GetPhoneticCodeWordByCharacter final
{
public:
	class FString                                 LetterChar;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CodeWord;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIndexForPhoneticCodeWord_LetterIdx;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPhoneticCodeWordByIndex_CodeWord;      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPhoneticCodeWordByCharacter");
static_assert(sizeof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter) == 0x000040, "Wrong size on BPFL_HDCore_C_GetPhoneticCodeWordByCharacter");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter, LetterChar) == 0x000000, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByCharacter::LetterChar' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter, CodeWord) == 0x000018, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByCharacter::CodeWord' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter, CallFunc_GetIndexForPhoneticCodeWord_LetterIdx) == 0x000028, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByCharacter::CallFunc_GetIndexForPhoneticCodeWord_LetterIdx' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByCharacter, CallFunc_GetPhoneticCodeWordByIndex_CodeWord) == 0x000030, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByCharacter::CallFunc_GetPhoneticCodeWordByIndex_CodeWord' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetPhoneticCodeWordByIndex
// 0x0278 (0x0278 - 0x0000)
struct BPFL_HDCore_C_GetPhoneticCodeWordByIndex final
{
public:
	int32                                         LetterIdx;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CodeWord;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_5;                            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_6;                            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_7;                            // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_8;                            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_9;                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_10;                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_11;                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_12;                           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_13;                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_14;                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_15;                           // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_16;                           // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_17;                           // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_18;                           // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_19;                           // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_20;                           // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_21;                           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_22;                           // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_23;                           // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_24;                           // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_25;                           // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_26;                           // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_27;                           // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_28;                           // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_29;                           // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_30;                           // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_31;                           // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_32;                           // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_33;                           // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_34;                           // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_35;                           // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPhoneticCodeWordByIndex");
static_assert(sizeof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex) == 0x000278, "Wrong size on BPFL_HDCore_C_GetPhoneticCodeWordByIndex");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, LetterIdx) == 0x000000, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::LetterIdx' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, CodeWord) == 0x000010, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::CodeWord' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_int_Variable) == 0x000020, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, CallFunc_Clamp_ReturnValue) == 0x000024, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable) == 0x000028, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_1) == 0x000038, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_2) == 0x000048, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_3) == 0x000058, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_4) == 0x000068, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_5) == 0x000078, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_6) == 0x000088, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_7) == 0x000098, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_8) == 0x0000A8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_9) == 0x0000B8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_10) == 0x0000C8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_11) == 0x0000D8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_12) == 0x0000E8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_12' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_13) == 0x0000F8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_13' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_14) == 0x000108, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_14' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_15) == 0x000118, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_15' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_16) == 0x000128, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_16' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_17) == 0x000138, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_17' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_18) == 0x000148, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_18' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_19) == 0x000158, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_19' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_20) == 0x000168, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_20' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_21) == 0x000178, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_21' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_22) == 0x000188, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_22' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_23) == 0x000198, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_23' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_24) == 0x0001A8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_24' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_25) == 0x0001B8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_25' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_26) == 0x0001C8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_26' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_27) == 0x0001D8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_27' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_28) == 0x0001E8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_28' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_29) == 0x0001F8, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_29' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_30) == 0x000208, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_30' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_31) == 0x000218, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_31' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_32) == 0x000228, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_32' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_33) == 0x000238, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_33' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_34) == 0x000248, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_34' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, Temp_string_Variable_35) == 0x000258, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::Temp_string_Variable_35' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPhoneticCodeWordByIndex, K2Node_Select_Default) == 0x000268, "Member 'BPFL_HDCore_C_GetPhoneticCodeWordByIndex::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetIndexForPredefinedSquadName
// 0x0040 (0x0040 - 0x0000)
struct BPFL_HDCore_C_GetIndexForPredefinedSquadName final
{
public:
	class FText                                   SquadName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SquadNameIdx;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIndexForPhoneticCodeWord_LetterIdx;    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetIndexForPredefinedSquadName) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetIndexForPredefinedSquadName");
static_assert(sizeof(BPFL_HDCore_C_GetIndexForPredefinedSquadName) == 0x000040, "Wrong size on BPFL_HDCore_C_GetIndexForPredefinedSquadName");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPredefinedSquadName, SquadName) == 0x000000, "Member 'BPFL_HDCore_C_GetIndexForPredefinedSquadName::SquadName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPredefinedSquadName, __WorldContext) == 0x000018, "Member 'BPFL_HDCore_C_GetIndexForPredefinedSquadName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPredefinedSquadName, SquadNameIdx) == 0x000020, "Member 'BPFL_HDCore_C_GetIndexForPredefinedSquadName::SquadNameIdx' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPredefinedSquadName, CallFunc_Conv_TextToString_ReturnValue) == 0x000028, "Member 'BPFL_HDCore_C_GetIndexForPredefinedSquadName::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPredefinedSquadName, CallFunc_GetIndexForPhoneticCodeWord_LetterIdx) == 0x000038, "Member 'BPFL_HDCore_C_GetIndexForPredefinedSquadName::CallFunc_GetIndexForPhoneticCodeWord_LetterIdx' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetIndexForPhoneticCodeWord
// 0x0048 (0x0048 - 0x0000)
struct BPFL_HDCore_C_GetIndexForPhoneticCodeWord final
{
public:
	class FString                                 CodeWord;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterIdx;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ToUpper_ReturnValue;                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCharacterAsNumber_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetIndexForPhoneticCodeWord");
static_assert(sizeof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord) == 0x000048, "Wrong size on BPFL_HDCore_C_GetIndexForPhoneticCodeWord");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CodeWord) == 0x000000, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CodeWord' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, LetterIdx) == 0x000018, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::LetterIdx' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, Temp_bool_Variable) == 0x00001C, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_ToUpper_ReturnValue) == 0x000020, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_ToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_GetCharacterAsNumber_ReturnValue) == 0x000030, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_GetCharacterAsNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_InRange_IntInt_ReturnValue) == 0x000034, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000040, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetIndexForPhoneticCodeWord, K2Node_Select_Default) == 0x000044, "Member 'BPFL_HDCore_C_GetIndexForPhoneticCodeWord::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetControllerFromPlayerState
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetControllerFromPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            OwnerC;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_DynamicCast_AsController;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetControllerFromPlayerState) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetControllerFromPlayerState");
static_assert(sizeof(BPFL_HDCore_C_GetControllerFromPlayerState) == 0x000030, "Wrong size on BPFL_HDCore_C_GetControllerFromPlayerState");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, PlayerState) == 0x000000, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, OwnerC) == 0x000010, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::OwnerC' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, K2Node_DynamicCast_AsController) == 0x000020, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::K2Node_DynamicCast_AsController' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetControllerFromPlayerState, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetControllerFromPlayerState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetPlayerControllerFromPlayerState
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetPlayerControllerFromPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      OwnerPC;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPlayerControllerFromPlayerState");
static_assert(sizeof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState) == 0x000030, "Wrong size on BPFL_HDCore_C_GetPlayerControllerFromPlayerState");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, PlayerState) == 0x000000, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, OwnerPC) == 0x000010, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::OwnerPC' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, K2Node_DynamicCast_AsPlayer_Controller) == 0x000020, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPlayerControllerFromPlayerState, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetPlayerControllerFromPlayerState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetAllMapAssets
// 0x0140 (0x0140 - 0x0000)
struct BPFL_HDCore_C_GetAllMapAssets final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAssetData>                     LevelAssets;                                       // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TScriptInterface<class IAssetRegistry>        CallFunc_GetAssetRegistry_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FARFilter                              K2Node_MakeStruct_ARFilter;                        // 0x0040(0x00E8)()
	TArray<struct FAssetData>                     CallFunc_GetAssets_OutAssetData;                   // 0x0128(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAssets_ReturnValue;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetAllMapAssets) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetAllMapAssets");
static_assert(sizeof(BPFL_HDCore_C_GetAllMapAssets) == 0x000140, "Wrong size on BPFL_HDCore_C_GetAllMapAssets");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, __WorldContext) == 0x000000, "Member 'BPFL_HDCore_C_GetAllMapAssets::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, bSuccess) == 0x000008, "Member 'BPFL_HDCore_C_GetAllMapAssets::bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, LevelAssets) == 0x000010, "Member 'BPFL_HDCore_C_GetAllMapAssets::LevelAssets' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, K2Node_MakeArray_Array) == 0x000020, "Member 'BPFL_HDCore_C_GetAllMapAssets::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, CallFunc_GetAssetRegistry_ReturnValue) == 0x000030, "Member 'BPFL_HDCore_C_GetAllMapAssets::CallFunc_GetAssetRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, K2Node_MakeStruct_ARFilter) == 0x000040, "Member 'BPFL_HDCore_C_GetAllMapAssets::K2Node_MakeStruct_ARFilter' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, CallFunc_GetAssets_OutAssetData) == 0x000128, "Member 'BPFL_HDCore_C_GetAllMapAssets::CallFunc_GetAssets_OutAssetData' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetAllMapAssets, CallFunc_GetAssets_ReturnValue) == 0x000138, "Member 'BPFL_HDCore_C_GetAllMapAssets::CallFunc_GetAssets_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.SplitLoadedPrimaryAssetIds
// 0x0090 (0x0090 - 0x0000)
struct BPFL_HDCore_C_SplitLoadedPrimaryAssetIds final
{
public:
	TArray<struct FPrimaryAssetId>                AssetIds;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                UnloadedAssetIds;                                  // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UObject*>                        LoadedObjects;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                UnloadedIds;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_Array_Get_Item;                           // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetObjectFromPrimaryAssetId_ReturnValue;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds) == 0x000008, "Wrong alignment on BPFL_HDCore_C_SplitLoadedPrimaryAssetIds");
static_assert(sizeof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds) == 0x000090, "Wrong size on BPFL_HDCore_C_SplitLoadedPrimaryAssetIds");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, AssetIds) == 0x000000, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::AssetIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, UnloadedAssetIds) == 0x000018, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::UnloadedAssetIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, LoadedAssets) == 0x000028, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::LoadedAssets' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, LoadedObjects) == 0x000038, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::LoadedObjects' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, UnloadedIds) == 0x000048, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::UnloadedIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Array_Get_Item) == 0x000064, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_GetObjectFromPrimaryAssetId_ReturnValue) == 0x000078, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_GetObjectFromPrimaryAssetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetIds, CallFunc_Array_Add_ReturnValue_1) == 0x00008C, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetIds::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.SplitLoadedPrimaryAssetClassIds
// 0x0090 (0x0090 - 0x0000)
struct BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds final
{
public:
	TArray<struct FPrimaryAssetId>                AssetIds;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                UnloadedAssetIds;                                  // 0x0018(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UClass*>                         LoadedAssetClasses;                                // 0x0028(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UClass*>                         LoadedClasses;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                UnloadedIds;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_Array_Get_Item;                           // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetClassFromPrimaryAssetId_ReturnValue;   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds) == 0x000008, "Wrong alignment on BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds");
static_assert(sizeof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds) == 0x000090, "Wrong size on BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, AssetIds) == 0x000000, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::AssetIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, UnloadedAssetIds) == 0x000018, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::UnloadedAssetIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, LoadedAssetClasses) == 0x000028, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::LoadedAssetClasses' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, LoadedClasses) == 0x000038, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::LoadedClasses' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, UnloadedIds) == 0x000048, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::UnloadedIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Array_Get_Item) == 0x000064, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_GetClassFromPrimaryAssetId_ReturnValue) == 0x000078, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_GetClassFromPrimaryAssetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_IsValidClass_ReturnValue) == 0x000081, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds, CallFunc_Array_Add_ReturnValue_1) == 0x00008C, "Member 'BPFL_HDCore_C_SplitLoadedPrimaryAssetClassIds::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.AddOption
// 0x0088 (0x0088 - 0x0000)
struct BPFL_HDCore_C_AddOption final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class FString                                 StrToAdd;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_AddOption) == 0x000008, "Wrong alignment on BPFL_HDCore_C_AddOption");
static_assert(sizeof(BPFL_HDCore_C_AddOption) == 0x000088, "Wrong size on BPFL_HDCore_C_AddOption");
static_assert(offsetof(BPFL_HDCore_C_AddOption, Options) == 0x000000, "Member 'BPFL_HDCore_C_AddOption::Options' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, StrToAdd) == 0x000010, "Member 'BPFL_HDCore_C_AddOption::StrToAdd' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, __WorldContext) == 0x000020, "Member 'BPFL_HDCore_C_AddOption::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, Temp_string_Variable) == 0x000028, "Member 'BPFL_HDCore_C_AddOption::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, CallFunc_IsEmpty_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_AddOption::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, Temp_string_Variable_1) == 0x000040, "Member 'BPFL_HDCore_C_AddOption::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, Temp_bool_Variable) == 0x000050, "Member 'BPFL_HDCore_C_AddOption::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, K2Node_Select_Default) == 0x000058, "Member 'BPFL_HDCore_C_AddOption::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'BPFL_HDCore_C_AddOption::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_AddOption, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'BPFL_HDCore_C_AddOption::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetContentRootPathFromPackageName
// 0x0050 (0x0050 - 0x0000)
struct BPFL_HDCore_C_GetContentRootPathFromPackageName final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentRootPath;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Mid_ReturnValue;                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetContentRootPathFromPackageName) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetContentRootPathFromPackageName");
static_assert(sizeof(BPFL_HDCore_C_GetContentRootPathFromPackageName) == 0x000050, "Wrong size on BPFL_HDCore_C_GetContentRootPathFromPackageName");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, PackageName) == 0x000000, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::PackageName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, bSuccess) == 0x000018, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, ContentRootPath) == 0x000020, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::ContentRootPath' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, CallFunc_StartsWith_ReturnValue) == 0x000030, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::CallFunc_StartsWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, CallFunc_FindSubstring_ReturnValue) == 0x000034, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootPathFromPackageName, CallFunc_Mid_ReturnValue) == 0x000040, "Member 'BPFL_HDCore_C_GetContentRootPathFromPackageName::CallFunc_Mid_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetContentRootFromPackageName
// 0x0080 (0x0080 - 0x0000)
struct BPFL_HDCore_C_GetContentRootFromPackageName final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentRootName;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetContentRootPathFromPackageName_bSuccess; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetContentRootPathFromPackageName_ContentRootPath; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Mid_ReturnValue;                          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetContentRootFromPackageName) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetContentRootFromPackageName");
static_assert(sizeof(BPFL_HDCore_C_GetContentRootFromPackageName) == 0x000080, "Wrong size on BPFL_HDCore_C_GetContentRootFromPackageName");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, PackageName) == 0x000000, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::PackageName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, bSuccess) == 0x000018, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, ContentRootName) == 0x000020, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::ContentRootName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, Temp_bool_Variable) == 0x000030, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, CallFunc_GetContentRootPathFromPackageName_bSuccess) == 0x000031, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::CallFunc_GetContentRootPathFromPackageName_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, CallFunc_GetContentRootPathFromPackageName_ContentRootPath) == 0x000038, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::CallFunc_GetContentRootPathFromPackageName_ContentRootPath' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, Temp_string_Variable) == 0x000048, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, CallFunc_FindSubstring_ReturnValue) == 0x000058, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, CallFunc_Subtract_IntInt_ReturnValue) == 0x00005C, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, CallFunc_Mid_ReturnValue) == 0x000060, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::CallFunc_Mid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetContentRootFromPackageName, K2Node_Select_Default) == 0x000070, "Member 'BPFL_HDCore_C_GetContentRootFromPackageName::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetPluginDisplayNameFromPath
// 0x00A0 (0x00A0 - 0x0000)
struct BPFL_HDCore_C_GetPluginDisplayNameFromPath final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ModName;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetContentRootFromPackageName_bSuccess;   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetContentRootFromPackageName_ContentRootName; // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPluginFriendlyName_ReturnValue;        // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetPluginDisplayNameFromPath) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPluginDisplayNameFromPath");
static_assert(sizeof(BPFL_HDCore_C_GetPluginDisplayNameFromPath) == 0x0000A0, "Wrong size on BPFL_HDCore_C_GetPluginDisplayNameFromPath");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, AssetPath) == 0x000000, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::AssetPath' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, ModName) == 0x000018, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::ModName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, Temp_bool_Variable) == 0x000028, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, CallFunc_GetContentRootFromPackageName_bSuccess) == 0x000029, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::CallFunc_GetContentRootFromPackageName_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, CallFunc_GetContentRootFromPackageName_ContentRootName) == 0x000030, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::CallFunc_GetContentRootFromPackageName_ContentRootName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, Temp_string_Variable) == 0x000040, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, CallFunc_GetPluginFriendlyName_ReturnValue) == 0x000050, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::CallFunc_GetPluginFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, CallFunc_IsEmpty_ReturnValue) == 0x000060, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, Temp_bool_Variable_1) == 0x000061, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, K2Node_MakeArray_Array) == 0x000068, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, CallFunc_Array_Contains_ReturnValue) == 0x000078, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, K2Node_Select_Default) == 0x000080, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPluginDisplayNameFromPath, K2Node_Select_Default_1) == 0x000090, "Member 'BPFL_HDCore_C_GetPluginDisplayNameFromPath::K2Node_Select_Default_1' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetPackageShortName
// 0x0058 (0x0058 - 0x0000)
struct BPFL_HDCore_C_GetPackageShortName final
{
public:
	class FString                                 LongName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShortName;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Mid_ReturnValue;                          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetPackageShortName) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetPackageShortName");
static_assert(sizeof(BPFL_HDCore_C_GetPackageShortName) == 0x000058, "Wrong size on BPFL_HDCore_C_GetPackageShortName");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, LongName) == 0x000000, "Member 'BPFL_HDCore_C_GetPackageShortName::LongName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_GetPackageShortName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, bSuccess) == 0x000018, "Member 'BPFL_HDCore_C_GetPackageShortName::bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, ShortName) == 0x000020, "Member 'BPFL_HDCore_C_GetPackageShortName::ShortName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_StartsWith_ReturnValue) == 0x000030, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_StartsWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_Len_ReturnValue) == 0x000034, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_FindSubstring_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetPackageShortName, CallFunc_Mid_ReturnValue) == 0x000048, "Member 'BPFL_HDCore_C_GetPackageShortName::CallFunc_Mid_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.FindMapIdByDisplayName
// 0x0080 (0x0080 - 0x0000)
struct BPFL_HDCore_C_FindMapIdByDisplayName final
{
public:
	class FText                                   MapDisplayName;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FPrimaryAssetId>                MapIds;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        FoundMapId;                                        // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_Array_Get_Item;                           // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMapAssetNameForDisplay_ReturnValue;    // 0x0058(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IgnoreCase_TextText_ReturnValue; // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_FindMapIdByDisplayName) == 0x000008, "Wrong alignment on BPFL_HDCore_C_FindMapIdByDisplayName");
static_assert(sizeof(BPFL_HDCore_C_FindMapIdByDisplayName) == 0x000080, "Wrong size on BPFL_HDCore_C_FindMapIdByDisplayName");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, MapDisplayName) == 0x000000, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::MapDisplayName' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, MapIds) == 0x000018, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::MapIds' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, __WorldContext) == 0x000028, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, FoundMapId) == 0x000030, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::FoundMapId' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_Array_Get_Item) == 0x000048, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_GetMapAssetNameForDisplay_ReturnValue) == 0x000058, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_GetMapAssetNameForDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_EqualEqual_IgnoreCase_TextText_ReturnValue) == 0x000074, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_EqualEqual_IgnoreCase_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_Less_IntInt_ReturnValue) == 0x000075, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_FindMapIdByDisplayName, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BPFL_HDCore_C_FindMapIdByDisplayName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.CheckEntitlement
// 0x0040 (0x0040 - 0x0000)
struct BPFL_HDCore_C_CheckEntitlement final
{
public:
	TArray<struct FFEntitlementDefinition>        Entitlements;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEntitled;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFEntitlementDefinition                CallFunc_Array_Get_Item;                           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnsAppBP_ReturnValue;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasDLCBP_ReturnValue;                     // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_CheckEntitlement) == 0x000008, "Wrong alignment on BPFL_HDCore_C_CheckEntitlement");
static_assert(sizeof(BPFL_HDCore_C_CheckEntitlement) == 0x000040, "Wrong size on BPFL_HDCore_C_CheckEntitlement");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, Entitlements) == 0x000000, "Member 'BPFL_HDCore_C_CheckEntitlement::Entitlements' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, __WorldContext) == 0x000010, "Member 'BPFL_HDCore_C_CheckEntitlement::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, bEntitled) == 0x000018, "Member 'BPFL_HDCore_C_CheckEntitlement::bEntitled' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BPFL_HDCore_C_CheckEntitlement::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BPFL_HDCore_C_CheckEntitlement::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_Array_Get_Item) == 0x000028, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_OwnsAppBP_ReturnValue) == 0x000039, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_OwnsAppBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_HasDLCBP_ReturnValue) == 0x00003A, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_HasDLCBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, K2Node_SwitchEnum_CmpSuccess) == 0x00003B, "Member 'BPFL_HDCore_C_CheckEntitlement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_CheckEntitlement, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_HDCore_C_CheckEntitlement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDPlayerControllerBP
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetHDPlayerControllerBP final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerControllerBase_C*           HDPC;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerControllerBase_C*           K2Node_DynamicCast_AsBP_HDPlayer_Controller_Base;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDPlayerControllerBP) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDPlayerControllerBP");
static_assert(sizeof(BPFL_HDCore_C_GetHDPlayerControllerBP) == 0x000030, "Wrong size on BPFL_HDCore_C_GetHDPlayerControllerBP");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, PlayerIndex) == 0x000000, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::PlayerIndex' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, HDPC) == 0x000010, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::HDPC' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, K2Node_DynamicCast_AsBP_HDPlayer_Controller_Base) == 0x000020, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::K2Node_DynamicCast_AsBP_HDPlayer_Controller_Base' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerControllerBP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetHDPlayerControllerBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDPlayerCharacterBP
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetHDPlayerCharacterBP final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerCharacterBase_C*            HDPlayerChar;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerCharacterBase_C*            K2Node_DynamicCast_AsBP_HDPlayer_Character_Base;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDPlayerCharacterBP) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDPlayerCharacterBP");
static_assert(sizeof(BPFL_HDCore_C_GetHDPlayerCharacterBP) == 0x000030, "Wrong size on BPFL_HDCore_C_GetHDPlayerCharacterBP");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, PlayerIndex) == 0x000000, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::PlayerIndex' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, HDPlayerChar) == 0x000010, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::HDPlayerChar' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, K2Node_DynamicCast_AsBP_HDPlayer_Character_Base) == 0x000020, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::K2Node_DynamicCast_AsBP_HDPlayer_Character_Base' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDPlayerCharacterBP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetHDPlayerCharacterBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDGameInstance
// 0x0028 (0x0028 - 0x0000)
struct BPFL_HDCore_C_GetHDGameInstance final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHDGameInstance*                        HDGI;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHDGameInstance*                        K2Node_DynamicCast_AsHDGame_Instance;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDGameInstance) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDGameInstance");
static_assert(sizeof(BPFL_HDCore_C_GetHDGameInstance) == 0x000028, "Wrong size on BPFL_HDCore_C_GetHDGameInstance");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameInstance, __WorldContext) == 0x000000, "Member 'BPFL_HDCore_C_GetHDGameInstance::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameInstance, HDGI) == 0x000008, "Member 'BPFL_HDCore_C_GetHDGameInstance::HDGI' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameInstance, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPFL_HDCore_C_GetHDGameInstance::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameInstance, K2Node_DynamicCast_AsHDGame_Instance) == 0x000018, "Member 'BPFL_HDCore_C_GetHDGameInstance::K2Node_DynamicCast_AsHDGame_Instance' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameInstance, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_HDCore_C_GetHDGameInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDGameMode
// 0x0028 (0x0028 - 0x0000)
struct BPFL_HDCore_C_GetHDGameMode final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDBaseGameMode*                        HDGame;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDBaseGameMode*                        K2Node_DynamicCast_AsHDBase_Game_Mode;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDGameMode) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDGameMode");
static_assert(sizeof(BPFL_HDCore_C_GetHDGameMode) == 0x000028, "Wrong size on BPFL_HDCore_C_GetHDGameMode");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameMode, __WorldContext) == 0x000000, "Member 'BPFL_HDCore_C_GetHDGameMode::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameMode, HDGame) == 0x000008, "Member 'BPFL_HDCore_C_GetHDGameMode::HDGame' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameMode, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'BPFL_HDCore_C_GetHDGameMode::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameMode, K2Node_DynamicCast_AsHDBase_Game_Mode) == 0x000018, "Member 'BPFL_HDCore_C_GetHDGameMode::K2Node_DynamicCast_AsHDBase_Game_Mode' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameMode, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_HDCore_C_GetHDGameMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDGameState
// 0x0028 (0x0028 - 0x0000)
struct BPFL_HDCore_C_GetHDGameState final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDGameState*                           HDGameState;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDGameState*                           K2Node_DynamicCast_AsHDGame_State;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDGameState) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDGameState");
static_assert(sizeof(BPFL_HDCore_C_GetHDGameState) == 0x000028, "Wrong size on BPFL_HDCore_C_GetHDGameState");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameState, __WorldContext) == 0x000000, "Member 'BPFL_HDCore_C_GetHDGameState::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameState, HDGameState) == 0x000008, "Member 'BPFL_HDCore_C_GetHDGameState::HDGameState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameState, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'BPFL_HDCore_C_GetHDGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameState, K2Node_DynamicCast_AsHDGame_State) == 0x000018, "Member 'BPFL_HDCore_C_GetHDGameState::K2Node_DynamicCast_AsHDGame_State' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameState, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_HDCore_C_GetHDGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDGameUserSettings
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetHDGameUserSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTBGameUserSettings*                    HDGameUserSettings;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTBGameUserSettings*                    K2Node_DynamicCast_AsTBGame_User_Settings;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDGameUserSettings) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDGameUserSettings");
static_assert(sizeof(BPFL_HDCore_C_GetHDGameUserSettings) == 0x000030, "Wrong size on BPFL_HDCore_C_GetHDGameUserSettings");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, __WorldContext) == 0x000000, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, HDGameUserSettings) == 0x000008, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::HDGameUserSettings' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, CallFunc_GetGameUserSettings_ReturnValue) == 0x000010, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, K2Node_DynamicCast_AsTBGame_User_Settings) == 0x000020, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::K2Node_DynamicCast_AsTBGame_User_Settings' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDGameUserSettings, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetHDGameUserSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDHUDBP
// 0x0038 (0x0038 - 0x0000)
struct BPFL_HDCore_C_GetHDHUDBP final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDHUDBase_C*                        HDHUD;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDHUDBase_C*                        K2Node_DynamicCast_AsBP_HDHUDBase;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDHUDBP) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDHUDBP");
static_assert(sizeof(BPFL_HDCore_C_GetHDHUDBP) == 0x000038, "Wrong size on BPFL_HDCore_C_GetHDHUDBP");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, PlayerIndex) == 0x000000, "Member 'BPFL_HDCore_C_GetHDHUDBP::PlayerIndex' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetHDHUDBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, HDHUD) == 0x000010, "Member 'BPFL_HDCore_C_GetHDHUDBP::HDHUD' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetHDHUDBP::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, CallFunc_GetHUD_ReturnValue) == 0x000020, "Member 'BPFL_HDCore_C_GetHDHUDBP::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, K2Node_DynamicCast_AsBP_HDHUDBase) == 0x000028, "Member 'BPFL_HDCore_C_GetHDHUDBP::K2Node_DynamicCast_AsBP_HDHUDBase' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDHUDBP, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPFL_HDCore_C_GetHDHUDBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDTeamStateForTeam
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetHDTeamStateForTeam final
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           HDTeamState;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADFTeamState*                           CallFunc_GetTeamStateFromTeamId_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           K2Node_DynamicCast_AsTeam_State__HD_;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDTeamStateForTeam) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDTeamStateForTeam");
static_assert(sizeof(BPFL_HDCore_C_GetHDTeamStateForTeam) == 0x000030, "Wrong size on BPFL_HDCore_C_GetHDTeamStateForTeam");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, Team) == 0x000000, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::Team' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, HDTeamState) == 0x000010, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::HDTeamState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, CallFunc_GetTeamStateFromTeamId_ReturnValue) == 0x000018, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::CallFunc_GetTeamStateFromTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, K2Node_DynamicCast_AsTeam_State__HD_) == 0x000020, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::K2Node_DynamicCast_AsTeam_State__HD_' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDTeamStateForTeam, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetHDTeamStateForTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetHDFactionInfoForTeam
// 0x0030 (0x0030 - 0x0000)
struct BPFL_HDCore_C_GetHDFactionInfoForTeam final
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HDFactionInfoClass;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           CallFunc_GetHDTeamStateForTeam_HDTeamState;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_HDFaction_Info_Base;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_HDCore_C_GetHDFactionInfoForTeam) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetHDFactionInfoForTeam");
static_assert(sizeof(BPFL_HDCore_C_GetHDFactionInfoForTeam) == 0x000030, "Wrong size on BPFL_HDCore_C_GetHDFactionInfoForTeam");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, Team) == 0x000000, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::Team' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, HDFactionInfoClass) == 0x000010, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::HDFactionInfoClass' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, CallFunc_GetHDTeamStateForTeam_HDTeamState) == 0x000018, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::CallFunc_GetHDTeamStateForTeam_HDTeamState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, K2Node_ClassDynamicCast_AsBP_HDFaction_Info_Base) == 0x000020, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::K2Node_ClassDynamicCast_AsBP_HDFaction_Info_Base' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetHDFactionInfoForTeam, K2Node_ClassDynamicCast_bSuccess) == 0x000028, "Member 'BPFL_HDCore_C_GetHDFactionInfoForTeam::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_HDCore.BPFL_HDCore_C.GetBluforOpforTeamStateForTeam
// 0x0038 (0x0038 - 0x0000)
struct BPFL_HDCore_C_GetBluforOpforTeamStateForTeam final
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           HDTeamState;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDTeam                                       Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDGameState*                           CallFunc_GetHDGameState_HDGameState;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDTeamState*                           K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam) == 0x000008, "Wrong alignment on BPFL_HDCore_C_GetBluforOpforTeamStateForTeam");
static_assert(sizeof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam) == 0x000038, "Wrong size on BPFL_HDCore_C_GetBluforOpforTeamStateForTeam");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, Team) == 0x000000, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::Team' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, __WorldContext) == 0x000008, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, HDTeamState) == 0x000010, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::HDTeamState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, Temp_byte_Variable) == 0x000018, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, CallFunc_GetHDGameState_HDGameState) == 0x000020, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::CallFunc_GetHDGameState_HDGameState' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, Temp_object_Variable) == 0x000028, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDCore_C_GetBluforOpforTeamStateForTeam, K2Node_Select_Default) == 0x000030, "Member 'BPFL_HDCore_C_GetBluforOpforTeamStateForTeam::K2Node_Select_Default' has a wrong offset!");

}

