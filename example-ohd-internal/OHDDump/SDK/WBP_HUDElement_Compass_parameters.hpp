#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUDElement_Compass

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_HUDElement_Compass.WBP_HUDElement_Compass_C.ExecuteUbergraph_WBP_HUDElement_Compass
// 0x005C (0x005C - 0x0000)
struct WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAbs2D_ReturnValue;                     // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass) == 0x000004, "Wrong alignment on WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass");
static_assert(sizeof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass) == 0x00005C, "Wrong size on WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, EntryPoint) == 0x000000, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, K2Node_Event_MyGeometry) == 0x000008, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, CallFunc_GetAbs2D_ReturnValue) == 0x000044, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::CallFunc_GetAbs2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'WBP_HUDElement_Compass_C_ExecuteUbergraph_WBP_HUDElement_Compass::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function WBP_HUDElement_Compass.WBP_HUDElement_Compass_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_HUDElement_Compass_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HUDElement_Compass_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_HUDElement_Compass_C_PreConstruct");
static_assert(sizeof(WBP_HUDElement_Compass_C_PreConstruct) == 0x000001, "Wrong size on WBP_HUDElement_Compass_C_PreConstruct");
static_assert(offsetof(WBP_HUDElement_Compass_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_HUDElement_Compass_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_HUDElement_Compass.WBP_HUDElement_Compass_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_HUDElement_Compass_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUDElement_Compass_C_Tick) == 0x000004, "Wrong alignment on WBP_HUDElement_Compass_C_Tick");
static_assert(sizeof(WBP_HUDElement_Compass_C_Tick) == 0x00003C, "Wrong size on WBP_HUDElement_Compass_C_Tick");
static_assert(offsetof(WBP_HUDElement_Compass_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_HUDElement_Compass_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_HUDElement_Compass_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_HUDElement_Compass.WBP_HUDElement_Compass_C.UpdateDirection
// 0x0050 (0x0050 - 0x0000)
struct WBP_HUDElement_Compass_C_UpdateDirection final
{
public:
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDPlayerCharacter*                     K2Node_DynamicCast_AsHDPlayer_Character;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUDElement_Compass_C_UpdateDirection) == 0x000008, "Wrong alignment on WBP_HUDElement_Compass_C_UpdateDirection");
static_assert(sizeof(WBP_HUDElement_Compass_C_UpdateDirection) == 0x000050, "Wrong size on WBP_HUDElement_Compass_C_UpdateDirection");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000000, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, K2Node_DynamicCast_AsHDPlayer_Character) == 0x000018, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::K2Node_DynamicCast_AsHDPlayer_Character' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000024, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_UpdateDirection, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'WBP_HUDElement_Compass_C_UpdateDirection::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WBP_HUDElement_Compass.WBP_HUDElement_Compass_C.SetWidgetCanvasSlotSize
// 0x0018 (0x0018 - 0x0000)
struct WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NewLayoutSize;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize) == 0x000008, "Wrong alignment on WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize");
static_assert(sizeof(WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize) == 0x000018, "Wrong size on WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize");
static_assert(offsetof(WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize, Widget) == 0x000000, "Member 'WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize::Widget' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize, NewLayoutSize) == 0x000008, "Member 'WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize::NewLayoutSize' has a wrong offset!");
static_assert(offsetof(WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'WBP_HUDElement_Compass_C_SetWidgetCanvasSlotSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

}

