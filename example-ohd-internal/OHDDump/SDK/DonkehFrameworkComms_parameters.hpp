#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFrameworkComms

#include "Basic.hpp"

#include "DonkehFrameworkComms_structs.hpp"


namespace SDK::Params
{

// Function DonkehFrameworkComms.CreateCommChannelCallbackProxy.CreateCommChannelFor
// 0x0020 (0x0020 - 0x0000)
struct CreateCommChannelCallbackProxy_CreateCommChannelFor final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommChannelDefinition*         ChannelDef;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelNameOverride;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCreateCommChannelCallbackProxy*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreateCommChannelCallbackProxy_CreateCommChannelFor) == 0x000008, "Wrong alignment on CreateCommChannelCallbackProxy_CreateCommChannelFor");
static_assert(sizeof(CreateCommChannelCallbackProxy_CreateCommChannelFor) == 0x000020, "Wrong size on CreateCommChannelCallbackProxy_CreateCommChannelFor");
static_assert(offsetof(CreateCommChannelCallbackProxy_CreateCommChannelFor, Player) == 0x000000, "Member 'CreateCommChannelCallbackProxy_CreateCommChannelFor::Player' has a wrong offset!");
static_assert(offsetof(CreateCommChannelCallbackProxy_CreateCommChannelFor, ChannelDef) == 0x000008, "Member 'CreateCommChannelCallbackProxy_CreateCommChannelFor::ChannelDef' has a wrong offset!");
static_assert(offsetof(CreateCommChannelCallbackProxy_CreateCommChannelFor, ChannelNameOverride) == 0x000010, "Member 'CreateCommChannelCallbackProxy_CreateCommChannelFor::ChannelNameOverride' has a wrong offset!");
static_assert(offsetof(CreateCommChannelCallbackProxy_CreateCommChannelFor, ReturnValue) == 0x000018, "Member 'CreateCommChannelCallbackProxy_CreateCommChannelFor::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.SetChannelState
// 0x0008 (0x0008 - 0x0000)
struct DFCommChannel_SetChannelState final
{
public:
	class UObject*                                NewChannelState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_SetChannelState) == 0x000008, "Wrong alignment on DFCommChannel_SetChannelState");
static_assert(sizeof(DFCommChannel_SetChannelState) == 0x000008, "Wrong size on DFCommChannel_SetChannelState");
static_assert(offsetof(DFCommChannel_SetChannelState, NewChannelState) == 0x000000, "Member 'DFCommChannel_SetChannelState::NewChannelState' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.GetChannelDisplayName
// 0x0018 (0x0018 - 0x0000)
struct DFCommChannel_GetChannelDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_GetChannelDisplayName) == 0x000008, "Wrong alignment on DFCommChannel_GetChannelDisplayName");
static_assert(sizeof(DFCommChannel_GetChannelDisplayName) == 0x000018, "Wrong size on DFCommChannel_GetChannelDisplayName");
static_assert(offsetof(DFCommChannel_GetChannelDisplayName, ReturnValue) == 0x000000, "Member 'DFCommChannel_GetChannelDisplayName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.GetChannelGroupNameIfValid
// 0x0008 (0x0008 - 0x0000)
struct DFCommChannel_GetChannelGroupNameIfValid final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_GetChannelGroupNameIfValid) == 0x000004, "Wrong alignment on DFCommChannel_GetChannelGroupNameIfValid");
static_assert(sizeof(DFCommChannel_GetChannelGroupNameIfValid) == 0x000008, "Wrong size on DFCommChannel_GetChannelGroupNameIfValid");
static_assert(offsetof(DFCommChannel_GetChannelGroupNameIfValid, ReturnValue) == 0x000000, "Member 'DFCommChannel_GetChannelGroupNameIfValid::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.GetChannelName
// 0x0008 (0x0008 - 0x0000)
struct DFCommChannel_GetChannelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_GetChannelName) == 0x000004, "Wrong alignment on DFCommChannel_GetChannelName");
static_assert(sizeof(DFCommChannel_GetChannelName) == 0x000008, "Wrong size on DFCommChannel_GetChannelName");
static_assert(offsetof(DFCommChannel_GetChannelName, ReturnValue) == 0x000000, "Member 'DFCommChannel_GetChannelName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.GetChannelNameStr
// 0x0010 (0x0010 - 0x0000)
struct DFCommChannel_GetChannelNameStr final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_GetChannelNameStr) == 0x000008, "Wrong alignment on DFCommChannel_GetChannelNameStr");
static_assert(sizeof(DFCommChannel_GetChannelNameStr) == 0x000010, "Wrong size on DFCommChannel_GetChannelNameStr");
static_assert(offsetof(DFCommChannel_GetChannelNameStr, ReturnValue) == 0x000000, "Member 'DFCommChannel_GetChannelNameStr::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.HasFormat
// 0x0010 (0x0010 - 0x0000)
struct DFCommChannel_HasFormat final
{
public:
	const class UDFCommsFormatBase*               Format;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommChannel_HasFormat) == 0x000008, "Wrong alignment on DFCommChannel_HasFormat");
static_assert(sizeof(DFCommChannel_HasFormat) == 0x000010, "Wrong size on DFCommChannel_HasFormat");
static_assert(offsetof(DFCommChannel_HasFormat, Format) == 0x000000, "Member 'DFCommChannel_HasFormat::Format' has a wrong offset!");
static_assert(offsetof(DFCommChannel_HasFormat, ReturnValue) == 0x000008, "Member 'DFCommChannel_HasFormat::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannel.IsReady
// 0x0001 (0x0001 - 0x0000)
struct DFCommChannel_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannel_IsReady) == 0x000001, "Wrong alignment on DFCommChannel_IsReady");
static_assert(sizeof(DFCommChannel_IsReady) == 0x000001, "Wrong size on DFCommChannel_IsReady");
static_assert(offsetof(DFCommChannel_IsReady, ReturnValue) == 0x000000, "Member 'DFCommChannel_IsReady::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannelDefinition.InstancesChannelWithGroup
// 0x0001 (0x0001 - 0x0000)
struct DFCommChannelDefinition_InstancesChannelWithGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannelDefinition_InstancesChannelWithGroup) == 0x000001, "Wrong alignment on DFCommChannelDefinition_InstancesChannelWithGroup");
static_assert(sizeof(DFCommChannelDefinition_InstancesChannelWithGroup) == 0x000001, "Wrong size on DFCommChannelDefinition_InstancesChannelWithGroup");
static_assert(offsetof(DFCommChannelDefinition_InstancesChannelWithGroup, ReturnValue) == 0x000000, "Member 'DFCommChannelDefinition_InstancesChannelWithGroup::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannelStateInterface.BP_OnSetupState
// 0x0018 (0x0018 - 0x0000)
struct DFCommChannelStateInterface_BP_OnSetupState final
{
public:
	struct FDFCommStateSetupParams                SetupParams;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannelStateInterface_BP_OnSetupState) == 0x000008, "Wrong alignment on DFCommChannelStateInterface_BP_OnSetupState");
static_assert(sizeof(DFCommChannelStateInterface_BP_OnSetupState) == 0x000018, "Wrong size on DFCommChannelStateInterface_BP_OnSetupState");
static_assert(offsetof(DFCommChannelStateInterface_BP_OnSetupState, SetupParams) == 0x000000, "Member 'DFCommChannelStateInterface_BP_OnSetupState::SetupParams' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannelStateLibrary.GetOwningCommChannel
// 0x0018 (0x0018 - 0x0000)
struct DFCommChannelStateLibrary_GetOwningCommChannel final
{
public:
	TScriptInterface<class IDFCommChannelStateInterface> ChannelState;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannelStateLibrary_GetOwningCommChannel) == 0x000008, "Wrong alignment on DFCommChannelStateLibrary_GetOwningCommChannel");
static_assert(sizeof(DFCommChannelStateLibrary_GetOwningCommChannel) == 0x000018, "Wrong size on DFCommChannelStateLibrary_GetOwningCommChannel");
static_assert(offsetof(DFCommChannelStateLibrary_GetOwningCommChannel, ChannelState) == 0x000000, "Member 'DFCommChannelStateLibrary_GetOwningCommChannel::ChannelState' has a wrong offset!");
static_assert(offsetof(DFCommChannelStateLibrary_GetOwningCommChannel, ReturnValue) == 0x000010, "Member 'DFCommChannelStateLibrary_GetOwningCommChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannelStateLibrary.IsChannelStatePrepared
// 0x0018 (0x0018 - 0x0000)
struct DFCommChannelStateLibrary_IsChannelStatePrepared final
{
public:
	TScriptInterface<class IDFCommChannelStateInterface> ChannelState;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommChannelStateLibrary_IsChannelStatePrepared) == 0x000008, "Wrong alignment on DFCommChannelStateLibrary_IsChannelStatePrepared");
static_assert(sizeof(DFCommChannelStateLibrary_IsChannelStatePrepared) == 0x000018, "Wrong size on DFCommChannelStateLibrary_IsChannelStatePrepared");
static_assert(offsetof(DFCommChannelStateLibrary_IsChannelStatePrepared, ChannelState) == 0x000000, "Member 'DFCommChannelStateLibrary_IsChannelStatePrepared::ChannelState' has a wrong offset!");
static_assert(offsetof(DFCommChannelStateLibrary_IsChannelStatePrepared, ReturnValue) == 0x000010, "Member 'DFCommChannelStateLibrary_IsChannelStatePrepared::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommChannelStateLibrary.NotifyChannelOfPreparedState
// 0x0010 (0x0010 - 0x0000)
struct DFCommChannelStateLibrary_NotifyChannelOfPreparedState final
{
public:
	TScriptInterface<class IDFCommChannelStateInterface> ChannelState;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommChannelStateLibrary_NotifyChannelOfPreparedState) == 0x000008, "Wrong alignment on DFCommChannelStateLibrary_NotifyChannelOfPreparedState");
static_assert(sizeof(DFCommChannelStateLibrary_NotifyChannelOfPreparedState) == 0x000010, "Wrong size on DFCommChannelStateLibrary_NotifyChannelOfPreparedState");
static_assert(offsetof(DFCommChannelStateLibrary_NotifyChannelOfPreparedState, ChannelState) == 0x000000, "Member 'DFCommChannelStateLibrary_NotifyChannelOfPreparedState::ChannelState' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommsFormatBase.CanReadFromChannel
// 0x000C (0x000C - 0x0000)
struct DFCommsFormatBase_CanReadFromChannel final
{
public:
	class FName                                   ChannelName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommsFormatBase_CanReadFromChannel) == 0x000004, "Wrong alignment on DFCommsFormatBase_CanReadFromChannel");
static_assert(sizeof(DFCommsFormatBase_CanReadFromChannel) == 0x00000C, "Wrong size on DFCommsFormatBase_CanReadFromChannel");
static_assert(offsetof(DFCommsFormatBase_CanReadFromChannel, ChannelName) == 0x000000, "Member 'DFCommsFormatBase_CanReadFromChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(DFCommsFormatBase_CanReadFromChannel, ReturnValue) == 0x000008, "Member 'DFCommsFormatBase_CanReadFromChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommsFormatBase.CanWriteToChannel
// 0x000C (0x000C - 0x0000)
struct DFCommsFormatBase_CanWriteToChannel final
{
public:
	class FName                                   ChannelName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommsFormatBase_CanWriteToChannel) == 0x000004, "Wrong alignment on DFCommsFormatBase_CanWriteToChannel");
static_assert(sizeof(DFCommsFormatBase_CanWriteToChannel) == 0x00000C, "Wrong size on DFCommsFormatBase_CanWriteToChannel");
static_assert(offsetof(DFCommsFormatBase_CanWriteToChannel, ChannelName) == 0x000000, "Member 'DFCommsFormatBase_CanWriteToChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(DFCommsFormatBase_CanWriteToChannel, ReturnValue) == 0x000008, "Member 'DFCommsFormatBase_CanWriteToChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommsFormatBase.HasAccessToChannel
// 0x000C (0x000C - 0x0000)
struct DFCommsFormatBase_HasAccessToChannel final
{
public:
	class FName                                   ChannelName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFCommsFormatAccessRule                      AccessRulesToCheck;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommsFormatBase_HasAccessToChannel) == 0x000004, "Wrong alignment on DFCommsFormatBase_HasAccessToChannel");
static_assert(sizeof(DFCommsFormatBase_HasAccessToChannel) == 0x00000C, "Wrong size on DFCommsFormatBase_HasAccessToChannel");
static_assert(offsetof(DFCommsFormatBase_HasAccessToChannel, ChannelName) == 0x000000, "Member 'DFCommsFormatBase_HasAccessToChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(DFCommsFormatBase_HasAccessToChannel, AccessRulesToCheck) == 0x000008, "Member 'DFCommsFormatBase_HasAccessToChannel::AccessRulesToCheck' has a wrong offset!");
static_assert(offsetof(DFCommsFormatBase_HasAccessToChannel, ReturnValue) == 0x000009, "Member 'DFCommsFormatBase_HasAccessToChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.ClearCurrentExclusiveChannelForFormat
// 0x0010 (0x0010 - 0x0000)
struct DFCommStatics_ClearCurrentExclusiveChannelForFormat final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommsFormatBase*                     FormatToUpdate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_ClearCurrentExclusiveChannelForFormat) == 0x000008, "Wrong alignment on DFCommStatics_ClearCurrentExclusiveChannelForFormat");
static_assert(sizeof(DFCommStatics_ClearCurrentExclusiveChannelForFormat) == 0x000010, "Wrong size on DFCommStatics_ClearCurrentExclusiveChannelForFormat");
static_assert(offsetof(DFCommStatics_ClearCurrentExclusiveChannelForFormat, Player) == 0x000000, "Member 'DFCommStatics_ClearCurrentExclusiveChannelForFormat::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_ClearCurrentExclusiveChannelForFormat, FormatToUpdate) == 0x000008, "Member 'DFCommStatics_ClearCurrentExclusiveChannelForFormat::FormatToUpdate' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.ClearCurrentExclusiveChannelForFormatByName
// 0x0010 (0x0010 - 0x0000)
struct DFCommStatics_ClearCurrentExclusiveChannelForFormatByName final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatNameToUpdate;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_ClearCurrentExclusiveChannelForFormatByName) == 0x000008, "Wrong alignment on DFCommStatics_ClearCurrentExclusiveChannelForFormatByName");
static_assert(sizeof(DFCommStatics_ClearCurrentExclusiveChannelForFormatByName) == 0x000010, "Wrong size on DFCommStatics_ClearCurrentExclusiveChannelForFormatByName");
static_assert(offsetof(DFCommStatics_ClearCurrentExclusiveChannelForFormatByName, Player) == 0x000000, "Member 'DFCommStatics_ClearCurrentExclusiveChannelForFormatByName::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_ClearCurrentExclusiveChannelForFormatByName, FormatNameToUpdate) == 0x000008, "Member 'DFCommStatics_ClearCurrentExclusiveChannelForFormatByName::FormatNameToUpdate' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatGetExclusiveChannel
// 0x0010 (0x0010 - 0x0000)
struct DFCommStatics_CommsFormatGetExclusiveChannel final
{
public:
	const class UDFCommsFormatBase*               Format;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_CommsFormatGetExclusiveChannel) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatGetExclusiveChannel");
static_assert(sizeof(DFCommStatics_CommsFormatGetExclusiveChannel) == 0x000010, "Wrong size on DFCommStatics_CommsFormatGetExclusiveChannel");
static_assert(offsetof(DFCommStatics_CommsFormatGetExclusiveChannel, Format) == 0x000000, "Member 'DFCommStatics_CommsFormatGetExclusiveChannel::Format' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatGetExclusiveChannel, ReturnValue) == 0x000008, "Member 'DFCommStatics_CommsFormatGetExclusiveChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatGetExclusiveChannelByName
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_CommsFormatGetExclusiveChannelByName final
{
public:
	const class APlayerController*                PlayerFormatOwner;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_CommsFormatGetExclusiveChannelByName) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatGetExclusiveChannelByName");
static_assert(sizeof(DFCommStatics_CommsFormatGetExclusiveChannelByName) == 0x000018, "Wrong size on DFCommStatics_CommsFormatGetExclusiveChannelByName");
static_assert(offsetof(DFCommStatics_CommsFormatGetExclusiveChannelByName, PlayerFormatOwner) == 0x000000, "Member 'DFCommStatics_CommsFormatGetExclusiveChannelByName::PlayerFormatOwner' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatGetExclusiveChannelByName, FormatName) == 0x000008, "Member 'DFCommStatics_CommsFormatGetExclusiveChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatGetExclusiveChannelByName, ReturnValue) == 0x000010, "Member 'DFCommStatics_CommsFormatGetExclusiveChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatHasExclusiveChannel
// 0x0010 (0x0010 - 0x0000)
struct DFCommStatics_CommsFormatHasExclusiveChannel final
{
public:
	const class UDFCommsFormatBase*               Format;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_CommsFormatHasExclusiveChannel) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatHasExclusiveChannel");
static_assert(sizeof(DFCommStatics_CommsFormatHasExclusiveChannel) == 0x000010, "Wrong size on DFCommStatics_CommsFormatHasExclusiveChannel");
static_assert(offsetof(DFCommStatics_CommsFormatHasExclusiveChannel, Format) == 0x000000, "Member 'DFCommStatics_CommsFormatHasExclusiveChannel::Format' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatHasExclusiveChannel, ReturnValue) == 0x000008, "Member 'DFCommStatics_CommsFormatHasExclusiveChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatHasExclusiveChannelByName
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_CommsFormatHasExclusiveChannelByName final
{
public:
	const class APlayerController*                PlayerFormatOwner;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_CommsFormatHasExclusiveChannelByName) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatHasExclusiveChannelByName");
static_assert(sizeof(DFCommStatics_CommsFormatHasExclusiveChannelByName) == 0x000018, "Wrong size on DFCommStatics_CommsFormatHasExclusiveChannelByName");
static_assert(offsetof(DFCommStatics_CommsFormatHasExclusiveChannelByName, PlayerFormatOwner) == 0x000000, "Member 'DFCommStatics_CommsFormatHasExclusiveChannelByName::PlayerFormatOwner' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatHasExclusiveChannelByName, FormatName) == 0x000008, "Member 'DFCommStatics_CommsFormatHasExclusiveChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatHasExclusiveChannelByName, ReturnValue) == 0x000010, "Member 'DFCommStatics_CommsFormatHasExclusiveChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatUsesChannel
// 0x0020 (0x0020 - 0x0000)
struct DFCommStatics_CommsFormatUsesChannel final
{
public:
	const class APlayerController*                Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommsFormatBase*               Format;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommChannel*                   ChannelToCheck;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_CommsFormatUsesChannel) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatUsesChannel");
static_assert(sizeof(DFCommStatics_CommsFormatUsesChannel) == 0x000020, "Wrong size on DFCommStatics_CommsFormatUsesChannel");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannel, Player) == 0x000000, "Member 'DFCommStatics_CommsFormatUsesChannel::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannel, Format) == 0x000008, "Member 'DFCommStatics_CommsFormatUsesChannel::Format' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannel, ChannelToCheck) == 0x000010, "Member 'DFCommStatics_CommsFormatUsesChannel::ChannelToCheck' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannel, ReturnValue) == 0x000018, "Member 'DFCommStatics_CommsFormatUsesChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.CommsFormatUsesChannelByName
// 0x0020 (0x0020 - 0x0000)
struct DFCommStatics_CommsFormatUsesChannelByName final
{
public:
	const class APlayerController*                Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelNameToCheck;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_CommsFormatUsesChannelByName) == 0x000008, "Wrong alignment on DFCommStatics_CommsFormatUsesChannelByName");
static_assert(sizeof(DFCommStatics_CommsFormatUsesChannelByName) == 0x000020, "Wrong size on DFCommStatics_CommsFormatUsesChannelByName");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannelByName, Player) == 0x000000, "Member 'DFCommStatics_CommsFormatUsesChannelByName::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannelByName, FormatName) == 0x000008, "Member 'DFCommStatics_CommsFormatUsesChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannelByName, ChannelNameToCheck) == 0x000010, "Member 'DFCommStatics_CommsFormatUsesChannelByName::ChannelNameToCheck' has a wrong offset!");
static_assert(offsetof(DFCommStatics_CommsFormatUsesChannelByName, ReturnValue) == 0x000018, "Member 'DFCommStatics_CommsFormatUsesChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.FindCommsComponentByPlayer
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_FindCommsComponentByPlayer final
{
public:
	const class APlayerController*                Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPlayerCommsComponent*                OutPlayerCommsComp;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_FindCommsComponentByPlayer) == 0x000008, "Wrong alignment on DFCommStatics_FindCommsComponentByPlayer");
static_assert(sizeof(DFCommStatics_FindCommsComponentByPlayer) == 0x000018, "Wrong size on DFCommStatics_FindCommsComponentByPlayer");
static_assert(offsetof(DFCommStatics_FindCommsComponentByPlayer, Player) == 0x000000, "Member 'DFCommStatics_FindCommsComponentByPlayer::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_FindCommsComponentByPlayer, OutPlayerCommsComp) == 0x000008, "Member 'DFCommStatics_FindCommsComponentByPlayer::OutPlayerCommsComp' has a wrong offset!");
static_assert(offsetof(DFCommStatics_FindCommsComponentByPlayer, ReturnValue) == 0x000010, "Member 'DFCommStatics_FindCommsComponentByPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.PlayerHasCommChannel
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_PlayerHasCommChannel final
{
public:
	const class APlayerController*                Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommChannel*                   Channel;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_PlayerHasCommChannel) == 0x000008, "Wrong alignment on DFCommStatics_PlayerHasCommChannel");
static_assert(sizeof(DFCommStatics_PlayerHasCommChannel) == 0x000018, "Wrong size on DFCommStatics_PlayerHasCommChannel");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannel, Player) == 0x000000, "Member 'DFCommStatics_PlayerHasCommChannel::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannel, Channel) == 0x000008, "Member 'DFCommStatics_PlayerHasCommChannel::Channel' has a wrong offset!");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannel, ReturnValue) == 0x000010, "Member 'DFCommStatics_PlayerHasCommChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.PlayerHasCommChannelByName
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_PlayerHasCommChannelByName final
{
public:
	const class APlayerController*                Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelName;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_PlayerHasCommChannelByName) == 0x000008, "Wrong alignment on DFCommStatics_PlayerHasCommChannelByName");
static_assert(sizeof(DFCommStatics_PlayerHasCommChannelByName) == 0x000018, "Wrong size on DFCommStatics_PlayerHasCommChannelByName");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannelByName, Player) == 0x000000, "Member 'DFCommStatics_PlayerHasCommChannelByName::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannelByName, ChannelName) == 0x000008, "Member 'DFCommStatics_PlayerHasCommChannelByName::ChannelName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_PlayerHasCommChannelByName, ReturnValue) == 0x000010, "Member 'DFCommStatics_PlayerHasCommChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.SendCommsViaChannel
// 0x0058 (0x0058 - 0x0000)
struct DFCommStatics_SendCommsViaChannel final
{
public:
	class APlayerController*                      PlayerSender;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommsFormatBase*                     FormatToUse;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReceivingChannel;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   MsgToSend;                                         // 0x0018(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseChannelAsNewExclusive;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_SendCommsViaChannel) == 0x000008, "Wrong alignment on DFCommStatics_SendCommsViaChannel");
static_assert(sizeof(DFCommStatics_SendCommsViaChannel) == 0x000058, "Wrong size on DFCommStatics_SendCommsViaChannel");
static_assert(offsetof(DFCommStatics_SendCommsViaChannel, PlayerSender) == 0x000000, "Member 'DFCommStatics_SendCommsViaChannel::PlayerSender' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannel, FormatToUse) == 0x000008, "Member 'DFCommStatics_SendCommsViaChannel::FormatToUse' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannel, ReceivingChannel) == 0x000010, "Member 'DFCommStatics_SendCommsViaChannel::ReceivingChannel' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannel, MsgToSend) == 0x000018, "Member 'DFCommStatics_SendCommsViaChannel::MsgToSend' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannel, bUseChannelAsNewExclusive) == 0x000050, "Member 'DFCommStatics_SendCommsViaChannel::bUseChannelAsNewExclusive' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.SendCommsViaChannelByName
// 0x0058 (0x0058 - 0x0000)
struct DFCommStatics_SendCommsViaChannelByName final
{
public:
	class APlayerController*                      PlayerSender;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReceivingChannelName;                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   MsgToSend;                                         // 0x0018(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseChannelAsNewExclusive;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFCommStatics_SendCommsViaChannelByName) == 0x000008, "Wrong alignment on DFCommStatics_SendCommsViaChannelByName");
static_assert(sizeof(DFCommStatics_SendCommsViaChannelByName) == 0x000058, "Wrong size on DFCommStatics_SendCommsViaChannelByName");
static_assert(offsetof(DFCommStatics_SendCommsViaChannelByName, PlayerSender) == 0x000000, "Member 'DFCommStatics_SendCommsViaChannelByName::PlayerSender' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannelByName, FormatName) == 0x000008, "Member 'DFCommStatics_SendCommsViaChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannelByName, ReceivingChannelName) == 0x000010, "Member 'DFCommStatics_SendCommsViaChannelByName::ReceivingChannelName' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannelByName, MsgToSend) == 0x000018, "Member 'DFCommStatics_SendCommsViaChannelByName::MsgToSend' has a wrong offset!");
static_assert(offsetof(DFCommStatics_SendCommsViaChannelByName, bUseChannelAsNewExclusive) == 0x000050, "Member 'DFCommStatics_SendCommsViaChannelByName::bUseChannelAsNewExclusive' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.UpdateExclusiveChannelForFormat
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_UpdateExclusiveChannelForFormat final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommsFormatBase*                     FormatToUpdate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         SingleChannelToUse;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_UpdateExclusiveChannelForFormat) == 0x000008, "Wrong alignment on DFCommStatics_UpdateExclusiveChannelForFormat");
static_assert(sizeof(DFCommStatics_UpdateExclusiveChannelForFormat) == 0x000018, "Wrong size on DFCommStatics_UpdateExclusiveChannelForFormat");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormat, Player) == 0x000000, "Member 'DFCommStatics_UpdateExclusiveChannelForFormat::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormat, FormatToUpdate) == 0x000008, "Member 'DFCommStatics_UpdateExclusiveChannelForFormat::FormatToUpdate' has a wrong offset!");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormat, SingleChannelToUse) == 0x000010, "Member 'DFCommStatics_UpdateExclusiveChannelForFormat::SingleChannelToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommStatics.UpdateExclusiveChannelForFormatByName
// 0x0018 (0x0018 - 0x0000)
struct DFCommStatics_UpdateExclusiveChannelForFormatByName final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormatNameToUpdate;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SingleChannelNameToUse;                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommStatics_UpdateExclusiveChannelForFormatByName) == 0x000008, "Wrong alignment on DFCommStatics_UpdateExclusiveChannelForFormatByName");
static_assert(sizeof(DFCommStatics_UpdateExclusiveChannelForFormatByName) == 0x000018, "Wrong size on DFCommStatics_UpdateExclusiveChannelForFormatByName");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormatByName, Player) == 0x000000, "Member 'DFCommStatics_UpdateExclusiveChannelForFormatByName::Player' has a wrong offset!");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormatByName, FormatNameToUpdate) == 0x000008, "Member 'DFCommStatics_UpdateExclusiveChannelForFormatByName::FormatNameToUpdate' has a wrong offset!");
static_assert(offsetof(DFCommStatics_UpdateExclusiveChannelForFormatByName, SingleChannelNameToUse) == 0x000010, "Member 'DFCommStatics_UpdateExclusiveChannelForFormatByName::SingleChannelNameToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommWorldSubsystem.InitPlayerComms
// 0x0010 (0x0010 - 0x0000)
struct DFCommWorldSubsystem_InitPlayerComms final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPlayerCommsComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommWorldSubsystem_InitPlayerComms) == 0x000008, "Wrong alignment on DFCommWorldSubsystem_InitPlayerComms");
static_assert(sizeof(DFCommWorldSubsystem_InitPlayerComms) == 0x000010, "Wrong size on DFCommWorldSubsystem_InitPlayerComms");
static_assert(offsetof(DFCommWorldSubsystem_InitPlayerComms, Player) == 0x000000, "Member 'DFCommWorldSubsystem_InitPlayerComms::Player' has a wrong offset!");
static_assert(offsetof(DFCommWorldSubsystem_InitPlayerComms, ReturnValue) == 0x000008, "Member 'DFCommWorldSubsystem_InitPlayerComms::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommWorldSubsystem.GameModePostLogin
// 0x0010 (0x0010 - 0x0000)
struct DFCommWorldSubsystem_GameModePostLogin final
{
public:
	class AGameModeBase*                          GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      NewPlayer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommWorldSubsystem_GameModePostLogin) == 0x000008, "Wrong alignment on DFCommWorldSubsystem_GameModePostLogin");
static_assert(sizeof(DFCommWorldSubsystem_GameModePostLogin) == 0x000010, "Wrong size on DFCommWorldSubsystem_GameModePostLogin");
static_assert(offsetof(DFCommWorldSubsystem_GameModePostLogin, GameMode) == 0x000000, "Member 'DFCommWorldSubsystem_GameModePostLogin::GameMode' has a wrong offset!");
static_assert(offsetof(DFCommWorldSubsystem_GameModePostLogin, NewPlayer) == 0x000008, "Member 'DFCommWorldSubsystem_GameModePostLogin::NewPlayer' has a wrong offset!");

// Function DonkehFrameworkComms.DFCommWorldSubsystem.PostSeamlessTravelPCDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed final
{
public:
	class AActor*                                 DestroyedPlayerActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed) == 0x000008, "Wrong alignment on DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed");
static_assert(sizeof(DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed) == 0x000008, "Wrong size on DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed");
static_assert(offsetof(DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed, DestroyedPlayerActor) == 0x000000, "Member 'DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed::DestroyedPlayerActor' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClearCurrentExclusiveChannelForCommsFormat
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat final
{
public:
	class UDFCommsFormatBase*                     Format;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat) == 0x000008, "Wrong size on DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat, Format) == 0x000000, "Member 'DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat::Format' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClearCurrentExclusiveChannelForCommsFormatByName
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName");
static_assert(sizeof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName) == 0x000008, "Wrong size on DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName");
static_assert(offsetof(DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName::FormatName' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientClearCurrentExclusiveChannelForCommsFormat
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat) == 0x000008, "Wrong size on DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat::FormatName' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientRecvCommMsgFromChannel
// 0x0048 (0x0048 - 0x0000)
struct DFPlayerCommsComponent_ClientRecvCommMsgFromChannel final
{
public:
	class FName                                   SourceFormatName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         SourceChannel;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   ReceivedCommMsg;                                   // 0x0010(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ClientRecvCommMsgFromChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ClientRecvCommMsgFromChannel");
static_assert(sizeof(DFPlayerCommsComponent_ClientRecvCommMsgFromChannel) == 0x000048, "Wrong size on DFPlayerCommsComponent_ClientRecvCommMsgFromChannel");
static_assert(offsetof(DFPlayerCommsComponent_ClientRecvCommMsgFromChannel, SourceFormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ClientRecvCommMsgFromChannel::SourceFormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ClientRecvCommMsgFromChannel, SourceChannel) == 0x000008, "Member 'DFPlayerCommsComponent_ClientRecvCommMsgFromChannel::SourceChannel' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ClientRecvCommMsgFromChannel, ReceivedCommMsg) == 0x000010, "Member 'DFPlayerCommsComponent_ClientRecvCommMsgFromChannel::ReceivedCommMsg' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientUpdateExclusiveChannelToUseForCommsFormat
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         SingleChannelToUse;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat) == 0x000010, "Wrong size on DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat, SingleChannelToUse) == 0x000008, "Member 'DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat::SingleChannelToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ReceiveCommChannelAdded
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ReceiveCommChannelAdded final
{
public:
	class UDFCommChannel*                         AddedChannel;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ReceiveCommChannelAdded) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ReceiveCommChannelAdded");
static_assert(sizeof(DFPlayerCommsComponent_ReceiveCommChannelAdded) == 0x000008, "Wrong size on DFPlayerCommsComponent_ReceiveCommChannelAdded");
static_assert(offsetof(DFPlayerCommsComponent_ReceiveCommChannelAdded, AddedChannel) == 0x000000, "Member 'DFPlayerCommsComponent_ReceiveCommChannelAdded::AddedChannel' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ReceiveCommChannelPreRemoved
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ReceiveCommChannelPreRemoved final
{
public:
	class UDFCommChannel*                         RemovedChannel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ReceiveCommChannelPreRemoved) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ReceiveCommChannelPreRemoved");
static_assert(sizeof(DFPlayerCommsComponent_ReceiveCommChannelPreRemoved) == 0x000008, "Wrong size on DFPlayerCommsComponent_ReceiveCommChannelPreRemoved");
static_assert(offsetof(DFPlayerCommsComponent_ReceiveCommChannelPreRemoved, RemovedChannel) == 0x000000, "Member 'DFPlayerCommsComponent_ReceiveCommChannelPreRemoved::RemovedChannel' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.RemoveCommChannel
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_RemoveCommChannel final
{
public:
	class UDFCommChannel*                         ChannelToRemove;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_RemoveCommChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_RemoveCommChannel");
static_assert(sizeof(DFPlayerCommsComponent_RemoveCommChannel) == 0x000008, "Wrong size on DFPlayerCommsComponent_RemoveCommChannel");
static_assert(offsetof(DFPlayerCommsComponent_RemoveCommChannel, ChannelToRemove) == 0x000000, "Member 'DFPlayerCommsComponent_RemoveCommChannel::ChannelToRemove' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.RemoveCommChannelByName
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_RemoveCommChannelByName final
{
public:
	class FName                                   ChannelNameToRemove;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_RemoveCommChannelByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_RemoveCommChannelByName");
static_assert(sizeof(DFPlayerCommsComponent_RemoveCommChannelByName) == 0x000008, "Wrong size on DFPlayerCommsComponent_RemoveCommChannelByName");
static_assert(offsetof(DFPlayerCommsComponent_RemoveCommChannelByName, ChannelNameToRemove) == 0x000000, "Member 'DFPlayerCommsComponent_RemoveCommChannelByName::ChannelNameToRemove' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.SendCommMsgViaChannel
// 0x0050 (0x0050 - 0x0000)
struct DFPlayerCommsComponent_SendCommMsgViaChannel final
{
public:
	class UDFCommsFormatBase*                     FormatToUse;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReceivingChannel;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsgToSend;                                     // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseChannelAsNewExclusive;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_SendCommMsgViaChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_SendCommMsgViaChannel");
static_assert(sizeof(DFPlayerCommsComponent_SendCommMsgViaChannel) == 0x000050, "Wrong size on DFPlayerCommsComponent_SendCommMsgViaChannel");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannel, FormatToUse) == 0x000000, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannel::FormatToUse' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannel, ReceivingChannel) == 0x000008, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannel::ReceivingChannel' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannel, CommMsgToSend) == 0x000010, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannel::CommMsgToSend' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannel, bUseChannelAsNewExclusive) == 0x000048, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannel::bUseChannelAsNewExclusive' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.SendCommMsgViaChannelByName
// 0x0050 (0x0050 - 0x0000)
struct DFPlayerCommsComponent_SendCommMsgViaChannelByName final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReceivingChannelName;                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsgToSend;                                     // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseChannelAsNewExclusive;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_SendCommMsgViaChannelByName) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_SendCommMsgViaChannelByName");
static_assert(sizeof(DFPlayerCommsComponent_SendCommMsgViaChannelByName) == 0x000050, "Wrong size on DFPlayerCommsComponent_SendCommMsgViaChannelByName");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannelByName, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannelByName, ReceivingChannelName) == 0x000008, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannelByName::ReceivingChannelName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannelByName, CommMsgToSend) == 0x000010, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannelByName::CommMsgToSend' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_SendCommMsgViaChannelByName, bUseChannelAsNewExclusive) == 0x000048, "Member 'DFPlayerCommsComponent_SendCommMsgViaChannelByName::bUseChannelAsNewExclusive' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerChannelOpened
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ServerChannelOpened final
{
public:
	class UDFCommChannel*                         AckedChannel;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerChannelOpened) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ServerChannelOpened");
static_assert(sizeof(DFPlayerCommsComponent_ServerChannelOpened) == 0x000008, "Wrong size on DFPlayerCommsComponent_ServerChannelOpened");
static_assert(offsetof(DFPlayerCommsComponent_ServerChannelOpened, AckedChannel) == 0x000000, "Member 'DFPlayerCommsComponent_ServerChannelOpened::AckedChannel' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerClearCurrentExclusiveChannelForCommsFormat
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat) == 0x000008, "Wrong size on DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat::FormatName' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerRequestExclusiveChannelUsedForCommsFormat
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat final
{
public:
	class FName                                   RequestedFormatName;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat) == 0x000008, "Wrong size on DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat, RequestedFormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat::RequestedFormatName' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerSendCommMsgViaChannel
// 0x0048 (0x0048 - 0x0000)
struct DFPlayerCommsComponent_ServerSendCommMsgViaChannel final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReceivingChannel;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsg;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerSendCommMsgViaChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ServerSendCommMsgViaChannel");
static_assert(sizeof(DFPlayerCommsComponent_ServerSendCommMsgViaChannel) == 0x000048, "Wrong size on DFPlayerCommsComponent_ServerSendCommMsgViaChannel");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaChannel, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaChannel::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaChannel, ReceivingChannel) == 0x000008, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaChannel::ReceivingChannel' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaChannel, CommMsg) == 0x000010, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaChannel::CommMsg' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerSendCommMsgViaExclChannel
// 0x0048 (0x0048 - 0x0000)
struct DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReceivingChannel;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsg;                                           // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel");
static_assert(sizeof(DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel) == 0x000048, "Wrong size on DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel, ReceivingChannel) == 0x000008, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel::ReceivingChannel' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel, CommMsg) == 0x000010, "Member 'DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel::CommMsg' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerUpdateExclusiveChannelToUseForCommsFormat
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         SingleChannelToUse;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat) == 0x000010, "Wrong size on DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat, SingleChannelToUse) == 0x000008, "Member 'DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat::SingleChannelToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.UpdateExclusiveChannelToUseForCommsFormat
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat final
{
public:
	class UDFCommsFormatBase*                     Format;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         SingleChannelToUse;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat) == 0x000010, "Wrong size on DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat, Format) == 0x000000, "Member 'DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat::Format' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat, SingleChannelToUse) == 0x000008, "Member 'DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat::SingleChannelToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.UpdateExclusiveChannelToUseForCommsFormatByName
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SingleChannelNameToUse;                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName");
static_assert(sizeof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName) == 0x000010, "Wrong size on DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName");
static_assert(offsetof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName, SingleChannelNameToUse) == 0x000008, "Member 'DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName::SingleChannelNameToUse' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanRecvCommMsgViaChannel
// 0x0050 (0x0050 - 0x0000)
struct DFPlayerCommsComponent_CanRecvCommMsgViaChannel final
{
public:
	class FName                                   SourceFormatName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceChannelName;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsgToReceive;                                  // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_CanRecvCommMsgViaChannel");
static_assert(sizeof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel) == 0x000050, "Wrong size on DFPlayerCommsComponent_CanRecvCommMsgViaChannel");
static_assert(offsetof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel, SourceFormatName) == 0x000000, "Member 'DFPlayerCommsComponent_CanRecvCommMsgViaChannel::SourceFormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel, SourceChannelName) == 0x000008, "Member 'DFPlayerCommsComponent_CanRecvCommMsgViaChannel::SourceChannelName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel, CommMsgToReceive) == 0x000010, "Member 'DFPlayerCommsComponent_CanRecvCommMsgViaChannel::CommMsgToReceive' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanRecvCommMsgViaChannel, ReturnValue) == 0x000048, "Member 'DFPlayerCommsComponent_CanRecvCommMsgViaChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanSendAndRecvCommMsgViaChannel
// 0x0050 (0x0050 - 0x0000)
struct DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsg;                                           // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel");
static_assert(sizeof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel) == 0x000050, "Wrong size on DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel");
static_assert(offsetof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel, ChannelName) == 0x000008, "Member 'DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel, CommMsg) == 0x000010, "Member 'DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel::CommMsg' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel, ReturnValue) == 0x000048, "Member 'DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanSendCommMsgViaChannel
// 0x0050 (0x0050 - 0x0000)
struct DFPlayerCommsComponent_CanSendCommMsgViaChannel final
{
public:
	class UDFCommsFormatBase*                     ReceivingFormat;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         ReceivingChannel;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFGenericChannelMsg                   CommMsgToSend;                                     // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseChannelAsNewExclusive;                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_CanSendCommMsgViaChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_CanSendCommMsgViaChannel");
static_assert(sizeof(DFPlayerCommsComponent_CanSendCommMsgViaChannel) == 0x000050, "Wrong size on DFPlayerCommsComponent_CanSendCommMsgViaChannel");
static_assert(offsetof(DFPlayerCommsComponent_CanSendCommMsgViaChannel, ReceivingFormat) == 0x000000, "Member 'DFPlayerCommsComponent_CanSendCommMsgViaChannel::ReceivingFormat' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendCommMsgViaChannel, ReceivingChannel) == 0x000008, "Member 'DFPlayerCommsComponent_CanSendCommMsgViaChannel::ReceivingChannel' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendCommMsgViaChannel, CommMsgToSend) == 0x000010, "Member 'DFPlayerCommsComponent_CanSendCommMsgViaChannel::CommMsgToSend' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendCommMsgViaChannel, bUseChannelAsNewExclusive) == 0x000048, "Member 'DFPlayerCommsComponent_CanSendCommMsgViaChannel::bUseChannelAsNewExclusive' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_CanSendCommMsgViaChannel, ReturnValue) == 0x000049, "Member 'DFPlayerCommsComponent_CanSendCommMsgViaChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsAssociatedCommsFormat
// 0x000C (0x000C - 0x0000)
struct DFPlayerCommsComponent_ContainsAssociatedCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_ContainsAssociatedCommsFormat) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ContainsAssociatedCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_ContainsAssociatedCommsFormat) == 0x00000C, "Wrong size on DFPlayerCommsComponent_ContainsAssociatedCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_ContainsAssociatedCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_ContainsAssociatedCommsFormat::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ContainsAssociatedCommsFormat, ReturnValue) == 0x000008, "Member 'DFPlayerCommsComponent_ContainsAssociatedCommsFormat::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsCommChannel
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_ContainsCommChannel final
{
public:
	const class UDFCommChannel*                   ChannelToCheck;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_ContainsCommChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_ContainsCommChannel");
static_assert(sizeof(DFPlayerCommsComponent_ContainsCommChannel) == 0x000010, "Wrong size on DFPlayerCommsComponent_ContainsCommChannel");
static_assert(offsetof(DFPlayerCommsComponent_ContainsCommChannel, ChannelToCheck) == 0x000000, "Member 'DFPlayerCommsComponent_ContainsCommChannel::ChannelToCheck' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ContainsCommChannel, ReturnValue) == 0x000008, "Member 'DFPlayerCommsComponent_ContainsCommChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsCommChannelByName
// 0x000C (0x000C - 0x0000)
struct DFPlayerCommsComponent_ContainsCommChannelByName final
{
public:
	class FName                                   ChannelNameToCheck;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_ContainsCommChannelByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_ContainsCommChannelByName");
static_assert(sizeof(DFPlayerCommsComponent_ContainsCommChannelByName) == 0x00000C, "Wrong size on DFPlayerCommsComponent_ContainsCommChannelByName");
static_assert(offsetof(DFPlayerCommsComponent_ContainsCommChannelByName, ChannelNameToCheck) == 0x000000, "Member 'DFPlayerCommsComponent_ContainsCommChannelByName::ChannelNameToCheck' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_ContainsCommChannelByName, ReturnValue) == 0x000008, "Member 'DFPlayerCommsComponent_ContainsCommChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FindAssociatedCommsFormat
// 0x0018 (0x0018 - 0x0000)
struct DFPlayerCommsComponent_FindAssociatedCommsFormat final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommsFormatBase*                     OutFormatFound;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FindAssociatedCommsFormat) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_FindAssociatedCommsFormat");
static_assert(sizeof(DFPlayerCommsComponent_FindAssociatedCommsFormat) == 0x000018, "Wrong size on DFPlayerCommsComponent_FindAssociatedCommsFormat");
static_assert(offsetof(DFPlayerCommsComponent_FindAssociatedCommsFormat, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_FindAssociatedCommsFormat::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FindAssociatedCommsFormat, OutFormatFound) == 0x000008, "Member 'DFPlayerCommsComponent_FindAssociatedCommsFormat::OutFormatFound' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FindAssociatedCommsFormat, ReturnValue) == 0x000010, "Member 'DFPlayerCommsComponent_FindAssociatedCommsFormat::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FindCommChannel
// 0x0018 (0x0018 - 0x0000)
struct DFPlayerCommsComponent_FindCommChannel final
{
public:
	class FName                                   ChannelName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFCommChannel*                         OutChannelFound;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FindCommChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_FindCommChannel");
static_assert(sizeof(DFPlayerCommsComponent_FindCommChannel) == 0x000018, "Wrong size on DFPlayerCommsComponent_FindCommChannel");
static_assert(offsetof(DFPlayerCommsComponent_FindCommChannel, ChannelName) == 0x000000, "Member 'DFPlayerCommsComponent_FindCommChannel::ChannelName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FindCommChannel, OutChannelFound) == 0x000008, "Member 'DFPlayerCommsComponent_FindCommChannel::OutChannelFound' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FindCommChannel, ReturnValue) == 0x000010, "Member 'DFPlayerCommsComponent_FindCommChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatHasExclusiveChannel
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerCommsComponent_FormatHasExclusiveChannel final
{
public:
	const class UDFCommsFormatBase*               Format;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FormatHasExclusiveChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_FormatHasExclusiveChannel");
static_assert(sizeof(DFPlayerCommsComponent_FormatHasExclusiveChannel) == 0x000010, "Wrong size on DFPlayerCommsComponent_FormatHasExclusiveChannel");
static_assert(offsetof(DFPlayerCommsComponent_FormatHasExclusiveChannel, Format) == 0x000000, "Member 'DFPlayerCommsComponent_FormatHasExclusiveChannel::Format' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatHasExclusiveChannel, ReturnValue) == 0x000008, "Member 'DFPlayerCommsComponent_FormatHasExclusiveChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatHasExclusiveChannelByName
// 0x000C (0x000C - 0x0000)
struct DFPlayerCommsComponent_FormatHasExclusiveChannelByName final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FormatHasExclusiveChannelByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_FormatHasExclusiveChannelByName");
static_assert(sizeof(DFPlayerCommsComponent_FormatHasExclusiveChannelByName) == 0x00000C, "Wrong size on DFPlayerCommsComponent_FormatHasExclusiveChannelByName");
static_assert(offsetof(DFPlayerCommsComponent_FormatHasExclusiveChannelByName, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_FormatHasExclusiveChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatHasExclusiveChannelByName, ReturnValue) == 0x000008, "Member 'DFPlayerCommsComponent_FormatHasExclusiveChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatUsesChannel
// 0x0018 (0x0018 - 0x0000)
struct DFPlayerCommsComponent_FormatUsesChannel final
{
public:
	const class UDFCommsFormatBase*               Format;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommChannel*                   ChannelToCheck;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FormatUsesChannel) == 0x000008, "Wrong alignment on DFPlayerCommsComponent_FormatUsesChannel");
static_assert(sizeof(DFPlayerCommsComponent_FormatUsesChannel) == 0x000018, "Wrong size on DFPlayerCommsComponent_FormatUsesChannel");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannel, Format) == 0x000000, "Member 'DFPlayerCommsComponent_FormatUsesChannel::Format' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannel, ChannelToCheck) == 0x000008, "Member 'DFPlayerCommsComponent_FormatUsesChannel::ChannelToCheck' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannel, ReturnValue) == 0x000010, "Member 'DFPlayerCommsComponent_FormatUsesChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatUsesChannelByName
// 0x0014 (0x0014 - 0x0000)
struct DFPlayerCommsComponent_FormatUsesChannelByName final
{
public:
	class FName                                   FormatName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChannelNameToCheck;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPlayerCommsComponent_FormatUsesChannelByName) == 0x000004, "Wrong alignment on DFPlayerCommsComponent_FormatUsesChannelByName");
static_assert(sizeof(DFPlayerCommsComponent_FormatUsesChannelByName) == 0x000014, "Wrong size on DFPlayerCommsComponent_FormatUsesChannelByName");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannelByName, FormatName) == 0x000000, "Member 'DFPlayerCommsComponent_FormatUsesChannelByName::FormatName' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannelByName, ChannelNameToCheck) == 0x000008, "Member 'DFPlayerCommsComponent_FormatUsesChannelByName::ChannelNameToCheck' has a wrong offset!");
static_assert(offsetof(DFPlayerCommsComponent_FormatUsesChannelByName, ReturnValue) == 0x000010, "Member 'DFPlayerCommsComponent_FormatUsesChannelByName::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommsFormat.OnTalkerPSDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DFVOIPCommsFormat_OnTalkerPSDestroyed final
{
public:
	class AActor*                                 DestroyedPS;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFVOIPCommsFormat_OnTalkerPSDestroyed) == 0x000008, "Wrong alignment on DFVOIPCommsFormat_OnTalkerPSDestroyed");
static_assert(sizeof(DFVOIPCommsFormat_OnTalkerPSDestroyed) == 0x000008, "Wrong size on DFVOIPCommsFormat_OnTalkerPSDestroyed");
static_assert(offsetof(DFVOIPCommsFormat_OnTalkerPSDestroyed, DestroyedPS) == 0x000000, "Member 'DFVOIPCommsFormat_OnTalkerPSDestroyed::DestroyedPS' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.ApplyVOIPTalkerSettingsForPlayer
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer final
{
public:
	const class APlayerState*                     TalkerPlayerState;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ListenerLocalUserNum;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer) == 0x000008, "Wrong alignment on DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer");
static_assert(sizeof(DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer) == 0x000010, "Wrong size on DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer");
static_assert(offsetof(DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer, TalkerPlayerState) == 0x000000, "Member 'DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer::TalkerPlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer, ListenerLocalUserNum) == 0x000008, "Member 'DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer::ListenerLocalUserNum' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.GetValidVoiceEntryForPlayer
// 0x0018 (0x0018 - 0x0000)
struct DFVOIPCommStatics_GetValidVoiceEntryForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFPlayerVOIPTalkingState              ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFVOIPCommStatics_GetValidVoiceEntryForPlayer) == 0x000008, "Wrong alignment on DFVOIPCommStatics_GetValidVoiceEntryForPlayer");
static_assert(sizeof(DFVOIPCommStatics_GetValidVoiceEntryForPlayer) == 0x000018, "Wrong size on DFVOIPCommStatics_GetValidVoiceEntryForPlayer");
static_assert(offsetof(DFVOIPCommStatics_GetValidVoiceEntryForPlayer, PlayerState) == 0x000000, "Member 'DFVOIPCommStatics_GetValidVoiceEntryForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_GetValidVoiceEntryForPlayer, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_GetValidVoiceEntryForPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.GetVoiceSynthComponentForVOIPTalker
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker final
{
public:
	class UVOIPTalker*                            Talker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoipListenerSynthComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker) == 0x000008, "Wrong alignment on DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker");
static_assert(sizeof(DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker) == 0x000010, "Wrong size on DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker");
static_assert(offsetof(DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker, Talker) == 0x000000, "Member 'DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker::Talker' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.GetVoiceSynthOwnerOfAudioComponent
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent final
{
public:
	class UAudioComponent*                        TalkerAudioComp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoipListenerSynthComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent) == 0x000008, "Wrong alignment on DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent");
static_assert(sizeof(DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent) == 0x000010, "Wrong size on DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent");
static_assert(offsetof(DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent, TalkerAudioComp) == 0x000000, "Member 'DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent::TalkerAudioComp' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalkerPendingReset
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_IsPlayerTalkerPendingReset final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFVOIPCommStatics_IsPlayerTalkerPendingReset) == 0x000008, "Wrong alignment on DFVOIPCommStatics_IsPlayerTalkerPendingReset");
static_assert(sizeof(DFVOIPCommStatics_IsPlayerTalkerPendingReset) == 0x000010, "Wrong size on DFVOIPCommStatics_IsPlayerTalkerPendingReset");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalkerPendingReset, PlayerState) == 0x000000, "Member 'DFVOIPCommStatics_IsPlayerTalkerPendingReset::PlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalkerPendingReset, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_IsPlayerTalkerPendingReset::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalking
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_IsPlayerTalking final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFVOIPCommStatics_IsPlayerTalking) == 0x000008, "Wrong alignment on DFVOIPCommStatics_IsPlayerTalking");
static_assert(sizeof(DFVOIPCommStatics_IsPlayerTalking) == 0x000010, "Wrong size on DFVOIPCommStatics_IsPlayerTalking");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalking, PlayerState) == 0x000000, "Member 'DFVOIPCommStatics_IsPlayerTalking::PlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalking, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_IsPlayerTalking::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalkingOverChannel
// 0x0018 (0x0018 - 0x0000)
struct DFVOIPCommStatics_IsPlayerTalkingOverChannel final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDFCommChannel*                   TalkChannel;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFVOIPCommStatics_IsPlayerTalkingOverChannel) == 0x000008, "Wrong alignment on DFVOIPCommStatics_IsPlayerTalkingOverChannel");
static_assert(sizeof(DFVOIPCommStatics_IsPlayerTalkingOverChannel) == 0x000018, "Wrong size on DFVOIPCommStatics_IsPlayerTalkingOverChannel");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalkingOverChannel, PlayerState) == 0x000000, "Member 'DFVOIPCommStatics_IsPlayerTalkingOverChannel::PlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalkingOverChannel, TalkChannel) == 0x000008, "Member 'DFVOIPCommStatics_IsPlayerTalkingOverChannel::TalkChannel' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_IsPlayerTalkingOverChannel, ReturnValue) == 0x000010, "Member 'DFVOIPCommStatics_IsPlayerTalkingOverChannel::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkComms.DFVOIPCommStatics.WasPlayerTalking
// 0x0010 (0x0010 - 0x0000)
struct DFVOIPCommStatics_WasPlayerTalking final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFVOIPCommStatics_WasPlayerTalking) == 0x000008, "Wrong alignment on DFVOIPCommStatics_WasPlayerTalking");
static_assert(sizeof(DFVOIPCommStatics_WasPlayerTalking) == 0x000010, "Wrong size on DFVOIPCommStatics_WasPlayerTalking");
static_assert(offsetof(DFVOIPCommStatics_WasPlayerTalking, PlayerState) == 0x000000, "Member 'DFVOIPCommStatics_WasPlayerTalking::PlayerState' has a wrong offset!");
static_assert(offsetof(DFVOIPCommStatics_WasPlayerTalking, ReturnValue) == 0x000008, "Member 'DFVOIPCommStatics_WasPlayerTalking::ReturnValue' has a wrong offset!");

}

