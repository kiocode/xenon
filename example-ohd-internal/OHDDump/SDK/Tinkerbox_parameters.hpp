#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tinkerbox

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Tinkerbox.TBGameInstance.LoadMainMenu
// 0x0001 (0x0001 - 0x0000)
struct TBGameInstance_LoadMainMenu final
{
public:
	bool                                          bExclusive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameInstance_LoadMainMenu) == 0x000001, "Wrong alignment on TBGameInstance_LoadMainMenu");
static_assert(sizeof(TBGameInstance_LoadMainMenu) == 0x000001, "Wrong size on TBGameInstance_LoadMainMenu");
static_assert(offsetof(TBGameInstance_LoadMainMenu, bExclusive) == 0x000000, "Member 'TBGameInstance_LoadMainMenu::bExclusive' has a wrong offset!");

// Function Tinkerbox.TBGameInstance.GetCurrentSessionHostAddressStr
// 0x0018 (0x0018 - 0x0000)
struct TBGameInstance_GetCurrentSessionHostAddressStr final
{
public:
	class FString                                 OutHostAddrStr;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferSteamP2PAddr;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendPort;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TBGameInstance_GetCurrentSessionHostAddressStr) == 0x000008, "Wrong alignment on TBGameInstance_GetCurrentSessionHostAddressStr");
static_assert(sizeof(TBGameInstance_GetCurrentSessionHostAddressStr) == 0x000018, "Wrong size on TBGameInstance_GetCurrentSessionHostAddressStr");
static_assert(offsetof(TBGameInstance_GetCurrentSessionHostAddressStr, OutHostAddrStr) == 0x000000, "Member 'TBGameInstance_GetCurrentSessionHostAddressStr::OutHostAddrStr' has a wrong offset!");
static_assert(offsetof(TBGameInstance_GetCurrentSessionHostAddressStr, bPreferSteamP2PAddr) == 0x000010, "Member 'TBGameInstance_GetCurrentSessionHostAddressStr::bPreferSteamP2PAddr' has a wrong offset!");
static_assert(offsetof(TBGameInstance_GetCurrentSessionHostAddressStr, bAppendPort) == 0x000011, "Member 'TBGameInstance_GetCurrentSessionHostAddressStr::bAppendPort' has a wrong offset!");
static_assert(offsetof(TBGameInstance_GetCurrentSessionHostAddressStr, ReturnValue) == 0x000012, "Member 'TBGameInstance_GetCurrentSessionHostAddressStr::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.EnableHeadphoneMode
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_EnableHeadphoneMode final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_EnableHeadphoneMode) == 0x000001, "Wrong alignment on TBGameUserSettings_EnableHeadphoneMode");
static_assert(sizeof(TBGameUserSettings_EnableHeadphoneMode) == 0x000001, "Wrong size on TBGameUserSettings_EnableHeadphoneMode");
static_assert(offsetof(TBGameUserSettings_EnableHeadphoneMode, bEnabled) == 0x000000, "Member 'TBGameUserSettings_EnableHeadphoneMode::bEnabled' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.FirstRunHardwareBenchmark
// 0x0010 (0x0010 - 0x0000)
struct TBGameUserSettings_FirstRunHardwareBenchmark final
{
public:
	int32                                         WorkScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPUMultiplier;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUMultiplier;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TBGameUserSettings_FirstRunHardwareBenchmark) == 0x000004, "Wrong alignment on TBGameUserSettings_FirstRunHardwareBenchmark");
static_assert(sizeof(TBGameUserSettings_FirstRunHardwareBenchmark) == 0x000010, "Wrong size on TBGameUserSettings_FirstRunHardwareBenchmark");
static_assert(offsetof(TBGameUserSettings_FirstRunHardwareBenchmark, WorkScale) == 0x000000, "Member 'TBGameUserSettings_FirstRunHardwareBenchmark::WorkScale' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_FirstRunHardwareBenchmark, CPUMultiplier) == 0x000004, "Member 'TBGameUserSettings_FirstRunHardwareBenchmark::CPUMultiplier' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_FirstRunHardwareBenchmark, GPUMultiplier) == 0x000008, "Member 'TBGameUserSettings_FirstRunHardwareBenchmark::GPUMultiplier' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_FirstRunHardwareBenchmark, ReturnValue) == 0x00000C, "Member 'TBGameUserSettings_FirstRunHardwareBenchmark::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsPlayerChangingKeyBindings
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsPlayerChangingKeyBindings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsPlayerChangingKeyBindings) == 0x000001, "Wrong alignment on TBGameUserSettings_IsPlayerChangingKeyBindings");
static_assert(sizeof(TBGameUserSettings_IsPlayerChangingKeyBindings) == 0x000001, "Wrong size on TBGameUserSettings_IsPlayerChangingKeyBindings");
static_assert(offsetof(TBGameUserSettings_IsPlayerChangingKeyBindings, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsPlayerChangingKeyBindings::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetAimDownSightsKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetAimDownSightsKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetAimDownSightsKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetAimDownSightsKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetAimDownSightsKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetAimDownSightsKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetAimDownSightsKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetAimDownSightsKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetAimDownSightsToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetAimDownSightsToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetAimDownSightsToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetAimDownSightsToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetAimDownSightsToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetAimDownSightsToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetAimDownSightsToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetAimDownSightsToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetAllowSoundInBackground
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetAllowSoundInBackground final
{
public:
	bool                                          bAllow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetAllowSoundInBackground) == 0x000001, "Wrong alignment on TBGameUserSettings_SetAllowSoundInBackground");
static_assert(sizeof(TBGameUserSettings_SetAllowSoundInBackground) == 0x000001, "Wrong size on TBGameUserSettings_SetAllowSoundInBackground");
static_assert(offsetof(TBGameUserSettings_SetAllowSoundInBackground, bAllow) == 0x000000, "Member 'TBGameUserSettings_SetAllowSoundInBackground::bAllow' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetCameraToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetCameraToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetCameraToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetCameraToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetCameraToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetCameraToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetCameraToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetCameraToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetChatHistoryKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetChatHistoryKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetChatHistoryKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetChatHistoryKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetChatHistoryKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetChatHistoryKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetChatHistoryKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetChatHistoryKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetConsoleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetConsoleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetConsoleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetConsoleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetConsoleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetConsoleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetConsoleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetConsoleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetCrouchKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetCrouchKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetCrouchKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetCrouchKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetCrouchKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetCrouchKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetCrouchKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetCrouchKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetCrouchToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetCrouchToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetCrouchToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetCrouchToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetCrouchToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetCrouchToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetCrouchToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetCrouchToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetCycleWeaponSightsKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetCycleWeaponSightsKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetCycleWeaponSightsKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetCycleWeaponSightsKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetCycleWeaponSightsKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetCycleWeaponSightsKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetCycleWeaponSightsKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetCycleWeaponSightsKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetDeployMenuKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetDeployMenuKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetDeployMenuKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetDeployMenuKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetDeployMenuKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetDeployMenuKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetDeployMenuKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetDeployMenuKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetDialogueVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetDialogueVolumeLevel final
{
public:
	float                                         DialogueVolume;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetDialogueVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_SetDialogueVolumeLevel");
static_assert(sizeof(TBGameUserSettings_SetDialogueVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_SetDialogueVolumeLevel");
static_assert(offsetof(TBGameUserSettings_SetDialogueVolumeLevel, DialogueVolume) == 0x000000, "Member 'TBGameUserSettings_SetDialogueVolumeLevel::DialogueVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetDialogueVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetDialogueVolumeLevelNormalized final
{
public:
	float                                         NormDialogueVolume;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetDialogueVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetDialogueVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_SetDialogueVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_SetDialogueVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_SetDialogueVolumeLevelNormalized, NormDialogueVolume) == 0x000000, "Member 'TBGameUserSettings_SetDialogueVolumeLevelNormalized::NormDialogueVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetDisplayGamma final
{
public:
	float                                         NewGamma;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetDisplayGamma) == 0x000004, "Wrong alignment on TBGameUserSettings_SetDisplayGamma");
static_assert(sizeof(TBGameUserSettings_SetDisplayGamma) == 0x000004, "Wrong size on TBGameUserSettings_SetDisplayGamma");
static_assert(offsetof(TBGameUserSettings_SetDisplayGamma, NewGamma) == 0x000000, "Member 'TBGameUserSettings_SetDisplayGamma::NewGamma' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetFieldOfView final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetFieldOfView) == 0x000004, "Wrong alignment on TBGameUserSettings_SetFieldOfView");
static_assert(sizeof(TBGameUserSettings_SetFieldOfView) == 0x000004, "Wrong size on TBGameUserSettings_SetFieldOfView");
static_assert(offsetof(TBGameUserSettings_SetFieldOfView, NewFOV) == 0x000000, "Member 'TBGameUserSettings_SetFieldOfView::NewFOV' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetFireKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetFireKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetFireKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetFireKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetFireKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetFireKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetFireKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetFireKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetInvertMousePitch
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetInvertMousePitch final
{
public:
	bool                                          bInvertPitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetInvertMousePitch) == 0x000001, "Wrong alignment on TBGameUserSettings_SetInvertMousePitch");
static_assert(sizeof(TBGameUserSettings_SetInvertMousePitch) == 0x000001, "Wrong size on TBGameUserSettings_SetInvertMousePitch");
static_assert(offsetof(TBGameUserSettings_SetInvertMousePitch, bInvertPitch) == 0x000000, "Member 'TBGameUserSettings_SetInvertMousePitch::bInvertPitch' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetJumpKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetJumpKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetJumpKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetJumpKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetJumpKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetJumpKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetJumpKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetJumpKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetJumpVaultKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetJumpVaultKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetJumpVaultKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetJumpVaultKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetJumpVaultKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetJumpVaultKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetJumpVaultKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetJumpVaultKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetLeanLeftKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetLeanLeftKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetLeanLeftKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetLeanLeftKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetLeanLeftKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetLeanLeftKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetLeanLeftKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetLeanLeftKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetLeanLeftToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetLeanLeftToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetLeanLeftToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetLeanLeftToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetLeanLeftToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetLeanLeftToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetLeanLeftToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetLeanLeftToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetLeanRightKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetLeanRightKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetLeanRightKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetLeanRightKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetLeanRightKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetLeanRightKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetLeanRightKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetLeanRightKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetLeanRightToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetLeanRightToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetLeanRightToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetLeanRightToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetLeanRightToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetLeanRightToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetLeanRightToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetLeanRightToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMasterVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetMasterVolumeLevel final
{
public:
	float                                         MasterVolume;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMasterVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMasterVolumeLevel");
static_assert(sizeof(TBGameUserSettings_SetMasterVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_SetMasterVolumeLevel");
static_assert(offsetof(TBGameUserSettings_SetMasterVolumeLevel, MasterVolume) == 0x000000, "Member 'TBGameUserSettings_SetMasterVolumeLevel::MasterVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMasterVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetMasterVolumeLevelNormalized final
{
public:
	float                                         NormMasterVolume;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMasterVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMasterVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_SetMasterVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_SetMasterVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_SetMasterVolumeLevelNormalized, NormMasterVolume) == 0x000000, "Member 'TBGameUserSettings_SetMasterVolumeLevelNormalized::NormMasterVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetMotionBlurEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMotionBlurEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_SetMotionBlurEnabled");
static_assert(sizeof(TBGameUserSettings_SetMotionBlurEnabled) == 0x000001, "Wrong size on TBGameUserSettings_SetMotionBlurEnabled");
static_assert(offsetof(TBGameUserSettings_SetMotionBlurEnabled, bEnabled) == 0x000000, "Member 'TBGameUserSettings_SetMotionBlurEnabled::bEnabled' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMouseSensitivity
// 0x0008 (0x0008 - 0x0000)
struct TBGameUserSettings_SetMouseSensitivity final
{
public:
	float                                         SensitivityX;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityY;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMouseSensitivity) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMouseSensitivity");
static_assert(sizeof(TBGameUserSettings_SetMouseSensitivity) == 0x000008, "Wrong size on TBGameUserSettings_SetMouseSensitivity");
static_assert(offsetof(TBGameUserSettings_SetMouseSensitivity, SensitivityX) == 0x000000, "Member 'TBGameUserSettings_SetMouseSensitivity::SensitivityX' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_SetMouseSensitivity, SensitivityY) == 0x000004, "Member 'TBGameUserSettings_SetMouseSensitivity::SensitivityY' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMouseSensitivityNormalized
// 0x0008 (0x0008 - 0x0000)
struct TBGameUserSettings_SetMouseSensitivityNormalized final
{
public:
	float                                         NormSensitivityX;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormSensitivityY;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMouseSensitivityNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMouseSensitivityNormalized");
static_assert(sizeof(TBGameUserSettings_SetMouseSensitivityNormalized) == 0x000008, "Wrong size on TBGameUserSettings_SetMouseSensitivityNormalized");
static_assert(offsetof(TBGameUserSettings_SetMouseSensitivityNormalized, NormSensitivityX) == 0x000000, "Member 'TBGameUserSettings_SetMouseSensitivityNormalized::NormSensitivityX' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_SetMouseSensitivityNormalized, NormSensitivityY) == 0x000004, "Member 'TBGameUserSettings_SetMouseSensitivityNormalized::NormSensitivityY' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMoveBackwardKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetMoveBackwardKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMoveBackwardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetMoveBackwardKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetMoveBackwardKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetMoveBackwardKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetMoveBackwardKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetMoveBackwardKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMoveForwardKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetMoveForwardKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMoveForwardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetMoveForwardKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetMoveForwardKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetMoveForwardKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetMoveForwardKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetMoveForwardKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMoveLeftKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetMoveLeftKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMoveLeftKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetMoveLeftKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetMoveLeftKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetMoveLeftKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetMoveLeftKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetMoveLeftKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMoveRightKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetMoveRightKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMoveRightKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetMoveRightKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetMoveRightKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetMoveRightKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetMoveRightKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetMoveRightKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMusicVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetMusicVolumeLevel final
{
public:
	float                                         MusicVolume;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMusicVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMusicVolumeLevel");
static_assert(sizeof(TBGameUserSettings_SetMusicVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_SetMusicVolumeLevel");
static_assert(offsetof(TBGameUserSettings_SetMusicVolumeLevel, MusicVolume) == 0x000000, "Member 'TBGameUserSettings_SetMusicVolumeLevel::MusicVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetMusicVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetMusicVolumeLevelNormalized final
{
public:
	float                                         NormMusicVolume;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetMusicVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetMusicVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_SetMusicVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_SetMusicVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_SetMusicVolumeLevelNormalized, NormMusicVolume) == 0x000000, "Member 'TBGameUserSettings_SetMusicVolumeLevelNormalized::NormMusicVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetNextItemKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetNextItemKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetNextItemKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetNextItemKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetNextItemKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetNextItemKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetNextItemKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetNextItemKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPlayerIsChangingKeyBindings
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetPlayerIsChangingKeyBindings final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPlayerIsChangingKeyBindings) == 0x000001, "Wrong alignment on TBGameUserSettings_SetPlayerIsChangingKeyBindings");
static_assert(sizeof(TBGameUserSettings_SetPlayerIsChangingKeyBindings) == 0x000001, "Wrong size on TBGameUserSettings_SetPlayerIsChangingKeyBindings");
static_assert(offsetof(TBGameUserSettings_SetPlayerIsChangingKeyBindings, NewValue) == 0x000000, "Member 'TBGameUserSettings_SetPlayerIsChangingKeyBindings::NewValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPointAimToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetPointAimToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPointAimToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetPointAimToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetPointAimToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetPointAimToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetPointAimToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetPointAimToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPreviousItemKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetPreviousItemKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPreviousItemKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetPreviousItemKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetPreviousItemKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetPreviousItemKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetPreviousItemKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetPreviousItemKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetProneKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetProneKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetProneKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetProneKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetProneKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetProneKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetProneKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetProneKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPushToTalkCommandKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetPushToTalkCommandKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPushToTalkCommandKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetPushToTalkCommandKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetPushToTalkCommandKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetPushToTalkCommandKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetPushToTalkCommandKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetPushToTalkCommandKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPushToTalkLocalKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetPushToTalkLocalKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPushToTalkLocalKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetPushToTalkLocalKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetPushToTalkLocalKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetPushToTalkLocalKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetPushToTalkLocalKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetPushToTalkLocalKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetPushToTalkSquadKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetPushToTalkSquadKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetPushToTalkSquadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetPushToTalkSquadKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetPushToTalkSquadKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetPushToTalkSquadKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetPushToTalkSquadKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetPushToTalkSquadKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetRadialMenuKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetRadialMenuKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetRadialMenuKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetRadialMenuKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetRadialMenuKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetRadialMenuKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetRadialMenuKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetRadialMenuKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetReloadKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetReloadKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetReloadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetReloadKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetReloadKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetReloadKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetReloadKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetReloadKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSayAllKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSayAllKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSayAllKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSayAllKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSayAllKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSayAllKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSayAllKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSayAllKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSaySquadKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSaySquadKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSaySquadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSaySquadKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSaySquadKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSaySquadKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSaySquadKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSaySquadKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSayTeamKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSayTeamKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSayTeamKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSayTeamKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSayTeamKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSayTeamKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSayTeamKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSayTeamKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetShowScoreboardKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetShowScoreboardKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetShowScoreboardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetShowScoreboardKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetShowScoreboardKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetShowScoreboardKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetShowScoreboardKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetShowScoreboardKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSmoothFrameRateEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetSmoothFrameRateEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSmoothFrameRateEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_SetSmoothFrameRateEnabled");
static_assert(sizeof(TBGameUserSettings_SetSmoothFrameRateEnabled) == 0x000001, "Wrong size on TBGameUserSettings_SetSmoothFrameRateEnabled");
static_assert(offsetof(TBGameUserSettings_SetSmoothFrameRateEnabled, bEnabled) == 0x000000, "Member 'TBGameUserSettings_SetSmoothFrameRateEnabled::bEnabled' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSmoothMouseEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetSmoothMouseEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSmoothMouseEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_SetSmoothMouseEnabled");
static_assert(sizeof(TBGameUserSettings_SetSmoothMouseEnabled) == 0x000001, "Wrong size on TBGameUserSettings_SetSmoothMouseEnabled");
static_assert(offsetof(TBGameUserSettings_SetSmoothMouseEnabled, bEnable) == 0x000000, "Member 'TBGameUserSettings_SetSmoothMouseEnabled::bEnable' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSoundEffectsVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetSoundEffectsVolumeLevel final
{
public:
	float                                         SFXVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSoundEffectsVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_SetSoundEffectsVolumeLevel");
static_assert(sizeof(TBGameUserSettings_SetSoundEffectsVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_SetSoundEffectsVolumeLevel");
static_assert(offsetof(TBGameUserSettings_SetSoundEffectsVolumeLevel, SFXVolume) == 0x000000, "Member 'TBGameUserSettings_SetSoundEffectsVolumeLevel::SFXVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSoundEffectsVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized final
{
public:
	float                                         NormSFXVolume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized, NormSFXVolume) == 0x000000, "Member 'TBGameUserSettings_SetSoundEffectsVolumeLevelNormalized::NormSFXVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSprintKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSprintKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSprintKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSprintKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSprintKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSprintKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSprintKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSprintKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSprintToggleKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSprintToggleKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSprintToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSprintToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSprintToggleKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSprintToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSprintToggleKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSprintToggleKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSwitchFireModeKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetSwitchFireModeKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSwitchFireModeKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetSwitchFireModeKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetSwitchFireModeKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetSwitchFireModeKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetSwitchFireModeKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetSwitchFireModeKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetSwitchFireModeOnReselect
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_SetSwitchFireModeOnReselect final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetSwitchFireModeOnReselect) == 0x000001, "Wrong alignment on TBGameUserSettings_SetSwitchFireModeOnReselect");
static_assert(sizeof(TBGameUserSettings_SetSwitchFireModeOnReselect) == 0x000001, "Wrong size on TBGameUserSettings_SetSwitchFireModeOnReselect");
static_assert(offsetof(TBGameUserSettings_SetSwitchFireModeOnReselect, bEnable) == 0x000000, "Member 'TBGameUserSettings_SetSwitchFireModeOnReselect::bEnable' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetUseKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetUseKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetUseKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetUseKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetUseKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetUseKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetUseKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetUseKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetVaultKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetVaultKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetVaultKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetVaultKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetVaultKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetVaultKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetVaultKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetVaultKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetVoiceVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetVoiceVolumeLevel final
{
public:
	float                                         VoiceVolume;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetVoiceVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_SetVoiceVolumeLevel");
static_assert(sizeof(TBGameUserSettings_SetVoiceVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_SetVoiceVolumeLevel");
static_assert(offsetof(TBGameUserSettings_SetVoiceVolumeLevel, VoiceVolume) == 0x000000, "Member 'TBGameUserSettings_SetVoiceVolumeLevel::VoiceVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetVoiceVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_SetVoiceVolumeLevelNormalized final
{
public:
	float                                         NormVoiceVolume;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetVoiceVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_SetVoiceVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_SetVoiceVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_SetVoiceVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_SetVoiceVolumeLevelNormalized, NormVoiceVolume) == 0x000000, "Member 'TBGameUserSettings_SetVoiceVolumeLevelNormalized::NormVoiceVolume' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetVoteNoKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetVoteNoKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetVoteNoKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetVoteNoKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetVoteNoKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetVoteNoKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetVoteNoKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetVoteNoKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetVoteYesKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetVoteYesKeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetVoteYesKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetVoteYesKeyBinding");
static_assert(sizeof(TBGameUserSettings_SetVoteYesKeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetVoteYesKeyBinding");
static_assert(offsetof(TBGameUserSettings_SetVoteYesKeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetVoteYesKeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot0KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot0KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot0KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot0KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot0KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot0KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot0KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot0KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot1KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot1KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot1KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot1KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot1KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot1KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot1KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot1KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot2KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot2KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot2KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot2KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot2KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot2KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot2KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot2KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot3KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot3KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot3KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot3KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot3KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot3KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot3KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot3KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot4KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot4KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot4KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot4KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot4KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot4KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot4KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot4KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot5KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot5KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot5KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot5KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot5KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot5KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot5KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot5KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot6KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot6KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot6KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot6KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot6KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot6KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot6KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot6KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot7KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot7KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot7KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot7KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot7KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot7KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot7KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot7KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot8KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot8KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot8KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot8KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot8KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot8KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot8KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot8KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.SetWeaponSlot9KeyBinding
// 0x0020 (0x0020 - 0x0000)
struct TBGameUserSettings_SetWeaponSlot9KeyBinding final
{
public:
	struct FInputChord                            NewKey;                                            // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_SetWeaponSlot9KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_SetWeaponSlot9KeyBinding");
static_assert(sizeof(TBGameUserSettings_SetWeaponSlot9KeyBinding) == 0x000020, "Wrong size on TBGameUserSettings_SetWeaponSlot9KeyBinding");
static_assert(offsetof(TBGameUserSettings_SetWeaponSlot9KeyBinding, NewKey) == 0x000000, "Member 'TBGameUserSettings_SetWeaponSlot9KeyBinding::NewKey' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetAimDownSightsKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetAimDownSightsKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetAimDownSightsKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetAimDownSightsKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetAimDownSightsKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetAimDownSightsKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetAimDownSightsKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetAimDownSightsKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetAimDownSightsToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetAimDownSightsToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetAimDownSightsToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetAimDownSightsToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetAimDownSightsToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetAimDownSightsToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetAimDownSightsToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetAimDownSightsToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetCameraToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetCameraToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetCameraToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetCameraToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetCameraToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetCameraToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetCameraToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetCameraToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetChatHistoryKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetChatHistoryKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetChatHistoryKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetChatHistoryKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetChatHistoryKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetChatHistoryKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetChatHistoryKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetChatHistoryKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetConsoleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetConsoleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetConsoleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetConsoleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetConsoleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetConsoleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetConsoleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetConsoleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetCrouchKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetCrouchKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetCrouchKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetCrouchKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetCrouchKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetCrouchKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetCrouchKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetCrouchKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetCrouchToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetCrouchToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetCrouchToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetCrouchToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetCrouchToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetCrouchToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetCrouchToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetCrouchToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetCycleWeaponSightsKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetCycleWeaponSightsKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetCycleWeaponSightsKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetCycleWeaponSightsKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetCycleWeaponSightsKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetCycleWeaponSightsKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetCycleWeaponSightsKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetCycleWeaponSightsKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetDeployMenuKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetDeployMenuKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetDeployMenuKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetDeployMenuKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetDeployMenuKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetDeployMenuKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetDeployMenuKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetDeployMenuKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetDialogueVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetDialogueVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetDialogueVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetDialogueVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetDialogueVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetDialogueVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetDialogueVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetDialogueVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetDialogueVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetDialogueVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetDialogueVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetDialogueVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetDialogueVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetDialogueVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetDialogueVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetDialogueVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetDisplayGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetDisplayGamma) == 0x000004, "Wrong alignment on TBGameUserSettings_GetDisplayGamma");
static_assert(sizeof(TBGameUserSettings_GetDisplayGamma) == 0x000004, "Wrong size on TBGameUserSettings_GetDisplayGamma");
static_assert(offsetof(TBGameUserSettings_GetDisplayGamma, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetDisplayGamma::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetFieldOfView) == 0x000004, "Wrong alignment on TBGameUserSettings_GetFieldOfView");
static_assert(sizeof(TBGameUserSettings_GetFieldOfView) == 0x000004, "Wrong size on TBGameUserSettings_GetFieldOfView");
static_assert(offsetof(TBGameUserSettings_GetFieldOfView, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetFireKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetFireKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetFireKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetFireKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetFireKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetFireKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetFireKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetFireKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetFrameRateLimitCurrent
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetFrameRateLimitCurrent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetFrameRateLimitCurrent) == 0x000004, "Wrong alignment on TBGameUserSettings_GetFrameRateLimitCurrent");
static_assert(sizeof(TBGameUserSettings_GetFrameRateLimitCurrent) == 0x000004, "Wrong size on TBGameUserSettings_GetFrameRateLimitCurrent");
static_assert(offsetof(TBGameUserSettings_GetFrameRateLimitCurrent, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetFrameRateLimitCurrent::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetInvertMousePitch
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_GetInvertMousePitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetInvertMousePitch) == 0x000001, "Wrong alignment on TBGameUserSettings_GetInvertMousePitch");
static_assert(sizeof(TBGameUserSettings_GetInvertMousePitch) == 0x000001, "Wrong size on TBGameUserSettings_GetInvertMousePitch");
static_assert(offsetof(TBGameUserSettings_GetInvertMousePitch, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetInvertMousePitch::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetJumpKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetJumpKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetJumpKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetJumpKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetJumpKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetJumpKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetJumpKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetJumpKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetJumpVaultKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetJumpVaultKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetJumpVaultKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetJumpVaultKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetJumpVaultKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetJumpVaultKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetJumpVaultKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetJumpVaultKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLastConfirmedMasterVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetLastConfirmedMasterVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetLastConfirmedMasterVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetLastConfirmedMasterVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLastConfirmedMasterVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLastConfirmedMasterVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLastConfirmedMasterVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLeanLeftKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetLeanLeftKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLeanLeftKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetLeanLeftKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetLeanLeftKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetLeanLeftKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetLeanLeftKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLeanLeftKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLeanLeftToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetLeanLeftToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLeanLeftToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetLeanLeftToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetLeanLeftToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetLeanLeftToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetLeanLeftToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLeanLeftToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLeanRightKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetLeanRightKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLeanRightKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetLeanRightKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetLeanRightKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetLeanRightKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetLeanRightKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLeanRightKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLeanRightKeyToggleBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetLeanRightKeyToggleBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLeanRightKeyToggleBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetLeanRightKeyToggleBinding");
static_assert(sizeof(TBGameUserSettings_GetLeanRightKeyToggleBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetLeanRightKeyToggleBinding");
static_assert(offsetof(TBGameUserSettings_GetLeanRightKeyToggleBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLeanRightKeyToggleBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetLocalPlayerControllerBP
// 0x0008 (0x0008 - 0x0000)
struct TBGameUserSettings_GetLocalPlayerControllerBP final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetLocalPlayerControllerBP) == 0x000008, "Wrong alignment on TBGameUserSettings_GetLocalPlayerControllerBP");
static_assert(sizeof(TBGameUserSettings_GetLocalPlayerControllerBP) == 0x000008, "Wrong size on TBGameUserSettings_GetLocalPlayerControllerBP");
static_assert(offsetof(TBGameUserSettings_GetLocalPlayerControllerBP, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetLocalPlayerControllerBP::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMasterVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMasterVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMasterVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMasterVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetMasterVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetMasterVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetMasterVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMasterVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMasterVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMasterVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMasterVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMasterVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetMasterVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetMasterVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetMasterVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMasterVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMouseSensitivityX
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMouseSensitivityX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMouseSensitivityX) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMouseSensitivityX");
static_assert(sizeof(TBGameUserSettings_GetMouseSensitivityX) == 0x000004, "Wrong size on TBGameUserSettings_GetMouseSensitivityX");
static_assert(offsetof(TBGameUserSettings_GetMouseSensitivityX, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMouseSensitivityX::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMouseSensitivityXNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMouseSensitivityXNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMouseSensitivityXNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMouseSensitivityXNormalized");
static_assert(sizeof(TBGameUserSettings_GetMouseSensitivityXNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetMouseSensitivityXNormalized");
static_assert(offsetof(TBGameUserSettings_GetMouseSensitivityXNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMouseSensitivityXNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMouseSensitivityY
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMouseSensitivityY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMouseSensitivityY) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMouseSensitivityY");
static_assert(sizeof(TBGameUserSettings_GetMouseSensitivityY) == 0x000004, "Wrong size on TBGameUserSettings_GetMouseSensitivityY");
static_assert(offsetof(TBGameUserSettings_GetMouseSensitivityY, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMouseSensitivityY::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMouseSensitivityYNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMouseSensitivityYNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMouseSensitivityYNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMouseSensitivityYNormalized");
static_assert(sizeof(TBGameUserSettings_GetMouseSensitivityYNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetMouseSensitivityYNormalized");
static_assert(offsetof(TBGameUserSettings_GetMouseSensitivityYNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMouseSensitivityYNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMoveBackwardKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetMoveBackwardKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMoveBackwardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetMoveBackwardKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetMoveBackwardKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetMoveBackwardKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetMoveBackwardKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMoveBackwardKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMoveForwardKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetMoveForwardKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMoveForwardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetMoveForwardKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetMoveForwardKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetMoveForwardKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetMoveForwardKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMoveForwardKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMoveLeftKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetMoveLeftKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMoveLeftKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetMoveLeftKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetMoveLeftKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetMoveLeftKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetMoveLeftKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMoveLeftKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMoveRightKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetMoveRightKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMoveRightKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetMoveRightKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetMoveRightKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetMoveRightKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetMoveRightKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMoveRightKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMusicVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMusicVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMusicVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMusicVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetMusicVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetMusicVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetMusicVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMusicVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetMusicVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetMusicVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetMusicVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetMusicVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetMusicVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetMusicVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetMusicVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetMusicVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetNextItemKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetNextItemKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetNextItemKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetNextItemKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetNextItemKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetNextItemKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetNextItemKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetNextItemKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetPointAimToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetPointAimToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetPointAimToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetPointAimToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetPointAimToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetPointAimToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetPointAimToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetPointAimToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetPreviousItemKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetPreviousItemKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetPreviousItemKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetPreviousItemKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetPreviousItemKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetPreviousItemKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetPreviousItemKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetPreviousItemKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetProneKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetProneKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetProneKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetProneKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetProneKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetProneKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetProneKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetProneKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetPushToTalkCommandKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetPushToTalkCommandKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetPushToTalkCommandKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetPushToTalkCommandKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetPushToTalkCommandKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetPushToTalkCommandKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetPushToTalkCommandKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetPushToTalkCommandKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetPushToTalkLocalKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetPushToTalkLocalKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetPushToTalkLocalKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetPushToTalkLocalKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetPushToTalkLocalKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetPushToTalkLocalKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetPushToTalkLocalKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetPushToTalkLocalKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetPushToTalkSquadKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetPushToTalkSquadKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetPushToTalkSquadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetPushToTalkSquadKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetPushToTalkSquadKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetPushToTalkSquadKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetPushToTalkSquadKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetPushToTalkSquadKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetRadialMenuKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetRadialMenuKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetRadialMenuKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetRadialMenuKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetRadialMenuKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetRadialMenuKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetRadialMenuKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetRadialMenuKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetReloadKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetReloadKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetReloadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetReloadKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetReloadKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetReloadKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetReloadKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetReloadKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSayAllKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSayAllKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSayAllKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSayAllKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSayAllKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSayAllKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSayAllKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSayAllKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSaySquadKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSaySquadKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSaySquadKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSaySquadKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSaySquadKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSaySquadKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSaySquadKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSaySquadKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSayTeamKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSayTeamKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSayTeamKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSayTeamKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSayTeamKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSayTeamKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSayTeamKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSayTeamKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetShowScoreboardKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetShowScoreboardKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetShowScoreboardKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetShowScoreboardKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetShowScoreboardKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetShowScoreboardKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetShowScoreboardKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetShowScoreboardKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSoundEffectsVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetSoundEffectsVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSoundEffectsVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetSoundEffectsVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetSoundEffectsVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetSoundEffectsVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetSoundEffectsVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSoundEffectsVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSoundEffectsVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSoundEffectsVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSprintKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSprintKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSprintKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSprintKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSprintKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSprintKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSprintKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSprintKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSprintToggleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSprintToggleKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSprintToggleKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSprintToggleKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSprintToggleKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSprintToggleKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSprintToggleKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSprintToggleKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSwitchFireModeKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetSwitchFireModeKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSwitchFireModeKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetSwitchFireModeKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetSwitchFireModeKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetSwitchFireModeKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetSwitchFireModeKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetSwitchFireModeKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetSwitchFireModeOnReselect
// 0x0002 (0x0002 - 0x0000)
struct TBGameUserSettings_GetSwitchFireModeOnReselect final
{
public:
	bool                                          bLastConfirmed;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetSwitchFireModeOnReselect) == 0x000001, "Wrong alignment on TBGameUserSettings_GetSwitchFireModeOnReselect");
static_assert(sizeof(TBGameUserSettings_GetSwitchFireModeOnReselect) == 0x000002, "Wrong size on TBGameUserSettings_GetSwitchFireModeOnReselect");
static_assert(offsetof(TBGameUserSettings_GetSwitchFireModeOnReselect, bLastConfirmed) == 0x000000, "Member 'TBGameUserSettings_GetSwitchFireModeOnReselect::bLastConfirmed' has a wrong offset!");
static_assert(offsetof(TBGameUserSettings_GetSwitchFireModeOnReselect, ReturnValue) == 0x000001, "Member 'TBGameUserSettings_GetSwitchFireModeOnReselect::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetUseKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetUseKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetUseKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetUseKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetUseKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetUseKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetUseKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetUseKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetVaultKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetVaultKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetVaultKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetVaultKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetVaultKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetVaultKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetVaultKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetVaultKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetVoiceVolumeLevel
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetVoiceVolumeLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetVoiceVolumeLevel) == 0x000004, "Wrong alignment on TBGameUserSettings_GetVoiceVolumeLevel");
static_assert(sizeof(TBGameUserSettings_GetVoiceVolumeLevel) == 0x000004, "Wrong size on TBGameUserSettings_GetVoiceVolumeLevel");
static_assert(offsetof(TBGameUserSettings_GetVoiceVolumeLevel, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetVoiceVolumeLevel::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetVoiceVolumeLevelNormalized
// 0x0004 (0x0004 - 0x0000)
struct TBGameUserSettings_GetVoiceVolumeLevelNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetVoiceVolumeLevelNormalized) == 0x000004, "Wrong alignment on TBGameUserSettings_GetVoiceVolumeLevelNormalized");
static_assert(sizeof(TBGameUserSettings_GetVoiceVolumeLevelNormalized) == 0x000004, "Wrong size on TBGameUserSettings_GetVoiceVolumeLevelNormalized");
static_assert(offsetof(TBGameUserSettings_GetVoiceVolumeLevelNormalized, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetVoiceVolumeLevelNormalized::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetVoteNoKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetVoteNoKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetVoteNoKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetVoteNoKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetVoteNoKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetVoteNoKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetVoteNoKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetVoteNoKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetVoteYesKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetVoteYesKeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetVoteYesKeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetVoteYesKeyBinding");
static_assert(sizeof(TBGameUserSettings_GetVoteYesKeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetVoteYesKeyBinding");
static_assert(offsetof(TBGameUserSettings_GetVoteYesKeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetVoteYesKeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot0KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot0KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot0KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot0KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot0KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot0KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot0KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot0KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot1KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot1KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot1KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot1KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot1KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot1KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot1KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot1KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot2KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot2KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot2KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot2KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot2KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot2KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot2KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot2KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot3KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot3KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot3KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot3KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot3KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot3KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot3KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot3KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot4KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot4KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot4KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot4KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot4KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot4KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot4KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot4KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot5KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot5KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot5KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot5KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot5KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot5KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot5KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot5KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot6KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot6KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot6KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot6KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot6KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot6KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot6KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot6KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot7KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot7KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot7KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot7KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot7KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot7KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot7KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot7KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot8KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot8KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot8KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot8KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot8KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot8KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot8KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot8KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.GetWeaponSlot9KeyBinding
// 0x0018 (0x0018 - 0x0000)
struct TBGameUserSettings_GetWeaponSlot9KeyBinding final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_GetWeaponSlot9KeyBinding) == 0x000008, "Wrong alignment on TBGameUserSettings_GetWeaponSlot9KeyBinding");
static_assert(sizeof(TBGameUserSettings_GetWeaponSlot9KeyBinding) == 0x000018, "Wrong size on TBGameUserSettings_GetWeaponSlot9KeyBinding");
static_assert(offsetof(TBGameUserSettings_GetWeaponSlot9KeyBinding, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_GetWeaponSlot9KeyBinding::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsAllowSoundInBackgroundDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsAllowSoundInBackgroundDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsAllowSoundInBackgroundDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsAllowSoundInBackgroundDirty");
static_assert(sizeof(TBGameUserSettings_IsAllowSoundInBackgroundDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsAllowSoundInBackgroundDirty");
static_assert(offsetof(TBGameUserSettings_IsAllowSoundInBackgroundDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsAllowSoundInBackgroundDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsAnyInputKeyBindingDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsAnyInputKeyBindingDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsAnyInputKeyBindingDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsAnyInputKeyBindingDirty");
static_assert(sizeof(TBGameUserSettings_IsAnyInputKeyBindingDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsAnyInputKeyBindingDirty");
static_assert(offsetof(TBGameUserSettings_IsAnyInputKeyBindingDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsAnyInputKeyBindingDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsAudioQualityDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsAudioQualityDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsAudioQualityDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsAudioQualityDirty");
static_assert(sizeof(TBGameUserSettings_IsAudioQualityDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsAudioQualityDirty");
static_assert(offsetof(TBGameUserSettings_IsAudioQualityDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsAudioQualityDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsDialogueVolumeLevelDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsDialogueVolumeLevelDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsDialogueVolumeLevelDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsDialogueVolumeLevelDirty");
static_assert(sizeof(TBGameUserSettings_IsDialogueVolumeLevelDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsDialogueVolumeLevelDirty");
static_assert(offsetof(TBGameUserSettings_IsDialogueVolumeLevelDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsDialogueVolumeLevelDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsDisplayGammaDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsDisplayGammaDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsDisplayGammaDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsDisplayGammaDirty");
static_assert(sizeof(TBGameUserSettings_IsDisplayGammaDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsDisplayGammaDirty");
static_assert(offsetof(TBGameUserSettings_IsDisplayGammaDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsDisplayGammaDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsFieldOfViewDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsFieldOfViewDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsFieldOfViewDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsFieldOfViewDirty");
static_assert(sizeof(TBGameUserSettings_IsFieldOfViewDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsFieldOfViewDirty");
static_assert(offsetof(TBGameUserSettings_IsFieldOfViewDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsFieldOfViewDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsFrameRateLimitDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsFrameRateLimitDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsFrameRateLimitDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsFrameRateLimitDirty");
static_assert(sizeof(TBGameUserSettings_IsFrameRateLimitDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsFrameRateLimitDirty");
static_assert(offsetof(TBGameUserSettings_IsFrameRateLimitDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsFrameRateLimitDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsHeadphoneModeDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsHeadphoneModeDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsHeadphoneModeDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsHeadphoneModeDirty");
static_assert(sizeof(TBGameUserSettings_IsHeadphoneModeDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsHeadphoneModeDirty");
static_assert(offsetof(TBGameUserSettings_IsHeadphoneModeDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsHeadphoneModeDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsHeadphoneModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsHeadphoneModeEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_IsHeadphoneModeEnabled");
static_assert(sizeof(TBGameUserSettings_IsHeadphoneModeEnabled) == 0x000001, "Wrong size on TBGameUserSettings_IsHeadphoneModeEnabled");
static_assert(offsetof(TBGameUserSettings_IsHeadphoneModeEnabled, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsHeadphoneModeEnabled::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsInvertMouseDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsInvertMouseDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsInvertMouseDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsInvertMouseDirty");
static_assert(sizeof(TBGameUserSettings_IsInvertMouseDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsInvertMouseDirty");
static_assert(offsetof(TBGameUserSettings_IsInvertMouseDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsInvertMouseDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsMasterVolumeLevelDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsMasterVolumeLevelDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsMasterVolumeLevelDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsMasterVolumeLevelDirty");
static_assert(sizeof(TBGameUserSettings_IsMasterVolumeLevelDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsMasterVolumeLevelDirty");
static_assert(offsetof(TBGameUserSettings_IsMasterVolumeLevelDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsMasterVolumeLevelDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsMotionBlurDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsMotionBlurDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsMotionBlurDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsMotionBlurDirty");
static_assert(sizeof(TBGameUserSettings_IsMotionBlurDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsMotionBlurDirty");
static_assert(offsetof(TBGameUserSettings_IsMotionBlurDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsMotionBlurDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsMotionBlurEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsMotionBlurEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_IsMotionBlurEnabled");
static_assert(sizeof(TBGameUserSettings_IsMotionBlurEnabled) == 0x000001, "Wrong size on TBGameUserSettings_IsMotionBlurEnabled");
static_assert(offsetof(TBGameUserSettings_IsMotionBlurEnabled, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsMotionBlurEnabled::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsMouseSensitivityDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsMouseSensitivityDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsMouseSensitivityDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsMouseSensitivityDirty");
static_assert(sizeof(TBGameUserSettings_IsMouseSensitivityDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsMouseSensitivityDirty");
static_assert(offsetof(TBGameUserSettings_IsMouseSensitivityDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsMouseSensitivityDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsMusicVolumeLevelDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsMusicVolumeLevelDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsMusicVolumeLevelDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsMusicVolumeLevelDirty");
static_assert(sizeof(TBGameUserSettings_IsMusicVolumeLevelDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsMusicVolumeLevelDirty");
static_assert(offsetof(TBGameUserSettings_IsMusicVolumeLevelDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsMusicVolumeLevelDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSmoothFrameRateDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSmoothFrameRateDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSmoothFrameRateDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSmoothFrameRateDirty");
static_assert(sizeof(TBGameUserSettings_IsSmoothFrameRateDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsSmoothFrameRateDirty");
static_assert(offsetof(TBGameUserSettings_IsSmoothFrameRateDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSmoothFrameRateDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSmoothFrameRateEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSmoothFrameRateEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSmoothFrameRateEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSmoothFrameRateEnabled");
static_assert(sizeof(TBGameUserSettings_IsSmoothFrameRateEnabled) == 0x000001, "Wrong size on TBGameUserSettings_IsSmoothFrameRateEnabled");
static_assert(offsetof(TBGameUserSettings_IsSmoothFrameRateEnabled, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSmoothFrameRateEnabled::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSmoothMouseDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSmoothMouseDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSmoothMouseDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSmoothMouseDirty");
static_assert(sizeof(TBGameUserSettings_IsSmoothMouseDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsSmoothMouseDirty");
static_assert(offsetof(TBGameUserSettings_IsSmoothMouseDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSmoothMouseDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSmoothMouseEnabled
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSmoothMouseEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSmoothMouseEnabled) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSmoothMouseEnabled");
static_assert(sizeof(TBGameUserSettings_IsSmoothMouseEnabled) == 0x000001, "Wrong size on TBGameUserSettings_IsSmoothMouseEnabled");
static_assert(offsetof(TBGameUserSettings_IsSmoothMouseEnabled, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSmoothMouseEnabled::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSoundEffectsVolumeLevelDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSoundEffectsVolumeLevelDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSoundEffectsVolumeLevelDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSoundEffectsVolumeLevelDirty");
static_assert(sizeof(TBGameUserSettings_IsSoundEffectsVolumeLevelDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsSoundEffectsVolumeLevelDirty");
static_assert(offsetof(TBGameUserSettings_IsSoundEffectsVolumeLevelDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSoundEffectsVolumeLevelDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSoundInBackgroundAllowed
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSoundInBackgroundAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSoundInBackgroundAllowed) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSoundInBackgroundAllowed");
static_assert(sizeof(TBGameUserSettings_IsSoundInBackgroundAllowed) == 0x000001, "Wrong size on TBGameUserSettings_IsSoundInBackgroundAllowed");
static_assert(offsetof(TBGameUserSettings_IsSoundInBackgroundAllowed, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSoundInBackgroundAllowed::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsSwitchFireModeOnReselectDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsSwitchFireModeOnReselectDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsSwitchFireModeOnReselectDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsSwitchFireModeOnReselectDirty");
static_assert(sizeof(TBGameUserSettings_IsSwitchFireModeOnReselectDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsSwitchFireModeOnReselectDirty");
static_assert(offsetof(TBGameUserSettings_IsSwitchFireModeOnReselectDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsSwitchFireModeOnReselectDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBGameUserSettings.IsVoiceVolumeLevelDirty
// 0x0001 (0x0001 - 0x0000)
struct TBGameUserSettings_IsVoiceVolumeLevelDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBGameUserSettings_IsVoiceVolumeLevelDirty) == 0x000001, "Wrong alignment on TBGameUserSettings_IsVoiceVolumeLevelDirty");
static_assert(sizeof(TBGameUserSettings_IsVoiceVolumeLevelDirty) == 0x000001, "Wrong size on TBGameUserSettings_IsVoiceVolumeLevelDirty");
static_assert(offsetof(TBGameUserSettings_IsVoiceVolumeLevelDirty, ReturnValue) == 0x000000, "Member 'TBGameUserSettings_IsVoiceVolumeLevelDirty::ReturnValue' has a wrong offset!");

// Function Tinkerbox.TBVoiceIndicator.ActiveVoiceAdded
// 0x0010 (0x0010 - 0x0000)
struct TBVoiceIndicator_ActiveVoiceAdded final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             NewVoiceWidget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBVoiceIndicator_ActiveVoiceAdded) == 0x000008, "Wrong alignment on TBVoiceIndicator_ActiveVoiceAdded");
static_assert(sizeof(TBVoiceIndicator_ActiveVoiceAdded) == 0x000010, "Wrong size on TBVoiceIndicator_ActiveVoiceAdded");
static_assert(offsetof(TBVoiceIndicator_ActiveVoiceAdded, PlayerState) == 0x000000, "Member 'TBVoiceIndicator_ActiveVoiceAdded::PlayerState' has a wrong offset!");
static_assert(offsetof(TBVoiceIndicator_ActiveVoiceAdded, NewVoiceWidget) == 0x000008, "Member 'TBVoiceIndicator_ActiveVoiceAdded::NewVoiceWidget' has a wrong offset!");

// Function Tinkerbox.TBVoiceIndicator.ActiveVoiceRemoved
// 0x0010 (0x0010 - 0x0000)
struct TBVoiceIndicator_ActiveVoiceRemoved final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             NewVoiceWidget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBVoiceIndicator_ActiveVoiceRemoved) == 0x000008, "Wrong alignment on TBVoiceIndicator_ActiveVoiceRemoved");
static_assert(sizeof(TBVoiceIndicator_ActiveVoiceRemoved) == 0x000010, "Wrong size on TBVoiceIndicator_ActiveVoiceRemoved");
static_assert(offsetof(TBVoiceIndicator_ActiveVoiceRemoved, PlayerState) == 0x000000, "Member 'TBVoiceIndicator_ActiveVoiceRemoved::PlayerState' has a wrong offset!");
static_assert(offsetof(TBVoiceIndicator_ActiveVoiceRemoved, NewVoiceWidget) == 0x000008, "Member 'TBVoiceIndicator_ActiveVoiceRemoved::NewVoiceWidget' has a wrong offset!");

// Function Tinkerbox.TBVoiceIndicatorListing.Init
// 0x0040 (0x0040 - 0x0000)
struct TBVoiceIndicatorListing_Init final
{
public:
	class UTBVoiceIndicator*                      InParentMenu;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       InUniqueNetId;                                     // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TBVoiceIndicatorListing_Init) == 0x000008, "Wrong alignment on TBVoiceIndicatorListing_Init");
static_assert(sizeof(TBVoiceIndicatorListing_Init) == 0x000040, "Wrong size on TBVoiceIndicatorListing_Init");
static_assert(offsetof(TBVoiceIndicatorListing_Init, InParentMenu) == 0x000000, "Member 'TBVoiceIndicatorListing_Init::InParentMenu' has a wrong offset!");
static_assert(offsetof(TBVoiceIndicatorListing_Init, InUniqueNetId) == 0x000008, "Member 'TBVoiceIndicatorListing_Init::InUniqueNetId' has a wrong offset!");
static_assert(offsetof(TBVoiceIndicatorListing_Init, InPlayerName) == 0x000030, "Member 'TBVoiceIndicatorListing_Init::InPlayerName' has a wrong offset!");

}

