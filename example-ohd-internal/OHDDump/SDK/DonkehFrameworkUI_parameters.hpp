#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFrameworkUI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DonkehFrameworkUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function DonkehFrameworkUI.DFBaseMenu.IsTopOfMenuStack
// 0x0001 (0x0001 - 0x0000)
struct DFBaseMenu_IsTopOfMenuStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFBaseMenu_IsTopOfMenuStack) == 0x000001, "Wrong alignment on DFBaseMenu_IsTopOfMenuStack");
static_assert(sizeof(DFBaseMenu_IsTopOfMenuStack) == 0x000001, "Wrong size on DFBaseMenu_IsTopOfMenuStack");
static_assert(offsetof(DFBaseMenu_IsTopOfMenuStack, ReturnValue) == 0x000000, "Member 'DFBaseMenu_IsTopOfMenuStack::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFContextualWidgetBase.PrerequisiteNotMet
// 0x0008 (0x0008 - 0x0000)
struct DFContextualWidgetBase_PrerequisiteNotMet final
{
public:
	const class UDFContextualWidgetPrerequisiteBase* FailedPrereq;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFContextualWidgetBase_PrerequisiteNotMet) == 0x000008, "Wrong alignment on DFContextualWidgetBase_PrerequisiteNotMet");
static_assert(sizeof(DFContextualWidgetBase_PrerequisiteNotMet) == 0x000008, "Wrong size on DFContextualWidgetBase_PrerequisiteNotMet");
static_assert(offsetof(DFContextualWidgetBase_PrerequisiteNotMet, FailedPrereq) == 0x000000, "Member 'DFContextualWidgetBase_PrerequisiteNotMet::FailedPrereq' has a wrong offset!");

// Function DonkehFrameworkUI.DFContextualWidgetBase.TestPrerequisites
// 0x0002 (0x0002 - 0x0000)
struct DFContextualWidgetBase_TestPrerequisites final
{
public:
	bool                                          bInvokeEvents;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFContextualWidgetBase_TestPrerequisites) == 0x000001, "Wrong alignment on DFContextualWidgetBase_TestPrerequisites");
static_assert(sizeof(DFContextualWidgetBase_TestPrerequisites) == 0x000002, "Wrong size on DFContextualWidgetBase_TestPrerequisites");
static_assert(offsetof(DFContextualWidgetBase_TestPrerequisites, bInvokeEvents) == 0x000000, "Member 'DFContextualWidgetBase_TestPrerequisites::bInvokeEvents' has a wrong offset!");
static_assert(offsetof(DFContextualWidgetBase_TestPrerequisites, ReturnValue) == 0x000001, "Member 'DFContextualWidgetBase_TestPrerequisites::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFContextualWidgetPrerequisiteBase.GetWidgetOuter
// 0x0008 (0x0008 - 0x0000)
struct DFContextualWidgetPrerequisiteBase_GetWidgetOuter final
{
public:
	class UDFContextualWidgetBase*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFContextualWidgetPrerequisiteBase_GetWidgetOuter) == 0x000008, "Wrong alignment on DFContextualWidgetPrerequisiteBase_GetWidgetOuter");
static_assert(sizeof(DFContextualWidgetPrerequisiteBase_GetWidgetOuter) == 0x000008, "Wrong size on DFContextualWidgetPrerequisiteBase_GetWidgetOuter");
static_assert(offsetof(DFContextualWidgetPrerequisiteBase_GetWidgetOuter, ReturnValue) == 0x000000, "Member 'DFContextualWidgetPrerequisiteBase_GetWidgetOuter::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFContextualWidgetPrerequisiteBase.SatisfiesPrerequisite
// 0x0001 (0x0001 - 0x0000)
struct DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite) == 0x000001, "Wrong alignment on DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite");
static_assert(sizeof(DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite) == 0x000001, "Wrong size on DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite");
static_assert(offsetof(DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite, ReturnValue) == 0x000000, "Member 'DFContextualWidgetPrerequisiteBase_SatisfiesPrerequisite::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFContextualWidgetPrerequisiteBase.TestPrerequisite
// 0x0001 (0x0001 - 0x0000)
struct DFContextualWidgetPrerequisiteBase_TestPrerequisite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFContextualWidgetPrerequisiteBase_TestPrerequisite) == 0x000001, "Wrong alignment on DFContextualWidgetPrerequisiteBase_TestPrerequisite");
static_assert(sizeof(DFContextualWidgetPrerequisiteBase_TestPrerequisite) == 0x000001, "Wrong size on DFContextualWidgetPrerequisiteBase_TestPrerequisite");
static_assert(offsetof(DFContextualWidgetPrerequisiteBase_TestPrerequisite, ReturnValue) == 0x000000, "Member 'DFContextualWidgetPrerequisiteBase_TestPrerequisite::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMenuManager.ActivateMenu
// 0x0010 (0x0010 - 0x0000)
struct DFMenuManager_ActivateMenu final
{
public:
	class UDFBaseMenu*                            MenuToAdd;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuActivationMode                           ActivationMode;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMouseCursor;                                  // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUIOnlyInput;                                      // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMenuManager_ActivateMenu) == 0x000008, "Wrong alignment on DFMenuManager_ActivateMenu");
static_assert(sizeof(DFMenuManager_ActivateMenu) == 0x000010, "Wrong size on DFMenuManager_ActivateMenu");
static_assert(offsetof(DFMenuManager_ActivateMenu, MenuToAdd) == 0x000000, "Member 'DFMenuManager_ActivateMenu::MenuToAdd' has a wrong offset!");
static_assert(offsetof(DFMenuManager_ActivateMenu, ActivationMode) == 0x000008, "Member 'DFMenuManager_ActivateMenu::ActivationMode' has a wrong offset!");
static_assert(offsetof(DFMenuManager_ActivateMenu, bShowMouseCursor) == 0x000009, "Member 'DFMenuManager_ActivateMenu::bShowMouseCursor' has a wrong offset!");
static_assert(offsetof(DFMenuManager_ActivateMenu, bUIOnlyInput) == 0x00000A, "Member 'DFMenuManager_ActivateMenu::bUIOnlyInput' has a wrong offset!");

// Function DonkehFrameworkUI.DFMenuManager.RemoveMenu
// 0x0008 (0x0008 - 0x0000)
struct DFMenuManager_RemoveMenu final
{
public:
	class UDFBaseMenu*                            MenuToRemove;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMenuManager_RemoveMenu) == 0x000008, "Wrong alignment on DFMenuManager_RemoveMenu");
static_assert(sizeof(DFMenuManager_RemoveMenu) == 0x000008, "Wrong size on DFMenuManager_RemoveMenu");
static_assert(offsetof(DFMenuManager_RemoveMenu, MenuToRemove) == 0x000000, "Member 'DFMenuManager_RemoveMenu::MenuToRemove' has a wrong offset!");

// Function DonkehFrameworkUI.DFMenuManager.Top
// 0x0008 (0x0008 - 0x0000)
struct DFMenuManager_Top final
{
public:
	class UDFBaseMenu*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMenuManager_Top) == 0x000008, "Wrong alignment on DFMenuManager_Top");
static_assert(sizeof(DFMenuManager_Top) == 0x000008, "Wrong size on DFMenuManager_Top");
static_assert(offsetof(DFMenuManager_Top, ReturnValue) == 0x000000, "Member 'DFMenuManager_Top::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMenuManagerBlueprintFunctions.CreateAndActivate
// 0x0028 (0x0028 - 0x0000)
struct DFMenuManagerBlueprintFunctions_CreateAndActivate final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDFBaseMenu>                MenuWidgetType;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuActivationMode                           ActivationMode;                                    // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMouseCursor;                                  // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUIOnlyInput;                                      // 0x001A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDFBaseMenu*                            ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMenuManagerBlueprintFunctions_CreateAndActivate) == 0x000008, "Wrong alignment on DFMenuManagerBlueprintFunctions_CreateAndActivate");
static_assert(sizeof(DFMenuManagerBlueprintFunctions_CreateAndActivate) == 0x000028, "Wrong size on DFMenuManagerBlueprintFunctions_CreateAndActivate");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, WorldContextObject) == 0x000000, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, MenuWidgetType) == 0x000008, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::MenuWidgetType' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, OwningPlayer) == 0x000010, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::OwningPlayer' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, ActivationMode) == 0x000018, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::ActivationMode' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, bShowMouseCursor) == 0x000019, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::bShowMouseCursor' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, bUIOnlyInput) == 0x00001A, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::bUIOnlyInput' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_CreateAndActivate, ReturnValue) == 0x000020, "Member 'DFMenuManagerBlueprintFunctions_CreateAndActivate::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMenuManagerBlueprintFunctions.GetMenuManager
// 0x0010 (0x0010 - 0x0000)
struct DFMenuManagerBlueprintFunctions_GetMenuManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFMenuManager*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMenuManagerBlueprintFunctions_GetMenuManager) == 0x000008, "Wrong alignment on DFMenuManagerBlueprintFunctions_GetMenuManager");
static_assert(sizeof(DFMenuManagerBlueprintFunctions_GetMenuManager) == 0x000010, "Wrong size on DFMenuManagerBlueprintFunctions_GetMenuManager");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_GetMenuManager, WorldContextObject) == 0x000000, "Member 'DFMenuManagerBlueprintFunctions_GetMenuManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DFMenuManagerBlueprintFunctions_GetMenuManager, ReturnValue) == 0x000008, "Member 'DFMenuManagerBlueprintFunctions_GetMenuManager::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.AddNewPOI
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_AddNewPOI final
{
public:
	class AActor*                                 POIActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPOIWidget*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_AddNewPOI) == 0x000008, "Wrong alignment on DFMinimap_AddNewPOI");
static_assert(sizeof(DFMinimap_AddNewPOI) == 0x000010, "Wrong size on DFMinimap_AddNewPOI");
static_assert(offsetof(DFMinimap_AddNewPOI, POIActor) == 0x000000, "Member 'DFMinimap_AddNewPOI::POIActor' has a wrong offset!");
static_assert(offsetof(DFMinimap_AddNewPOI, ReturnValue) == 0x000008, "Member 'DFMinimap_AddNewPOI::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.ClearPOIs
// 0x0004 (0x0004 - 0x0000)
struct DFMinimap_ClearPOIs final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_ClearPOIs) == 0x000004, "Wrong alignment on DFMinimap_ClearPOIs");
static_assert(sizeof(DFMinimap_ClearPOIs) == 0x000004, "Wrong size on DFMinimap_ClearPOIs");
static_assert(offsetof(DFMinimap_ClearPOIs, ReturnValue) == 0x000000, "Member 'DFMinimap_ClearPOIs::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.FindPOIByActor
// 0x0018 (0x0018 - 0x0000)
struct DFMinimap_FindPOIByActor final
{
public:
	const class AActor*                           POIActor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPOIWidget*                           OutFoundPOI;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_FindPOIByActor) == 0x000008, "Wrong alignment on DFMinimap_FindPOIByActor");
static_assert(sizeof(DFMinimap_FindPOIByActor) == 0x000018, "Wrong size on DFMinimap_FindPOIByActor");
static_assert(offsetof(DFMinimap_FindPOIByActor, POIActor) == 0x000000, "Member 'DFMinimap_FindPOIByActor::POIActor' has a wrong offset!");
static_assert(offsetof(DFMinimap_FindPOIByActor, OutFoundPOI) == 0x000008, "Member 'DFMinimap_FindPOIByActor::OutFoundPOI' has a wrong offset!");
static_assert(offsetof(DFMinimap_FindPOIByActor, ReturnValue) == 0x000010, "Member 'DFMinimap_FindPOIByActor::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.OnPOISelectionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_OnPOISelectionStateChanged final
{
public:
	class UDFPOIWidget*                           POI;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_OnPOISelectionStateChanged) == 0x000008, "Wrong alignment on DFMinimap_OnPOISelectionStateChanged");
static_assert(sizeof(DFMinimap_OnPOISelectionStateChanged) == 0x000010, "Wrong size on DFMinimap_OnPOISelectionStateChanged");
static_assert(offsetof(DFMinimap_OnPOISelectionStateChanged, POI) == 0x000000, "Member 'DFMinimap_OnPOISelectionStateChanged::POI' has a wrong offset!");
static_assert(offsetof(DFMinimap_OnPOISelectionStateChanged, bSelected) == 0x000008, "Member 'DFMinimap_OnPOISelectionStateChanged::bSelected' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.ReceiveOnPOISelectionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_ReceiveOnPOISelectionStateChanged final
{
public:
	class UDFPOIWidget*                           POI;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_ReceiveOnPOISelectionStateChanged) == 0x000008, "Wrong alignment on DFMinimap_ReceiveOnPOISelectionStateChanged");
static_assert(sizeof(DFMinimap_ReceiveOnPOISelectionStateChanged) == 0x000010, "Wrong size on DFMinimap_ReceiveOnPOISelectionStateChanged");
static_assert(offsetof(DFMinimap_ReceiveOnPOISelectionStateChanged, POI) == 0x000000, "Member 'DFMinimap_ReceiveOnPOISelectionStateChanged::POI' has a wrong offset!");
static_assert(offsetof(DFMinimap_ReceiveOnPOISelectionStateChanged, bSelected) == 0x000008, "Member 'DFMinimap_ReceiveOnPOISelectionStateChanged::bSelected' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.RemovePOI
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_RemovePOI final
{
public:
	class UDFPOIWidget*                           POIToRemove;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_RemovePOI) == 0x000008, "Wrong alignment on DFMinimap_RemovePOI");
static_assert(sizeof(DFMinimap_RemovePOI) == 0x000010, "Wrong size on DFMinimap_RemovePOI");
static_assert(offsetof(DFMinimap_RemovePOI, POIToRemove) == 0x000000, "Member 'DFMinimap_RemovePOI::POIToRemove' has a wrong offset!");
static_assert(offsetof(DFMinimap_RemovePOI, ReturnValue) == 0x000008, "Member 'DFMinimap_RemovePOI::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.RemovePOIAt
// 0x0008 (0x0008 - 0x0000)
struct DFMinimap_RemovePOIAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_RemovePOIAt) == 0x000004, "Wrong alignment on DFMinimap_RemovePOIAt");
static_assert(sizeof(DFMinimap_RemovePOIAt) == 0x000008, "Wrong size on DFMinimap_RemovePOIAt");
static_assert(offsetof(DFMinimap_RemovePOIAt, Index_0) == 0x000000, "Member 'DFMinimap_RemovePOIAt::Index_0' has a wrong offset!");
static_assert(offsetof(DFMinimap_RemovePOIAt, ReturnValue) == 0x000004, "Member 'DFMinimap_RemovePOIAt::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.RemovePOIByActor
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_RemovePOIByActor final
{
public:
	const class AActor*                           POIActorToRemove;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_RemovePOIByActor) == 0x000008, "Wrong alignment on DFMinimap_RemovePOIByActor");
static_assert(sizeof(DFMinimap_RemovePOIByActor) == 0x000010, "Wrong size on DFMinimap_RemovePOIByActor");
static_assert(offsetof(DFMinimap_RemovePOIByActor, POIActorToRemove) == 0x000000, "Member 'DFMinimap_RemovePOIByActor::POIActorToRemove' has a wrong offset!");
static_assert(offsetof(DFMinimap_RemovePOIByActor, ReturnValue) == 0x000008, "Member 'DFMinimap_RemovePOIByActor::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.RemovePOIByActorClass
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_RemovePOIByActorClass final
{
public:
	TSubclassOf<class AActor>                     POIActorClass;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_RemovePOIByActorClass) == 0x000008, "Wrong alignment on DFMinimap_RemovePOIByActorClass");
static_assert(sizeof(DFMinimap_RemovePOIByActorClass) == 0x000010, "Wrong size on DFMinimap_RemovePOIByActorClass");
static_assert(offsetof(DFMinimap_RemovePOIByActorClass, POIActorClass) == 0x000000, "Member 'DFMinimap_RemovePOIByActorClass::POIActorClass' has a wrong offset!");
static_assert(offsetof(DFMinimap_RemovePOIByActorClass, ReturnValue) == 0x000008, "Member 'DFMinimap_RemovePOIByActorClass::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.UpdateMapPos
// 0x0008 (0x0008 - 0x0000)
struct DFMinimap_UpdateMapPos final
{
public:
	struct FVector2D                              NewMapPos;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_UpdateMapPos) == 0x000004, "Wrong alignment on DFMinimap_UpdateMapPos");
static_assert(sizeof(DFMinimap_UpdateMapPos) == 0x000008, "Wrong size on DFMinimap_UpdateMapPos");
static_assert(offsetof(DFMinimap_UpdateMapPos, NewMapPos) == 0x000000, "Member 'DFMinimap_UpdateMapPos::NewMapPos' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.UpdateZoomValue
// 0x0004 (0x0004 - 0x0000)
struct DFMinimap_UpdateZoomValue final
{
public:
	float                                         NewZoomValue;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_UpdateZoomValue) == 0x000004, "Wrong alignment on DFMinimap_UpdateZoomValue");
static_assert(sizeof(DFMinimap_UpdateZoomValue) == 0x000004, "Wrong size on DFMinimap_UpdateZoomValue");
static_assert(offsetof(DFMinimap_UpdateZoomValue, NewZoomValue) == 0x000000, "Member 'DFMinimap_UpdateZoomValue::NewZoomValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.ConvertMapLocationToLocalWidgetLocation
// 0x0014 (0x0014 - 0x0000)
struct DFMinimap_ConvertMapLocationToLocalWidgetLocation final
{
public:
	struct FVector2D                              MapLocation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetLocation;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_ConvertMapLocationToLocalWidgetLocation) == 0x000004, "Wrong alignment on DFMinimap_ConvertMapLocationToLocalWidgetLocation");
static_assert(sizeof(DFMinimap_ConvertMapLocationToLocalWidgetLocation) == 0x000014, "Wrong size on DFMinimap_ConvertMapLocationToLocalWidgetLocation");
static_assert(offsetof(DFMinimap_ConvertMapLocationToLocalWidgetLocation, MapLocation) == 0x000000, "Member 'DFMinimap_ConvertMapLocationToLocalWidgetLocation::MapLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_ConvertMapLocationToLocalWidgetLocation, WidgetLocation) == 0x000008, "Member 'DFMinimap_ConvertMapLocationToLocalWidgetLocation::WidgetLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_ConvertMapLocationToLocalWidgetLocation, ReturnValue) == 0x000010, "Member 'DFMinimap_ConvertMapLocationToLocalWidgetLocation::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.DeprojectMapLocationToWorld
// 0x0018 (0x0018 - 0x0000)
struct DFMinimap_DeprojectMapLocationToWorld final
{
public:
	struct FVector2D                              MapLocation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_DeprojectMapLocationToWorld) == 0x000004, "Wrong alignment on DFMinimap_DeprojectMapLocationToWorld");
static_assert(sizeof(DFMinimap_DeprojectMapLocationToWorld) == 0x000018, "Wrong size on DFMinimap_DeprojectMapLocationToWorld");
static_assert(offsetof(DFMinimap_DeprojectMapLocationToWorld, MapLocation) == 0x000000, "Member 'DFMinimap_DeprojectMapLocationToWorld::MapLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_DeprojectMapLocationToWorld, WorldLocation) == 0x000008, "Member 'DFMinimap_DeprojectMapLocationToWorld::WorldLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_DeprojectMapLocationToWorld, ReturnValue) == 0x000014, "Member 'DFMinimap_DeprojectMapLocationToWorld::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.GetMapSizeAbsolute
// 0x0008 (0x0008 - 0x0000)
struct DFMinimap_GetMapSizeAbsolute final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_GetMapSizeAbsolute) == 0x000004, "Wrong alignment on DFMinimap_GetMapSizeAbsolute");
static_assert(sizeof(DFMinimap_GetMapSizeAbsolute) == 0x000008, "Wrong size on DFMinimap_GetMapSizeAbsolute");
static_assert(offsetof(DFMinimap_GetMapSizeAbsolute, ReturnValue) == 0x000000, "Member 'DFMinimap_GetMapSizeAbsolute::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.GetMapSizeLocal
// 0x0008 (0x0008 - 0x0000)
struct DFMinimap_GetMapSizeLocal final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_GetMapSizeLocal) == 0x000004, "Wrong alignment on DFMinimap_GetMapSizeLocal");
static_assert(sizeof(DFMinimap_GetMapSizeLocal) == 0x000008, "Wrong size on DFMinimap_GetMapSizeLocal");
static_assert(offsetof(DFMinimap_GetMapSizeLocal, ReturnValue) == 0x000000, "Member 'DFMinimap_GetMapSizeLocal::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.GetPOIAt
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_GetPOIAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDFPOIWidget*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_GetPOIAt) == 0x000008, "Wrong alignment on DFMinimap_GetPOIAt");
static_assert(sizeof(DFMinimap_GetPOIAt) == 0x000010, "Wrong size on DFMinimap_GetPOIAt");
static_assert(offsetof(DFMinimap_GetPOIAt, Index_0) == 0x000000, "Member 'DFMinimap_GetPOIAt::Index_0' has a wrong offset!");
static_assert(offsetof(DFMinimap_GetPOIAt, ReturnValue) == 0x000008, "Member 'DFMinimap_GetPOIAt::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.GetPOICount
// 0x0004 (0x0004 - 0x0000)
struct DFMinimap_GetPOICount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_GetPOICount) == 0x000004, "Wrong alignment on DFMinimap_GetPOICount");
static_assert(sizeof(DFMinimap_GetPOICount) == 0x000004, "Wrong size on DFMinimap_GetPOICount");
static_assert(offsetof(DFMinimap_GetPOICount, ReturnValue) == 0x000000, "Member 'DFMinimap_GetPOICount::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.GetPOIIndex
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_GetPOIIndex final
{
public:
	class UDFPOIWidget*                           POI;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_GetPOIIndex) == 0x000008, "Wrong alignment on DFMinimap_GetPOIIndex");
static_assert(sizeof(DFMinimap_GetPOIIndex) == 0x000010, "Wrong size on DFMinimap_GetPOIIndex");
static_assert(offsetof(DFMinimap_GetPOIIndex, POI) == 0x000000, "Member 'DFMinimap_GetPOIIndex::POI' has a wrong offset!");
static_assert(offsetof(DFMinimap_GetPOIIndex, ReturnValue) == 0x000008, "Member 'DFMinimap_GetPOIIndex::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.HasAnyPOIs
// 0x0001 (0x0001 - 0x0000)
struct DFMinimap_HasAnyPOIs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFMinimap_HasAnyPOIs) == 0x000001, "Wrong alignment on DFMinimap_HasAnyPOIs");
static_assert(sizeof(DFMinimap_HasAnyPOIs) == 0x000001, "Wrong size on DFMinimap_HasAnyPOIs");
static_assert(offsetof(DFMinimap_HasAnyPOIs, ReturnValue) == 0x000000, "Member 'DFMinimap_HasAnyPOIs::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.HasPOI
// 0x0010 (0x0010 - 0x0000)
struct DFMinimap_HasPOI final
{
public:
	class UDFPOIWidget*                           POI;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_HasPOI) == 0x000008, "Wrong alignment on DFMinimap_HasPOI");
static_assert(sizeof(DFMinimap_HasPOI) == 0x000010, "Wrong size on DFMinimap_HasPOI");
static_assert(offsetof(DFMinimap_HasPOI, POI) == 0x000000, "Member 'DFMinimap_HasPOI::POI' has a wrong offset!");
static_assert(offsetof(DFMinimap_HasPOI, ReturnValue) == 0x000008, "Member 'DFMinimap_HasPOI::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFMinimap.ProjectWorldLocationToMap
// 0x0018 (0x0018 - 0x0000)
struct DFMinimap_ProjectWorldLocationToMap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapLocation;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFMinimap_ProjectWorldLocationToMap) == 0x000004, "Wrong alignment on DFMinimap_ProjectWorldLocationToMap");
static_assert(sizeof(DFMinimap_ProjectWorldLocationToMap) == 0x000018, "Wrong size on DFMinimap_ProjectWorldLocationToMap");
static_assert(offsetof(DFMinimap_ProjectWorldLocationToMap, WorldLocation) == 0x000000, "Member 'DFMinimap_ProjectWorldLocationToMap::WorldLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_ProjectWorldLocationToMap, MapLocation) == 0x00000C, "Member 'DFMinimap_ProjectWorldLocationToMap::MapLocation' has a wrong offset!");
static_assert(offsetof(DFMinimap_ProjectWorldLocationToMap, ReturnValue) == 0x000014, "Member 'DFMinimap_ProjectWorldLocationToMap::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIComponent.OnMinimapLateInit
// 0x0008 (0x0008 - 0x0000)
struct DFPOIComponent_OnMinimapLateInit final
{
public:
	class UDFMinimap*                             NewMinimap;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIComponent_OnMinimapLateInit) == 0x000008, "Wrong alignment on DFPOIComponent_OnMinimapLateInit");
static_assert(sizeof(DFPOIComponent_OnMinimapLateInit) == 0x000008, "Wrong size on DFPOIComponent_OnMinimapLateInit");
static_assert(offsetof(DFPOIComponent_OnMinimapLateInit, NewMinimap) == 0x000000, "Member 'DFPOIComponent_OnMinimapLateInit::NewMinimap' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIComponent.RegisterPOI
// 0x0008 (0x0008 - 0x0000)
struct DFPOIComponent_RegisterPOI final
{
public:
	class UDFMinimap*                             MinimapWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIComponent_RegisterPOI) == 0x000008, "Wrong alignment on DFPOIComponent_RegisterPOI");
static_assert(sizeof(DFPOIComponent_RegisterPOI) == 0x000008, "Wrong size on DFPOIComponent_RegisterPOI");
static_assert(offsetof(DFPOIComponent_RegisterPOI, MinimapWidget) == 0x000000, "Member 'DFPOIComponent_RegisterPOI::MinimapWidget' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIComponent.GetMinimap
// 0x0008 (0x0008 - 0x0000)
struct DFPOIComponent_GetMinimap final
{
public:
	class UDFMinimap*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIComponent_GetMinimap) == 0x000008, "Wrong alignment on DFPOIComponent_GetMinimap");
static_assert(sizeof(DFPOIComponent_GetMinimap) == 0x000008, "Wrong size on DFPOIComponent_GetMinimap");
static_assert(offsetof(DFPOIComponent_GetMinimap, ReturnValue) == 0x000000, "Member 'DFPOIComponent_GetMinimap::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIComponent.GetPOIWidget
// 0x0008 (0x0008 - 0x0000)
struct DFPOIComponent_GetPOIWidget final
{
public:
	class UDFPOIWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIComponent_GetPOIWidget) == 0x000008, "Wrong alignment on DFPOIComponent_GetPOIWidget");
static_assert(sizeof(DFPOIComponent_GetPOIWidget) == 0x000008, "Wrong size on DFPOIComponent_GetPOIWidget");
static_assert(offsetof(DFPOIComponent_GetPOIWidget, ReturnValue) == 0x000000, "Member 'DFPOIComponent_GetPOIWidget::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIComponent.IsPOIRegistered
// 0x0001 (0x0001 - 0x0000)
struct DFPOIComponent_IsPOIRegistered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIComponent_IsPOIRegistered) == 0x000001, "Wrong alignment on DFPOIComponent_IsPOIRegistered");
static_assert(sizeof(DFPOIComponent_IsPOIRegistered) == 0x000001, "Wrong size on DFPOIComponent_IsPOIRegistered");
static_assert(offsetof(DFPOIComponent_IsPOIRegistered, ReturnValue) == 0x000000, "Member 'DFPOIComponent_IsPOIRegistered::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.InitPOI
// 0x0140 (0x0140 - 0x0000)
struct DFPOIWidget_InitPOI final
{
public:
	class UDFMinimap*                             OwningMapWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToTrack;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMinimapPOITableRow                    ActorPOIData;                                      // 0x0010(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_InitPOI) == 0x000008, "Wrong alignment on DFPOIWidget_InitPOI");
static_assert(sizeof(DFPOIWidget_InitPOI) == 0x000140, "Wrong size on DFPOIWidget_InitPOI");
static_assert(offsetof(DFPOIWidget_InitPOI, OwningMapWidget) == 0x000000, "Member 'DFPOIWidget_InitPOI::OwningMapWidget' has a wrong offset!");
static_assert(offsetof(DFPOIWidget_InitPOI, ActorToTrack) == 0x000008, "Member 'DFPOIWidget_InitPOI::ActorToTrack' has a wrong offset!");
static_assert(offsetof(DFPOIWidget_InitPOI, ActorPOIData) == 0x000010, "Member 'DFPOIWidget_InitPOI::ActorPOIData' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.OnPOIActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct DFPOIWidget_OnPOIActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPOIWidget_OnPOIActorEndPlay) == 0x000008, "Wrong alignment on DFPOIWidget_OnPOIActorEndPlay");
static_assert(sizeof(DFPOIWidget_OnPOIActorEndPlay) == 0x000010, "Wrong size on DFPOIWidget_OnPOIActorEndPlay");
static_assert(offsetof(DFPOIWidget_OnPOIActorEndPlay, Actor) == 0x000000, "Member 'DFPOIWidget_OnPOIActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(DFPOIWidget_OnPOIActorEndPlay, EndPlayReason) == 0x000008, "Member 'DFPOIWidget_OnPOIActorEndPlay::EndPlayReason' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.ReceiveOnPOIActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct DFPOIWidget_ReceiveOnPOIActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DFPOIWidget_ReceiveOnPOIActorEndPlay) == 0x000008, "Wrong alignment on DFPOIWidget_ReceiveOnPOIActorEndPlay");
static_assert(sizeof(DFPOIWidget_ReceiveOnPOIActorEndPlay) == 0x000010, "Wrong size on DFPOIWidget_ReceiveOnPOIActorEndPlay");
static_assert(offsetof(DFPOIWidget_ReceiveOnPOIActorEndPlay, Actor) == 0x000000, "Member 'DFPOIWidget_ReceiveOnPOIActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(DFPOIWidget_ReceiveOnPOIActorEndPlay, EndPlayReason) == 0x000008, "Member 'DFPOIWidget_ReceiveOnPOIActorEndPlay::EndPlayReason' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.SetPOISelectionState
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_SetPOISelectionState final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_SetPOISelectionState) == 0x000001, "Wrong alignment on DFPOIWidget_SetPOISelectionState");
static_assert(sizeof(DFPOIWidget_SetPOISelectionState) == 0x000001, "Wrong size on DFPOIWidget_SetPOISelectionState");
static_assert(offsetof(DFPOIWidget_SetPOISelectionState, bNewSelected) == 0x000000, "Member 'DFPOIWidget_SetPOISelectionState::bNewSelected' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.CanSelect
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_CanSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_CanSelect) == 0x000001, "Wrong alignment on DFPOIWidget_CanSelect");
static_assert(sizeof(DFPOIWidget_CanSelect) == 0x000001, "Wrong size on DFPOIWidget_CanSelect");
static_assert(offsetof(DFPOIWidget_CanSelect, ReturnValue) == 0x000000, "Member 'DFPOIWidget_CanSelect::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.GetDefaultIconBrush
// 0x0088 (0x0088 - 0x0000)
struct DFPOIWidget_GetDefaultIconBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_GetDefaultIconBrush) == 0x000008, "Wrong alignment on DFPOIWidget_GetDefaultIconBrush");
static_assert(sizeof(DFPOIWidget_GetDefaultIconBrush) == 0x000088, "Wrong size on DFPOIWidget_GetDefaultIconBrush");
static_assert(offsetof(DFPOIWidget_GetDefaultIconBrush, ReturnValue) == 0x000000, "Member 'DFPOIWidget_GetDefaultIconBrush::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.HasFixedRotation
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_HasFixedRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_HasFixedRotation) == 0x000001, "Wrong alignment on DFPOIWidget_HasFixedRotation");
static_assert(sizeof(DFPOIWidget_HasFixedRotation) == 0x000001, "Wrong size on DFPOIWidget_HasFixedRotation");
static_assert(offsetof(DFPOIWidget_HasFixedRotation, ReturnValue) == 0x000000, "Member 'DFPOIWidget_HasFixedRotation::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.IsDynamic
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_IsDynamic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_IsDynamic) == 0x000001, "Wrong alignment on DFPOIWidget_IsDynamic");
static_assert(sizeof(DFPOIWidget_IsDynamic) == 0x000001, "Wrong size on DFPOIWidget_IsDynamic");
static_assert(offsetof(DFPOIWidget_IsDynamic, ReturnValue) == 0x000000, "Member 'DFPOIWidget_IsDynamic::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_IsInitialized) == 0x000001, "Wrong alignment on DFPOIWidget_IsInitialized");
static_assert(sizeof(DFPOIWidget_IsInitialized) == 0x000001, "Wrong size on DFPOIWidget_IsInitialized");
static_assert(offsetof(DFPOIWidget_IsInitialized, ReturnValue) == 0x000000, "Member 'DFPOIWidget_IsInitialized::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.IsPOIActorValid
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_IsPOIActorValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_IsPOIActorValid) == 0x000001, "Wrong alignment on DFPOIWidget_IsPOIActorValid");
static_assert(sizeof(DFPOIWidget_IsPOIActorValid) == 0x000001, "Wrong size on DFPOIWidget_IsPOIActorValid");
static_assert(offsetof(DFPOIWidget_IsPOIActorValid, ReturnValue) == 0x000000, "Member 'DFPOIWidget_IsPOIActorValid::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.IsSelectable
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_IsSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_IsSelectable) == 0x000001, "Wrong alignment on DFPOIWidget_IsSelectable");
static_assert(sizeof(DFPOIWidget_IsSelectable) == 0x000001, "Wrong size on DFPOIWidget_IsSelectable");
static_assert(offsetof(DFPOIWidget_IsSelectable, ReturnValue) == 0x000000, "Member 'DFPOIWidget_IsSelectable::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.DFPOIWidget.ReceiveCanSelect
// 0x0001 (0x0001 - 0x0000)
struct DFPOIWidget_ReceiveCanSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DFPOIWidget_ReceiveCanSelect) == 0x000001, "Wrong alignment on DFPOIWidget_ReceiveCanSelect");
static_assert(sizeof(DFPOIWidget_ReceiveCanSelect) == 0x000001, "Wrong size on DFPOIWidget_ReceiveCanSelect");
static_assert(offsetof(DFPOIWidget_ReceiveCanSelect, ReturnValue) == 0x000000, "Member 'DFPOIWidget_ReceiveCanSelect::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.POIWidgetSlotInterface.SetIconBrush
// 0x0088 (0x0088 - 0x0000)
struct POIWidgetSlotInterface_SetIconBrush final
{
public:
	struct FSlateBrush                            NewIconBrush;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(POIWidgetSlotInterface_SetIconBrush) == 0x000008, "Wrong alignment on POIWidgetSlotInterface_SetIconBrush");
static_assert(sizeof(POIWidgetSlotInterface_SetIconBrush) == 0x000088, "Wrong size on POIWidgetSlotInterface_SetIconBrush");
static_assert(offsetof(POIWidgetSlotInterface_SetIconBrush, NewIconBrush) == 0x000000, "Member 'POIWidgetSlotInterface_SetIconBrush::NewIconBrush' has a wrong offset!");

// Function DonkehFrameworkUI.POIWidgetSlotInterface.GetIconBrush
// 0x0088 (0x0088 - 0x0000)
struct POIWidgetSlotInterface_GetIconBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(POIWidgetSlotInterface_GetIconBrush) == 0x000008, "Wrong alignment on POIWidgetSlotInterface_GetIconBrush");
static_assert(sizeof(POIWidgetSlotInterface_GetIconBrush) == 0x000088, "Wrong size on POIWidgetSlotInterface_GetIconBrush");
static_assert(offsetof(POIWidgetSlotInterface_GetIconBrush, ReturnValue) == 0x000000, "Member 'POIWidgetSlotInterface_GetIconBrush::ReturnValue' has a wrong offset!");

// Function DonkehFrameworkUI.POIWidgetSlotInterface.GetIconSlot
// 0x0008 (0x0008 - 0x0000)
struct POIWidgetSlotInterface_GetIconSlot final
{
public:
	class UNamedSlot*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(POIWidgetSlotInterface_GetIconSlot) == 0x000008, "Wrong alignment on POIWidgetSlotInterface_GetIconSlot");
static_assert(sizeof(POIWidgetSlotInterface_GetIconSlot) == 0x000008, "Wrong size on POIWidgetSlotInterface_GetIconSlot");
static_assert(offsetof(POIWidgetSlotInterface_GetIconSlot, ReturnValue) == 0x000000, "Member 'POIWidgetSlotInterface_GetIconSlot::ReturnValue' has a wrong offset!");

}

