#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_HDWeapon

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "HDMain_structs.hpp"


namespace SDK::Params
{

// Function BPFL_HDWeapon.BPFL_HDWeapon_C.FireModeToString
// 0x0068 (0x0068 - 0x0000)
struct BPFL_HDWeapon_C_FireModeToString final
{
public:
	EFireMode                                     FireMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ModeString;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	EFireMode                                     Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_HDWeapon_C_FireModeToString) == 0x000008, "Wrong alignment on BPFL_HDWeapon_C_FireModeToString");
static_assert(sizeof(BPFL_HDWeapon_C_FireModeToString) == 0x000068, "Wrong size on BPFL_HDWeapon_C_FireModeToString");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, FireMode) == 0x000000, "Member 'BPFL_HDWeapon_C_FireModeToString::FireMode' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, __WorldContext) == 0x000008, "Member 'BPFL_HDWeapon_C_FireModeToString::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, ModeString) == 0x000010, "Member 'BPFL_HDWeapon_C_FireModeToString::ModeString' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, Temp_byte_Variable) == 0x000020, "Member 'BPFL_HDWeapon_C_FireModeToString::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, Temp_string_Variable) == 0x000028, "Member 'BPFL_HDWeapon_C_FireModeToString::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, Temp_string_Variable_1) == 0x000038, "Member 'BPFL_HDWeapon_C_FireModeToString::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, Temp_string_Variable_2) == 0x000048, "Member 'BPFL_HDWeapon_C_FireModeToString::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToString, K2Node_Select_Default) == 0x000058, "Member 'BPFL_HDWeapon_C_FireModeToString::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_HDWeapon.BPFL_HDWeapon_C.FireModeToDisplayText
// 0x0090 (0x0090 - 0x0000)
struct BPFL_HDWeapon_C_FireModeToDisplayText final
{
public:
	EFireMode                                     FireMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ModeText;                                          // 0x0010(0x0018)(Parm, OutParm)
	EFireMode                                     Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0078(0x0018)()
};
static_assert(alignof(BPFL_HDWeapon_C_FireModeToDisplayText) == 0x000008, "Wrong alignment on BPFL_HDWeapon_C_FireModeToDisplayText");
static_assert(sizeof(BPFL_HDWeapon_C_FireModeToDisplayText) == 0x000090, "Wrong size on BPFL_HDWeapon_C_FireModeToDisplayText");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, FireMode) == 0x000000, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::FireMode' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, __WorldContext) == 0x000008, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, ModeText) == 0x000010, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::ModeText' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, Temp_byte_Variable) == 0x000028, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, Temp_text_Variable) == 0x000030, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, Temp_text_Variable_1) == 0x000048, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, Temp_text_Variable_2) == 0x000060, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_FireModeToDisplayText, K2Node_Select_Default) == 0x000078, "Member 'BPFL_HDWeapon_C_FireModeToDisplayText::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_HDWeapon.BPFL_HDWeapon_C.AimStyleToDisplayText
// 0x00C0 (0x00C0 - 0x0000)
struct BPFL_HDWeapon_C_AimStyleToDisplayText final
{
public:
	EHDWeaponAimStyle                             AimStyle;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   StyleText;                                         // 0x0010(0x0018)(Parm, OutParm)
	EHDWeaponAimStyle                             Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
};
static_assert(alignof(BPFL_HDWeapon_C_AimStyleToDisplayText) == 0x000008, "Wrong alignment on BPFL_HDWeapon_C_AimStyleToDisplayText");
static_assert(sizeof(BPFL_HDWeapon_C_AimStyleToDisplayText) == 0x0000C0, "Wrong size on BPFL_HDWeapon_C_AimStyleToDisplayText");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, AimStyle) == 0x000000, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::AimStyle' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, __WorldContext) == 0x000008, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, StyleText) == 0x000010, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::StyleText' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_byte_Variable) == 0x000028, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_text_Variable) == 0x000030, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_text_Variable_1) == 0x000048, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_text_Variable_2) == 0x000060, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_text_Variable_3) == 0x000078, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, Temp_text_Variable_4) == 0x000090, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_HDWeapon_C_AimStyleToDisplayText, K2Node_Select_Default) == 0x0000A8, "Member 'BPFL_HDWeapon_C_AimStyleToDisplayText::K2Node_Select_Default' has a wrong offset!");

}

