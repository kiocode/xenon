#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_EquipmentSelect_EqBox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.ExecuteUbergraph_WBP_EquipmentSelect_EqBox
// 0x0068 (0x0068 - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelectableEquipment_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x002C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox) == 0x000008, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox) == 0x000068, "Wrong size on WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, EntryPoint) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, Temp_bool_Variable) == 0x000004, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, Temp_byte_Variable) == 0x000005, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, CallFunc_IsValid_ReturnValue) == 0x000007, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, CallFunc_IsSelectableEquipment_ReturnValue) == 0x000008, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::CallFunc_IsSelectableEquipment_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, K2Node_Event_IsDesignTime) == 0x000009, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, K2Node_Select_Default) == 0x000028, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, K2Node_Event_MyGeometry) == 0x00002C, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox, K2Node_Event_InDeltaTime) == 0x000064, "Member 'WBP_EquipmentSelect_EqBox_C_ExecuteUbergraph_WBP_EquipmentSelect_EqBox::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_Tick) == 0x000004, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_Tick");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_Tick) == 0x00003C, "Wrong size on WBP_EquipmentSelect_EqBox_C_Tick");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_EquipmentSelect_EqBox_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_PreConstruct");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_PreConstruct) == 0x000001, "Wrong size on WBP_EquipmentSelect_EqBox_C_PreConstruct");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.SetHighlight
// 0x0008 (0x0008 - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_SetHighlight final
{
public:
	bool                                          bHighlighted_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_SetHighlight) == 0x000004, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_SetHighlight");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_SetHighlight) == 0x000008, "Wrong size on WBP_EquipmentSelect_EqBox_C_SetHighlight");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetHighlight, bHighlighted_0) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_SetHighlight::bHighlighted_0' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetHighlight, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'WBP_EquipmentSelect_EqBox_C_SetHighlight::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.IsHighlighted
// 0x0001 (0x0001 - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_IsHighlighted final
{
public:
	bool                                          bHighlight;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_IsHighlighted) == 0x000001, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_IsHighlighted");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_IsHighlighted) == 0x000001, "Wrong size on WBP_EquipmentSelect_EqBox_C_IsHighlighted");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_IsHighlighted, bHighlight) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_IsHighlighted::bHighlight' has a wrong offset!");

// Function WBP_EquipmentSelect_EqBox.WBP_EquipmentSelect_EqBox_C.SetEnabled
// 0x0006 (0x0006 - 0x0000)
struct WBP_EquipmentSelect_EqBox_C_SetEnabled final
{
public:
	bool                                          bEnabled_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EquipmentSelect_EqBox_C_SetEnabled) == 0x000001, "Wrong alignment on WBP_EquipmentSelect_EqBox_C_SetEnabled");
static_assert(sizeof(WBP_EquipmentSelect_EqBox_C_SetEnabled) == 0x000006, "Wrong size on WBP_EquipmentSelect_EqBox_C_SetEnabled");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, bEnabled_0) == 0x000000, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::bEnabled_0' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, Temp_byte_Variable) == 0x000001, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, Temp_bool_Variable) == 0x000003, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000004, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EquipmentSelect_EqBox_C_SetEnabled, K2Node_Select_Default) == 0x000005, "Member 'WBP_EquipmentSelect_EqBox_C_SetEnabled::K2Node_Select_Default' has a wrong offset!");

}

