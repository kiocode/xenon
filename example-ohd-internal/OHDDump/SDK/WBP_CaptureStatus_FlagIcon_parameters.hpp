#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CaptureStatus_FlagIcon

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HDMain_structs.hpp"


namespace SDK::Params
{

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.ExecuteUbergraph_WBP_CaptureStatus_FlagIcon
// 0x0010 (0x0010 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bActive;                        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDTeam                                       K2Node_CustomEvent_Team;                           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bLocked;                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDControlPointObjectiveType                  K2Node_CustomEvent_ObjType;                        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon) == 0x000004, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon) == 0x000010, "Wrong size on WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, EntryPoint) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, Temp_byte_Variable) == 0x000004, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_CustomEvent_bActive) == 0x000006, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_CustomEvent_bActive' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_CustomEvent_Team) == 0x000007, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_CustomEvent_bLocked) == 0x000008, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_CustomEvent_bLocked' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_CustomEvent_ObjType) == 0x000009, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_CustomEvent_ObjType' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_Event_IsDesignTime) == 0x00000A, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, Temp_bool_Variable) == 0x00000B, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon, K2Node_Select_Default) == 0x00000C, "Member 'WBP_CaptureStatus_FlagIcon_C_ExecuteUbergraph_WBP_CaptureStatus_FlagIcon::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_PreConstruct");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_PreConstruct) == 0x000001, "Wrong size on WBP_CaptureStatus_FlagIcon_C_PreConstruct");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.OnUpdateIcon
// 0x0004 (0x0004 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDTeam                                       Team;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDControlPointObjectiveType                  ObjType;                                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon) == 0x000001, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon) == 0x000004, "Wrong size on WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon, bActive) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon::bActive' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon, Team) == 0x000001, "Member 'WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon::Team' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon, bLocked) == 0x000002, "Member 'WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon::bLocked' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon, ObjType) == 0x000003, "Member 'WBP_CaptureStatus_FlagIcon_C_OnUpdateIcon::ObjType' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.SetBrushes
// 0x0198 (0x0198 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_SetBrushes final
{
public:
	struct FSlateBrush                            IconFrame_0;                                       // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSlateBrush                            Bg_0;                                              // 0x0088(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSlateBrush                            Icon_0;                                            // 0x0110(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_SetBrushes) == 0x000008, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_SetBrushes");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_SetBrushes) == 0x000198, "Wrong size on WBP_CaptureStatus_FlagIcon_C_SetBrushes");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushes, IconFrame_0) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushes::IconFrame_0' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushes, Bg_0) == 0x000088, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushes::Bg_0' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushes, Icon_0) == 0x000110, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushes::Icon_0' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.UpdateBrushesByTeam
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDTeam                                       Team;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDControlPointObjectiveType                  ObjType;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInLocked;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconToUse;                                         // 0x0008(0x0088)(Edit, BlueprintVisible)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHDControlPointObjectiveType                  Temp_byte_Variable;                                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam) == 0x000008, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam) == 0x0000B8, "Wrong size on WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, bLocked) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::bLocked' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, Team) == 0x000001, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::Team' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, ObjType) == 0x000002, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::ObjType' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, bInLocked) == 0x000003, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::bInLocked' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, IconToUse) == 0x000008, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::IconToUse' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, Temp_object_Variable) == 0x000090, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, Temp_object_Variable_1) == 0x000098, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, Temp_object_Variable_2) == 0x0000A0, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, Temp_byte_Variable) == 0x0000A8, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam, K2Node_Select_Default) == 0x0000B0, "Member 'WBP_CaptureStatus_FlagIcon_C_UpdateBrushesByTeam::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.TintBrushByTeam
// 0x01F8 (0x01F8 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam final
{
public:
	struct FSlateBrush                            BrushToTint;                                       // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EHDTeam                                       Team;                                              // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            NewBrush;                                          // 0x0090(0x0088)(Parm, OutParm)
	struct FSlateColor                            TintColor;                                         // 0x0118(0x0028)(Edit, BlueprintVisible)
	EHDTeam                                       Temp_byte_Variable;                                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0148(0x0088)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x01D0(0x0028)()
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam) == 0x000008, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam) == 0x0001F8, "Wrong size on WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, BrushToTint) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::BrushToTint' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, Team) == 0x000088, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::Team' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, NewBrush) == 0x000090, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::NewBrush' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, TintColor) == 0x000118, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::TintColor' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, Temp_byte_Variable) == 0x000140, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, K2Node_MakeStruct_SlateBrush) == 0x000148, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam, K2Node_Select_Default) == 0x0001D0, "Member 'WBP_CaptureStatus_FlagIcon_C_TintBrushByTeam::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CaptureStatus_FlagIcon.WBP_CaptureStatus_FlagIcon_C.SetBrushOpacityByCaptureStatus
// 0x01E8 (0x01E8 - 0x0000)
struct WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus final
{
public:
	struct FSlateBrush                            BrushToUpdate;                                     // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bLocked;                                           // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDControlPointObjectiveType                  ObjType;                                           // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            NewBrush;                                          // 0x0090(0x0088)(Parm, OutParm)
	float                                         OpacityToUse;                                      // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHDControlPointObjectiveType                  Temp_byte_Variable;                                // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0130(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0158(0x0088)()
	float                                         K2Node_Select_Default;                             // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus) == 0x000008, "Wrong alignment on WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus");
static_assert(sizeof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus) == 0x0001E8, "Wrong size on WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, BrushToUpdate) == 0x000000, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::BrushToUpdate' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, bLocked) == 0x000088, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::bLocked' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, ObjType) == 0x000089, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::ObjType' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, NewBrush) == 0x000090, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::NewBrush' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, OpacityToUse) == 0x000118, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::OpacityToUse' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, Temp_bool_Variable) == 0x00011C, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, Temp_byte_Variable) == 0x00011D, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, K2Node_MakeStruct_LinearColor) == 0x000120, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, K2Node_MakeStruct_SlateColor) == 0x000130, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, K2Node_MakeStruct_SlateBrush) == 0x000158, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, K2Node_Select_Default) == 0x0001E0, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus, K2Node_Select_Default_1) == 0x0001E4, "Member 'WBP_CaptureStatus_FlagIcon_C_SetBrushOpacityByCaptureStatus::K2Node_Select_Default_1' has a wrong offset!");

}

