#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GOAPNPC

#include "Basic.hpp"

#include "GOAPNPC_structs.hpp"


namespace SDK::Params
{

// Function GOAPNPC.GOAPAction.BeginAction
// 0x0008 (0x0008 - 0x0000)
struct GOAPAction_BeginAction final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPAction_BeginAction) == 0x000008, "Wrong alignment on GOAPAction_BeginAction");
static_assert(sizeof(GOAPAction_BeginAction) == 0x000008, "Wrong size on GOAPAction_BeginAction");
static_assert(offsetof(GOAPAction_BeginAction, Pawn) == 0x000000, "Member 'GOAPAction_BeginAction::Pawn' has a wrong offset!");

// Function GOAPNPC.GOAPAction.DoAction
// 0x0020 (0x0020 - 0x0000)
struct GOAPAction_DoAction final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FailureReason;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPAction_DoAction) == 0x000008, "Wrong alignment on GOAPAction_DoAction");
static_assert(sizeof(GOAPAction_DoAction) == 0x000020, "Wrong size on GOAPAction_DoAction");
static_assert(offsetof(GOAPAction_DoAction, Pawn) == 0x000000, "Member 'GOAPAction_DoAction::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_DoAction, FailureReason) == 0x000008, "Member 'GOAPAction_DoAction::FailureReason' has a wrong offset!");
static_assert(offsetof(GOAPAction_DoAction, ReturnValue) == 0x000018, "Member 'GOAPAction_DoAction::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPAction.EndAction
// 0x0008 (0x0008 - 0x0000)
struct GOAPAction_EndAction final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPAction_EndAction) == 0x000008, "Wrong alignment on GOAPAction_EndAction");
static_assert(sizeof(GOAPAction_EndAction) == 0x000008, "Wrong size on GOAPAction_EndAction");
static_assert(offsetof(GOAPAction_EndAction, Pawn) == 0x000000, "Member 'GOAPAction_EndAction::Pawn' has a wrong offset!");

// Function GOAPNPC.GOAPAction.CheckProceduralPrecondition
// 0x0010 (0x0010 - 0x0000)
struct GOAPAction_CheckProceduralPrecondition final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlanning;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPAction_CheckProceduralPrecondition) == 0x000008, "Wrong alignment on GOAPAction_CheckProceduralPrecondition");
static_assert(sizeof(GOAPAction_CheckProceduralPrecondition) == 0x000010, "Wrong size on GOAPAction_CheckProceduralPrecondition");
static_assert(offsetof(GOAPAction_CheckProceduralPrecondition, Pawn) == 0x000000, "Member 'GOAPAction_CheckProceduralPrecondition::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_CheckProceduralPrecondition, bPlanning) == 0x000008, "Member 'GOAPAction_CheckProceduralPrecondition::bPlanning' has a wrong offset!");
static_assert(offsetof(GOAPAction_CheckProceduralPrecondition, ReturnValue) == 0x000009, "Member 'GOAPAction_CheckProceduralPrecondition::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPAction.GetTargetsList
// 0x0018 (0x0018 - 0x0000)
struct GOAPAction_GetTargetsList final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPAction_GetTargetsList) == 0x000008, "Wrong alignment on GOAPAction_GetTargetsList");
static_assert(sizeof(GOAPAction_GetTargetsList) == 0x000018, "Wrong size on GOAPAction_GetTargetsList");
static_assert(offsetof(GOAPAction_GetTargetsList, Pawn) == 0x000000, "Member 'GOAPAction_GetTargetsList::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_GetTargetsList, ReturnValue) == 0x000008, "Member 'GOAPAction_GetTargetsList::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPAction.HasCompleted
// 0x0010 (0x0010 - 0x0000)
struct GOAPAction_HasCompleted final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPAction_HasCompleted) == 0x000008, "Wrong alignment on GOAPAction_HasCompleted");
static_assert(sizeof(GOAPAction_HasCompleted) == 0x000010, "Wrong size on GOAPAction_HasCompleted");
static_assert(offsetof(GOAPAction_HasCompleted, Pawn) == 0x000000, "Member 'GOAPAction_HasCompleted::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_HasCompleted, ReturnValue) == 0x000008, "Member 'GOAPAction_HasCompleted::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPAction.ReceiveIsActionInvalid
// 0x0010 (0x0010 - 0x0000)
struct GOAPAction_ReceiveIsActionInvalid final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPAction_ReceiveIsActionInvalid) == 0x000008, "Wrong alignment on GOAPAction_ReceiveIsActionInvalid");
static_assert(sizeof(GOAPAction_ReceiveIsActionInvalid) == 0x000010, "Wrong size on GOAPAction_ReceiveIsActionInvalid");
static_assert(offsetof(GOAPAction_ReceiveIsActionInvalid, Pawn) == 0x000000, "Member 'GOAPAction_ReceiveIsActionInvalid::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_ReceiveIsActionInvalid, ReturnValue) == 0x000008, "Member 'GOAPAction_ReceiveIsActionInvalid::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPAction.Validate
// 0x0010 (0x0010 - 0x0000)
struct GOAPAction_Validate final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPAction_Validate) == 0x000008, "Wrong alignment on GOAPAction_Validate");
static_assert(sizeof(GOAPAction_Validate) == 0x000010, "Wrong size on GOAPAction_Validate");
static_assert(offsetof(GOAPAction_Validate, Pawn) == 0x000000, "Member 'GOAPAction_Validate::Pawn' has a wrong offset!");
static_assert(offsetof(GOAPAction_Validate, ReturnValue) == 0x000008, "Member 'GOAPAction_Validate::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.ExecuteGOAP
// 0x0003 (0x0003 - 0x0000)
struct GOAPComponent_ExecuteGOAP final
{
public:
	bool                                          bCreatePlan;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveActionOnComplete;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_ExecuteGOAP) == 0x000001, "Wrong alignment on GOAPComponent_ExecuteGOAP");
static_assert(sizeof(GOAPComponent_ExecuteGOAP) == 0x000003, "Wrong size on GOAPComponent_ExecuteGOAP");
static_assert(offsetof(GOAPComponent_ExecuteGOAP, bCreatePlan) == 0x000000, "Member 'GOAPComponent_ExecuteGOAP::bCreatePlan' has a wrong offset!");
static_assert(offsetof(GOAPComponent_ExecuteGOAP, bRemoveActionOnComplete) == 0x000001, "Member 'GOAPComponent_ExecuteGOAP::bRemoveActionOnComplete' has a wrong offset!");
static_assert(offsetof(GOAPComponent_ExecuteGOAP, ReturnValue) == 0x000002, "Member 'GOAPComponent_ExecuteGOAP::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.GeneratePlan
// 0x0001 (0x0001 - 0x0000)
struct GOAPComponent_GeneratePlan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_GeneratePlan) == 0x000001, "Wrong alignment on GOAPComponent_GeneratePlan");
static_assert(sizeof(GOAPComponent_GeneratePlan) == 0x000001, "Wrong size on GOAPComponent_GeneratePlan");
static_assert(offsetof(GOAPComponent_GeneratePlan, ReturnValue) == 0x000000, "Member 'GOAPComponent_GeneratePlan::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.SetCurrentWorld
// 0x0010 (0x0010 - 0x0000)
struct GOAPComponent_SetCurrentWorld final
{
public:
	TArray<struct FAtom>                          NewCurrentWorld;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_SetCurrentWorld) == 0x000008, "Wrong alignment on GOAPComponent_SetCurrentWorld");
static_assert(sizeof(GOAPComponent_SetCurrentWorld) == 0x000010, "Wrong size on GOAPComponent_SetCurrentWorld");
static_assert(offsetof(GOAPComponent_SetCurrentWorld, NewCurrentWorld) == 0x000000, "Member 'GOAPComponent_SetCurrentWorld::NewCurrentWorld' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.SetGoal
// 0x0008 (0x0008 - 0x0000)
struct GOAPComponent_SetGoal final
{
public:
	class UGOAPGoal*                              NewGoal;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_SetGoal) == 0x000008, "Wrong alignment on GOAPComponent_SetGoal");
static_assert(sizeof(GOAPComponent_SetGoal) == 0x000008, "Wrong size on GOAPComponent_SetGoal");
static_assert(offsetof(GOAPComponent_SetGoal, NewGoal) == 0x000000, "Member 'GOAPComponent_SetGoal::NewGoal' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.UpdateCurrentWorld
// 0x0010 (0x0010 - 0x0000)
struct GOAPComponent_UpdateCurrentWorld final
{
public:
	TArray<struct FAtom>                          Atoms;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_UpdateCurrentWorld) == 0x000008, "Wrong alignment on GOAPComponent_UpdateCurrentWorld");
static_assert(sizeof(GOAPComponent_UpdateCurrentWorld) == 0x000010, "Wrong size on GOAPComponent_UpdateCurrentWorld");
static_assert(offsetof(GOAPComponent_UpdateCurrentWorld, Atoms) == 0x000000, "Member 'GOAPComponent_UpdateCurrentWorld::Atoms' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.GetCurrentWorldStateAtoms
// 0x0010 (0x0010 - 0x0000)
struct GOAPComponent_GetCurrentWorldStateAtoms final
{
public:
	TArray<struct FAtom>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_GetCurrentWorldStateAtoms) == 0x000008, "Wrong alignment on GOAPComponent_GetCurrentWorldStateAtoms");
static_assert(sizeof(GOAPComponent_GetCurrentWorldStateAtoms) == 0x000010, "Wrong size on GOAPComponent_GetCurrentWorldStateAtoms");
static_assert(offsetof(GOAPComponent_GetCurrentWorldStateAtoms, ReturnValue) == 0x000000, "Member 'GOAPComponent_GetCurrentWorldStateAtoms::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.GetDesiredWorldStateAtoms
// 0x0010 (0x0010 - 0x0000)
struct GOAPComponent_GetDesiredWorldStateAtoms final
{
public:
	TArray<struct FAtom>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_GetDesiredWorldStateAtoms) == 0x000008, "Wrong alignment on GOAPComponent_GetDesiredWorldStateAtoms");
static_assert(sizeof(GOAPComponent_GetDesiredWorldStateAtoms) == 0x000010, "Wrong size on GOAPComponent_GetDesiredWorldStateAtoms");
static_assert(offsetof(GOAPComponent_GetDesiredWorldStateAtoms, ReturnValue) == 0x000000, "Member 'GOAPComponent_GetDesiredWorldStateAtoms::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.GetPlanSnapshot
// 0x0010 (0x0010 - 0x0000)
struct GOAPComponent_GetPlanSnapshot final
{
public:
	TArray<class UGOAPAction*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_GetPlanSnapshot) == 0x000008, "Wrong alignment on GOAPComponent_GetPlanSnapshot");
static_assert(sizeof(GOAPComponent_GetPlanSnapshot) == 0x000010, "Wrong size on GOAPComponent_GetPlanSnapshot");
static_assert(offsetof(GOAPComponent_GetPlanSnapshot, ReturnValue) == 0x000000, "Member 'GOAPComponent_GetPlanSnapshot::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.HasPlan
// 0x0001 (0x0001 - 0x0000)
struct GOAPComponent_HasPlan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_HasPlan) == 0x000001, "Wrong alignment on GOAPComponent_HasPlan");
static_assert(sizeof(GOAPComponent_HasPlan) == 0x000001, "Wrong size on GOAPComponent_HasPlan");
static_assert(offsetof(GOAPComponent_HasPlan, ReturnValue) == 0x000000, "Member 'GOAPComponent_HasPlan::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPComponent.IsPlanValid
// 0x0001 (0x0001 - 0x0000)
struct GOAPComponent_IsPlanValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPComponent_IsPlanValid) == 0x000001, "Wrong alignment on GOAPComponent_IsPlanValid");
static_assert(sizeof(GOAPComponent_IsPlanValid) == 0x000001, "Wrong size on GOAPComponent_IsPlanValid");
static_assert(offsetof(GOAPComponent_IsPlanValid, ReturnValue) == 0x000000, "Member 'GOAPComponent_IsPlanValid::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.AddGoal
// 0x0010 (0x0010 - 0x0000)
struct GOAPGoalManager_AddGoal final
{
public:
	TSubclassOf<class UGOAPGoal>                  GoalClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGOAPGoal*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_AddGoal) == 0x000008, "Wrong alignment on GOAPGoalManager_AddGoal");
static_assert(sizeof(GOAPGoalManager_AddGoal) == 0x000010, "Wrong size on GOAPGoalManager_AddGoal");
static_assert(offsetof(GOAPGoalManager_AddGoal, GoalClass) == 0x000000, "Member 'GOAPGoalManager_AddGoal::GoalClass' has a wrong offset!");
static_assert(offsetof(GOAPGoalManager_AddGoal, ReturnValue) == 0x000008, "Member 'GOAPGoalManager_AddGoal::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.FindGoal
// 0x0010 (0x0010 - 0x0000)
struct GOAPGoalManager_FindGoal final
{
public:
	TSubclassOf<class UGOAPGoal>                  GoalClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGOAPGoal*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_FindGoal) == 0x000008, "Wrong alignment on GOAPGoalManager_FindGoal");
static_assert(sizeof(GOAPGoalManager_FindGoal) == 0x000010, "Wrong size on GOAPGoalManager_FindGoal");
static_assert(offsetof(GOAPGoalManager_FindGoal, GoalClass) == 0x000000, "Member 'GOAPGoalManager_FindGoal::GoalClass' has a wrong offset!");
static_assert(offsetof(GOAPGoalManager_FindGoal, ReturnValue) == 0x000008, "Member 'GOAPGoalManager_FindGoal::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.RemoveGoal
// 0x0008 (0x0008 - 0x0000)
struct GOAPGoalManager_RemoveGoal final
{
public:
	TSubclassOf<class UGOAPGoal>                  GoalClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_RemoveGoal) == 0x000008, "Wrong alignment on GOAPGoalManager_RemoveGoal");
static_assert(sizeof(GOAPGoalManager_RemoveGoal) == 0x000008, "Wrong size on GOAPGoalManager_RemoveGoal");
static_assert(offsetof(GOAPGoalManager_RemoveGoal, GoalClass) == 0x000000, "Member 'GOAPGoalManager_RemoveGoal::GoalClass' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.SetCurrentGoal
// 0x0010 (0x0010 - 0x0000)
struct GOAPGoalManager_SetCurrentGoal final
{
public:
	class UGOAPGoal*                              NewGoal;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivatePreviousGoal;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GOAPGoalManager_SetCurrentGoal) == 0x000008, "Wrong alignment on GOAPGoalManager_SetCurrentGoal");
static_assert(sizeof(GOAPGoalManager_SetCurrentGoal) == 0x000010, "Wrong size on GOAPGoalManager_SetCurrentGoal");
static_assert(offsetof(GOAPGoalManager_SetCurrentGoal, NewGoal) == 0x000000, "Member 'GOAPGoalManager_SetCurrentGoal::NewGoal' has a wrong offset!");
static_assert(offsetof(GOAPGoalManager_SetCurrentGoal, bDeactivatePreviousGoal) == 0x000008, "Member 'GOAPGoalManager_SetCurrentGoal::bDeactivatePreviousGoal' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.SetGoalSet
// 0x0008 (0x0008 - 0x0000)
struct GOAPGoalManager_SetGoalSet final
{
public:
	const class UGOAPGoalSet*                     InGoalSet;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_SetGoalSet) == 0x000008, "Wrong alignment on GOAPGoalManager_SetGoalSet");
static_assert(sizeof(GOAPGoalManager_SetGoalSet) == 0x000008, "Wrong size on GOAPGoalManager_SetGoalSet");
static_assert(offsetof(GOAPGoalManager_SetGoalSet, InGoalSet) == 0x000000, "Member 'GOAPGoalManager_SetGoalSet::InGoalSet' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.UpdateGoalSet
// 0x0008 (0x0008 - 0x0000)
struct GOAPGoalManager_UpdateGoalSet final
{
public:
	const class UGOAPGoalSet*                     InGoalSet;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_UpdateGoalSet) == 0x000008, "Wrong alignment on GOAPGoalManager_UpdateGoalSet");
static_assert(sizeof(GOAPGoalManager_UpdateGoalSet) == 0x000008, "Wrong size on GOAPGoalManager_UpdateGoalSet");
static_assert(offsetof(GOAPGoalManager_UpdateGoalSet, InGoalSet) == 0x000000, "Member 'GOAPGoalManager_UpdateGoalSet::InGoalSet' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.GetCurrentGoalAtoms
// 0x0010 (0x0010 - 0x0000)
struct GOAPGoalManager_GetCurrentGoalAtoms final
{
public:
	TArray<struct FAtom>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_GetCurrentGoalAtoms) == 0x000008, "Wrong alignment on GOAPGoalManager_GetCurrentGoalAtoms");
static_assert(sizeof(GOAPGoalManager_GetCurrentGoalAtoms) == 0x000010, "Wrong size on GOAPGoalManager_GetCurrentGoalAtoms");
static_assert(offsetof(GOAPGoalManager_GetCurrentGoalAtoms, ReturnValue) == 0x000000, "Member 'GOAPGoalManager_GetCurrentGoalAtoms::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoalManager.GetOuterGOAPComp
// 0x0008 (0x0008 - 0x0000)
struct GOAPGoalManager_GetOuterGOAPComp final
{
public:
	class UGOAPComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoalManager_GetOuterGOAPComp) == 0x000008, "Wrong alignment on GOAPGoalManager_GetOuterGOAPComp");
static_assert(sizeof(GOAPGoalManager_GetOuterGOAPComp) == 0x000008, "Wrong size on GOAPGoalManager_GetOuterGOAPComp");
static_assert(offsetof(GOAPGoalManager_GetOuterGOAPComp, ReturnValue) == 0x000000, "Member 'GOAPGoalManager_GetOuterGOAPComp::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoal.RequiresNewPlan
// 0x0001 (0x0001 - 0x0000)
struct GOAPGoal_RequiresNewPlan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoal_RequiresNewPlan) == 0x000001, "Wrong alignment on GOAPGoal_RequiresNewPlan");
static_assert(sizeof(GOAPGoal_RequiresNewPlan) == 0x000001, "Wrong size on GOAPGoal_RequiresNewPlan");
static_assert(offsetof(GOAPGoal_RequiresNewPlan, ReturnValue) == 0x000000, "Member 'GOAPGoal_RequiresNewPlan::ReturnValue' has a wrong offset!");

// Function GOAPNPC.GOAPGoal.GetOuterGoalManager
// 0x0008 (0x0008 - 0x0000)
struct GOAPGoal_GetOuterGoalManager final
{
public:
	class UGOAPGoalManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GOAPGoal_GetOuterGoalManager) == 0x000008, "Wrong alignment on GOAPGoal_GetOuterGoalManager");
static_assert(sizeof(GOAPGoal_GetOuterGoalManager) == 0x000008, "Wrong size on GOAPGoal_GetOuterGoalManager");
static_assert(offsetof(GOAPGoal_GetOuterGoalManager, ReturnValue) == 0x000000, "Member 'GOAPGoal_GetOuterGoalManager::ReturnValue' has a wrong offset!");

}

