#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDHUDBase

#include "Basic.hpp"

#include "HDMain_classes.hpp"
#include "DonkehFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HDHUDBase.BP_HDHUDBase_C
// 0x01E0 (0x04F0 - 0x0310)
class ABP_HDHUDBase_C final : public AHDHUD
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrawCrosshair;                                    // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowCompass;                                      // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowPlayerStatus;                                 // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowWeaponStatus;                                 // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowCaptureStatus;                                // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowEquipmentSelect;                              // 0x0325(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowWatermark;                                    // 0x0326(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInitialized;                                      // 0x0327(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CrosshairWidth;                                    // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairHeight;                                   // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HUDContainerUWClass;                               // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              HUDContainerUWVisibilityOverride;                  // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bHUDWidgetShown;                                   // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  LastOwningPawn;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerControllerBase_C*           OwningHDPC;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerCharacterBase_C*            OwningHDPawn;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADFBaseItem*                            OwningPawnEquippedItem;                            // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrawNametags;                                     // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawNametagDistanceMin;                            // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawNametagDistanceMax;                            // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HUD_C*                             HUDContainerUW;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawDotsDistanceMin;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawDotsDistanceMax;                               // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFont*                                  NametagFont;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagTextVerticalOffset;                         // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NametagTextLengthMax;                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNametagUseTextScaling;                            // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagTextScaleMin;                               // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagTextScaleMax;                               // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNametagTextFade;                            // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagTextFadeRangeNear;                          // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotVerticalOffset;                          // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNametagUseDotSymbolScaling;                       // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagDotScaleMin;                                // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotScaleMax;                                // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNametagDotFade;                             // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagDotFadeRangeNear;                           // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotFadeRangeFar;                            // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagTextColorSquad;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NametagDotSymbolSquad;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagDotSymbolSquadColor;                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolSquadWidth;                        // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolSquadHeight;                       // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagTextColorOther;                             // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NametagDotSymbolOther;                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagDotSymbolOtherColor;                        // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolOtherWidth;                        // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolOtherHeight;                       // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagTextColorDefault;                           // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             NametagDotSymbolDefault;                           // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NametagDotSymbolDefaultColor;                      // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolDefaultWidth;                      // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotSymbolDefaultHeight;                     // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNametagUseLineTraces;                             // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NametagReferenceResolution;                        // 0x0454(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         NametagLineTraceOffsetTop;                         // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bNametagUseAdditionalLineTraces;                   // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagAdditionalLineTraceOffsetSides;             // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         NametagTextFadeRangeFar;                           // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNametagTextFrame;                           // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagTextFrameHorizontalMargin;                  // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagTextFrameHorizontalFade;                    // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagTextFrameVerticalMargin;                    // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagTextFrameVerticalFade;                      // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNametagDotFrame;                            // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagDotFrameHorizontalMargin;                   // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotFrameHorizontalFade;                     // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotFrameVerticalMargin;                     // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NametagDotFrameVerticalFade;                       // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVoteListenersInitialized;                         // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDFActiveVoteInfo                      ActiveVoteInfo;                                    // 0x0498(0x0048)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	EDFVoteStatus                                 LastVoteStatus;                                    // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastYesVoteCount;                                  // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastNoVoteCount;                                   // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HDHUDBase(int32 EntryPoint);
	void PlayersUpdated(class AGameStateBase* GameState);
	void VoteCountUpdated();
	void VoteEnded();
	void VoteReset();
	void VoteStarted();
	void PlayerVoteStateUpdated(class UDFVotingComponent* SourceVotingComponent);
	void TeamsUpdated(class AGameStateBase* GameState);
	void OwningPlayerUnpossessPawn(class APawn* Pawn);
	void OwningPlayerPossessPawn(class APawn* Pawn);
	void OwningPawnEquipmentItemChanged(class ADFBaseCharacter* Character, class ADFBaseItem* NewEquippedItem, class ADFBaseItem* PrevEquippedItem);
	void OwningPawnUpdated(class APawn* NewOwningPawn, class APawn* PrevOwningPawn);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveDrawHUD(int32 SizeX, int32 SizeY);
	void ToggleEquipmentUI(bool bShown);
	void ToggleWeaponStatusUI(bool bShown);
	void EquipmentSelectNextItem();
	void EquipmentSelectPrevItem();
	void EquipmentSelectItem(int32 ItemIndex);
	void EquipmentAddItemsFromLoadout(class UHDKit* NewLoadout, class UDFInventoryComponent* PlayerInventory, class ADFBaseWeapon* EquippedItem);
	void EquipmentSelectItemBySlotNum(int32 SlotNum, bool* bOutNewSelection);
	void EquipmentSelectEquippedItem(class UHDKit* CurrentLoadout, class AHDBaseWeapon* EquippedItem);
	void ShowHUDWidget();
	void HideHUDWidget(bool bDestroyWidgetOnHide);
	void UpdateHUDVisibility(bool bDestroyOnHide);
	void InitOwningHDPCDelegates();
	void CleanupOwningHDPCDelegates();
	void InitOwningHDPawnDelegates();
	void CleanupDelegatesForHDPawn(class ABP_HDPlayerCharacterBase_C* PlayerChar);
	void ForceUpdateAllOwningPlayerReferences();
	void ClearAllOwningPlayerReferences();
	void ForceUpdateOwningPawnReferences();
	void ClearOwningPawnReferences();
	void ResetPlayerStatusEffectsUI();
	void SetAmmoResupplyEffectVisibility(bool bVisible);
	void SetMedicHealingEffectVisibility(bool bVisible);
	void SetTextChatHistoryVisibility(bool bVisible);
	void IsTextChatHistoryVisible(bool* bVisible);
	void DrawCrosshair(int32 SizeX, int32 SizeY);
	void DrawNametags(int32 SizeX, int32 SizeY);
	void CanDrawNametag(class ABP_HDPlayerCharacterBase_C* InOtherPawn, float InVerticalOffset, const struct FVector& InOwnerCameraLocation, bool* bCanDrawNametag, struct FVector2D* NametagScreenPosition);
	bool NametagsSingleLinetrace(const struct FVector& Start, const struct FVector& End, class ABP_HDPlayerCharacterBase_C* OtherPlayer);
	void AddBasicNotification(const struct FFUINotificationInfo& Info);
	void AddCustomNotification(class UUserWidget* Widget);
	void IsValidVoteInfo(struct FDFActiveVoteInfo& VoteInfo, bool* bValid);

	void EquipmentGetSelectedItem(class AHDBaseWeapon** OutItemToEquip, bool* bFoundItem) const;
	void EquipmentGetSelectedItemSlotNum(int32* OutSlotNum, bool* bFoundItem) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HDHUDBase_C">();
	}
	static class ABP_HDHUDBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HDHUDBase_C>();
	}
};
static_assert(alignof(ABP_HDHUDBase_C) == 0x000008, "Wrong alignment on ABP_HDHUDBase_C");
static_assert(sizeof(ABP_HDHUDBase_C) == 0x0004F0, "Wrong size on ABP_HDHUDBase_C");
static_assert(offsetof(ABP_HDHUDBase_C, UberGraphFrame) == 0x000310, "Member 'ABP_HDHUDBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, DefaultSceneRoot) == 0x000318, "Member 'ABP_HDHUDBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bDrawCrosshair) == 0x000320, "Member 'ABP_HDHUDBase_C::bDrawCrosshair' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowCompass) == 0x000321, "Member 'ABP_HDHUDBase_C::bShowCompass' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowPlayerStatus) == 0x000322, "Member 'ABP_HDHUDBase_C::bShowPlayerStatus' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowWeaponStatus) == 0x000323, "Member 'ABP_HDHUDBase_C::bShowWeaponStatus' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowCaptureStatus) == 0x000324, "Member 'ABP_HDHUDBase_C::bShowCaptureStatus' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowEquipmentSelect) == 0x000325, "Member 'ABP_HDHUDBase_C::bShowEquipmentSelect' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bShowWatermark) == 0x000326, "Member 'ABP_HDHUDBase_C::bShowWatermark' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bInitialized) == 0x000327, "Member 'ABP_HDHUDBase_C::bInitialized' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, CrosshairWidth) == 0x000328, "Member 'ABP_HDHUDBase_C::CrosshairWidth' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, CrosshairHeight) == 0x00032C, "Member 'ABP_HDHUDBase_C::CrosshairHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, HUDContainerUWClass) == 0x000330, "Member 'ABP_HDHUDBase_C::HUDContainerUWClass' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, HUDContainerUWVisibilityOverride) == 0x000338, "Member 'ABP_HDHUDBase_C::HUDContainerUWVisibilityOverride' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bHUDWidgetShown) == 0x000339, "Member 'ABP_HDHUDBase_C::bHUDWidgetShown' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, LastOwningPawn) == 0x000340, "Member 'ABP_HDHUDBase_C::LastOwningPawn' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, OwningHDPC) == 0x000348, "Member 'ABP_HDHUDBase_C::OwningHDPC' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, OwningHDPawn) == 0x000350, "Member 'ABP_HDHUDBase_C::OwningHDPawn' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, OwningPawnEquippedItem) == 0x000358, "Member 'ABP_HDHUDBase_C::OwningPawnEquippedItem' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bDrawNametags) == 0x000360, "Member 'ABP_HDHUDBase_C::bDrawNametags' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, DrawNametagDistanceMin) == 0x000364, "Member 'ABP_HDHUDBase_C::DrawNametagDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, DrawNametagDistanceMax) == 0x000368, "Member 'ABP_HDHUDBase_C::DrawNametagDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, HUDContainerUW) == 0x000370, "Member 'ABP_HDHUDBase_C::HUDContainerUW' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, DrawDotsDistanceMin) == 0x000378, "Member 'ABP_HDHUDBase_C::DrawDotsDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, DrawDotsDistanceMax) == 0x00037C, "Member 'ABP_HDHUDBase_C::DrawDotsDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagFont) == 0x000380, "Member 'ABP_HDHUDBase_C::NametagFont' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextVerticalOffset) == 0x000388, "Member 'ABP_HDHUDBase_C::NametagTextVerticalOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextLengthMax) == 0x00038C, "Member 'ABP_HDHUDBase_C::NametagTextLengthMax' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bNametagUseTextScaling) == 0x000390, "Member 'ABP_HDHUDBase_C::bNametagUseTextScaling' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextScaleMin) == 0x000394, "Member 'ABP_HDHUDBase_C::NametagTextScaleMin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextScaleMax) == 0x000398, "Member 'ABP_HDHUDBase_C::NametagTextScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bEnableNametagTextFade) == 0x00039C, "Member 'ABP_HDHUDBase_C::bEnableNametagTextFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFadeRangeNear) == 0x0003A0, "Member 'ABP_HDHUDBase_C::NametagTextFadeRangeNear' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotVerticalOffset) == 0x0003A4, "Member 'ABP_HDHUDBase_C::NametagDotVerticalOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bNametagUseDotSymbolScaling) == 0x0003A8, "Member 'ABP_HDHUDBase_C::bNametagUseDotSymbolScaling' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotScaleMin) == 0x0003AC, "Member 'ABP_HDHUDBase_C::NametagDotScaleMin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotScaleMax) == 0x0003B0, "Member 'ABP_HDHUDBase_C::NametagDotScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bEnableNametagDotFade) == 0x0003B4, "Member 'ABP_HDHUDBase_C::bEnableNametagDotFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFadeRangeNear) == 0x0003B8, "Member 'ABP_HDHUDBase_C::NametagDotFadeRangeNear' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFadeRangeFar) == 0x0003BC, "Member 'ABP_HDHUDBase_C::NametagDotFadeRangeFar' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextColorSquad) == 0x0003C0, "Member 'ABP_HDHUDBase_C::NametagTextColorSquad' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolSquad) == 0x0003D0, "Member 'ABP_HDHUDBase_C::NametagDotSymbolSquad' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolSquadColor) == 0x0003D8, "Member 'ABP_HDHUDBase_C::NametagDotSymbolSquadColor' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolSquadWidth) == 0x0003E8, "Member 'ABP_HDHUDBase_C::NametagDotSymbolSquadWidth' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolSquadHeight) == 0x0003EC, "Member 'ABP_HDHUDBase_C::NametagDotSymbolSquadHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextColorOther) == 0x0003F0, "Member 'ABP_HDHUDBase_C::NametagTextColorOther' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolOther) == 0x000400, "Member 'ABP_HDHUDBase_C::NametagDotSymbolOther' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolOtherColor) == 0x000408, "Member 'ABP_HDHUDBase_C::NametagDotSymbolOtherColor' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolOtherWidth) == 0x000418, "Member 'ABP_HDHUDBase_C::NametagDotSymbolOtherWidth' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolOtherHeight) == 0x00041C, "Member 'ABP_HDHUDBase_C::NametagDotSymbolOtherHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextColorDefault) == 0x000420, "Member 'ABP_HDHUDBase_C::NametagTextColorDefault' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolDefault) == 0x000430, "Member 'ABP_HDHUDBase_C::NametagDotSymbolDefault' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolDefaultColor) == 0x000438, "Member 'ABP_HDHUDBase_C::NametagDotSymbolDefaultColor' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolDefaultWidth) == 0x000448, "Member 'ABP_HDHUDBase_C::NametagDotSymbolDefaultWidth' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotSymbolDefaultHeight) == 0x00044C, "Member 'ABP_HDHUDBase_C::NametagDotSymbolDefaultHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bNametagUseLineTraces) == 0x000450, "Member 'ABP_HDHUDBase_C::bNametagUseLineTraces' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagReferenceResolution) == 0x000454, "Member 'ABP_HDHUDBase_C::NametagReferenceResolution' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagLineTraceOffsetTop) == 0x00045C, "Member 'ABP_HDHUDBase_C::NametagLineTraceOffsetTop' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bNametagUseAdditionalLineTraces) == 0x000460, "Member 'ABP_HDHUDBase_C::bNametagUseAdditionalLineTraces' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagAdditionalLineTraceOffsetSides) == 0x000464, "Member 'ABP_HDHUDBase_C::NametagAdditionalLineTraceOffsetSides' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFadeRangeFar) == 0x000468, "Member 'ABP_HDHUDBase_C::NametagTextFadeRangeFar' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bEnableNametagTextFrame) == 0x00046C, "Member 'ABP_HDHUDBase_C::bEnableNametagTextFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFrameHorizontalMargin) == 0x000470, "Member 'ABP_HDHUDBase_C::NametagTextFrameHorizontalMargin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFrameHorizontalFade) == 0x000474, "Member 'ABP_HDHUDBase_C::NametagTextFrameHorizontalFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFrameVerticalMargin) == 0x000478, "Member 'ABP_HDHUDBase_C::NametagTextFrameVerticalMargin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagTextFrameVerticalFade) == 0x00047C, "Member 'ABP_HDHUDBase_C::NametagTextFrameVerticalFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bEnableNametagDotFrame) == 0x000480, "Member 'ABP_HDHUDBase_C::bEnableNametagDotFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFrameHorizontalMargin) == 0x000484, "Member 'ABP_HDHUDBase_C::NametagDotFrameHorizontalMargin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFrameHorizontalFade) == 0x000488, "Member 'ABP_HDHUDBase_C::NametagDotFrameHorizontalFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFrameVerticalMargin) == 0x00048C, "Member 'ABP_HDHUDBase_C::NametagDotFrameVerticalMargin' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, NametagDotFrameVerticalFade) == 0x000490, "Member 'ABP_HDHUDBase_C::NametagDotFrameVerticalFade' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, bVoteListenersInitialized) == 0x000494, "Member 'ABP_HDHUDBase_C::bVoteListenersInitialized' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, ActiveVoteInfo) == 0x000498, "Member 'ABP_HDHUDBase_C::ActiveVoteInfo' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, LastVoteStatus) == 0x0004E0, "Member 'ABP_HDHUDBase_C::LastVoteStatus' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, LastYesVoteCount) == 0x0004E4, "Member 'ABP_HDHUDBase_C::LastYesVoteCount' has a wrong offset!");
static_assert(offsetof(ABP_HDHUDBase_C, LastNoVoteCount) == 0x0004E8, "Member 'ABP_HDHUDBase_C::LastNoVoteCount' has a wrong offset!");

}

