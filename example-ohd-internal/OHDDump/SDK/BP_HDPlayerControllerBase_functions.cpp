#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDPlayerControllerBase

#include "Basic.hpp"

#include "BP_HDPlayerControllerBase_classes.hpp"
#include "BP_HDPlayerControllerBase_parameters.hpp"


namespace SDK
{

// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.OnRepPlayerState__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::OnRepPlayerState__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "OnRepPlayerState__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ExecuteUbergraph_BP_HDPlayerControllerBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ExecuteUbergraph_BP_HDPlayerControllerBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ExecuteUbergraph_BP_HDPlayerControllerBase");

	Params::BP_HDPlayerControllerBase_C_ExecuteUbergraph_BP_HDPlayerControllerBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceiveUnpossessPawn
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            UnpossessedPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ReceiveUnpossessPawn(class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceiveUnpossessPawn");

	Params::BP_HDPlayerControllerBase_C_ReceiveUnpossessPawn Parms{};

	Parms.UnpossessedPawn = UnpossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceiveGameHasEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           EndGameFocus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsWinner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::ReceiveGameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceiveGameHasEnded");

	Params::BP_HDPlayerControllerBase_C_ReceiveGameHasEnded Parms{};

	Parms.EndGameFocus = EndGameFocus;
	Parms.bIsWinner = bIsWinner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.Auth_SpawnVehicle
// (Event, Public, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::Auth_SpawnVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "Auth_SpawnVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.CharacterDeath
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            VictimPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      VictimController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   KillingDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class APawn*                            InstigatingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::CharacterDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "CharacterDeath");

	Params::BP_HDPlayerControllerBase_C_CharacterDeath Parms{};

	Parms.VictimPawn = VictimPawn;
	Parms.VictimController = VictimController;
	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceivePossessPawn
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            NewPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ReceivePossessPawn(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceivePossessPawn");

	Params::BP_HDPlayerControllerBase_C_ReceivePossessPawn Parms{};

	Parms.NewPawn = NewPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.Server_RequestSeatChange
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Seat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::Server_RequestSeatChange(int32 Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "Server_RequestSeatChange");

	Params::BP_HDPlayerControllerBase_C_Server_RequestSeatChange Parms{};

	Parms.Seat = Seat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.RequestExitVehicle
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AArcBaseVehicle*                  Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::RequestExitVehicle(class AArcBaseVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "RequestExitVehicle");

	Params::BP_HDPlayerControllerBase_C_RequestExitVehicle Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.TryGetInVehicle
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AArcBaseVehicle*                  Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::TryGetInVehicle(class AArcBaseVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "TryGetInVehicle");

	Params::BP_HDPlayerControllerBase_C_TryGetInVehicle Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceivePlayerTeamNumUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   LastTeamNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewTeamNum                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ReceivePlayerTeamNumUpdated(uint8 LastTeamNum, uint8 NewTeamNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceivePlayerTeamNumUpdated");

	Params::BP_HDPlayerControllerBase_C_ReceivePlayerTeamNumUpdated Parms{};

	Parms.LastTeamNum = LastTeamNum;
	Parms.NewTeamNum = NewTeamNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.OnPlayerSpawnTimerElapsed
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::OnPlayerSpawnTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "OnPlayerSpawnTimerElapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceiveOnRepPlayerState
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::ReceiveOnRepPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceiveOnRepPlayerState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.OnDeployMenuPreloadFinished
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::OnDeployMenuPreloadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "OnDeployMenuPreloadFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.UpdatePlayerPOIs
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::UpdatePlayerPOIs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "UpdatePlayerPOIs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ServerKickSquadMember
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHDPlayerState*                   MemberToRemove                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ServerKickSquadMember(class AHDSquadState* Squad, class AHDPlayerState* MemberToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ServerKickSquadMember");

	Params::BP_HDPlayerControllerBase_C_ServerKickSquadMember Parms{};

	Parms.Squad = Squad;
	Parms.MemberToRemove = MemberToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ServerSetSquadLockedState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::ServerSetSquadLockedState(class AHDSquadState* Squad, bool bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ServerSetSquadLockedState");

	Params::BP_HDPlayerControllerBase_C_ServerSetSquadLockedState Parms{};

	Parms.Squad = Squad;
	Parms.bLocked = bLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ServerJoinSquad
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    SquadToJoin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ServerJoinSquad(class AHDSquadState* SquadToJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ServerJoinSquad");

	Params::BP_HDPlayerControllerBase_C_ServerJoinSquad Parms{};

	Parms.SquadToJoin = SquadToJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ServerLeaveCurrentSquad
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::ServerLeaveCurrentSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ServerLeaveCurrentSquad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ServerCreateAndJoinUserSquadUnnamed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDPlatoonState*                  ForPlatoon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::ServerCreateAndJoinUserSquadUnnamed(class AHDPlatoonState* ForPlatoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ServerCreateAndJoinUserSquadUnnamed");

	Params::BP_HDPlayerControllerBase_C_ServerCreateAndJoinUserSquadUnnamed Parms{};

	Parms.ForPlatoon = ForPlatoon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_VoteNo_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_VoteNo_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_VoteNo_K2Node_InputActionEvent_0");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_VoteNo_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_VoteYes_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_VoteYes_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_VoteYes_K2Node_InputActionEvent_1");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_VoteYes_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_ChatHistoryToggle_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_ChatHistoryToggle_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_ChatHistoryToggle_K2Node_InputActionEvent_2");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_ChatHistoryToggle_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.OnLoaded_97A2A56D4425648AEE60ECA073085E53
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::OnLoaded_97A2A56D4425648AEE60ECA073085E53(class UClass* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "OnLoaded_97A2A56D4425648AEE60ECA073085E53");

	Params::BP_HDPlayerControllerBase_C_OnLoaded_97A2A56D4425648AEE60ECA073085E53 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_F4_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_F4_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_F4_K2Node_InputKeyEvent_0");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_F4_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_Use_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_Use_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_Use_K2Node_InputActionEvent_3");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_Use_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_F3_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_F3_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_F3_K2Node_InputKeyEvent_1");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_F3_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_F2_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_F2_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_F2_K2Node_InputKeyEvent_2");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_F2_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_F1_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_F1_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_F1_K2Node_InputKeyEvent_3");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_F1_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_DeployMenu_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_DeployMenu_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_DeployMenu_K2Node_InputActionEvent_4");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_DeployMenu_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_Fire_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_Fire_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_Fire_K2Node_InputActionEvent_5");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_Fire_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InpActEvt_Fire_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InpActEvt_Fire_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InpActEvt_Fire_K2Node_InputActionEvent_6");

	Params::BP_HDPlayerControllerBase_C_InpActEvt_Fire_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.LoadAndActivateDeployMenu
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::LoadAndActivateDeployMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "LoadAndActivateDeployMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.LoadDeployMenu
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::LoadDeployMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "LoadDeployMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.UnloadDeployMenu
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::UnloadDeployMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "UnloadDeployMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.DeployMenuToggle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShowMenu                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::DeployMenuToggle(bool bShowMenu, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "DeployMenuToggle");

	Params::BP_HDPlayerControllerBase_C_DeployMenuToggle Parms{};

	Parms.bShowMenu = bShowMenu;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.LoadDeathScreen
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::LoadDeathScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "LoadDeathScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.UnloadDeathScreen
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::UnloadDeathScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "UnloadDeathScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.DeathScreenToggle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::DeathScreenToggle(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "DeathScreenToggle");

	Params::BP_HDPlayerControllerBase_C_DeathScreenToggle Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.IsVictoryMenuShown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bShown                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::IsVictoryMenuShown(bool* bShown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "IsVictoryMenuShown");

	Params::BP_HDPlayerControllerBase_C_IsVictoryMenuShown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShown != nullptr)
		*bShown = Parms.bShown;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.GetMinimapWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UDFMinimap*                       MinimapWidget                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::GetMinimapWidget(class UDFMinimap** MinimapWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "GetMinimapWidget");

	Params::BP_HDPlayerControllerBase_C_GetMinimapWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinimapWidget != nullptr)
		*MinimapWidget = Parms.MinimapWidget;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.ShowHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::ShowHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "ShowHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.HideHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::HideHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "HideHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SpawnVehicleAtPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           VehicleClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::SpawnVehicleAtPlayer(class UClass* VehicleClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SpawnVehicleAtPlayer");

	Params::BP_HDPlayerControllerBase_C_SpawnVehicleAtPlayer Parms{};

	Parms.VehicleClass = VehicleClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.GetHDPlayerState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AHDPlayerState*                   PlayerState_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::GetHDPlayerState(class AHDPlayerState** PlayerState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "GetHDPlayerState");

	Params::BP_HDPlayerControllerBase_C_GetHDPlayerState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerState_0 != nullptr)
		*PlayerState_0 = Parms.PlayerState_0;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.GetHDTeamState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AHDTeamState*                     TeamState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::GetHDTeamState(class AHDTeamState** TeamState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "GetHDTeamState");

	Params::BP_HDPlayerControllerBase_C_GetHDTeamState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TeamState_0 != nullptr)
		*TeamState_0 = Parms.TeamState_0;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.InternalCreateUnnamedSquad
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDPlatoonState*                  ForPlatoon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bJoinSquadAfterCreation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bStartLocked                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AHDSquadState*                    NewSquad                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::InternalCreateUnnamedSquad(class AHDPlatoonState* ForPlatoon, bool bJoinSquadAfterCreation, bool bStartLocked, bool* bSuccess, class AHDSquadState** NewSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "InternalCreateUnnamedSquad");

	Params::BP_HDPlayerControllerBase_C_InternalCreateUnnamedSquad Parms{};

	Parms.ForPlatoon = ForPlatoon;
	Parms.bJoinSquadAfterCreation = bJoinSquadAfterCreation;
	Parms.bStartLocked = bStartLocked;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (NewSquad != nullptr)
		*NewSquad = Parms.NewSquad;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.JoinSquad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    SquadToJoin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bJoinSuccess                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::JoinSquad(class AHDSquadState* SquadToJoin, bool* bJoinSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "JoinSquad");

	Params::BP_HDPlayerControllerBase_C_JoinSquad Parms{};

	Parms.SquadToJoin = SquadToJoin;

	UObject::ProcessEvent(Func, &Parms);

	if (bJoinSuccess != nullptr)
		*bJoinSuccess = Parms.bJoinSuccess;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.CanJoinSquad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AHDSquadState*                    SquadToJoin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bJoinableSquad                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::CanJoinSquad(class AHDSquadState* SquadToJoin, bool* bJoinableSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "CanJoinSquad");

	Params::BP_HDPlayerControllerBase_C_CanJoinSquad Parms{};

	Parms.SquadToJoin = SquadToJoin;

	UObject::ProcessEvent(Func, &Parms);

	if (bJoinableSquad != nullptr)
		*bJoinableSquad = Parms.bJoinableSquad;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.IsSquadLeader
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AHDSquadState*                    Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSquadLeader                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::IsSquadLeader(class AHDSquadState* Squad, bool* bSquadLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "IsSquadLeader");

	Params::BP_HDPlayerControllerBase_C_IsSquadLeader Parms{};

	Parms.Squad = Squad;

	UObject::ProcessEvent(Func, &Parms);

	if (bSquadLeader != nullptr)
		*bSquadLeader = Parms.bSquadLeader;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.LeaveCurrentSquad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLeaveSuccess                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::LeaveCurrentSquad(bool* bLeaveSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "LeaveCurrentSquad");

	Params::BP_HDPlayerControllerBase_C_LeaveCurrentSquad Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLeaveSuccess != nullptr)
		*bLeaveSuccess = Parms.bLeaveSuccess;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.KickSquadMember
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHDPlayerState*                   MemberToRemove                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemoveSuccess                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::KickSquadMember(class AHDSquadState* Squad, class AHDPlayerState* MemberToRemove, bool* bRemoveSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "KickSquadMember");

	Params::BP_HDPlayerControllerBase_C_KickSquadMember Parms{};

	Parms.Squad = Squad;
	Parms.MemberToRemove = MemberToRemove;

	UObject::ProcessEvent(Func, &Parms);

	if (bRemoveSuccess != nullptr)
		*bRemoveSuccess = Parms.bRemoveSuccess;
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SetSquadLockedState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::SetSquadLockedState(class AHDSquadState* Squad, bool bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SetSquadLockedState");

	Params::BP_HDPlayerControllerBase_C_SetSquadLockedState Parms{};

	Parms.Squad = Squad;
	Parms.bLocked = bLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SetCamViewRotationLimits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ViewRotMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ViewRotMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRelativeToPawnRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::SetCamViewRotationLimits(const struct FRotator& ViewRotMin, const struct FRotator& ViewRotMax, bool bRelativeToPawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SetCamViewRotationLimits");

	Params::BP_HDPlayerControllerBase_C_SetCamViewRotationLimits Parms{};

	Parms.ViewRotMin = std::move(ViewRotMin);
	Parms.ViewRotMax = std::move(ViewRotMax);
	Parms.bRelativeToPawnRotation = bRelativeToPawnRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SetCamViewRotationRollLimits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ViewRollMin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ViewRollMax                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRelativeToPawnRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::SetCamViewRotationRollLimits(float ViewRollMin, float ViewRollMax, bool bRelativeToPawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SetCamViewRotationRollLimits");

	Params::BP_HDPlayerControllerBase_C_SetCamViewRotationRollLimits Parms{};

	Parms.ViewRollMin = ViewRollMin;
	Parms.ViewRollMax = ViewRollMax;
	Parms.bRelativeToPawnRotation = bRelativeToPawnRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SetCamViewRotationPitchLimits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ViewPitchMin                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ViewPitchMax                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRelativeToPawnRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::SetCamViewRotationPitchLimits(float ViewPitchMin, float ViewPitchMax, bool bRelativeToPawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SetCamViewRotationPitchLimits");

	Params::BP_HDPlayerControllerBase_C_SetCamViewRotationPitchLimits Parms{};

	Parms.ViewPitchMin = ViewPitchMin;
	Parms.ViewPitchMax = ViewPitchMax;
	Parms.bRelativeToPawnRotation = bRelativeToPawnRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.SetCamViewRotationYawLimits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ViewYawMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ViewYawMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRelativeToPawnRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerControllerBase_C::SetCamViewRotationYawLimits(float ViewYawMin, float ViewYawMax, bool bRelativeToPawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "SetCamViewRotationYawLimits");

	Params::BP_HDPlayerControllerBase_C_SetCamViewRotationYawLimits Parms{};

	Parms.ViewYawMin = ViewYawMin;
	Parms.ViewYawMax = ViewYawMax;
	Parms.bRelativeToPawnRotation = bRelativeToPawnRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.RestoreCamDefaultViewRotationLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::RestoreCamDefaultViewRotationLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "RestoreCamDefaultViewRotationLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.RestoreCamDefaultViewRotationRollLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::RestoreCamDefaultViewRotationRollLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "RestoreCamDefaultViewRotationRollLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.RestoreCamDefaultViewRotationPitchLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::RestoreCamDefaultViewRotationPitchLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "RestoreCamDefaultViewRotationPitchLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.RestoreCamDefaultViewRotationYawLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerControllerBase_C::RestoreCamDefaultViewRotationYawLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "RestoreCamDefaultViewRotationYawLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.GetJoystickDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EJoystickTypes                          Stick                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        StickInput                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerControllerBase_C::GetJoystickDirection(EJoystickTypes Stick, struct FVector2D* StickInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "GetJoystickDirection");

	Params::BP_HDPlayerControllerBase_C_GetJoystickDirection Parms{};

	Parms.Stick = Stick;

	UObject::ProcessEvent(Func, &Parms);

	if (StickInput != nullptr)
		*StickInput = std::move(Parms.StickInput);
}


// Function BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C.GetTeamKits
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSet<class UHDKit*>                     TeamKits                                               (Parm, OutParm)

void ABP_HDPlayerControllerBase_C::GetTeamKits(TSet<class UHDKit*>* TeamKits) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerControllerBase_C", "GetTeamKits");

	Params::BP_HDPlayerControllerBase_C_GetTeamKits Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TeamKits != nullptr)
		*TeamKits = std::move(Parms.TeamKits);
}

}

