#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDScopeWeaponBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_HDWeaponBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HDScopeWeaponBase.BP_HDScopeWeaponBase_C
// 0x0618 (0x1070 - 0x0A58)
class ABP_HDScopeWeaponBase_C final : public ABP_HDWeaponBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HDScopeWeaponBase_C;             // 0x0A58(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       RadiusDebugSphere;                                 // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RadiusDebugTopPoint;                               // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_HDPlayerCharacterBase_C*            PlayerCharOwner;                                   // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDFCharacterMovementComponent*          PlayerCharOwnerMoveComp;                           // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHDPlayerController*                    PCOwner;                                           // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADFPlayerCameraManager*                 PlayerOwnerCamMgr;                                 // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAimingFOV;                                  // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAimingDistance;                             // 0x0A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAimInterpSpeed;                             // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultFreeAimPitch;                               // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultFreeAimYaw;                                 // 0x0AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA4[0xC];                                      // 0x0AA4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   DefaultCameraPostProcess;                          // 0x0AB0(0x0540)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               ScopeMID;                                          // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScopeMIDGlass;                                     // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseOverlay;                                       // 0x1000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1001[0x3];                                     // 0x1001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimingFOV;                                         // 0x1004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimInterpSpeed;                                    // 0x1008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimInDelay;                                        // 0x100C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurEffectDelay;                                   // 0x1010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeRadius;                                       // 0x1014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FreeAimMaxPitch;                                   // 0x1018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FreeAimMaxYaw;                                     // 0x101C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScopeMaterialIndex;                                // 0x1020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1024[0x4];                                     // 0x1024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeightedBlendable>             PostProcessMaterial;                               // 0x1028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	class UMaterialInterface*                     ScopeGlassMaterial;                                // 0x1038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScopeOpticMaterial;                                // 0x1040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            ScopeOverlay;                                      // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ScopeOverlayClass;                                 // 0x1050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReticleOffsetY;                                    // 0x1058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReticleOffsetX;                                    // 0x105C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             PostProcessRef;                                    // 0x1060(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HDScopeWeaponBase(int32 EntryPoint);
	void OnBraceAimEnd();
	void SetCurrentSight(class USceneComponent* Sight);
	void ReceiveOnLeaveInventory(class ADFBaseCharacter* LastOwner);
	void ResetAimOutGate();
	void ReceiveOnUnEquip(bool bPlayAnimAndWait, bool bLeavingPawnInventory);
	void ReceiveOnEquipFinished();
	void ReceiveTick(float DeltaSeconds);
	void StartAimOutScope();
	void StartAimInScope();
	void UserConstructionScript();
	void SetupOwnerData(bool* bValidOwnerData);
	void CleanupOwnerData();
	void ResetDefaultValues();
	void HasValidOwnerData(bool bCharAliveCheck, bool* bValidOwnerData);
	void HasLocallyPlayerControlledOwner(bool* bLocalPlayerOwner);
	void AimIn();
	void AimOut();
	void ScopeEffects();
	void RestoreOwnerDefaultValues();
	void SaveOwnerDefaultValues();
	void ShouldUseScope(bool* bUseScope);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HDScopeWeaponBase_C">();
	}
	static class ABP_HDScopeWeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HDScopeWeaponBase_C>();
	}
};
static_assert(alignof(ABP_HDScopeWeaponBase_C) == 0x000010, "Wrong alignment on ABP_HDScopeWeaponBase_C");
static_assert(sizeof(ABP_HDScopeWeaponBase_C) == 0x001070, "Wrong size on ABP_HDScopeWeaponBase_C");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, UberGraphFrame_BP_HDScopeWeaponBase_C) == 0x000A58, "Member 'ABP_HDScopeWeaponBase_C::UberGraphFrame_BP_HDScopeWeaponBase_C' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, RadiusDebugSphere) == 0x000A60, "Member 'ABP_HDScopeWeaponBase_C::RadiusDebugSphere' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, RadiusDebugTopPoint) == 0x000A68, "Member 'ABP_HDScopeWeaponBase_C::RadiusDebugTopPoint' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PlayerCharOwner) == 0x000A70, "Member 'ABP_HDScopeWeaponBase_C::PlayerCharOwner' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PlayerCharOwnerMoveComp) == 0x000A78, "Member 'ABP_HDScopeWeaponBase_C::PlayerCharOwnerMoveComp' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PCOwner) == 0x000A80, "Member 'ABP_HDScopeWeaponBase_C::PCOwner' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PlayerOwnerCamMgr) == 0x000A88, "Member 'ABP_HDScopeWeaponBase_C::PlayerOwnerCamMgr' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultAimingFOV) == 0x000A90, "Member 'ABP_HDScopeWeaponBase_C::DefaultAimingFOV' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultAimingDistance) == 0x000A94, "Member 'ABP_HDScopeWeaponBase_C::DefaultAimingDistance' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultAimInterpSpeed) == 0x000A98, "Member 'ABP_HDScopeWeaponBase_C::DefaultAimInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultFreeAimPitch) == 0x000A9C, "Member 'ABP_HDScopeWeaponBase_C::DefaultFreeAimPitch' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultFreeAimYaw) == 0x000AA0, "Member 'ABP_HDScopeWeaponBase_C::DefaultFreeAimYaw' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, DefaultCameraPostProcess) == 0x000AB0, "Member 'ABP_HDScopeWeaponBase_C::DefaultCameraPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeMID) == 0x000FF0, "Member 'ABP_HDScopeWeaponBase_C::ScopeMID' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeMIDGlass) == 0x000FF8, "Member 'ABP_HDScopeWeaponBase_C::ScopeMIDGlass' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, bUseOverlay) == 0x001000, "Member 'ABP_HDScopeWeaponBase_C::bUseOverlay' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, AimingFOV) == 0x001004, "Member 'ABP_HDScopeWeaponBase_C::AimingFOV' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, AimInterpSpeed) == 0x001008, "Member 'ABP_HDScopeWeaponBase_C::AimInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, AimInDelay) == 0x00100C, "Member 'ABP_HDScopeWeaponBase_C::AimInDelay' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, BlurEffectDelay) == 0x001010, "Member 'ABP_HDScopeWeaponBase_C::BlurEffectDelay' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeRadius) == 0x001014, "Member 'ABP_HDScopeWeaponBase_C::ScopeRadius' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, FreeAimMaxPitch) == 0x001018, "Member 'ABP_HDScopeWeaponBase_C::FreeAimMaxPitch' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, FreeAimMaxYaw) == 0x00101C, "Member 'ABP_HDScopeWeaponBase_C::FreeAimMaxYaw' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeMaterialIndex) == 0x001020, "Member 'ABP_HDScopeWeaponBase_C::ScopeMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PostProcessMaterial) == 0x001028, "Member 'ABP_HDScopeWeaponBase_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeGlassMaterial) == 0x001038, "Member 'ABP_HDScopeWeaponBase_C::ScopeGlassMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeOpticMaterial) == 0x001040, "Member 'ABP_HDScopeWeaponBase_C::ScopeOpticMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeOverlay) == 0x001048, "Member 'ABP_HDScopeWeaponBase_C::ScopeOverlay' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ScopeOverlayClass) == 0x001050, "Member 'ABP_HDScopeWeaponBase_C::ScopeOverlayClass' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ReticleOffsetY) == 0x001058, "Member 'ABP_HDScopeWeaponBase_C::ReticleOffsetY' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, ReticleOffsetX) == 0x00105C, "Member 'ABP_HDScopeWeaponBase_C::ReticleOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_HDScopeWeaponBase_C, PostProcessRef) == 0x001060, "Member 'ABP_HDScopeWeaponBase_C::PostProcessRef' has a wrong offset!");

}

