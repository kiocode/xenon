#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDPlayerCharacterBase

#include "Basic.hpp"

#include "BP_HDPlayerCharacterBase_classes.hpp"
#include "BP_HDPlayerCharacterBase_parameters.hpp"


namespace SDK
{

// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnSuppression__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFBasePickup*                    Pickup                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::OnSuppression__DelegateSignature(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnSuppression__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_OnSuppression__DelegateSignature Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnHitDamage__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFBasePickup*                    Pickup                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::OnHitDamage__DelegateSignature(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnHitDamage__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_OnHitDamage__DelegateSignature Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ExecuteUbergraph_BP_HDPlayerCharacterBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ExecuteUbergraph_BP_HDPlayerCharacterBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ExecuteUbergraph_BP_HDPlayerCharacterBase");

	Params::BP_HDPlayerCharacterBase_C_ExecuteUbergraph_BP_HDPlayerCharacterBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SubmenuCommited
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SubItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SubmenuCommited(class FName Category, class FName SubItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SubmenuCommited");

	Params::BP_HDPlayerCharacterBase_C_SubmenuCommited Parms{};

	Parms.Category = Category;
	Parms.SubItem = SubItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ExitRadialMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ExitRadialMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ExitRadialMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.EnterRadialMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::EnterRadialMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "EnterRadialMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "K2_OnEndCrouch");

	Params::BP_HDPlayerCharacterBase_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "K2_OnStartCrouch");

	Params::BP_HDPlayerCharacterBase_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnEndProne
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveOnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnEndProne");

	Params::BP_HDPlayerCharacterBase_C_ReceiveOnEndProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnStartProne
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveOnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnStartProne");

	Params::BP_HDPlayerCharacterBase_C_ReceiveOnStartProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnEndVault
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveOnEndVault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnEndVault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnStartVault
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveOnStartVault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnStartVault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveHealthChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewHealthTotal                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PrevHealthTotal                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveHealthChanged(float NewHealthTotal, float PrevHealthTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveHealthChanged");

	Params::BP_HDPlayerCharacterBase_C_ReceiveHealthChanged Parms{};

	Parms.NewHealthTotal = NewHealthTotal;
	Parms.PrevHealthTotal = PrevHealthTotal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveVariationDataChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FDFCharacterVariationData        NewVariation                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FDFCharacterVariationData        PreviousVariation                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_HDPlayerCharacterBase_C::ReceiveVariationDataChanged(const struct FDFCharacterVariationData& NewVariation, const struct FDFCharacterVariationData& PreviousVariation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveVariationDataChanged");

	Params::BP_HDPlayerCharacterBase_C_ReceiveVariationDataChanged Parms{};

	Parms.NewVariation = std::move(NewVariation);
	Parms.PreviousVariation = std::move(PreviousVariation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceivePlayHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageTaken                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class APawn*                            PawnInstigator                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKilled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::ReceivePlayHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bKilled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceivePlayHit");

	Params::BP_HDPlayerCharacterBase_C_ReceivePlayHit Parms{};

	Parms.DamageTaken = DamageTaken;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.PawnInstigator = PawnInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.bKilled = bKilled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ServerRadialMenuSelectSpot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ServerRadialMenuSelectSpot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ServerRadialMenuSelectSpot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ServerRadialMenuSelectRallypoint
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ServerRadialMenuSelectRallypoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ServerRadialMenuSelectRallypoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ServerRadialMenuSelectOutpost
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ServerRadialMenuSelectOutpost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ServerRadialMenuSelectOutpost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.Hit Damage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFBasePickup*                    Pickup                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::Hit_Damage(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "Hit Damage");

	Params::BP_HDPlayerCharacterBase_C_Hit_Damage Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveEquippedItemChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADFBaseItem*                      NewEquippedItem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFBaseItem*                      PrevEquippedItem                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveEquippedItemChanged(class ADFBaseItem* NewEquippedItem, class ADFBaseItem* PrevEquippedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveEquippedItemChanged");

	Params::BP_HDPlayerCharacterBase_C_ReceiveEquippedItemChanged Parms{};

	Parms.NewEquippedItem = NewEquippedItem;
	Parms.PrevEquippedItem = PrevEquippedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SuppressionEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFBasePickup*                    Pickup                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              SuppressionVolume                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SuppressionEffect(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup, class UPrimitiveComponent* SuppressionVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SuppressionEffect");

	Params::BP_HDPlayerCharacterBase_C_SuppressionEffect Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;
	Parms.SuppressionVolume = SuppressionVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.BndEvt__Suppression_R_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HDPlayerCharacterBase_C::BndEvt__Suppression_R_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "BndEvt__Suppression_R_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_BndEvt__Suppression_R_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.BndEvt__Suppression_L_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HDPlayerCharacterBase_C::BndEvt__Suppression_L_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "BndEvt__Suppression_L_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_BndEvt__Suppression_L_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.BndEvt__Suppression_A_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HDPlayerCharacterBase_C::BndEvt__Suppression_A_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "BndEvt__Suppression_A_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_BndEvt__Suppression_A_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.BndEvt__Suppression_B_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HDPlayerCharacterBase_C::BndEvt__Suppression_B_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "BndEvt__Suppression_B_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_HDPlayerCharacterBase_C_BndEvt__Suppression_B_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnEndAim
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveOnEndAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnEndAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveOnStartAim
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveOnStartAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveOnStartAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveVoipTalkerMsgReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   MsgTalkerChannel                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     MsgTalkerPS                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMsgIsTalking                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::ReceiveVoipTalkerMsgReceived(class UDFCommChannel* MsgTalkerChannel, class APlayerState* MsgTalkerPS, bool bMsgIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveVoipTalkerMsgReceived");

	Params::BP_HDPlayerCharacterBase_C_ReceiveVoipTalkerMsgReceived Parms{};

	Parms.MsgTalkerChannel = MsgTalkerChannel;
	Parms.MsgTalkerPS = MsgTalkerPS;
	Parms.bMsgIsTalking = bMsgIsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "K2_OnMovementModeChanged");

	Params::BP_HDPlayerCharacterBase_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceivePawnTeamStateUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADFTeamState*                     TeamStateBeforeUpdate                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADFTeamState*                     NewTeamState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNewTeamStateInit                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::ReceivePawnTeamStateUpdated(class ADFTeamState* TeamStateBeforeUpdate, class ADFTeamState* NewTeamState, bool bNewTeamStateInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceivePawnTeamStateUpdated");

	Params::BP_HDPlayerCharacterBase_C_ReceivePawnTeamStateUpdated Parms{};

	Parms.TeamStateBeforeUpdate = TeamStateBeforeUpdate;
	Parms.NewTeamState = NewTeamState;
	Parms.bNewTeamStateInit = bNewTeamStateInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.EventResetHealthEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::EventResetHealthEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "EventResetHealthEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveAnyDamage");

	Params::BP_HDPlayerCharacterBase_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveUnpossessed");

	Params::BP_HDPlayerCharacterBase_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveEndPlay");

	Params::BP_HDPlayerCharacterBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.PlayerNameChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PS                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NewPlayerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::PlayerNameChanged(class APlayerState* PS, const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "PlayerNameChanged");

	Params::BP_HDPlayerCharacterBase_C_PlayerNameChanged Parms{};

	Parms.PS = PS;
	Parms.NewPlayerName = std::move(NewPlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnPCFireReleased
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::OnPCFireReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnPCFireReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.FirstPersonToggled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFirstPerson_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::FirstPersonToggled(bool bFirstPerson_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "FirstPersonToggled");

	Params::BP_HDPlayerCharacterBase_C_FirstPersonToggled Parms{};

	Parms.bFirstPerson_0 = bFirstPerson_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.NotifyPlayerStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     NewPlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     OldPlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::NotifyPlayerStateChanged(class APlayerState* NewPlayerState, class APlayerState* OldPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "NotifyPlayerStateChanged");

	Params::BP_HDPlayerCharacterBase_C_NotifyPlayerStateChanged Parms{};

	Parms.NewPlayerState = NewPlayerState;
	Parms.OldPlayerState = OldPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveFreeAim
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveFreeAim(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveFreeAim");

	Params::BP_HDPlayerCharacterBase_C_ReceiveFreeAim Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceivePawnTeamNumUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   LastTeamNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewTeamNum                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceivePawnTeamNumUpdated(uint8 LastTeamNum, uint8 NewTeamNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceivePawnTeamNumUpdated");

	Params::BP_HDPlayerCharacterBase_C_ReceivePawnTeamNumUpdated Parms{};

	Parms.LastTeamNum = LastTeamNum;
	Parms.NewTeamNum = NewTeamNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveRestart
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveRestart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GenericDamageFeedback
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::GenericDamageFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GenericDamageFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HDPlayerCharacterBase_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnLanded");

	Params::BP_HDPlayerCharacterBase_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnPCFirePressed
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::OnPCFirePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnPCFirePressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceivePossessed");

	Params::BP_HDPlayerCharacterBase_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RetryLoadout
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::RetryLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RetryLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveCurrentLoadout
// (Event, Protected, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ReceiveCurrentLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveCurrentLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnEquipmentTimerElapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::OnEquipmentTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnEquipmentTimerElapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnDeath
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   KillingDamage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class APawn*                            InstigatingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnDeath");

	Params::BP_HDPlayerCharacterBase_C_OnDeath Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveTick");

	Params::BP_HDPlayerCharacterBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_RadialMenu_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_RadialMenu_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_RadialMenu_K2Node_InputActionEvent_0");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_RadialMenu_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_RadialMenu_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_RadialMenu_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_RadialMenu_K2Node_InputActionEvent_1");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_RadialMenu_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_PointAimToggle_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_PointAimToggle_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_PointAimToggle_K2Node_InputActionEvent_2");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_PointAimToggle_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_CycleWeaponSights_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_CycleWeaponSights_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_CycleWeaponSights_K2Node_InputActionEvent_3");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_CycleWeaponSights_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot9_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot9_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot9_K2Node_InputActionEvent_4");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot9_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot8_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot8_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot8_K2Node_InputActionEvent_5");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot8_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot7_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot7_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot7_K2Node_InputActionEvent_6");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot7_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot6_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot6_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot6_K2Node_InputActionEvent_7");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot6_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot5_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot5_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot5_K2Node_InputActionEvent_8");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot5_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot4_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot4_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot4_K2Node_InputActionEvent_9");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot4_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot3_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot3_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot3_K2Node_InputActionEvent_10");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot3_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot2_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot2_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot2_K2Node_InputActionEvent_11");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot2_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot1_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot1_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot1_K2Node_InputActionEvent_12");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot1_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_EqpSlot0_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_EqpSlot0_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_EqpSlot0_K2Node_InputActionEvent_13");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_EqpSlot0_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_CameraToggle_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_CameraToggle_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_CameraToggle_K2Node_InputActionEvent_14");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_CameraToggle_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_PreviousItem_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_PreviousItem_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_PreviousItem_K2Node_InputActionEvent_15");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_PreviousItem_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.InpActEvt_NextItem_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::InpActEvt_NextItem_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "InpActEvt_NextItem_K2Node_InputActionEvent_16");

	Params::BP_HDPlayerCharacterBase_C_InpActEvt_NextItem_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot0__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot0__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot1__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot1__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot2__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CameraAnimationSlot2__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CameraAnimationSlot2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CameraAnimationSlot2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CrouchExitSpringArmTranslation__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CrouchExitSpringArmTranslation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CrouchExitSpringArmTranslation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CrouchExitSpringArmTranslation__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CrouchExitSpringArmTranslation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CrouchExitSpringArmTranslation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CrouchSpringArmTranslation__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CrouchSpringArmTranslation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CrouchSpringArmTranslation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CrouchSpringArmTranslation__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::CrouchSpringArmTranslation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CrouchSpringArmTranslation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ProneExitSpringArmTranslation__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ProneExitSpringArmTranslation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ProneExitSpringArmTranslation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ProneExitSpringArmTranslation__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ProneExitSpringArmTranslation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ProneExitSpringArmTranslation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ProneSpringArmTranslation__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ProneSpringArmTranslation__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ProneSpringArmTranslation__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ProneSpringArmTranslation__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ProneSpringArmTranslation__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ProneSpringArmTranslation__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.VaultCameraTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::VaultCameraTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "VaultCameraTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.VaultCameraTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::VaultCameraTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "VaultCameraTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SuppressionTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::SuppressionTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SuppressionTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SuppressionTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::SuppressionTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SuppressionTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.DamageEffectTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::DamageEffectTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "DamageEffectTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.DamageEffectTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::DamageEffectTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "DamageEffectTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.LerpTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::LerpTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "LerpTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.LerpTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::LerpTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "LerpTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.FreeAiming
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::FreeAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "FreeAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.StartEquipmentTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::StartEquipmentTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "StartEquipmentTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetEquipmentTimer
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::SetEquipmentTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetEquipmentTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SelectEquipmentBySlotNum
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EquipSlotNum                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEquipImmediately                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFromInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::SelectEquipmentBySlotNum(int32 EquipSlotNum, bool bEquipImmediately, bool bFromInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SelectEquipmentBySlotNum");

	Params::BP_HDPlayerCharacterBase_C_SelectEquipmentBySlotNum Parms{};

	Parms.EquipSlotNum = EquipSlotNum;
	Parms.bEquipImmediately = bEquipImmediately;
	Parms.bFromInput = bFromInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UpdateCharMeshesFromFaction
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::UpdateCharMeshesFromFaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UpdateCharMeshesFromFaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UpdateCharMeshes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    MeshFPP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    MeshTPP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::UpdateCharMeshes(class USkeletalMesh* MeshFPP, class USkeletalMesh* MeshTPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UpdateCharMeshes");

	Params::BP_HDPlayerCharacterBase_C_UpdateCharMeshes Parms{};

	Parms.MeshFPP = MeshFPP;
	Parms.MeshTPP = MeshTPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ApplyCharacterVariation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDFCharacterVariationDataHandle  VariationHandle_0                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bApplyToFPP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::ApplyCharacterVariation(const struct FDFCharacterVariationDataHandle& VariationHandle_0, bool bApplyToFPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ApplyCharacterVariation");

	Params::BP_HDPlayerCharacterBase_C_ApplyCharacterVariation Parms{};

	Parms.VariationHandle_0 = std::move(VariationHandle_0);
	Parms.bApplyToFPP = bApplyToFPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UpdatePOIState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::UpdatePOIState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UpdatePOIState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UpdateEquipmentItems
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::UpdateEquipmentItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UpdateEquipmentItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMostValidPlayerState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetMostValidPlayerState(class APlayerState** PlayerState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMostValidPlayerState");

	Params::BP_HDPlayerCharacterBase_C_GetMostValidPlayerState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerState_0 != nullptr)
		*PlayerState_0 = Parms.PlayerState_0;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMostValidTeamState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ADFTeamState*                     TeamState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetMostValidTeamState(class ADFTeamState** TeamState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMostValidTeamState");

	Params::BP_HDPlayerCharacterBase_C_GetMostValidTeamState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TeamState_0 != nullptr)
		*TeamState_0 = Parms.TeamState_0;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMostValidTeamFactionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           FactionInfoClass                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetMostValidTeamFactionInfo(class UClass** FactionInfoClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMostValidTeamFactionInfo");

	Params::BP_HDPlayerCharacterBase_C_GetMostValidTeamFactionInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FactionInfoClass != nullptr)
		*FactionInfoClass = Parms.FactionInfoClass;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMostValidLoadout
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UHDKit*                           PlayerLoadout                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetMostValidLoadout(class UHDKit** PlayerLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMostValidLoadout");

	Params::BP_HDPlayerCharacterBase_C_GetMostValidLoadout Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerLoadout != nullptr)
		*PlayerLoadout = Parms.PlayerLoadout;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.EquipSelectedItemFromInventory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSwitchFireModeForSelected                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::EquipSelectedItemFromInventory(bool bSwitchFireModeForSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "EquipSelectedItemFromInventory");

	Params::BP_HDPlayerCharacterBase_C_EquipSelectedItemFromInventory Parms{};

	Parms.bSwitchFireModeForSelected = bSwitchFireModeForSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetupVOIPTalker
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::SetupVOIPTalker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetupVOIPTalker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CleanupVOIPTalker
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDestroyedComp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CleanupVOIPTalker(bool* bDestroyedComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CleanupVOIPTalker");

	Params::BP_HDPlayerCharacterBase_C_CleanupVOIPTalker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDestroyedComp != nullptr)
		*bDestroyedComp = Parms.bDestroyedComp;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.HealthRegenTimerElapsed
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::HealthRegenTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "HealthRegenTimerElapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetHealthRegenTimerIfInvalid
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SetHealthRegenTimerIfInvalid(float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetHealthRegenTimerIfInvalid");

	Params::BP_HDPlayerCharacterBase_C_SetHealthRegenTimerIfInvalid Parms{};

	Parms.NewHealth = NewHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ClearHealthRegenTimer
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::ClearHealthRegenTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ClearHealthRegenTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.LeanDebug
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::LeanDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "LeanDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SpawnAndInitDeployableSPAtPawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           SPDeployableClass                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SpawnOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_HDProj_SPDeployableBase_C*    SpawnedDeployableSP                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SpawnAndInitDeployableSPAtPawn(class UClass* SPDeployableClass, const struct FVector& SpawnOffset, class ABP_HDProj_SPDeployableBase_C** SpawnedDeployableSP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SpawnAndInitDeployableSPAtPawn");

	Params::BP_HDPlayerCharacterBase_C_SpawnAndInitDeployableSPAtPawn Parms{};

	Parms.SPDeployableClass = SPDeployableClass;
	Parms.SpawnOffset = std::move(SpawnOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedDeployableSP != nullptr)
		*SpawnedDeployableSP = Parms.SpawnedDeployableSP;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SelectRadialMenuItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SubItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SelectRadialMenuItem(class FName Category, class FName SubItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SelectRadialMenuItem");

	Params::BP_HDPlayerCharacterBase_C_SelectRadialMenuItem Parms{};

	Parms.Category = Category;
	Parms.SubItem = SubItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuSelectSpot
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::RadialMenuSelectSpot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuSelectSpot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuSelectRallypoint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::RadialMenuSelectRallypoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuSelectRallypoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuSelectOutpost
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::RadialMenuSelectOutpost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuSelectOutpost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuCanSelectSpot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSelectable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::RadialMenuCanSelectSpot(bool* bSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuCanSelectSpot");

	Params::BP_HDPlayerCharacterBase_C_RadialMenuCanSelectSpot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSelectable != nullptr)
		*bSelectable = Parms.bSelectable;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuCanSelectRallypoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSelectable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::RadialMenuCanSelectRallypoint(bool* bSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuCanSelectRallypoint");

	Params::BP_HDPlayerCharacterBase_C_RadialMenuCanSelectRallypoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSelectable != nullptr)
		*bSelectable = Parms.bSelectable;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RadialMenuCanSelectOutpost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSelectable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::RadialMenuCanSelectOutpost(bool* bSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RadialMenuCanSelectOutpost");

	Params::BP_HDPlayerCharacterBase_C_RadialMenuCanSelectOutpost Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSelectable != nullptr)
		*bSelectable = Parms.bSelectable;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CanSelectAnyRadialMenuOption
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSelectable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CanSelectAnyRadialMenuOption(bool* bSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CanSelectAnyRadialMenuOption");

	Params::BP_HDPlayerCharacterBase_C_CanSelectAnyRadialMenuOption Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSelectable != nullptr)
		*bSelectable = Parms.bSelectable;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetSquadState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AHDSquadState*                    SquadState                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetSquadState(class AHDSquadState** SquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetSquadState");

	Params::BP_HDPlayerCharacterBase_C_GetSquadState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SquadState != nullptr)
		*SquadState = Parms.SquadState;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.IsSquadLeader
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSquadLeader                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::IsSquadLeader(bool* bSquadLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "IsSquadLeader");

	Params::BP_HDPlayerCharacterBase_C_IsSquadLeader Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSquadLeader != nullptr)
		*bSquadLeader = Parms.bSquadLeader;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.HasSquadLeaderKit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bRequireRallyPointAbility                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUsingSquadLeaderKit                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::HasSquadLeaderKit(bool bRequireRallyPointAbility, bool* bUsingSquadLeaderKit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "HasSquadLeaderKit");

	Params::BP_HDPlayerCharacterBase_C_HasSquadLeaderKit Parms{};

	Parms.bRequireRallyPointAbility = bRequireRallyPointAbility;

	UObject::ProcessEvent(Func, &Parms);

	if (bUsingSquadLeaderKit != nullptr)
		*bUsingSquadLeaderKit = Parms.bUsingSquadLeaderKit;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.OnRep_bSpatializedVOIPTalker
// (BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::OnRep_bSpatializedVOIPTalker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "OnRep_bSpatializedVOIPTalker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMountPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WallDistance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TraceRadius                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CornerDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCouldMount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::GetMountPosition(const struct FVector& Direction, float WallDistance, float TraceRadius, float CornerDistance, float CapsuleHeight, bool* bCouldMount, struct FVector* Position, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMountPosition");

	Params::BP_HDPlayerCharacterBase_C_GetMountPosition Parms{};

	Parms.Direction = std::move(Direction);
	Parms.WallDistance = WallDistance;
	Parms.TraceRadius = TraceRadius;
	Parms.CornerDistance = CornerDistance;
	Parms.CapsuleHeight = CapsuleHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (bCouldMount != nullptr)
		*bCouldMount = Parms.bCouldMount;

	if (Position != nullptr)
		*Position = std::move(Parms.Position);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.AlignSights
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MinSightDistance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::AlignSights(float MinSightDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "AlignSights");

	Params::BP_HDPlayerCharacterBase_C_AlignSights Parms{};

	Parms.MinSightDistance = MinSightDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetProneMountPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          BoxSize                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxHeight                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MinHeight                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MinSpace                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCouldMount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          MountPosition_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetProneMountPosition(const struct FVector& BoxSize, float Distance, float MaxHeight, float MinHeight, float MinSpace, bool* bCouldMount, struct FVector* MountPosition_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetProneMountPosition");

	Params::BP_HDPlayerCharacterBase_C_GetProneMountPosition Parms{};

	Parms.BoxSize = std::move(BoxSize);
	Parms.Distance = Distance;
	Parms.MaxHeight = MaxHeight;
	Parms.MinHeight = MinHeight;
	Parms.MinSpace = MinSpace;

	UObject::ProcessEvent(Func, &Parms);

	if (bCouldMount != nullptr)
		*bCouldMount = Parms.bCouldMount;

	if (MountPosition_0 != nullptr)
		*MountPosition_0 = std::move(Parms.MountPosition_0);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetIsSpawnedOutpostValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsSpawnedOutpostValid                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::GetIsSpawnedOutpostValid(bool* bIsSpawnedOutpostValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetIsSpawnedOutpostValid");

	Params::BP_HDPlayerCharacterBase_C_GetIsSpawnedOutpostValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSpawnedOutpostValid != nullptr)
		*bIsSpawnedOutpostValid = Parms.bIsSpawnedOutpostValid;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetIsSpawnedRallypointValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsSpawnedRallypointValid                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::GetIsSpawnedRallypointValid(bool* bIsSpawnedRallypointValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetIsSpawnedRallypointValid");

	Params::BP_HDPlayerCharacterBase_C_GetIsSpawnedRallypointValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSpawnedRallypointValid != nullptr)
		*bIsSpawnedRallypointValid = Parms.bIsSpawnedRallypointValid;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CalcRallypointDistanceRestriction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsRallypointDistanceRestricted                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CalcRallypointDistanceRestriction(bool* bIsRallypointDistanceRestricted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CalcRallypointDistanceRestriction");

	Params::BP_HDPlayerCharacterBase_C_CalcRallypointDistanceRestriction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsRallypointDistanceRestricted != nullptr)
		*bIsRallypointDistanceRestricted = Parms.bIsRallypointDistanceRestricted;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CalcOutpostDistanceRestriction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsOutpostDistanceRestricted                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CalcOutpostDistanceRestriction(bool* bIsOutpostDistanceRestricted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CalcOutpostDistanceRestriction");

	Params::BP_HDPlayerCharacterBase_C_CalcOutpostDistanceRestriction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsOutpostDistanceRestricted != nullptr)
		*bIsOutpostDistanceRestricted = Parms.bIsOutpostDistanceRestricted;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.IsRallypointNumberLimitReached
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bNumberLimitReached                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::IsRallypointNumberLimitReached(bool* bNumberLimitReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "IsRallypointNumberLimitReached");

	Params::BP_HDPlayerCharacterBase_C_IsRallypointNumberLimitReached Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNumberLimitReached != nullptr)
		*bNumberLimitReached = Parms.bNumberLimitReached;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.IsOutpostNumberLimitReached
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bNumberLimitReached                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::IsOutpostNumberLimitReached(bool* bNumberLimitReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "IsOutpostNumberLimitReached");

	Params::BP_HDPlayerCharacterBase_C_IsOutpostNumberLimitReached Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNumberLimitReached != nullptr)
		*bNumberLimitReached = Parms.bNumberLimitReached;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CalcRallypointEnemiesNearbyRestriction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bAreEnemiesNearby                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CalcRallypointEnemiesNearbyRestriction(bool* bAreEnemiesNearby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CalcRallypointEnemiesNearbyRestriction");

	Params::BP_HDPlayerCharacterBase_C_CalcRallypointEnemiesNearbyRestriction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAreEnemiesNearby != nullptr)
		*bAreEnemiesNearby = Parms.bAreEnemiesNearby;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.CalcOutpostEnemiesNearbyRestriction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bAreEnemiesNearby                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::CalcOutpostEnemiesNearbyRestriction(bool* bAreEnemiesNearby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "CalcOutpostEnemiesNearbyRestriction");

	Params::BP_HDPlayerCharacterBase_C_CalcOutpostEnemiesNearbyRestriction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAreEnemiesNearby != nullptr)
		*bAreEnemiesNearby = Parms.bAreEnemiesNearby;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetSuppressionActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::SetSuppressionActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetSuppressionActive");

	Params::BP_HDPlayerCharacterBase_C_SetSuppressionActive Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetSuppressionCompIsActive
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PrimComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNewActive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::SetSuppressionCompIsActive(class UPrimitiveComponent* PrimComp, bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetSuppressionCompIsActive");

	Params::BP_HDPlayerCharacterBase_C_SetSuppressionCompIsActive Parms{};

	Parms.PrimComp = PrimComp;
	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.UpdateCharMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateFPPMesh                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::UpdateCharMesh(class USkeletalMesh* NewMesh, bool bUpdateFPPMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "UpdateCharMesh");

	Params::BP_HDPlayerCharacterBase_C_UpdateCharMesh Parms{};

	Parms.NewMesh = NewMesh;
	Parms.bUpdateFPPMesh = bUpdateFPPMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetPCViewRotationYawLimits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ViewYawMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ViewYawMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRelativeToActorRotation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::SetPCViewRotationYawLimits(float ViewYawMin, float ViewYawMax, bool bRelativeToActorRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetPCViewRotationYawLimits");

	Params::BP_HDPlayerCharacterBase_C_SetPCViewRotationYawLimits Parms{};

	Parms.ViewYawMin = ViewYawMin;
	Parms.ViewYawMax = ViewYawMax;
	Parms.bRelativeToActorRotation = bRelativeToActorRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.RestorePCViewRotationYawLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::RestorePCViewRotationYawLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "RestorePCViewRotationYawLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetVaultCameraCurveForBehavior
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EVaultBehavior                          VaultBehavior                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     CameraCurve                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetVaultCameraCurveForBehavior(EVaultBehavior VaultBehavior, class UCurveVector** CameraCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetVaultCameraCurveForBehavior");

	Params::BP_HDPlayerCharacterBase_C_GetVaultCameraCurveForBehavior Parms{};

	Parms.VaultBehavior = VaultBehavior;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraCurve != nullptr)
		*CameraCurve = Parms.CameraCurve;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.IsSameSquad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_HDPlayerControllerBase_C*     LocalController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSameSquad                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::IsSameSquad(class ABP_HDPlayerControllerBase_C* LocalController, bool* bSameSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "IsSameSquad");

	Params::BP_HDPlayerCharacterBase_C_IsSameSquad Parms{};

	Parms.LocalController = LocalController;

	UObject::ProcessEvent(Func, &Parms);

	if (bSameSquad != nullptr)
		*bSameSquad = Parms.bSameSquad;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.SetSpringArmOffset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurveZ                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::SetSpringArmOffset(float CurveZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "SetSpringArmOffset");

	Params::BP_HDPlayerCharacterBase_C_SetSpringArmOffset Parms{};

	Parms.CurveZ = CurveZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetEyeHeightAdjustment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   EyeHeightAdjust_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetEyeHeightAdjustment(float* EyeHeightAdjust_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetEyeHeightAdjustment");

	Params::BP_HDPlayerCharacterBase_C_GetEyeHeightAdjustment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EyeHeightAdjust_0 != nullptr)
		*EyeHeightAdjust_0 = Parms.EyeHeightAdjust_0;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.LeanRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::LeanRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "LeanRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.WeaponCollision
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HDPlayerCharacterBase_C::WeaponCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "WeaponCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetMinimapWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AController*                      Controller_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDFMinimap*                       MinimapWidget                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetMinimapWidget(class AController* Controller_0, class UDFMinimap** MinimapWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetMinimapWidget");

	Params::BP_HDPlayerCharacterBase_C_GetMinimapWidget Parms{};

	Parms.Controller_0 = Controller_0;

	UObject::ProcessEvent(Func, &Parms);

	if (MinimapWidget != nullptr)
		*MinimapWidget = Parms.MinimapWidget;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.ReceiveGetDefaultPawnMesh1P
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USkeletalMesh* ABP_HDPlayerCharacterBase_C::ReceiveGetDefaultPawnMesh1P() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "ReceiveGetDefaultPawnMesh1P");

	Params::BP_HDPlayerCharacterBase_C_ReceiveGetDefaultPawnMesh1P Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.GetPlayerFactionInfoClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 PlayerTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           FactionInfoClass                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HDPlayerCharacterBase_C::GetPlayerFactionInfoClass(EHDTeam PlayerTeam, class UClass** FactionInfoClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "GetPlayerFactionInfoClass");

	Params::BP_HDPlayerCharacterBase_C_GetPlayerFactionInfoClass Parms{};

	Parms.PlayerTeam = PlayerTeam;

	UObject::ProcessEvent(Func, &Parms);

	if (FactionInfoClass != nullptr)
		*FactionInfoClass = Parms.FactionInfoClass;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.IsMatchingTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AController*                      LocalController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMatchingTeam                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HDPlayerCharacterBase_C::IsMatchingTeam(class AController* LocalController, bool* bMatchingTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "IsMatchingTeam");

	Params::BP_HDPlayerCharacterBase_C_IsMatchingTeam Parms{};

	Parms.LocalController = LocalController;

	UObject::ProcessEvent(Func, &Parms);

	if (bMatchingTeam != nullptr)
		*bMatchingTeam = Parms.bMatchingTeam;
}


// Function BP_HDPlayerCharacterBase.BP_HDPlayerCharacterBase_C.EventGetFocalPoint
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_HDPlayerCharacterBase_C::EventGetFocalPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HDPlayerCharacterBase_C", "EventGetFocalPoint");

	Params::BP_HDPlayerCharacterBase_C_EventGetFocalPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

