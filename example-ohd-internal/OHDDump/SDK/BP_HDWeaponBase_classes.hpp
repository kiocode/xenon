#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDWeaponBase

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "HDMain_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HDWeaponBase.BP_HDWeaponBase_C
// 0x01E8 (0x0A58 - 0x0870)
class ABP_HDWeaponBase_C : public AHDBaseWeapon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0870(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Muzzle;                                            // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultBipod;                                      // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultGrip;                                       // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultBarrel;                                     // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSight;                                      // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UAnimSequenceBase*>   LocoAnimSet;                                       // 0x08A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay)
	TMap<class FName, class UAnimSequenceBase*>   LocoTPPAnimSet;                                    // 0x08F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay)
	bool                                          bUseMirroredLowerBodyLocomotion;                   // 0x0940(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941[0x3];                                      // 0x0941(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstPersonPositionOffset;                         // 0x0944(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasGrip;                                          // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasBipod;                                         // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_952[0x2];                                      // 0x0952(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BracedAimPosition;                                 // 0x0954(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CurrentSight;                                      // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CurrentBarrel;                                     // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CurrentGrip;                                       // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CurrentBipod;                                      // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                Sights;                                            // 0x0980(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnUpdateAttachments;                               // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ADSOffset;                                         // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BipodPlayerDistance;                               // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BipodCameraHeight;                                 // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9AC[0x4];                                      // 0x09AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 FiringScreenShake;                                 // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BracedAimTilt;                                     // 0x09B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThirdPersonPositionOffset;                         // 0x09BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThirdPersonAimOffset;                              // 0x09C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickAmount;                                        // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickNoiseAmount;                                   // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DC[0x4];                                      // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BasePoseBonesToHide;                               // 0x09E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	class FName                                   SecondMagBoneName;                                 // 0x09F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BulletBoneName;                                    // 0x09F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LowReadyRotationOffset;                            // 0x0A00(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                LowReadyPositionOffset;                            // 0x0A0C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnUpdateSights;                                    // 0x0A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UMaterialInstanceDynamic*>       ThirdPersonMatArray;                               // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         AmmoPercent;                                       // 0x0A38(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3C[0x4];                                      // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       FirstPersonMatArray;                               // 0x0A40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         ResetAmmoPercentTime;                              // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnUpdateAttachments__DelegateSignature();
	void OnUpdateSights__DelegateSignature();
	void ExecuteUbergraph_BP_HDWeaponBase(int32 EntryPoint);
	void ReceiveFireModeChanged(EFireMode NewFireMode, EFireMode PrevFireMode, bool bFromPlayerInput);
	void ServerResetAmmoPercent();
	void ReceiveReloadFinished();
	void ResetBullets();
	void ReceiveOnEquip(const class ADFBaseItem* LastItem);
	void ReceiveVisibilityChanged(bool bFirstPerson);
	void ReceiveFire();
	void SetCurrentSight(class USceneComponent* Sight);
	void CycleSight();
	void UserConstructionScript();
	bool RemoveLegacyLocomotionAnims(bool bFPP);
	void UpdateAttachmentVisibility(bool bFirstPerson);
	void InternalSetVisibilityForAttachment(class USceneComponent* Attachment, bool bFirstPerson);
	void FindNextMagazine(class ADFBaseAmmoClip** NextClip);
	void OnRep_AmmoPercent();
	void InternalAmmoPercentUpdate();
	void SetAmmoPercentFromClip(class ADFBaseAmmoClip* FromAmmoClip);
	void SetAmmoPercent(int32 CurrentClipAmmo, int32 MaxClipAmmo);

	TMap<class FName, class UAnimSequenceBase*> GetLegacyLocomotionAnims(bool bFPP) const;
	bool CanFire() const;
	void GetLocoAnimSet(TMap<class FName, class UAnimSequenceBase*>* OutAnimSet) const;
	void GetLocoTPPAnimSet(TMap<class FName, class UAnimSequenceBase*>* OutAnimSet) const;
	void ShouldUseMirroredLowerBodyLoco(bool* bOutUseMirrored) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HDWeaponBase_C">();
	}
	static class ABP_HDWeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HDWeaponBase_C>();
	}
};
static_assert(alignof(ABP_HDWeaponBase_C) == 0x000008, "Wrong alignment on ABP_HDWeaponBase_C");
static_assert(sizeof(ABP_HDWeaponBase_C) == 0x000A58, "Wrong size on ABP_HDWeaponBase_C");
static_assert(offsetof(ABP_HDWeaponBase_C, UberGraphFrame) == 0x000870, "Member 'ABP_HDWeaponBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, Muzzle) == 0x000878, "Member 'ABP_HDWeaponBase_C::Muzzle' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, DefaultBipod) == 0x000880, "Member 'ABP_HDWeaponBase_C::DefaultBipod' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, DefaultGrip) == 0x000888, "Member 'ABP_HDWeaponBase_C::DefaultGrip' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, DefaultBarrel) == 0x000890, "Member 'ABP_HDWeaponBase_C::DefaultBarrel' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, DefaultSight) == 0x000898, "Member 'ABP_HDWeaponBase_C::DefaultSight' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, LocoAnimSet) == 0x0008A0, "Member 'ABP_HDWeaponBase_C::LocoAnimSet' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, LocoTPPAnimSet) == 0x0008F0, "Member 'ABP_HDWeaponBase_C::LocoTPPAnimSet' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, bUseMirroredLowerBodyLocomotion) == 0x000940, "Member 'ABP_HDWeaponBase_C::bUseMirroredLowerBodyLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, FirstPersonPositionOffset) == 0x000944, "Member 'ABP_HDWeaponBase_C::FirstPersonPositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, bHasGrip) == 0x000950, "Member 'ABP_HDWeaponBase_C::bHasGrip' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, bHasBipod) == 0x000951, "Member 'ABP_HDWeaponBase_C::bHasBipod' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BracedAimPosition) == 0x000954, "Member 'ABP_HDWeaponBase_C::BracedAimPosition' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, CurrentSight) == 0x000960, "Member 'ABP_HDWeaponBase_C::CurrentSight' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, CurrentBarrel) == 0x000968, "Member 'ABP_HDWeaponBase_C::CurrentBarrel' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, CurrentGrip) == 0x000970, "Member 'ABP_HDWeaponBase_C::CurrentGrip' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, CurrentBipod) == 0x000978, "Member 'ABP_HDWeaponBase_C::CurrentBipod' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, Sights) == 0x000980, "Member 'ABP_HDWeaponBase_C::Sights' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, OnUpdateAttachments) == 0x000990, "Member 'ABP_HDWeaponBase_C::OnUpdateAttachments' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, ADSOffset) == 0x0009A0, "Member 'ABP_HDWeaponBase_C::ADSOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BipodPlayerDistance) == 0x0009A4, "Member 'ABP_HDWeaponBase_C::BipodPlayerDistance' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BipodCameraHeight) == 0x0009A8, "Member 'ABP_HDWeaponBase_C::BipodCameraHeight' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, FiringScreenShake) == 0x0009B0, "Member 'ABP_HDWeaponBase_C::FiringScreenShake' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BracedAimTilt) == 0x0009B8, "Member 'ABP_HDWeaponBase_C::BracedAimTilt' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, ThirdPersonPositionOffset) == 0x0009BC, "Member 'ABP_HDWeaponBase_C::ThirdPersonPositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, ThirdPersonAimOffset) == 0x0009C8, "Member 'ABP_HDWeaponBase_C::ThirdPersonAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, KickAmount) == 0x0009D4, "Member 'ABP_HDWeaponBase_C::KickAmount' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, KickNoiseAmount) == 0x0009D8, "Member 'ABP_HDWeaponBase_C::KickNoiseAmount' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BasePoseBonesToHide) == 0x0009E0, "Member 'ABP_HDWeaponBase_C::BasePoseBonesToHide' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, SecondMagBoneName) == 0x0009F0, "Member 'ABP_HDWeaponBase_C::SecondMagBoneName' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, BulletBoneName) == 0x0009F8, "Member 'ABP_HDWeaponBase_C::BulletBoneName' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, LowReadyRotationOffset) == 0x000A00, "Member 'ABP_HDWeaponBase_C::LowReadyRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, LowReadyPositionOffset) == 0x000A0C, "Member 'ABP_HDWeaponBase_C::LowReadyPositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, OnUpdateSights) == 0x000A18, "Member 'ABP_HDWeaponBase_C::OnUpdateSights' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, ThirdPersonMatArray) == 0x000A28, "Member 'ABP_HDWeaponBase_C::ThirdPersonMatArray' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, AmmoPercent) == 0x000A38, "Member 'ABP_HDWeaponBase_C::AmmoPercent' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, FirstPersonMatArray) == 0x000A40, "Member 'ABP_HDWeaponBase_C::FirstPersonMatArray' has a wrong offset!");
static_assert(offsetof(ABP_HDWeaponBase_C, ResetAmmoPercentTime) == 0x000A50, "Member 'ABP_HDWeaponBase_C::ResetAmmoPercentTime' has a wrong offset!");

}

