#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NotificationTray

#include "Basic.hpp"

#include "WBP_NotificationTray_classes.hpp"
#include "WBP_NotificationTray_parameters.hpp"


namespace SDK
{

// Function WBP_NotificationTray.WBP_NotificationTray_C.ExecuteUbergraph_WBP_NotificationTray
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationTray_C::ExecuteUbergraph_WBP_NotificationTray(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "ExecuteUbergraph_WBP_NotificationTray");

	Params::WBP_NotificationTray_C_ExecuteUbergraph_WBP_NotificationTray Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Negative Vote
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationTray_C::Negative_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Negative Vote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Positive Vote
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationTray_C::Positive_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Positive Vote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Set Next Top
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationTray_C::Set_Next_Top()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Set Next Top");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Process Notification Order
// (BlueprintCallable, BlueprintEvent)

void UWBP_NotificationTray_C::Process_Notification_Order()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Process Notification Order");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Add Custom Notification
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget_Object_Reference                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_NotificationTray_C::Add_Custom_Notification(class UWidget* Widget_Object_Reference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Add Custom Notification");

	Params::WBP_NotificationTray_C_Add_Custom_Notification Parms{};

	Parms.Widget_Object_Reference = Widget_Object_Reference;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_NotificationTray.WBP_NotificationTray_C.Add Notification
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFUINotificationInfo             Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UWBP_NotificationTray_C::Add_Notification(const struct FFUINotificationInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_NotificationTray_C", "Add Notification");

	Params::WBP_NotificationTray_C_Add_Notification Parms{};

	Parms.Info = std::move(Info);

	UObject::ProcessEvent(Func, &Parms);
}

}

