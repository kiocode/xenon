#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HDPlayerControllerBase

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "EJoystickTypes_structs.hpp"
#include "HDMain_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HDPlayerControllerBase.BP_HDPlayerControllerBase_C
// 0x0070 (0x0710 - 0x06A0)
class ABP_HDPlayerControllerBase_C final : public AHDPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_DeployMenu_C*                      DeployMenu;                                        // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitialSpawn;                                     // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWantsToOpenDeployMenu;                            // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDeployMenuShown;                                  // 0x06B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B3[0x5];                                      // 0x06B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRepPlayerState;                                  // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bOpenDeployMenuOnBeginPlay;                        // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            DeathScreen;                                       // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeathScreenShown;                                 // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            WatermarkWidget;                                   // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   WatermarkWidgetClass;                              // 0x06E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnRepPlayerState__DelegateSignature();
	void ExecuteUbergraph_BP_HDPlayerControllerBase(int32 EntryPoint);
	void ReceiveUnpossessPawn(class APawn* UnpossessedPawn);
	void ReceiveGameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void Auth_SpawnVehicle();
	void CharacterDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
	void ReceivePossessPawn(class APawn* NewPawn);
	void Server_RequestSeatChange(int32 Seat);
	void RequestExitVehicle(class AArcBaseVehicle* Vehicle);
	void TryGetInVehicle(class AArcBaseVehicle* Vehicle);
	void ReceivePlayerTeamNumUpdated(uint8 LastTeamNum, uint8 NewTeamNum);
	void OnPlayerSpawnTimerElapsed();
	void ReceiveOnRepPlayerState();
	void OnDeployMenuPreloadFinished();
	void ReceiveBeginPlay();
	void UpdatePlayerPOIs();
	void ServerKickSquadMember(class AHDSquadState* Squad, class AHDPlayerState* MemberToRemove);
	void ServerSetSquadLockedState(class AHDSquadState* Squad, bool bLocked);
	void ServerJoinSquad(class AHDSquadState* SquadToJoin);
	void ServerLeaveCurrentSquad();
	void ServerCreateAndJoinUserSquadUnnamed(class AHDPlatoonState* ForPlatoon);
	void InpActEvt_VoteNo_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_VoteYes_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_ChatHistoryToggle_K2Node_InputActionEvent_2(const struct FKey& Key);
	void OnLoaded_97A2A56D4425648AEE60ECA073085E53(class UClass* Loaded);
	void InpActEvt_F4_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Use_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_F3_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_F2_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_F1_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_DeployMenu_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_6(const struct FKey& Key);
	void LoadAndActivateDeployMenu();
	void LoadDeployMenu();
	void UnloadDeployMenu();
	void DeployMenuToggle(bool bShowMenu, bool bForce);
	void LoadDeathScreen();
	void UnloadDeathScreen();
	void DeathScreenToggle(bool bShow);
	void IsVictoryMenuShown(bool* bShown);
	void GetMinimapWidget(class UDFMinimap** MinimapWidget);
	void ShowHUD();
	void HideHUD();
	void SpawnVehicleAtPlayer(class UClass* VehicleClass);
	void GetHDPlayerState(class AHDPlayerState** PlayerState_0);
	void GetHDTeamState(class AHDTeamState** TeamState_0);
	void InternalCreateUnnamedSquad(class AHDPlatoonState* ForPlatoon, bool bJoinSquadAfterCreation, bool bStartLocked, bool* bSuccess, class AHDSquadState** NewSquad);
	void JoinSquad(class AHDSquadState* SquadToJoin, bool* bJoinSuccess);
	void CanJoinSquad(class AHDSquadState* SquadToJoin, bool* bJoinableSquad);
	void IsSquadLeader(class AHDSquadState* Squad, bool* bSquadLeader);
	void LeaveCurrentSquad(bool* bLeaveSuccess);
	void KickSquadMember(class AHDSquadState* Squad, class AHDPlayerState* MemberToRemove, bool* bRemoveSuccess);
	void SetSquadLockedState(class AHDSquadState* Squad, bool bLocked);
	void SetCamViewRotationLimits(const struct FRotator& ViewRotMin, const struct FRotator& ViewRotMax, bool bRelativeToPawnRotation);
	void SetCamViewRotationRollLimits(float ViewRollMin, float ViewRollMax, bool bRelativeToPawnRotation);
	void SetCamViewRotationPitchLimits(float ViewPitchMin, float ViewPitchMax, bool bRelativeToPawnRotation);
	void SetCamViewRotationYawLimits(float ViewYawMin, float ViewYawMax, bool bRelativeToPawnRotation);
	void RestoreCamDefaultViewRotationLimits();
	void RestoreCamDefaultViewRotationRollLimits();
	void RestoreCamDefaultViewRotationPitchLimits();
	void RestoreCamDefaultViewRotationYawLimits();
	void GetJoystickDirection(EJoystickTypes Stick, struct FVector2D* StickInput);

	void GetTeamKits(TSet<class UHDKit*>* TeamKits) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HDPlayerControllerBase_C">();
	}
	static class ABP_HDPlayerControllerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HDPlayerControllerBase_C>();
	}
};
static_assert(alignof(ABP_HDPlayerControllerBase_C) == 0x000008, "Wrong alignment on ABP_HDPlayerControllerBase_C");
static_assert(sizeof(ABP_HDPlayerControllerBase_C) == 0x000710, "Wrong size on ABP_HDPlayerControllerBase_C");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, UberGraphFrame) == 0x0006A0, "Member 'ABP_HDPlayerControllerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, DeployMenu) == 0x0006A8, "Member 'ABP_HDPlayerControllerBase_C::DeployMenu' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, bInitialSpawn) == 0x0006B0, "Member 'ABP_HDPlayerControllerBase_C::bInitialSpawn' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, bWantsToOpenDeployMenu) == 0x0006B1, "Member 'ABP_HDPlayerControllerBase_C::bWantsToOpenDeployMenu' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, bDeployMenuShown) == 0x0006B2, "Member 'ABP_HDPlayerControllerBase_C::bDeployMenuShown' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, OnRepPlayerState) == 0x0006B8, "Member 'ABP_HDPlayerControllerBase_C::OnRepPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, bOpenDeployMenuOnBeginPlay) == 0x0006C8, "Member 'ABP_HDPlayerControllerBase_C::bOpenDeployMenuOnBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, DeathScreen) == 0x0006D0, "Member 'ABP_HDPlayerControllerBase_C::DeathScreen' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, bDeathScreenShown) == 0x0006D8, "Member 'ABP_HDPlayerControllerBase_C::bDeathScreenShown' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, WatermarkWidget) == 0x0006E0, "Member 'ABP_HDPlayerControllerBase_C::WatermarkWidget' has a wrong offset!");
static_assert(offsetof(ABP_HDPlayerControllerBase_C, WatermarkWidgetClass) == 0x0006E8, "Member 'ABP_HDPlayerControllerBase_C::WatermarkWidgetClass' has a wrong offset!");

}

