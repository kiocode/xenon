#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CaptureStatus

#include "Basic.hpp"

#include "HDMain_structs.hpp"
#include "HDMain_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ECaptureUnitType_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CaptureStatus.WBP_CaptureStatus_C
// 0x0090 (0x02F8 - 0x0268)
class UWBP_CaptureStatus_C final : public UHDUIUWCaptureStatus
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       DisplayCaptureUIAnim;                              // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UProgressBar*                           ControlPointProgressBar;                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ControlPointText;                                  // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         GarrisonedUnitHBox;                                // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TeamOwnerText;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           LocalOwnershipColorToUse;                          // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviewNumFriendlies;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviewNumEnemies;                                 // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviewMinNumRequiredToCapture;                    // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFriendlyUnitsRightToLeft;                         // 0x02B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnemyUnitsRightToLeft;                            // 0x02B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseFriendlyOwnershipColor;                        // 0x02B6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B7[0x1];                                      // 0x02B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                UnitPadding;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           FriendlyOwnershipColor;                            // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NeutralOwnershipColor;                             // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnemyOwnershipColor;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_CaptureStatus(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void ControlPointSetGarrisonedPlayerCount(int32 NumFriendlies, int32 NumEnemies, int32 MinNumRequiredForCapture, bool bInitial);
	void ControlPointSetOwnershipState(bool bCaptured, EHDTeam NewOwningTeam, EHDTeam OldOwningTeam, bool bInitial);
	void ControlPointSetCaptureProgress(bool bContested, float NewValueNorm, float OldValueNorm, bool bInitial);
	void OnInitialized();
	void OwnerNoControlPoint();
	void OwnerTouchingControlPoint(class AHDBaseCapturePoint* OverlappingCP, bool bInitial);
	void UpdateProgressBarColor(EHDTeam OwningTeam);
	void UpdateTeamOwnerText(EHDTeam CaptureTeam);
	void ResizeGarrisonContainer(int32 NewUnitIconCount);
	void SetMinCountToCapture(int32 MinCount);
	void UpdateActiveUnits(bool bFriendly, int32 UnitCount, int32 MinUnitsRequired);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CaptureStatus_C">();
	}
	static class UWBP_CaptureStatus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CaptureStatus_C>();
	}
};
static_assert(alignof(UWBP_CaptureStatus_C) == 0x000008, "Wrong alignment on UWBP_CaptureStatus_C");
static_assert(sizeof(UWBP_CaptureStatus_C) == 0x0002F8, "Wrong size on UWBP_CaptureStatus_C");
static_assert(offsetof(UWBP_CaptureStatus_C, UberGraphFrame) == 0x000268, "Member 'UWBP_CaptureStatus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, DisplayCaptureUIAnim) == 0x000270, "Member 'UWBP_CaptureStatus_C::DisplayCaptureUIAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, ControlPointProgressBar) == 0x000278, "Member 'UWBP_CaptureStatus_C::ControlPointProgressBar' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, ControlPointText) == 0x000280, "Member 'UWBP_CaptureStatus_C::ControlPointText' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, GarrisonedUnitHBox) == 0x000288, "Member 'UWBP_CaptureStatus_C::GarrisonedUnitHBox' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, TeamOwnerText) == 0x000290, "Member 'UWBP_CaptureStatus_C::TeamOwnerText' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, LocalOwnershipColorToUse) == 0x000298, "Member 'UWBP_CaptureStatus_C::LocalOwnershipColorToUse' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, PreviewNumFriendlies) == 0x0002A8, "Member 'UWBP_CaptureStatus_C::PreviewNumFriendlies' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, PreviewNumEnemies) == 0x0002AC, "Member 'UWBP_CaptureStatus_C::PreviewNumEnemies' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, PreviewMinNumRequiredToCapture) == 0x0002B0, "Member 'UWBP_CaptureStatus_C::PreviewMinNumRequiredToCapture' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, bFriendlyUnitsRightToLeft) == 0x0002B4, "Member 'UWBP_CaptureStatus_C::bFriendlyUnitsRightToLeft' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, bEnemyUnitsRightToLeft) == 0x0002B5, "Member 'UWBP_CaptureStatus_C::bEnemyUnitsRightToLeft' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, bUseFriendlyOwnershipColor) == 0x0002B6, "Member 'UWBP_CaptureStatus_C::bUseFriendlyOwnershipColor' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, UnitPadding) == 0x0002B8, "Member 'UWBP_CaptureStatus_C::UnitPadding' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, FriendlyOwnershipColor) == 0x0002C8, "Member 'UWBP_CaptureStatus_C::FriendlyOwnershipColor' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, NeutralOwnershipColor) == 0x0002D8, "Member 'UWBP_CaptureStatus_C::NeutralOwnershipColor' has a wrong offset!");
static_assert(offsetof(UWBP_CaptureStatus_C, EnemyOwnershipColor) == 0x0002E8, "Member 'UWBP_CaptureStatus_C::EnemyOwnershipColor' has a wrong offset!");

}

