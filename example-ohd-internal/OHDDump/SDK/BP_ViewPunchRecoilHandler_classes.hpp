#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ViewPunchRecoilHandler

#include "Basic.hpp"

#include "DonkehFramework_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ViewPunchRecoilHandler.BP_ViewPunchRecoilHandler_C
// 0x0050 (0x0078 - 0x0028)
class UBP_ViewPunchRecoilHandler_C final : public UDFGunRecoilHandler
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         CurrentCofAngleDegrees;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         ConeOfFireAngleGrowthPerShotDegrees;               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxConeOfFireAngleDegrees;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinConeOfFireAngleDegrees;                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConeOfFireDecayRate;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredCoF;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         RecoilDirection;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilPunchMagnitude;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilCounter;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               InitialViewAngle;                                  // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                         Recoil_DX;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Recoil_DY;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         RecoilRestitutionTime;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   VerticalRecoilEasingMode;                          // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   HorizontalRecoilEasingMode;                        // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoilDT;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ViewPunchRecoilHandler(int32 EntryPoint);
	void OnWeaponStartFire();
	void OnWeaponStopFire();
	void ComputeRecoil(float DT);
	void ComputeConeOfFire(float DT);
	void OnTick(float DeltaTime);
	void ViewPunch();
	void OnWeaponFire();
	struct FVector GetConeOfFireOffset();
	void GetControlRotation(struct FRotator* ViewRotation);
	void GetController(class AController** Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ViewPunchRecoilHandler_C">();
	}
	static class UBP_ViewPunchRecoilHandler_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ViewPunchRecoilHandler_C>();
	}
};
static_assert(alignof(UBP_ViewPunchRecoilHandler_C) == 0x000008, "Wrong alignment on UBP_ViewPunchRecoilHandler_C");
static_assert(sizeof(UBP_ViewPunchRecoilHandler_C) == 0x000078, "Wrong size on UBP_ViewPunchRecoilHandler_C");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, UberGraphFrame) == 0x000028, "Member 'UBP_ViewPunchRecoilHandler_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, CurrentCofAngleDegrees) == 0x000030, "Member 'UBP_ViewPunchRecoilHandler_C::CurrentCofAngleDegrees' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, ConeOfFireAngleGrowthPerShotDegrees) == 0x000034, "Member 'UBP_ViewPunchRecoilHandler_C::ConeOfFireAngleGrowthPerShotDegrees' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, MaxConeOfFireAngleDegrees) == 0x000038, "Member 'UBP_ViewPunchRecoilHandler_C::MaxConeOfFireAngleDegrees' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, MinConeOfFireAngleDegrees) == 0x00003C, "Member 'UBP_ViewPunchRecoilHandler_C::MinConeOfFireAngleDegrees' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, ConeOfFireDecayRate) == 0x000040, "Member 'UBP_ViewPunchRecoilHandler_C::ConeOfFireDecayRate' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, DesiredCoF) == 0x000044, "Member 'UBP_ViewPunchRecoilHandler_C::DesiredCoF' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, RecoilDirection) == 0x000048, "Member 'UBP_ViewPunchRecoilHandler_C::RecoilDirection' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, RecoilPunchMagnitude) == 0x00004C, "Member 'UBP_ViewPunchRecoilHandler_C::RecoilPunchMagnitude' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, RecoilCounter) == 0x000050, "Member 'UBP_ViewPunchRecoilHandler_C::RecoilCounter' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, InitialViewAngle) == 0x000054, "Member 'UBP_ViewPunchRecoilHandler_C::InitialViewAngle' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, Recoil_DX) == 0x000060, "Member 'UBP_ViewPunchRecoilHandler_C::Recoil_DX' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, Recoil_DY) == 0x000064, "Member 'UBP_ViewPunchRecoilHandler_C::Recoil_DY' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, RecoilRestitutionTime) == 0x000068, "Member 'UBP_ViewPunchRecoilHandler_C::RecoilRestitutionTime' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, VerticalRecoilEasingMode) == 0x00006C, "Member 'UBP_ViewPunchRecoilHandler_C::VerticalRecoilEasingMode' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, HorizontalRecoilEasingMode) == 0x00006D, "Member 'UBP_ViewPunchRecoilHandler_C::HorizontalRecoilEasingMode' has a wrong offset!");
static_assert(offsetof(UBP_ViewPunchRecoilHandler_C, RecoilDT) == 0x000070, "Member 'UBP_ViewPunchRecoilHandler_C::RecoilDT' has a wrong offset!");

}

