#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FantasticPerspectivePlugin

#include "Basic.hpp"

#include "FantasticPerspectivePlugin_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class FantasticPerspectivePlugin.FantasticPerspectiveActor
// 0x0148 (0x0368 - 0x0220)
class AFantasticPerspectiveActor final : public AActor
{
public:
	uint8                                         Pad_220[0x60];                                     // 0x0220(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFantasticPerspectiveSettings          Settings;                                          // 0x0280(0x00E4)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Cache;                                             // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Apply(class APlayerController* PlayerController, const EFantasticPerspectiveStereoscopicPass StereoPass, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FantasticPerspectiveActor">();
	}
	static class AFantasticPerspectiveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFantasticPerspectiveActor>();
	}
};
static_assert(alignof(AFantasticPerspectiveActor) == 0x000008, "Wrong alignment on AFantasticPerspectiveActor");
static_assert(sizeof(AFantasticPerspectiveActor) == 0x000368, "Wrong size on AFantasticPerspectiveActor");
static_assert(offsetof(AFantasticPerspectiveActor, Settings) == 0x000280, "Member 'AFantasticPerspectiveActor::Settings' has a wrong offset!");
static_assert(offsetof(AFantasticPerspectiveActor, Cache) == 0x000364, "Member 'AFantasticPerspectiveActor::Cache' has a wrong offset!");

// Class FantasticPerspectivePlugin.FantasticPerspectiveComponent
// 0x0148 (0x01F8 - 0x00B0)
class UFantasticPerspectiveComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x60];                                      // 0x00B0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFantasticPerspectiveSettings          Settings;                                          // 0x0110(0x00E4)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Cache;                                             // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Apply(class APlayerController* PlayerController, const EFantasticPerspectiveStereoscopicPass StereoPass, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FantasticPerspectiveComponent">();
	}
	static class UFantasticPerspectiveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFantasticPerspectiveComponent>();
	}
};
static_assert(alignof(UFantasticPerspectiveComponent) == 0x000008, "Wrong alignment on UFantasticPerspectiveComponent");
static_assert(sizeof(UFantasticPerspectiveComponent) == 0x0001F8, "Wrong size on UFantasticPerspectiveComponent");
static_assert(offsetof(UFantasticPerspectiveComponent, Settings) == 0x000110, "Member 'UFantasticPerspectiveComponent::Settings' has a wrong offset!");
static_assert(offsetof(UFantasticPerspectiveComponent, Cache) == 0x0001F4, "Member 'UFantasticPerspectiveComponent::Cache' has a wrong offset!");

// Class FantasticPerspectivePlugin.FantasticPerspectiveFunctions
// 0x0000 (0x0028 - 0x0028)
class UFantasticPerspectiveFunctions final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyFrustumEffects(const struct FFantasticPerspectiveFrustum& Frustum, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);
	static void ApplyPointsBasing(const struct FFantasticPerspectivePoints& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);
	static void ApplySettings(const struct FFantasticPerspectiveSettings& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);
	static void ApplySettingsAndDrawDebug(const class UObject* WorldContextObject, const struct FFantasticPerspectiveSettings& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix);
	static void ApplyToSceneCapture2D(class USceneCaptureComponent2D* SceneCapture, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix);
	static void ApplyTransformEffects(const struct FFantasticPerspectiveTransform& Transform, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix);
	static void DrawDebugPositionedFrustum(const class UObject* WorldContextObject, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, const struct FLinearColor& Color, float PerspectiveFrustumDepth, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness);
	static const struct FFantasticPerspectiveDebug GetDebugSettings(const struct FFantasticPerspectiveSettings& Target);
	static const struct FFantasticPerspectiveFrustum GetFrustumSettings(const struct FFantasticPerspectiveSettings& Target);
	static const struct FFantasticPerspectiveTransform GetTransformSettings(const struct FFantasticPerspectiveSettings& Target);
	static void ResetCache();
	static void ResetSettings(struct FFantasticPerspectiveSettings& Target);
	static struct FMatrix ScreenToWorldConversionMatrix();
	static struct FRotator ScreenToWorldConversionRotator();
	static void SetDebugSettings(struct FFantasticPerspectiveSettings& Target, const struct FFantasticPerspectiveDebug& Debug);
	static void SetFrustumSettings(struct FFantasticPerspectiveSettings& Target, const struct FFantasticPerspectiveFrustum& Frustum);
	static void SetTransformSettings(struct FFantasticPerspectiveSettings& Target, const struct FFantasticPerspectiveTransform& Transform);
	static struct FMatrix WorldToScreenConversionMatrix();
	static struct FRotator WorldToScreenConversionRotator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FantasticPerspectiveFunctions">();
	}
	static class UFantasticPerspectiveFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFantasticPerspectiveFunctions>();
	}
};
static_assert(alignof(UFantasticPerspectiveFunctions) == 0x000008, "Wrong alignment on UFantasticPerspectiveFunctions");
static_assert(sizeof(UFantasticPerspectiveFunctions) == 0x000028, "Wrong size on UFantasticPerspectiveFunctions");

// Class FantasticPerspectivePlugin.FantasticPerspectiveLocalPlayer
// 0x0000 (0x0258 - 0x0258)
class UFantasticPerspectiveLocalPlayer final : public ULocalPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FantasticPerspectiveLocalPlayer">();
	}
	static class UFantasticPerspectiveLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFantasticPerspectiveLocalPlayer>();
	}
};
static_assert(alignof(UFantasticPerspectiveLocalPlayer) == 0x000008, "Wrong alignment on UFantasticPerspectiveLocalPlayer");
static_assert(sizeof(UFantasticPerspectiveLocalPlayer) == 0x000258, "Wrong size on UFantasticPerspectiveLocalPlayer");

}

