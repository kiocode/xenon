#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotify_PlayCameraAnimation

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimNotify_PlayCameraAnimation.AnimNotify_PlayCameraAnimation_C
// 0x0018 (0x0050 - 0x0038)
class UAnimNotify_PlayCameraAnimation_C final : public UAnimNotify
{
public:
	class UCurveVector*                           Camera_Curve;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothingSpeed;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlaybackSlot;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionSpeed;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHoldForward;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;
	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotify_PlayCameraAnimation_C">();
	}
	static class UAnimNotify_PlayCameraAnimation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayCameraAnimation_C>();
	}
};
static_assert(alignof(UAnimNotify_PlayCameraAnimation_C) == 0x000008, "Wrong alignment on UAnimNotify_PlayCameraAnimation_C");
static_assert(sizeof(UAnimNotify_PlayCameraAnimation_C) == 0x000050, "Wrong size on UAnimNotify_PlayCameraAnimation_C");
static_assert(offsetof(UAnimNotify_PlayCameraAnimation_C, Camera_Curve) == 0x000038, "Member 'UAnimNotify_PlayCameraAnimation_C::Camera_Curve' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayCameraAnimation_C, SmoothingSpeed) == 0x000040, "Member 'UAnimNotify_PlayCameraAnimation_C::SmoothingSpeed' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayCameraAnimation_C, PlaybackSlot) == 0x000044, "Member 'UAnimNotify_PlayCameraAnimation_C::PlaybackSlot' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayCameraAnimation_C, TransitionSpeed) == 0x000048, "Member 'UAnimNotify_PlayCameraAnimation_C::TransitionSpeed' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayCameraAnimation_C, bHoldForward) == 0x00004C, "Member 'UAnimNotify_PlayCameraAnimation_C::bHoldForward' has a wrong offset!");

}

