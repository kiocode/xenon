#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyWidget_MaskImage

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "PyMarvelUserWidget_classes.hpp"


namespace SDK
{

// PythonClass PyWidget_MaskImage.PyWidget_MaskImage
// 0x0130 (0x0720 - 0x05F0)
class UPyWidget_MaskImage : public UPyMarvelUserWidget
{
public:
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Mask;                                              // 0x0600(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Texture_Offset_X;                                  // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Texture_Offset_Y;                                  // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mask_Offset_X;                                     // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mask_Offset_Y;                                     // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageAngel;                                        // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale_X;                                           // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale_Y;                                           // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoisePower;                                        // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseScaleX;                                       // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseScaleY;                                       // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetPowerX;                                      // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetPowerY;                                      // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRangeX_G;                                    // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRangeX_R;                                    // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRangeY_G;                                    // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRangeY_R;                                    // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPictureLoadCompleted;                            // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnSoftTextureLoad(class UObject* Texture_0);
	void SetTexture(class UTexture2D* Texture_0);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnInitialized();
	void OnPictureLoadCompleted__DelegateSignature(class UTexture2D* Picture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_MaskImage">();
	}
	static class UPyWidget_MaskImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_MaskImage>();
	}
};
static_assert(alignof(UPyWidget_MaskImage) == 0x000010, "Wrong alignment on UPyWidget_MaskImage");
static_assert(sizeof(UPyWidget_MaskImage) == 0x000720, "Wrong size on UPyWidget_MaskImage");
static_assert(offsetof(UPyWidget_MaskImage, Texture) == 0x0005F0, "Member 'UPyWidget_MaskImage::Texture' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Mask) == 0x000600, "Member 'UPyWidget_MaskImage::Mask' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Texture_Offset_X) == 0x0006D0, "Member 'UPyWidget_MaskImage::Texture_Offset_X' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Texture_Offset_Y) == 0x0006D4, "Member 'UPyWidget_MaskImage::Texture_Offset_Y' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Mask_Offset_X) == 0x0006D8, "Member 'UPyWidget_MaskImage::Mask_Offset_X' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Mask_Offset_Y) == 0x0006DC, "Member 'UPyWidget_MaskImage::Mask_Offset_Y' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, ImageAngel) == 0x0006E0, "Member 'UPyWidget_MaskImage::ImageAngel' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Scale_X) == 0x0006E4, "Member 'UPyWidget_MaskImage::Scale_X' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, Scale_Y) == 0x0006E8, "Member 'UPyWidget_MaskImage::Scale_Y' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, NoisePower) == 0x0006EC, "Member 'UPyWidget_MaskImage::NoisePower' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, NoiseScaleX) == 0x0006F0, "Member 'UPyWidget_MaskImage::NoiseScaleX' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, NoiseScaleY) == 0x0006F4, "Member 'UPyWidget_MaskImage::NoiseScaleY' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetPowerX) == 0x0006F8, "Member 'UPyWidget_MaskImage::OffsetPowerX' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetPowerY) == 0x0006FC, "Member 'UPyWidget_MaskImage::OffsetPowerY' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetRangeX_G) == 0x000700, "Member 'UPyWidget_MaskImage::OffsetRangeX_G' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetRangeX_R) == 0x000704, "Member 'UPyWidget_MaskImage::OffsetRangeX_R' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetRangeY_G) == 0x000708, "Member 'UPyWidget_MaskImage::OffsetRangeY_G' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OffsetRangeY_R) == 0x00070C, "Member 'UPyWidget_MaskImage::OffsetRangeY_R' has a wrong offset!");
static_assert(offsetof(UPyWidget_MaskImage, OnPictureLoadCompleted) == 0x000710, "Member 'UPyWidget_MaskImage::OnPictureLoadCompleted' has a wrong offset!");

}

