#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_103312

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass PyAbility_103312.PyConfig_103312
// 0x0010 (0x00A8 - 0x0098)
class UPyConfig_103312 final : public UMarvelAbilityConfig
{
public:
	struct FGameplayTag                           WeaponLoadEndEvent;                                // 0x0098(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_103312">();
	}
	static class UPyConfig_103312* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_103312>();
	}
};
static_assert(alignof(UPyConfig_103312) == 0x000008, "Wrong alignment on UPyConfig_103312");
static_assert(sizeof(UPyConfig_103312) == 0x0000A8, "Wrong size on UPyConfig_103312");
static_assert(offsetof(UPyConfig_103312, WeaponLoadEndEvent) == 0x000098, "Member 'UPyConfig_103312::WeaponLoadEndEvent' has a wrong offset!");

// PythonClass PyAbility_103312.PyAbility_103312
// 0x0008 (0x2588 - 0x2580)
class UPyAbility_103312 : public UMarvelGameplayAbility
{
public:
	int32                                         SniperRifleID;                                     // 0x2580(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanActivate();
	void BeginPlay();
	void OnActivateFailed(const struct FGameplayTagContainer& FailReason);
	void OnNeedTryPullBullet();
	float GetAbilityDuration();
	void OnDurationEnd();
	void CheckBulletLoadedAndMultiPullBullet();
	void MulticastTryPullBullet();
	void TryActive();
	void WeaponLoadComplete();
	bool IsWeaponLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_103312">();
	}
	static class UPyAbility_103312* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_103312>();
	}
};
static_assert(alignof(UPyAbility_103312) == 0x000008, "Wrong alignment on UPyAbility_103312");
static_assert(sizeof(UPyAbility_103312) == 0x002588, "Wrong size on UPyAbility_103312");
static_assert(offsetof(UPyAbility_103312, SniperRifleID) == 0x002580, "Member 'UPyAbility_103312::SniperRifleID' has a wrong offset!");

}

