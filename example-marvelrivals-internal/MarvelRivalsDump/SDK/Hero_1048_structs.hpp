#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1048

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Hero_1048.EPsylockeState
// NumValues: 0x0004
enum class EPsylockeState : uint8
{
	Idle                                     = 0,
	SDashLoop                                = 1,
	SDashEnd                                 = 2,
	EPsylockeState_MAX                       = 3,
};

// Enum Hero_1048.EShurikenState
// NumValues: 0x0004
enum class EShurikenState : uint8
{
	Flying                                   = 0,
	Attaching                                = 1,
	Hovering                                 = 2,
	EShurikenState_MAX                       = 3,
};

// Enum Hero_1048.EStage_104831
// NumValues: 0x0004
enum class EStage_104831 : uint8
{
	Normal                                   = 0,
	Launching                                = 1,
	Recalling                                = 2,
	EStage_MAX                               = 3,
};

// Enum Hero_1048.EShurikenRecallType
// NumValues: 0x0004
enum class EShurikenRecallType : uint8
{
	CrossHair                                = 0,
	ToBehind                                 = 1,
	ToOwner                                  = 2,
	EShurikenRecallType_MAX                  = 3,
};

// Enum Hero_1048.EAbilityState_104861
// NumValues: 0x0006
enum class EAbilityState_104861 : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Dash                                     = 2,
	Attack                                   = 3,
	End                                      = 4,
	EAbilityState_MAX                        = 5,
};

// ScriptStruct Hero_1048.ShurikenSpawnInfo
// 0x0008 (0x0008 - 0x0000)
struct FShurikenSpawnInfo final
{
public:
	float                                         HorizontalOffsetAngle;                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalOffsetAngle;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShurikenSpawnInfo) == 0x000004, "Wrong alignment on FShurikenSpawnInfo");
static_assert(sizeof(FShurikenSpawnInfo) == 0x000008, "Wrong size on FShurikenSpawnInfo");
static_assert(offsetof(FShurikenSpawnInfo, HorizontalOffsetAngle) == 0x000000, "Member 'FShurikenSpawnInfo::HorizontalOffsetAngle' has a wrong offset!");
static_assert(offsetof(FShurikenSpawnInfo, VerticalOffsetAngle) == 0x000004, "Member 'FShurikenSpawnInfo::VerticalOffsetAngle' has a wrong offset!");

// ScriptStruct Hero_1048.ShurikenRecallInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FShurikenRecallInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShurikenRecallInfo) == 0x000008, "Wrong alignment on FShurikenRecallInfo");
static_assert(sizeof(FShurikenRecallInfo) == 0x000028, "Wrong size on FShurikenRecallInfo");

// ScriptStruct Hero_1048.AbilityStage_104861
// 0x0008 (0x0008 - 0x0000)
struct FAbilityStage_104861 final
{
public:
	EAbilityState_104861                          CurState;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurAttackIndex;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityStage_104861) == 0x000004, "Wrong alignment on FAbilityStage_104861");
static_assert(sizeof(FAbilityStage_104861) == 0x000008, "Wrong size on FAbilityStage_104861");
static_assert(offsetof(FAbilityStage_104861, CurState) == 0x000000, "Member 'FAbilityStage_104861::CurState' has a wrong offset!");
static_assert(offsetof(FAbilityStage_104861, CurAttackIndex) == 0x000004, "Member 'FAbilityStage_104861::CurAttackIndex' has a wrong offset!");

// ScriptStruct Hero_1048.TargetInfo_104861
// 0x0030 (0x0030 - 0x0000)
struct FTargetInfo_104861 final
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedLocation;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FixedLocation;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockHit;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetInfo_104861) == 0x000008, "Wrong alignment on FTargetInfo_104861");
static_assert(sizeof(FTargetInfo_104861) == 0x000030, "Wrong size on FTargetInfo_104861");
static_assert(offsetof(FTargetInfo_104861, Target) == 0x000000, "Member 'FTargetInfo_104861::Target' has a wrong offset!");
static_assert(offsetof(FTargetInfo_104861, bUseFixedLocation) == 0x000008, "Member 'FTargetInfo_104861::bUseFixedLocation' has a wrong offset!");
static_assert(offsetof(FTargetInfo_104861, FixedLocation) == 0x000010, "Member 'FTargetInfo_104861::FixedLocation' has a wrong offset!");
static_assert(offsetof(FTargetInfo_104861, bBlockHit) == 0x000028, "Member 'FTargetInfo_104861::bBlockHit' has a wrong offset!");
static_assert(offsetof(FTargetInfo_104861, Index) == 0x00002C, "Member 'FTargetInfo_104861::Index' has a wrong offset!");

}

