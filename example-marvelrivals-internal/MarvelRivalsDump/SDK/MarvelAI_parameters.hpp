#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelAI

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MarvelAI_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UESVON_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "InputRecord_structs.hpp"


namespace SDK::Params
{

// Function MarvelAI.ActionRequirementBase.Requirement
// 0x0018 (0x0018 - 0x0000)
struct ActionRequirementBase_Requirement final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionRequirementBase_Requirement) == 0x000008, "Wrong alignment on ActionRequirementBase_Requirement");
static_assert(sizeof(ActionRequirementBase_Requirement) == 0x000018, "Wrong size on ActionRequirementBase_Requirement");
static_assert(offsetof(ActionRequirementBase_Requirement, OwnerController) == 0x000000, "Member 'ActionRequirementBase_Requirement::OwnerController' has a wrong offset!");
static_assert(offsetof(ActionRequirementBase_Requirement, ControlledPawn) == 0x000008, "Member 'ActionRequirementBase_Requirement::ControlledPawn' has a wrong offset!");
static_assert(offsetof(ActionRequirementBase_Requirement, ReturnValue) == 0x000010, "Member 'ActionRequirementBase_Requirement::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTService_MarvelInstancedBase.OnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BTService_MarvelInstancedBase_OnDestroyed final
{
public:
	class UBehaviorTreeComponent*                 OwnerComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTService_MarvelInstancedBase_OnDestroyed) == 0x000008, "Wrong alignment on BTService_MarvelInstancedBase_OnDestroyed");
static_assert(sizeof(BTService_MarvelInstancedBase_OnDestroyed) == 0x000008, "Wrong size on BTService_MarvelInstancedBase_OnDestroyed");
static_assert(offsetof(BTService_MarvelInstancedBase_OnDestroyed, OwnerComp) == 0x000000, "Member 'BTService_MarvelInstancedBase_OnDestroyed::OwnerComp' has a wrong offset!");

// Function MarvelAI.BTService_MarvelInstancedBase.K2_GetControlledHero
// 0x0008 (0x0008 - 0x0000)
struct BTService_MarvelInstancedBase_K2_GetControlledHero final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTService_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong alignment on BTService_MarvelInstancedBase_K2_GetControlledHero");
static_assert(sizeof(BTService_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong size on BTService_MarvelInstancedBase_K2_GetControlledHero");
static_assert(offsetof(BTService_MarvelInstancedBase_K2_GetControlledHero, ReturnValue) == 0x000000, "Member 'BTService_MarvelInstancedBase_K2_GetControlledHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTService_MarvelInstancedBase.K2_GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct BTService_MarvelInstancedBase_K2_GetControlledPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTService_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong alignment on BTService_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(sizeof(BTService_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong size on BTService_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(offsetof(BTService_MarvelInstancedBase_K2_GetControlledPawn, ReturnValue) == 0x000000, "Member 'BTService_MarvelInstancedBase_K2_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTService_MarvelInstancedBase.K2_GetMarvelAIOwner
// 0x0008 (0x0008 - 0x0000)
struct BTService_MarvelInstancedBase_K2_GetMarvelAIOwner final
{
public:
	class AMarvelAIController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTService_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong alignment on BTService_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(sizeof(BTService_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong size on BTService_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(offsetof(BTService_MarvelInstancedBase_K2_GetMarvelAIOwner, ReturnValue) == 0x000000, "Member 'BTService_MarvelInstancedBase_K2_GetMarvelAIOwner::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTService_MarvelInstancedBase.K2_GetOwnerBTComp
// 0x0008 (0x0008 - 0x0000)
struct BTService_MarvelInstancedBase_K2_GetOwnerBTComp final
{
public:
	class UBehaviorTreeComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTService_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong alignment on BTService_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(sizeof(BTService_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong size on BTService_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(offsetof(BTService_MarvelInstancedBase_K2_GetOwnerBTComp, ReturnValue) == 0x000000, "Member 'BTService_MarvelInstancedBase_K2_GetOwnerBTComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityTacticsTask.GetSelectCheck
// 0x0008 (0x0008 - 0x0000)
struct AbilityTacticsTask_GetSelectCheck final
{
public:
	class UAIAbilitySelectCheckBase*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTacticsTask_GetSelectCheck) == 0x000008, "Wrong alignment on AbilityTacticsTask_GetSelectCheck");
static_assert(sizeof(AbilityTacticsTask_GetSelectCheck) == 0x000008, "Wrong size on AbilityTacticsTask_GetSelectCheck");
static_assert(offsetof(AbilityTacticsTask_GetSelectCheck, ReturnValue) == 0x000000, "Member 'AbilityTacticsTask_GetSelectCheck::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityTacticsTask_AILab.OnAIAbilityServerResponse
// 0x0048 (0x0048 - 0x0000)
struct AbilityTacticsTask_AILab_OnAIAbilityServerResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RequestID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIServerResponseProtocol              AIServerResponseProtocol;                          // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIServerResponseCode                  AIServerResponseCode;                              // 0x0038(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelAIController*                    AIController;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse) == 0x000008, "Wrong alignment on AbilityTacticsTask_AILab_OnAIAbilityServerResponse");
static_assert(sizeof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse) == 0x000048, "Wrong size on AbilityTacticsTask_AILab_OnAIAbilityServerResponse");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, bSuccess) == 0x000000, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, RequestID) == 0x000008, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::RequestID' has a wrong offset!");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, UID) == 0x000010, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::UID' has a wrong offset!");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, AIServerResponseProtocol) == 0x000018, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::AIServerResponseProtocol' has a wrong offset!");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, AIServerResponseCode) == 0x000038, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::AIServerResponseCode' has a wrong offset!");
static_assert(offsetof(AbilityTacticsTask_AILab_OnAIAbilityServerResponse, AIController) == 0x000040, "Member 'AbilityTacticsTask_AILab_OnAIAbilityServerResponse::AIController' has a wrong offset!");

// Function MarvelAI.BTDecorator_MarvelInstancedBase.K2_GetControlledHero
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_MarvelInstancedBase_K2_GetControlledHero final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong alignment on BTDecorator_MarvelInstancedBase_K2_GetControlledHero");
static_assert(sizeof(BTDecorator_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong size on BTDecorator_MarvelInstancedBase_K2_GetControlledHero");
static_assert(offsetof(BTDecorator_MarvelInstancedBase_K2_GetControlledHero, ReturnValue) == 0x000000, "Member 'BTDecorator_MarvelInstancedBase_K2_GetControlledHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTDecorator_MarvelInstancedBase.K2_GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_MarvelInstancedBase_K2_GetControlledPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong alignment on BTDecorator_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(sizeof(BTDecorator_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong size on BTDecorator_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(offsetof(BTDecorator_MarvelInstancedBase_K2_GetControlledPawn, ReturnValue) == 0x000000, "Member 'BTDecorator_MarvelInstancedBase_K2_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTDecorator_MarvelInstancedBase.K2_GetMarvelAIOwner
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner final
{
public:
	class AMarvelAIController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong alignment on BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(sizeof(BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong size on BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(offsetof(BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner, ReturnValue) == 0x000000, "Member 'BTDecorator_MarvelInstancedBase_K2_GetMarvelAIOwner::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTDecorator_MarvelInstancedBase.K2_GetOwnerBTComp
// 0x0008 (0x0008 - 0x0000)
struct BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp final
{
public:
	class UBehaviorTreeComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong alignment on BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(sizeof(BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong size on BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(offsetof(BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp, ReturnValue) == 0x000000, "Member 'BTDecorator_MarvelInstancedBase_K2_GetOwnerBTComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointBase.BindController
// 0x0008 (0x0008 - 0x0000)
struct StandPointBase_BindController final
{
public:
	const class AMarvelAIController*              InController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointBase_BindController) == 0x000008, "Wrong alignment on StandPointBase_BindController");
static_assert(sizeof(StandPointBase_BindController) == 0x000008, "Wrong size on StandPointBase_BindController");
static_assert(offsetof(StandPointBase_BindController, InController) == 0x000000, "Member 'StandPointBase_BindController::InController' has a wrong offset!");

// Function MarvelAI.StandPointBase.GetFlyGoalLocation
// 0x0020 (0x0020 - 0x0000)
struct StandPointBase_GetFlyGoalLocation final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointBase_GetFlyGoalLocation) == 0x000008, "Wrong alignment on StandPointBase_GetFlyGoalLocation");
static_assert(sizeof(StandPointBase_GetFlyGoalLocation) == 0x000020, "Wrong size on StandPointBase_GetFlyGoalLocation");
static_assert(offsetof(StandPointBase_GetFlyGoalLocation, MovingActor) == 0x000000, "Member 'StandPointBase_GetFlyGoalLocation::MovingActor' has a wrong offset!");
static_assert(offsetof(StandPointBase_GetFlyGoalLocation, ReturnValue) == 0x000008, "Member 'StandPointBase_GetFlyGoalLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointBase.GetFocusPosition
// 0x0018 (0x0018 - 0x0000)
struct StandPointBase_GetFocusPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointBase_GetFocusPosition) == 0x000008, "Wrong alignment on StandPointBase_GetFocusPosition");
static_assert(sizeof(StandPointBase_GetFocusPosition) == 0x000018, "Wrong size on StandPointBase_GetFocusPosition");
static_assert(offsetof(StandPointBase_GetFocusPosition, ReturnValue) == 0x000000, "Member 'StandPointBase_GetFocusPosition::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointBase.GetLandGoalLocation
// 0x0020 (0x0020 - 0x0000)
struct StandPointBase_GetLandGoalLocation final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointBase_GetLandGoalLocation) == 0x000008, "Wrong alignment on StandPointBase_GetLandGoalLocation");
static_assert(sizeof(StandPointBase_GetLandGoalLocation) == 0x000020, "Wrong size on StandPointBase_GetLandGoalLocation");
static_assert(offsetof(StandPointBase_GetLandGoalLocation, MovingActor) == 0x000000, "Member 'StandPointBase_GetLandGoalLocation::MovingActor' has a wrong offset!");
static_assert(offsetof(StandPointBase_GetLandGoalLocation, ReturnValue) == 0x000008, "Member 'StandPointBase_GetLandGoalLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointBase.UnbindController
// 0x0008 (0x0008 - 0x0000)
struct StandPointBase_UnbindController final
{
public:
	const class AMarvelAIController*              InController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointBase_UnbindController) == 0x000008, "Wrong alignment on StandPointBase_UnbindController");
static_assert(sizeof(StandPointBase_UnbindController) == 0x000008, "Wrong size on StandPointBase_UnbindController");
static_assert(offsetof(StandPointBase_UnbindController, InController) == 0x000000, "Member 'StandPointBase_UnbindController::InController' has a wrong offset!");

// Function MarvelAI.StandPointBase.CheckIsValid
// 0x0010 (0x0010 - 0x0000)
struct StandPointBase_CheckIsValid final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedMulti;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StandPointBase_CheckIsValid) == 0x000008, "Wrong alignment on StandPointBase_CheckIsValid");
static_assert(sizeof(StandPointBase_CheckIsValid) == 0x000010, "Wrong size on StandPointBase_CheckIsValid");
static_assert(offsetof(StandPointBase_CheckIsValid, AIController) == 0x000000, "Member 'StandPointBase_CheckIsValid::AIController' has a wrong offset!");
static_assert(offsetof(StandPointBase_CheckIsValid, bAllowedMulti) == 0x000008, "Member 'StandPointBase_CheckIsValid::bAllowedMulti' has a wrong offset!");
static_assert(offsetof(StandPointBase_CheckIsValid, ReturnValue) == 0x000009, "Member 'StandPointBase_CheckIsValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityUsageStandPoint.CheckIsValidPointToUse
// 0x0018 (0x0018 - 0x0000)
struct AbilityUsageStandPoint_CheckIsValidPointToUse final
{
public:
	class AMarvelBaseCharacter*                   ToCheckHero;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityUsageObject*                  AbilityUsage;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityUsageStandPoint_CheckIsValidPointToUse) == 0x000008, "Wrong alignment on AbilityUsageStandPoint_CheckIsValidPointToUse");
static_assert(sizeof(AbilityUsageStandPoint_CheckIsValidPointToUse) == 0x000018, "Wrong size on AbilityUsageStandPoint_CheckIsValidPointToUse");
static_assert(offsetof(AbilityUsageStandPoint_CheckIsValidPointToUse, ToCheckHero) == 0x000000, "Member 'AbilityUsageStandPoint_CheckIsValidPointToUse::ToCheckHero' has a wrong offset!");
static_assert(offsetof(AbilityUsageStandPoint_CheckIsValidPointToUse, AbilityUsage) == 0x000008, "Member 'AbilityUsageStandPoint_CheckIsValidPointToUse::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AbilityUsageStandPoint_CheckIsValidPointToUse, ReturnValue) == 0x000010, "Member 'AbilityUsageStandPoint_CheckIsValidPointToUse::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityUsageStandPoint.PyCheckGameplayProgressIsMatch
// 0x0001 (0x0001 - 0x0000)
struct AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch) == 0x000001, "Wrong alignment on AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch");
static_assert(sizeof(AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch) == 0x000001, "Wrong size on AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch");
static_assert(offsetof(AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch, ReturnValue) == 0x000000, "Member 'AbilityUsageStandPoint_PyCheckGameplayProgressIsMatch::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityUsageStandPoint.CheckIsValidByAbilityUsageId
// 0x0008 (0x0008 - 0x0000)
struct AbilityUsageStandPoint_CheckIsValidByAbilityUsageId final
{
public:
	int32                                         AbilityUsageID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityUsageStandPoint_CheckIsValidByAbilityUsageId) == 0x000004, "Wrong alignment on AbilityUsageStandPoint_CheckIsValidByAbilityUsageId");
static_assert(sizeof(AbilityUsageStandPoint_CheckIsValidByAbilityUsageId) == 0x000008, "Wrong size on AbilityUsageStandPoint_CheckIsValidByAbilityUsageId");
static_assert(offsetof(AbilityUsageStandPoint_CheckIsValidByAbilityUsageId, AbilityUsageID) == 0x000000, "Member 'AbilityUsageStandPoint_CheckIsValidByAbilityUsageId::AbilityUsageID' has a wrong offset!");
static_assert(offsetof(AbilityUsageStandPoint_CheckIsValidByAbilityUsageId, ReturnValue) == 0x000004, "Member 'AbilityUsageStandPoint_CheckIsValidByAbilityUsageId::ReturnValue' has a wrong offset!");

// Function MarvelAI.AbilityUsageStandPoint.GetDataForUsage
// 0x0080 (0x0080 - 0x0000)
struct AbilityUsageStandPoint_GetDataForUsage final
{
public:
	const class UAIAbilityUsageObject*            InAbilityUsage;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbilityUsagePointData                 OutData;                                           // 0x0008(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityUsageStandPoint_GetDataForUsage) == 0x000008, "Wrong alignment on AbilityUsageStandPoint_GetDataForUsage");
static_assert(sizeof(AbilityUsageStandPoint_GetDataForUsage) == 0x000080, "Wrong size on AbilityUsageStandPoint_GetDataForUsage");
static_assert(offsetof(AbilityUsageStandPoint_GetDataForUsage, InAbilityUsage) == 0x000000, "Member 'AbilityUsageStandPoint_GetDataForUsage::InAbilityUsage' has a wrong offset!");
static_assert(offsetof(AbilityUsageStandPoint_GetDataForUsage, OutData) == 0x000008, "Member 'AbilityUsageStandPoint_GetDataForUsage::OutData' has a wrong offset!");
static_assert(offsetof(AbilityUsageStandPoint_GetDataForUsage, ReturnValue) == 0x000078, "Member 'AbilityUsageStandPoint_GetDataForUsage::ReturnValue' has a wrong offset!");

// Function MarvelAI.LinkedAbilityUsageStandPoint.GetEndLocation
// 0x0020 (0x0020 - 0x0000)
struct LinkedAbilityUsageStandPoint_GetEndLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedAbilityUsageStandPoint_GetEndLocation) == 0x000008, "Wrong alignment on LinkedAbilityUsageStandPoint_GetEndLocation");
static_assert(sizeof(LinkedAbilityUsageStandPoint_GetEndLocation) == 0x000020, "Wrong size on LinkedAbilityUsageStandPoint_GetEndLocation");
static_assert(offsetof(LinkedAbilityUsageStandPoint_GetEndLocation, Index_0) == 0x000000, "Member 'LinkedAbilityUsageStandPoint_GetEndLocation::Index_0' has a wrong offset!");
static_assert(offsetof(LinkedAbilityUsageStandPoint_GetEndLocation, ReturnValue) == 0x000008, "Member 'LinkedAbilityUsageStandPoint_GetEndLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.LinkedAbilityUsageStandPoint.GetStartLocation
// 0x0020 (0x0020 - 0x0000)
struct LinkedAbilityUsageStandPoint_GetStartLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedAbilityUsageStandPoint_GetStartLocation) == 0x000008, "Wrong alignment on LinkedAbilityUsageStandPoint_GetStartLocation");
static_assert(sizeof(LinkedAbilityUsageStandPoint_GetStartLocation) == 0x000020, "Wrong size on LinkedAbilityUsageStandPoint_GetStartLocation");
static_assert(offsetof(LinkedAbilityUsageStandPoint_GetStartLocation, Index_0) == 0x000000, "Member 'LinkedAbilityUsageStandPoint_GetStartLocation::Index_0' has a wrong offset!");
static_assert(offsetof(LinkedAbilityUsageStandPoint_GetStartLocation, ReturnValue) == 0x000008, "Member 'LinkedAbilityUsageStandPoint_GetStartLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityCondition.CouldPass
// 0x0040 (0x0040 - 0x0000)
struct AIAbilityCondition_CouldPass final
{
public:
	struct FRequiredAIDataForAutoAbility          AIAutoAbilityContext;                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityCondition_CouldPass) == 0x000008, "Wrong alignment on AIAbilityCondition_CouldPass");
static_assert(sizeof(AIAbilityCondition_CouldPass) == 0x000040, "Wrong size on AIAbilityCondition_CouldPass");
static_assert(offsetof(AIAbilityCondition_CouldPass, AIAutoAbilityContext) == 0x000000, "Member 'AIAbilityCondition_CouldPass::AIAutoAbilityContext' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_CouldPass, ReturnValue) == 0x000038, "Member 'AIAbilityCondition_CouldPass::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityCondition_SummonerCheck.GetSummonerListOfOwner
// 0x0028 (0x0028 - 0x0000)
struct AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner final
{
public:
	class AActor*                                 AbilityOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonerId_0;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutSummonerList;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner) == 0x000008, "Wrong alignment on AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner");
static_assert(sizeof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner) == 0x000028, "Wrong size on AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner, AbilityOwner) == 0x000000, "Member 'AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner::AbilityOwner' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner, SummonerId_0) == 0x000008, "Member 'AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner::SummonerId_0' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner, OutSummonerList) == 0x000010, "Member 'AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner::OutSummonerList' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner, ReturnValue) == 0x000020, "Member 'AIAbilityCondition_SummonerCheck_GetSummonerListOfOwner::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityCondition_SummonerCheck.ReceiveCheckIsValidSummoner
// 0x0048 (0x0048 - 0x0000)
struct AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner final
{
public:
	struct FRequiredAIDataForAutoAbility          AIAutoAbilityContext;                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           SummonerActor;                                     // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner) == 0x000008, "Wrong alignment on AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner");
static_assert(sizeof(AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner) == 0x000048, "Wrong size on AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner, AIAutoAbilityContext) == 0x000000, "Member 'AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner::AIAutoAbilityContext' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner, SummonerActor) == 0x000038, "Member 'AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner::SummonerActor' has a wrong offset!");
static_assert(offsetof(AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner, ReturnValue) == 0x000040, "Member 'AIAbilityCondition_SummonerCheck_ReceiveCheckIsValidSummoner::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.ActivateAbility
// 0x00F0 (0x00F0 - 0x0000)
struct AIAbilityExecutorManagerComponent_ActivateAbility final
{
public:
	struct FAIAbilityUsage                        InAbilityUsage;                                    // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsageID;                                           // 0x00E8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00EC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_ActivateAbility) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_ActivateAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_ActivateAbility) == 0x0000F0, "Wrong size on AIAbilityExecutorManagerComponent_ActivateAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_ActivateAbility, InAbilityUsage) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_ActivateAbility::InAbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_ActivateAbility, UsageID) == 0x0000E8, "Member 'AIAbilityExecutorManagerComponent_ActivateAbility::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_ActivateAbility, ReturnValue) == 0x0000EC, "Member 'AIAbilityExecutorManagerComponent_ActivateAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.AddResource
// 0x000C (0x000C - 0x0000)
struct AIAbilityExecutorManagerComponent_AddResource final
{
public:
	int32                                         ResourceList;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsageID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_AddResource) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_AddResource");
static_assert(sizeof(AIAbilityExecutorManagerComponent_AddResource) == 0x00000C, "Wrong size on AIAbilityExecutorManagerComponent_AddResource");
static_assert(offsetof(AIAbilityExecutorManagerComponent_AddResource, ResourceList) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_AddResource::ResourceList' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_AddResource, UsageID) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_AddResource::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_AddResource, Priority) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_AddResource::Priority' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.CancelAbility
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_CancelAbility final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_CancelAbility) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_CancelAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_CancelAbility) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_CancelAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CancelAbility, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_CancelAbility::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CancelAbility, ReturnValue) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_CancelAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.CheckAbilityIsActivated
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_CheckAbilityIsActivated final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_CheckAbilityIsActivated) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_CheckAbilityIsActivated");
static_assert(sizeof(AIAbilityExecutorManagerComponent_CheckAbilityIsActivated) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_CheckAbilityIsActivated");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckAbilityIsActivated, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_CheckAbilityIsActivated::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckAbilityIsActivated, ReturnValue) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_CheckAbilityIsActivated::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.CheckResource
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_CheckResource final
{
public:
	int32                                         ResourceList;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsageID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_CheckResource) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_CheckResource");
static_assert(sizeof(AIAbilityExecutorManagerComponent_CheckResource) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_CheckResource");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckResource, ResourceList) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_CheckResource::ResourceList' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckResource, UsageID) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_CheckResource::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckResource, Priority) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_CheckResource::Priority' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_CheckResource, ReturnValue) == 0x00000C, "Member 'AIAbilityExecutorManagerComponent_CheckResource::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.DeleteResource
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_DeleteResource final
{
public:
	int32                                         ResourceList;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsageID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_DeleteResource) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_DeleteResource");
static_assert(sizeof(AIAbilityExecutorManagerComponent_DeleteResource) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_DeleteResource");
static_assert(offsetof(AIAbilityExecutorManagerComponent_DeleteResource, ResourceList) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_DeleteResource::ResourceList' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_DeleteResource, UsageID) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_DeleteResource::UsageID' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.GetAbilityExecutor
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_GetAbilityExecutor final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAbilityExecutor*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_GetAbilityExecutor) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_GetAbilityExecutor");
static_assert(sizeof(AIAbilityExecutorManagerComponent_GetAbilityExecutor) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_GetAbilityExecutor");
static_assert(offsetof(AIAbilityExecutorManagerComponent_GetAbilityExecutor, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_GetAbilityExecutor::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_GetAbilityExecutor, ReturnValue) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_GetAbilityExecutor::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.OnAbilityActivate
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_OnAbilityActivate final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAbilityExecutor*                     Executor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_OnAbilityActivate) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_OnAbilityActivate");
static_assert(sizeof(AIAbilityExecutorManagerComponent_OnAbilityActivate) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_OnAbilityActivate");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityActivate, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_OnAbilityActivate::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityActivate, Executor) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_OnAbilityActivate::Executor' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.OnAbilityPause
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_OnAbilityPause final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAbilityExecutor*                     Executor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_OnAbilityPause) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_OnAbilityPause");
static_assert(sizeof(AIAbilityExecutorManagerComponent_OnAbilityPause) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_OnAbilityPause");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityPause, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_OnAbilityPause::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityPause, Executor) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_OnAbilityPause::Executor' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.OnAbilityResume
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_OnAbilityResume final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAbilityExecutor*                     Executor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_OnAbilityResume) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_OnAbilityResume");
static_assert(sizeof(AIAbilityExecutorManagerComponent_OnAbilityResume) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_OnAbilityResume");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityResume, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_OnAbilityResume::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityResume, Executor) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_OnAbilityResume::Executor' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.OnAbilityStop
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityExecutorManagerComponent_OnAbilityStop final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIAbilityExecutor*                     Executor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_OnAbilityStop) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_OnAbilityStop");
static_assert(sizeof(AIAbilityExecutorManagerComponent_OnAbilityStop) == 0x000010, "Wrong size on AIAbilityExecutorManagerComponent_OnAbilityStop");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityStop, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_OnAbilityStop::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_OnAbilityStop, Executor) == 0x000008, "Member 'AIAbilityExecutorManagerComponent_OnAbilityStop::Executor' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.PauseAbility
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_PauseAbility final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_PauseAbility) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_PauseAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_PauseAbility) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_PauseAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_PauseAbility, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_PauseAbility::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_PauseAbility, ReturnValue) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_PauseAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.RemoveAllAbility
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutorManagerComponent_RemoveAllAbility final
{
public:
	bool                                          bForceStop;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_RemoveAllAbility) == 0x000001, "Wrong alignment on AIAbilityExecutorManagerComponent_RemoveAllAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_RemoveAllAbility) == 0x000001, "Wrong size on AIAbilityExecutorManagerComponent_RemoveAllAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_RemoveAllAbility, bForceStop) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_RemoveAllAbility::bForceStop' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.ResumeAbility
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_ResumeAbility final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_ResumeAbility) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_ResumeAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_ResumeAbility) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_ResumeAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_ResumeAbility, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_ResumeAbility::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_ResumeAbility, ReturnValue) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_ResumeAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.StopAbility
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_StopAbility final
{
public:
	int32                                         UsageID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExecutorManagerComponent_StopAbility) == 0x000004, "Wrong alignment on AIAbilityExecutorManagerComponent_StopAbility");
static_assert(sizeof(AIAbilityExecutorManagerComponent_StopAbility) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_StopAbility");
static_assert(offsetof(AIAbilityExecutorManagerComponent_StopAbility, UsageID) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_StopAbility::UsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutorManagerComponent_StopAbility, ReturnValue) == 0x000004, "Member 'AIAbilityExecutorManagerComponent_StopAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutorManagerComponent.UpdateAbilityState
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityExecutorManagerComponent_UpdateAbilityState final
{
public:
	class UAIAbilityExecutor*                     Executor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutorManagerComponent_UpdateAbilityState) == 0x000008, "Wrong alignment on AIAbilityExecutorManagerComponent_UpdateAbilityState");
static_assert(sizeof(AIAbilityExecutorManagerComponent_UpdateAbilityState) == 0x000008, "Wrong size on AIAbilityExecutorManagerComponent_UpdateAbilityState");
static_assert(offsetof(AIAbilityExecutorManagerComponent_UpdateAbilityState, Executor) == 0x000000, "Member 'AIAbilityExecutorManagerComponent_UpdateAbilityState::Executor' has a wrong offset!");

// Function MarvelAI.AIAbilityExitStageLogic.GetAbilityExitStageLogic
// 0x0018 (0x0018 - 0x0000)
struct AIAbilityExitStageLogic_GetAbilityExitStageLogic final
{
public:
	class AMarvelAIController*                    MarvelAIOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIAbilityExitStageLogic>   ExitStageLogicClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityExitStageLogic*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExitStageLogic_GetAbilityExitStageLogic) == 0x000008, "Wrong alignment on AIAbilityExitStageLogic_GetAbilityExitStageLogic");
static_assert(sizeof(AIAbilityExitStageLogic_GetAbilityExitStageLogic) == 0x000018, "Wrong size on AIAbilityExitStageLogic_GetAbilityExitStageLogic");
static_assert(offsetof(AIAbilityExitStageLogic_GetAbilityExitStageLogic, MarvelAIOwner) == 0x000000, "Member 'AIAbilityExitStageLogic_GetAbilityExitStageLogic::MarvelAIOwner' has a wrong offset!");
static_assert(offsetof(AIAbilityExitStageLogic_GetAbilityExitStageLogic, ExitStageLogicClass) == 0x000008, "Member 'AIAbilityExitStageLogic_GetAbilityExitStageLogic::ExitStageLogicClass' has a wrong offset!");
static_assert(offsetof(AIAbilityExitStageLogic_GetAbilityExitStageLogic, ReturnValue) == 0x000010, "Member 'AIAbilityExitStageLogic_GetAbilityExitStageLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExitStageLogic.CheckLogic
// 0x00F8 (0x00F8 - 0x0000)
struct AIAbilityExitStageLogic_CheckLogic final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityExitStageLogic_CheckLogic) == 0x000008, "Wrong alignment on AIAbilityExitStageLogic_CheckLogic");
static_assert(sizeof(AIAbilityExitStageLogic_CheckLogic) == 0x0000F8, "Wrong size on AIAbilityExitStageLogic_CheckLogic");
static_assert(offsetof(AIAbilityExitStageLogic_CheckLogic, AbilityUsage) == 0x000000, "Member 'AIAbilityExitStageLogic_CheckLogic::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityExitStageLogic_CheckLogic, OwnerController) == 0x0000E8, "Member 'AIAbilityExitStageLogic_CheckLogic::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityExitStageLogic_CheckLogic, ReturnValue) == 0x0000F0, "Member 'AIAbilityExitStageLogic_CheckLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateMatchState_New.OnMatchStateChange
// 0x0001 (0x0001 - 0x0000)
struct BTS_UpdateMatchState_New_OnMatchStateChange final
{
public:
	EMatchState                                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateMatchState_New_OnMatchStateChange) == 0x000001, "Wrong alignment on BTS_UpdateMatchState_New_OnMatchStateChange");
static_assert(sizeof(BTS_UpdateMatchState_New_OnMatchStateChange) == 0x000001, "Wrong size on BTS_UpdateMatchState_New_OnMatchStateChange");
static_assert(offsetof(BTS_UpdateMatchState_New_OnMatchStateChange, NewState) == 0x000000, "Member 'BTS_UpdateMatchState_New_OnMatchStateChange::NewState' has a wrong offset!");

// Function MarvelAI.AIAbilityFlowCheckLogicBase.GetAbilityFlowCheckLogic
// 0x0018 (0x0018 - 0x0000)
struct AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic final
{
public:
	class AMarvelAIController*                    MarvelAIOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIAbilityFlowCheckLogicBase> CheckLogicClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityFlowCheckLogicBase*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic) == 0x000008, "Wrong alignment on AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic");
static_assert(sizeof(AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic) == 0x000018, "Wrong size on AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic, MarvelAIOwner) == 0x000000, "Member 'AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic::MarvelAIOwner' has a wrong offset!");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic, CheckLogicClass) == 0x000008, "Member 'AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic::CheckLogicClass' has a wrong offset!");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic, ReturnValue) == 0x000010, "Member 'AIAbilityFlowCheckLogicBase_GetAbilityFlowCheckLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityFlowCheckLogicBase.CheckLogic
// 0x00F8 (0x00F8 - 0x0000)
struct AIAbilityFlowCheckLogicBase_CheckLogic final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityFlowCheckLogicBase_CheckLogic) == 0x000008, "Wrong alignment on AIAbilityFlowCheckLogicBase_CheckLogic");
static_assert(sizeof(AIAbilityFlowCheckLogicBase_CheckLogic) == 0x0000F8, "Wrong size on AIAbilityFlowCheckLogicBase_CheckLogic");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_CheckLogic, AbilityUsage) == 0x000000, "Member 'AIAbilityFlowCheckLogicBase_CheckLogic::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_CheckLogic, OwnerController) == 0x0000E8, "Member 'AIAbilityFlowCheckLogicBase_CheckLogic::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityFlowCheckLogicBase_CheckLogic, ReturnValue) == 0x0000F0, "Member 'AIAbilityFlowCheckLogicBase_CheckLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIMoveControlLogic.GetMoveControlLogic
// 0x0018 (0x0018 - 0x0000)
struct AIMoveControlLogic_GetMoveControlLogic final
{
public:
	class AMarvelAIController*                    MarvelAIOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIMoveControlLogic>        MoveLogicClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIMoveControlLogic*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveControlLogic_GetMoveControlLogic) == 0x000008, "Wrong alignment on AIMoveControlLogic_GetMoveControlLogic");
static_assert(sizeof(AIMoveControlLogic_GetMoveControlLogic) == 0x000018, "Wrong size on AIMoveControlLogic_GetMoveControlLogic");
static_assert(offsetof(AIMoveControlLogic_GetMoveControlLogic, MarvelAIOwner) == 0x000000, "Member 'AIMoveControlLogic_GetMoveControlLogic::MarvelAIOwner' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_GetMoveControlLogic, MoveLogicClass) == 0x000008, "Member 'AIMoveControlLogic_GetMoveControlLogic::MoveLogicClass' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_GetMoveControlLogic, ReturnValue) == 0x000010, "Member 'AIMoveControlLogic_GetMoveControlLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIMoveControlLogic.CustomSelectMoveDir
// 0x0028 (0x0028 - 0x0000)
struct AIMoveControlLogic_CustomSelectMoveDir final
{
public:
	class AMarvelAIController*                    OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveControlLogic_CustomSelectMoveDir) == 0x000008, "Wrong alignment on AIMoveControlLogic_CustomSelectMoveDir");
static_assert(sizeof(AIMoveControlLogic_CustomSelectMoveDir) == 0x000028, "Wrong size on AIMoveControlLogic_CustomSelectMoveDir");
static_assert(offsetof(AIMoveControlLogic_CustomSelectMoveDir, OwnerController) == 0x000000, "Member 'AIMoveControlLogic_CustomSelectMoveDir::OwnerController' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_CustomSelectMoveDir, ControlledPawn) == 0x000008, "Member 'AIMoveControlLogic_CustomSelectMoveDir::ControlledPawn' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_CustomSelectMoveDir, ReturnValue) == 0x000010, "Member 'AIMoveControlLogic_CustomSelectMoveDir::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIMoveControlLogic.ShouldUseCustomSelectDir
// 0x0018 (0x0018 - 0x0000)
struct AIMoveControlLogic_ShouldUseCustomSelectDir final
{
public:
	class AMarvelAIController*                    OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveControlLogic_ShouldUseCustomSelectDir) == 0x000008, "Wrong alignment on AIMoveControlLogic_ShouldUseCustomSelectDir");
static_assert(sizeof(AIMoveControlLogic_ShouldUseCustomSelectDir) == 0x000018, "Wrong size on AIMoveControlLogic_ShouldUseCustomSelectDir");
static_assert(offsetof(AIMoveControlLogic_ShouldUseCustomSelectDir, OwnerController) == 0x000000, "Member 'AIMoveControlLogic_ShouldUseCustomSelectDir::OwnerController' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_ShouldUseCustomSelectDir, ControlledPawn) == 0x000008, "Member 'AIMoveControlLogic_ShouldUseCustomSelectDir::ControlledPawn' has a wrong offset!");
static_assert(offsetof(AIMoveControlLogic_ShouldUseCustomSelectDir, ReturnValue) == 0x000010, "Member 'AIMoveControlLogic_ShouldUseCustomSelectDir::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateFireLine.IsActorInFireLineState
// 0x0010 (0x0010 - 0x0000)
struct BTS_UpdateFireLine_IsActorInFireLineState final
{
public:
	const class AMarvelBaseCharacter*             Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTS_UpdateFireLine_IsActorInFireLineState) == 0x000008, "Wrong alignment on BTS_UpdateFireLine_IsActorInFireLineState");
static_assert(sizeof(BTS_UpdateFireLine_IsActorInFireLineState) == 0x000010, "Wrong size on BTS_UpdateFireLine_IsActorInFireLineState");
static_assert(offsetof(BTS_UpdateFireLine_IsActorInFireLineState, Character) == 0x000000, "Member 'BTS_UpdateFireLine_IsActorInFireLineState::Character' has a wrong offset!");
static_assert(offsetof(BTS_UpdateFireLine_IsActorInFireLineState, ReturnValue) == 0x000008, "Member 'BTS_UpdateFireLine_IsActorInFireLineState::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationLogic.GetAbilityActivationLogic
// 0x0018 (0x0018 - 0x0000)
struct AIAbilityActivationLogic_GetAbilityActivationLogic final
{
public:
	class AMarvelAIController*                    MarvelAIOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIAbilityActivationLogic>  ActivationLogicClass;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityActivationLogic*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityActivationLogic_GetAbilityActivationLogic) == 0x000008, "Wrong alignment on AIAbilityActivationLogic_GetAbilityActivationLogic");
static_assert(sizeof(AIAbilityActivationLogic_GetAbilityActivationLogic) == 0x000018, "Wrong size on AIAbilityActivationLogic_GetAbilityActivationLogic");
static_assert(offsetof(AIAbilityActivationLogic_GetAbilityActivationLogic, MarvelAIOwner) == 0x000000, "Member 'AIAbilityActivationLogic_GetAbilityActivationLogic::MarvelAIOwner' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_GetAbilityActivationLogic, ActivationLogicClass) == 0x000008, "Member 'AIAbilityActivationLogic_GetAbilityActivationLogic::ActivationLogicClass' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_GetAbilityActivationLogic, ReturnValue) == 0x000010, "Member 'AIAbilityActivationLogic_GetAbilityActivationLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationLogic.BeginLogic
// 0x0100 (0x0100 - 0x0000)
struct AIAbilityActivationLogic_BeginLogic final
{
public:
	class UAIAbilityExecutor*                     OwnerExecutor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityActivationLogic_BeginLogic) == 0x000008, "Wrong alignment on AIAbilityActivationLogic_BeginLogic");
static_assert(sizeof(AIAbilityActivationLogic_BeginLogic) == 0x000100, "Wrong size on AIAbilityActivationLogic_BeginLogic");
static_assert(offsetof(AIAbilityActivationLogic_BeginLogic, OwnerExecutor) == 0x000000, "Member 'AIAbilityActivationLogic_BeginLogic::OwnerExecutor' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_BeginLogic, AbilityUsage) == 0x000008, "Member 'AIAbilityActivationLogic_BeginLogic::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_BeginLogic, OwnerController) == 0x0000F0, "Member 'AIAbilityActivationLogic_BeginLogic::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_BeginLogic, ReturnValue) == 0x0000F8, "Member 'AIAbilityActivationLogic_BeginLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationLogic.EndLogic
// 0x0100 (0x0100 - 0x0000)
struct AIAbilityActivationLogic_EndLogic final
{
public:
	class UAIAbilityExecutor*                     OwnerExecutor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityActivationLogic_EndLogic) == 0x000008, "Wrong alignment on AIAbilityActivationLogic_EndLogic");
static_assert(sizeof(AIAbilityActivationLogic_EndLogic) == 0x000100, "Wrong size on AIAbilityActivationLogic_EndLogic");
static_assert(offsetof(AIAbilityActivationLogic_EndLogic, OwnerExecutor) == 0x000000, "Member 'AIAbilityActivationLogic_EndLogic::OwnerExecutor' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_EndLogic, AbilityUsage) == 0x000008, "Member 'AIAbilityActivationLogic_EndLogic::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_EndLogic, OwnerController) == 0x0000F0, "Member 'AIAbilityActivationLogic_EndLogic::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_EndLogic, ReturnValue) == 0x0000F8, "Member 'AIAbilityActivationLogic_EndLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationLogic.TickLogic
// 0x0100 (0x0100 - 0x0000)
struct AIAbilityActivationLogic_TickLogic final
{
public:
	class UAIAbilityExecutor*                     OwnerExecutor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00FC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityActivationLogic_TickLogic) == 0x000008, "Wrong alignment on AIAbilityActivationLogic_TickLogic");
static_assert(sizeof(AIAbilityActivationLogic_TickLogic) == 0x000100, "Wrong size on AIAbilityActivationLogic_TickLogic");
static_assert(offsetof(AIAbilityActivationLogic_TickLogic, OwnerExecutor) == 0x000000, "Member 'AIAbilityActivationLogic_TickLogic::OwnerExecutor' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_TickLogic, AbilityUsage) == 0x000008, "Member 'AIAbilityActivationLogic_TickLogic::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_TickLogic, OwnerController) == 0x0000F0, "Member 'AIAbilityActivationLogic_TickLogic::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_TickLogic, DeltaTime) == 0x0000F8, "Member 'AIAbilityActivationLogic_TickLogic::DeltaTime' has a wrong offset!");
static_assert(offsetof(AIAbilityActivationLogic_TickLogic, ReturnValue) == 0x0000FC, "Member 'AIAbilityActivationLogic_TickLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateSight.OnResetSightConfig
// 0x0004 (0x0004 - 0x0000)
struct BTS_UpdateSight_OnResetSightConfig final
{
public:
	float                                         NewRadius;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateSight_OnResetSightConfig) == 0x000004, "Wrong alignment on BTS_UpdateSight_OnResetSightConfig");
static_assert(sizeof(BTS_UpdateSight_OnResetSightConfig) == 0x000004, "Wrong size on BTS_UpdateSight_OnResetSightConfig");
static_assert(offsetof(BTS_UpdateSight_OnResetSightConfig, NewRadius) == 0x000000, "Member 'BTS_UpdateSight_OnResetSightConfig::NewRadius' has a wrong offset!");

// Function MarvelAI.AIAbilityObserver.OnActiveAbility
// 0x0028 (0x0028 - 0x0000)
struct AIAbilityObserver_OnActiveAbility final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityObserver_OnActiveAbility) == 0x000008, "Wrong alignment on AIAbilityObserver_OnActiveAbility");
static_assert(sizeof(AIAbilityObserver_OnActiveAbility) == 0x000028, "Wrong size on AIAbilityObserver_OnActiveAbility");
static_assert(offsetof(AIAbilityObserver_OnActiveAbility, Source) == 0x000000, "Member 'AIAbilityObserver_OnActiveAbility::Source' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnActiveAbility, AbilityID) == 0x000008, "Member 'AIAbilityObserver_OnActiveAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnActiveAbility, SessionID) == 0x000010, "Member 'AIAbilityObserver_OnActiveAbility::SessionID' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnActiveAbility, SourceAbility) == 0x000020, "Member 'AIAbilityObserver_OnActiveAbility::SourceAbility' has a wrong offset!");

// Function MarvelAI.AIAbilityObserver.OnEndAbility
// 0x0028 (0x0028 - 0x0000)
struct AIAbilityObserver_OnEndAbility final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityObserver_OnEndAbility) == 0x000008, "Wrong alignment on AIAbilityObserver_OnEndAbility");
static_assert(sizeof(AIAbilityObserver_OnEndAbility) == 0x000028, "Wrong size on AIAbilityObserver_OnEndAbility");
static_assert(offsetof(AIAbilityObserver_OnEndAbility, Source) == 0x000000, "Member 'AIAbilityObserver_OnEndAbility::Source' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnEndAbility, AbilityID) == 0x000008, "Member 'AIAbilityObserver_OnEndAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnEndAbility, SessionID) == 0x000010, "Member 'AIAbilityObserver_OnEndAbility::SessionID' has a wrong offset!");
static_assert(offsetof(AIAbilityObserver_OnEndAbility, SourceAbility) == 0x000020, "Member 'AIAbilityObserver_OnEndAbility::SourceAbility' has a wrong offset!");

// Function MarvelAI.AIAbilitySelectCheckBase.ReceivePostCheck
// 0x0390 (0x0390 - 0x0000)
struct AIAbilitySelectCheckBase_ReceivePostCheck final
{
public:
	struct FRequiredAIDataForAutoAbility          RequiredData;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelAIAutoAbilityTable              AbilityConfig;                                     // 0x0038(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x02A0(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0388(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilitySelectCheckBase_ReceivePostCheck) == 0x000008, "Wrong alignment on AIAbilitySelectCheckBase_ReceivePostCheck");
static_assert(sizeof(AIAbilitySelectCheckBase_ReceivePostCheck) == 0x000390, "Wrong size on AIAbilitySelectCheckBase_ReceivePostCheck");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePostCheck, RequiredData) == 0x000000, "Member 'AIAbilitySelectCheckBase_ReceivePostCheck::RequiredData' has a wrong offset!");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePostCheck, AbilityConfig) == 0x000038, "Member 'AIAbilitySelectCheckBase_ReceivePostCheck::AbilityConfig' has a wrong offset!");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePostCheck, AbilityUsage) == 0x0002A0, "Member 'AIAbilitySelectCheckBase_ReceivePostCheck::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePostCheck, ReturnValue) == 0x000388, "Member 'AIAbilitySelectCheckBase_ReceivePostCheck::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilitySelectCheckBase.ReceivePreCheck
// 0x02A8 (0x02A8 - 0x0000)
struct AIAbilitySelectCheckBase_ReceivePreCheck final
{
public:
	struct FRequiredAIDataForAutoAbility          RequiredData;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelAIAutoAbilityTable              AbilityConfig;                                     // 0x0038(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilitySelectCheckBase_ReceivePreCheck) == 0x000008, "Wrong alignment on AIAbilitySelectCheckBase_ReceivePreCheck");
static_assert(sizeof(AIAbilitySelectCheckBase_ReceivePreCheck) == 0x0002A8, "Wrong size on AIAbilitySelectCheckBase_ReceivePreCheck");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePreCheck, RequiredData) == 0x000000, "Member 'AIAbilitySelectCheckBase_ReceivePreCheck::RequiredData' has a wrong offset!");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePreCheck, AbilityConfig) == 0x000038, "Member 'AIAbilitySelectCheckBase_ReceivePreCheck::AbilityConfig' has a wrong offset!");
static_assert(offsetof(AIAbilitySelectCheckBase_ReceivePreCheck, ReturnValue) == 0x0002A0, "Member 'AIAbilitySelectCheckBase_ReceivePreCheck::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.ActivateTask
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_ActivateTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_ActivateTask) == 0x000001, "Wrong alignment on AIAbilityExecutor_ActivateTask");
static_assert(sizeof(AIAbilityExecutor_ActivateTask) == 0x000001, "Wrong size on AIAbilityExecutor_ActivateTask");
static_assert(offsetof(AIAbilityExecutor_ActivateTask, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_ActivateTask::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.CancelTask
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_CancelTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_CancelTask) == 0x000001, "Wrong alignment on AIAbilityExecutor_CancelTask");
static_assert(sizeof(AIAbilityExecutor_CancelTask) == 0x000001, "Wrong size on AIAbilityExecutor_CancelTask");
static_assert(offsetof(AIAbilityExecutor_CancelTask, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_CancelTask::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.InitAIAbilityExecutor
// 0x00F0 (0x00F0 - 0x0000)
struct AIAbilityExecutor_InitAIAbilityExecutor final
{
public:
	class AMarvelAIController*                    InAIController;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        InAbilityUsage;                                    // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_InitAIAbilityExecutor) == 0x000008, "Wrong alignment on AIAbilityExecutor_InitAIAbilityExecutor");
static_assert(sizeof(AIAbilityExecutor_InitAIAbilityExecutor) == 0x0000F0, "Wrong size on AIAbilityExecutor_InitAIAbilityExecutor");
static_assert(offsetof(AIAbilityExecutor_InitAIAbilityExecutor, InAIController) == 0x000000, "Member 'AIAbilityExecutor_InitAIAbilityExecutor::InAIController' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutor_InitAIAbilityExecutor, InAbilityUsage) == 0x000008, "Member 'AIAbilityExecutor_InitAIAbilityExecutor::InAbilityUsage' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_IsAlive) == 0x000001, "Wrong alignment on AIAbilityExecutor_IsAlive");
static_assert(sizeof(AIAbilityExecutor_IsAlive) == 0x000001, "Wrong size on AIAbilityExecutor_IsAlive");
static_assert(offsetof(AIAbilityExecutor_IsAlive, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_IsAlive::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.PauseTask
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_PauseTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_PauseTask) == 0x000001, "Wrong alignment on AIAbilityExecutor_PauseTask");
static_assert(sizeof(AIAbilityExecutor_PauseTask) == 0x000001, "Wrong size on AIAbilityExecutor_PauseTask");
static_assert(offsetof(AIAbilityExecutor_PauseTask, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_PauseTask::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.ResumeTask
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_ResumeTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_ResumeTask) == 0x000001, "Wrong alignment on AIAbilityExecutor_ResumeTask");
static_assert(sizeof(AIAbilityExecutor_ResumeTask) == 0x000001, "Wrong size on AIAbilityExecutor_ResumeTask");
static_assert(offsetof(AIAbilityExecutor_ResumeTask, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_ResumeTask::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.ShouldExitLoop
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_ShouldExitLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_ShouldExitLoop) == 0x000001, "Wrong alignment on AIAbilityExecutor_ShouldExitLoop");
static_assert(sizeof(AIAbilityExecutor_ShouldExitLoop) == 0x000001, "Wrong size on AIAbilityExecutor_ShouldExitLoop");
static_assert(offsetof(AIAbilityExecutor_ShouldExitLoop, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_ShouldExitLoop::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.ShouldSwitchToNextButtonStage
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_ShouldSwitchToNextButtonStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_ShouldSwitchToNextButtonStage) == 0x000001, "Wrong alignment on AIAbilityExecutor_ShouldSwitchToNextButtonStage");
static_assert(sizeof(AIAbilityExecutor_ShouldSwitchToNextButtonStage) == 0x000001, "Wrong size on AIAbilityExecutor_ShouldSwitchToNextButtonStage");
static_assert(offsetof(AIAbilityExecutor_ShouldSwitchToNextButtonStage, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_ShouldSwitchToNextButtonStage::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.ShouldSwitchToNextStage
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_ShouldSwitchToNextStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_ShouldSwitchToNextStage) == 0x000001, "Wrong alignment on AIAbilityExecutor_ShouldSwitchToNextStage");
static_assert(sizeof(AIAbilityExecutor_ShouldSwitchToNextStage) == 0x000001, "Wrong size on AIAbilityExecutor_ShouldSwitchToNextStage");
static_assert(offsetof(AIAbilityExecutor_ShouldSwitchToNextStage, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_ShouldSwitchToNextStage::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.StopTask
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_StopTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_StopTask) == 0x000001, "Wrong alignment on AIAbilityExecutor_StopTask");
static_assert(sizeof(AIAbilityExecutor_StopTask) == 0x000001, "Wrong size on AIAbilityExecutor_StopTask");
static_assert(offsetof(AIAbilityExecutor_StopTask, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_StopTask::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.SwitchToNextButton
// 0x0002 (0x0002 - 0x0000)
struct AIAbilityExecutor_SwitchToNextButton final
{
public:
	bool                                          bForceSwitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_SwitchToNextButton) == 0x000001, "Wrong alignment on AIAbilityExecutor_SwitchToNextButton");
static_assert(sizeof(AIAbilityExecutor_SwitchToNextButton) == 0x000002, "Wrong size on AIAbilityExecutor_SwitchToNextButton");
static_assert(offsetof(AIAbilityExecutor_SwitchToNextButton, bForceSwitch) == 0x000000, "Member 'AIAbilityExecutor_SwitchToNextButton::bForceSwitch' has a wrong offset!");
static_assert(offsetof(AIAbilityExecutor_SwitchToNextButton, ReturnValue) == 0x000001, "Member 'AIAbilityExecutor_SwitchToNextButton::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.SwitchToNextButtonStage
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_SwitchToNextButtonStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_SwitchToNextButtonStage) == 0x000001, "Wrong alignment on AIAbilityExecutor_SwitchToNextButtonStage");
static_assert(sizeof(AIAbilityExecutor_SwitchToNextButtonStage) == 0x000001, "Wrong size on AIAbilityExecutor_SwitchToNextButtonStage");
static_assert(offsetof(AIAbilityExecutor_SwitchToNextButtonStage, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_SwitchToNextButtonStage::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.SwitchToNextStage
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityExecutor_SwitchToNextStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_SwitchToNextStage) == 0x000001, "Wrong alignment on AIAbilityExecutor_SwitchToNextStage");
static_assert(sizeof(AIAbilityExecutor_SwitchToNextStage) == 0x000001, "Wrong size on AIAbilityExecutor_SwitchToNextStage");
static_assert(offsetof(AIAbilityExecutor_SwitchToNextStage, ReturnValue) == 0x000000, "Member 'AIAbilityExecutor_SwitchToNextStage::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityExecutor.TickTask
// 0x0004 (0x0004 - 0x0000)
struct AIAbilityExecutor_TickTask final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityExecutor_TickTask) == 0x000004, "Wrong alignment on AIAbilityExecutor_TickTask");
static_assert(sizeof(AIAbilityExecutor_TickTask) == 0x000004, "Wrong size on AIAbilityExecutor_TickTask");
static_assert(offsetof(AIAbilityExecutor_TickTask, DeltaTime) == 0x000000, "Member 'AIAbilityExecutor_TickTask::DeltaTime' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageObject.GetAbilityID
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityUsageObject_GetAbilityID final
{
public:
	const class AMarvelAIController*              AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityUsageObject_GetAbilityID) == 0x000008, "Wrong alignment on AIAbilityUsageObject_GetAbilityID");
static_assert(sizeof(AIAbilityUsageObject_GetAbilityID) == 0x000010, "Wrong size on AIAbilityUsageObject_GetAbilityID");
static_assert(offsetof(AIAbilityUsageObject_GetAbilityID, AIOwner) == 0x000000, "Member 'AIAbilityUsageObject_GetAbilityID::AIOwner' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageObject_GetAbilityID, ReturnValue) == 0x000008, "Member 'AIAbilityUsageObject_GetAbilityID::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageObject.GetUsageConfig
// 0x0268 (0x0268 - 0x0000)
struct AIAbilityUsageObject_GetUsageConfig final
{
public:
	struct FMarvelAIAutoAbilityTable              ReturnValue;                                       // 0x0000(0x0268)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageObject_GetUsageConfig) == 0x000008, "Wrong alignment on AIAbilityUsageObject_GetUsageConfig");
static_assert(sizeof(AIAbilityUsageObject_GetUsageConfig) == 0x000268, "Wrong size on AIAbilityUsageObject_GetUsageConfig");
static_assert(offsetof(AIAbilityUsageObject_GetUsageConfig, ReturnValue) == 0x000000, "Member 'AIAbilityUsageObject_GetUsageConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageObject.GetUsageID
// 0x0004 (0x0004 - 0x0000)
struct AIAbilityUsageObject_GetUsageID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageObject_GetUsageID) == 0x000004, "Wrong alignment on AIAbilityUsageObject_GetUsageID");
static_assert(sizeof(AIAbilityUsageObject_GetUsageID) == 0x000004, "Wrong size on AIAbilityUsageObject_GetUsageID");
static_assert(offsetof(AIAbilityUsageObject_GetUsageID, ReturnValue) == 0x000000, "Member 'AIAbilityUsageObject_GetUsageID::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageObject.IsValid
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityUsageObject_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageObject_IsValid) == 0x000001, "Wrong alignment on AIAbilityUsageObject_IsValid");
static_assert(sizeof(AIAbilityUsageObject_IsValid) == 0x000001, "Wrong size on AIAbilityUsageObject_IsValid");
static_assert(offsetof(AIAbilityUsageObject_IsValid, ReturnValue) == 0x000000, "Member 'AIAbilityUsageObject_IsValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIActionArea.WhenAIEnter
// 0x0008 (0x0008 - 0x0000)
struct AIActionArea_WhenAIEnter final
{
public:
	class ACharacter*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIActionArea_WhenAIEnter) == 0x000008, "Wrong alignment on AIActionArea_WhenAIEnter");
static_assert(sizeof(AIActionArea_WhenAIEnter) == 0x000008, "Wrong size on AIActionArea_WhenAIEnter");
static_assert(offsetof(AIActionArea_WhenAIEnter, Player) == 0x000000, "Member 'AIActionArea_WhenAIEnter::Player' has a wrong offset!");

// Function MarvelAI.AIActionArea.WhenAIExit
// 0x0008 (0x0008 - 0x0000)
struct AIActionArea_WhenAIExit final
{
public:
	class ACharacter*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIActionArea_WhenAIExit) == 0x000008, "Wrong alignment on AIActionArea_WhenAIExit");
static_assert(sizeof(AIActionArea_WhenAIExit) == 0x000008, "Wrong size on AIActionArea_WhenAIExit");
static_assert(offsetof(AIActionArea_WhenAIExit, Player) == 0x000000, "Member 'AIActionArea_WhenAIExit::Player' has a wrong offset!");

// Function MarvelAI.AIAutoAbilityComponent.AddUsageCondition
// 0x0008 (0x0008 - 0x0000)
struct AIAutoAbilityComponent_AddUsageCondition final
{
public:
	class UAIAbilityCondition*                    ConditionToAdd;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAutoAbilityComponent_AddUsageCondition) == 0x000008, "Wrong alignment on AIAutoAbilityComponent_AddUsageCondition");
static_assert(sizeof(AIAutoAbilityComponent_AddUsageCondition) == 0x000008, "Wrong size on AIAutoAbilityComponent_AddUsageCondition");
static_assert(offsetof(AIAutoAbilityComponent_AddUsageCondition, ConditionToAdd) == 0x000000, "Member 'AIAutoAbilityComponent_AddUsageCondition::ConditionToAdd' has a wrong offset!");

// Function MarvelAI.AIAutoAbilityComponent.HandleAbilityActivated
// 0x0004 (0x0004 - 0x0000)
struct AIAutoAbilityComponent_HandleAbilityActivated final
{
public:
	int32                                         AbilityUsageID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAutoAbilityComponent_HandleAbilityActivated) == 0x000004, "Wrong alignment on AIAutoAbilityComponent_HandleAbilityActivated");
static_assert(sizeof(AIAutoAbilityComponent_HandleAbilityActivated) == 0x000004, "Wrong size on AIAutoAbilityComponent_HandleAbilityActivated");
static_assert(offsetof(AIAutoAbilityComponent_HandleAbilityActivated, AbilityUsageID) == 0x000000, "Member 'AIAutoAbilityComponent_HandleAbilityActivated::AbilityUsageID' has a wrong offset!");

// Function MarvelAI.AIAutoAbilityComponent.RemoveUsageCondition
// 0x0008 (0x0008 - 0x0000)
struct AIAutoAbilityComponent_RemoveUsageCondition final
{
public:
	class UAIAbilityCondition*                    ConditionToRemove;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAutoAbilityComponent_RemoveUsageCondition) == 0x000008, "Wrong alignment on AIAutoAbilityComponent_RemoveUsageCondition");
static_assert(sizeof(AIAutoAbilityComponent_RemoveUsageCondition) == 0x000008, "Wrong size on AIAutoAbilityComponent_RemoveUsageCondition");
static_assert(offsetof(AIAutoAbilityComponent_RemoveUsageCondition, ConditionToRemove) == 0x000000, "Member 'AIAutoAbilityComponent_RemoveUsageCondition::ConditionToRemove' has a wrong offset!");

// Function MarvelAI.AIBattleAreaBase.BindStandPoint
// 0x0008 (0x0008 - 0x0000)
struct AIBattleAreaBase_BindStandPoint final
{
public:
	class AStandPointBase*                        StandPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBattleAreaBase_BindStandPoint) == 0x000008, "Wrong alignment on AIBattleAreaBase_BindStandPoint");
static_assert(sizeof(AIBattleAreaBase_BindStandPoint) == 0x000008, "Wrong size on AIBattleAreaBase_BindStandPoint");
static_assert(offsetof(AIBattleAreaBase_BindStandPoint, StandPoint) == 0x000000, "Member 'AIBattleAreaBase_BindStandPoint::StandPoint' has a wrong offset!");

// Function MarvelAI.AIBattleAreaBase.GetRandomStandPoint
// 0x0010 (0x0010 - 0x0000)
struct AIBattleAreaBase_GetRandomStandPoint final
{
public:
	class AMarvelAIController*                    Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStandPointBase*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBattleAreaBase_GetRandomStandPoint) == 0x000008, "Wrong alignment on AIBattleAreaBase_GetRandomStandPoint");
static_assert(sizeof(AIBattleAreaBase_GetRandomStandPoint) == 0x000010, "Wrong size on AIBattleAreaBase_GetRandomStandPoint");
static_assert(offsetof(AIBattleAreaBase_GetRandomStandPoint, Controller) == 0x000000, "Member 'AIBattleAreaBase_GetRandomStandPoint::Controller' has a wrong offset!");
static_assert(offsetof(AIBattleAreaBase_GetRandomStandPoint, ReturnValue) == 0x000008, "Member 'AIBattleAreaBase_GetRandomStandPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIBattleAreaBase.GetRandomStandPointInList
// 0x0018 (0x0018 - 0x0000)
struct AIBattleAreaBase_GetRandomStandPointInList final
{
public:
	TArray<class AStandPointBase*>                InStandPointList;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AStandPointBase*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBattleAreaBase_GetRandomStandPointInList) == 0x000008, "Wrong alignment on AIBattleAreaBase_GetRandomStandPointInList");
static_assert(sizeof(AIBattleAreaBase_GetRandomStandPointInList) == 0x000018, "Wrong size on AIBattleAreaBase_GetRandomStandPointInList");
static_assert(offsetof(AIBattleAreaBase_GetRandomStandPointInList, InStandPointList) == 0x000000, "Member 'AIBattleAreaBase_GetRandomStandPointInList::InStandPointList' has a wrong offset!");
static_assert(offsetof(AIBattleAreaBase_GetRandomStandPointInList, ReturnValue) == 0x000010, "Member 'AIBattleAreaBase_GetRandomStandPointInList::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIBattleAreaBase.GetStandPoint
// 0x0010 (0x0010 - 0x0000)
struct AIBattleAreaBase_GetStandPoint final
{
public:
	class AMarvelAIController*                    Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStandPointBase*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBattleAreaBase_GetStandPoint) == 0x000008, "Wrong alignment on AIBattleAreaBase_GetStandPoint");
static_assert(sizeof(AIBattleAreaBase_GetStandPoint) == 0x000010, "Wrong size on AIBattleAreaBase_GetStandPoint");
static_assert(offsetof(AIBattleAreaBase_GetStandPoint, Controller) == 0x000000, "Member 'AIBattleAreaBase_GetStandPoint::Controller' has a wrong offset!");
static_assert(offsetof(AIBattleAreaBase_GetStandPoint, ReturnValue) == 0x000008, "Member 'AIBattleAreaBase_GetStandPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.CancelConcentrateTarget
// 0x0010 (0x0010 - 0x0000)
struct AITargetFactorLibrary_CancelConcentrateTarget final
{
public:
	class AMarvelAIController*                    MyController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITargetFactorLibrary_CancelConcentrateTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_CancelConcentrateTarget");
static_assert(sizeof(AITargetFactorLibrary_CancelConcentrateTarget) == 0x000010, "Wrong size on AITargetFactorLibrary_CancelConcentrateTarget");
static_assert(offsetof(AITargetFactorLibrary_CancelConcentrateTarget, MyController) == 0x000000, "Member 'AITargetFactorLibrary_CancelConcentrateTarget::MyController' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_CancelConcentrateTarget, Target) == 0x000008, "Member 'AITargetFactorLibrary_CancelConcentrateTarget::Target' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.GetDamageSourceFactorForTarget
// 0x0078 (0x0078 - 0x0000)
struct AITargetFactorLibrary_GetDamageSourceFactorForTarget final
{
public:
	struct FAITargetFactorConfig                  TargetFactorConfig;                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    MyController;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AITargetFactorLibrary_GetDamageSourceFactorForTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_GetDamageSourceFactorForTarget");
static_assert(sizeof(AITargetFactorLibrary_GetDamageSourceFactorForTarget) == 0x000078, "Wrong size on AITargetFactorLibrary_GetDamageSourceFactorForTarget");
static_assert(offsetof(AITargetFactorLibrary_GetDamageSourceFactorForTarget, TargetFactorConfig) == 0x000000, "Member 'AITargetFactorLibrary_GetDamageSourceFactorForTarget::TargetFactorConfig' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetDamageSourceFactorForTarget, MyController) == 0x000060, "Member 'AITargetFactorLibrary_GetDamageSourceFactorForTarget::MyController' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetDamageSourceFactorForTarget, Target) == 0x000068, "Member 'AITargetFactorLibrary_GetDamageSourceFactorForTarget::Target' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetDamageSourceFactorForTarget, ReturnValue) == 0x000070, "Member 'AITargetFactorLibrary_GetDamageSourceFactorForTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.GetLowHpFactorForTarget
// 0x0010 (0x0010 - 0x0000)
struct AITargetFactorLibrary_GetLowHpFactorForTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkLife;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITargetFactorLibrary_GetLowHpFactorForTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_GetLowHpFactorForTarget");
static_assert(sizeof(AITargetFactorLibrary_GetLowHpFactorForTarget) == 0x000010, "Wrong size on AITargetFactorLibrary_GetLowHpFactorForTarget");
static_assert(offsetof(AITargetFactorLibrary_GetLowHpFactorForTarget, Target) == 0x000000, "Member 'AITargetFactorLibrary_GetLowHpFactorForTarget::Target' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetLowHpFactorForTarget, MarkLife) == 0x000008, "Member 'AITargetFactorLibrary_GetLowHpFactorForTarget::MarkLife' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetLowHpFactorForTarget, ReturnValue) == 0x00000C, "Member 'AITargetFactorLibrary_GetLowHpFactorForTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.GetRoleFactorForTarget
// 0x0078 (0x0078 - 0x0000)
struct AITargetFactorLibrary_GetRoleFactorForTarget final
{
public:
	struct FAITargetFactorConfig                  TargetFactorConfig;                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 MyActor;                                           // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AITargetFactorLibrary_GetRoleFactorForTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_GetRoleFactorForTarget");
static_assert(sizeof(AITargetFactorLibrary_GetRoleFactorForTarget) == 0x000078, "Wrong size on AITargetFactorLibrary_GetRoleFactorForTarget");
static_assert(offsetof(AITargetFactorLibrary_GetRoleFactorForTarget, TargetFactorConfig) == 0x000000, "Member 'AITargetFactorLibrary_GetRoleFactorForTarget::TargetFactorConfig' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetRoleFactorForTarget, MyActor) == 0x000060, "Member 'AITargetFactorLibrary_GetRoleFactorForTarget::MyActor' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetRoleFactorForTarget, TargetActor) == 0x000068, "Member 'AITargetFactorLibrary_GetRoleFactorForTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetRoleFactorForTarget, ReturnValue) == 0x000070, "Member 'AITargetFactorLibrary_GetRoleFactorForTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.GetTargetChangeProbability
// 0x0058 (0x0058 - 0x0000)
struct AITargetFactorLibrary_GetTargetChangeProbability final
{
public:
	struct FTargetChangeConfig                    Config;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         TargetHpRatio;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITargetFactorLibrary_GetTargetChangeProbability) == 0x000008, "Wrong alignment on AITargetFactorLibrary_GetTargetChangeProbability");
static_assert(sizeof(AITargetFactorLibrary_GetTargetChangeProbability) == 0x000058, "Wrong size on AITargetFactorLibrary_GetTargetChangeProbability");
static_assert(offsetof(AITargetFactorLibrary_GetTargetChangeProbability, Config) == 0x000000, "Member 'AITargetFactorLibrary_GetTargetChangeProbability::Config' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetTargetChangeProbability, TargetHpRatio) == 0x000050, "Member 'AITargetFactorLibrary_GetTargetChangeProbability::TargetHpRatio' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetTargetChangeProbability, ReturnValue) == 0x000054, "Member 'AITargetFactorLibrary_GetTargetChangeProbability::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.GetVisibleFactorForTarget
// 0x0078 (0x0078 - 0x0000)
struct AITargetFactorLibrary_GetVisibleFactorForTarget final
{
public:
	struct FAITargetFactorConfig                  TargetFactorConfig;                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    MyController;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AITargetFactorLibrary_GetVisibleFactorForTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_GetVisibleFactorForTarget");
static_assert(sizeof(AITargetFactorLibrary_GetVisibleFactorForTarget) == 0x000078, "Wrong size on AITargetFactorLibrary_GetVisibleFactorForTarget");
static_assert(offsetof(AITargetFactorLibrary_GetVisibleFactorForTarget, TargetFactorConfig) == 0x000000, "Member 'AITargetFactorLibrary_GetVisibleFactorForTarget::TargetFactorConfig' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetVisibleFactorForTarget, MyController) == 0x000060, "Member 'AITargetFactorLibrary_GetVisibleFactorForTarget::MyController' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetVisibleFactorForTarget, Target) == 0x000068, "Member 'AITargetFactorLibrary_GetVisibleFactorForTarget::Target' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_GetVisibleFactorForTarget, ReturnValue) == 0x000070, "Member 'AITargetFactorLibrary_GetVisibleFactorForTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AITargetFactorLibrary.TryAddHpLowMarkToTarget
// 0x0060 (0x0060 - 0x0000)
struct AITargetFactorLibrary_TryAddHpLowMarkToTarget final
{
public:
	struct FTargetChangeConfig                    Config;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkLife;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AITargetFactorLibrary_TryAddHpLowMarkToTarget) == 0x000008, "Wrong alignment on AITargetFactorLibrary_TryAddHpLowMarkToTarget");
static_assert(sizeof(AITargetFactorLibrary_TryAddHpLowMarkToTarget) == 0x000060, "Wrong size on AITargetFactorLibrary_TryAddHpLowMarkToTarget");
static_assert(offsetof(AITargetFactorLibrary_TryAddHpLowMarkToTarget, Config) == 0x000000, "Member 'AITargetFactorLibrary_TryAddHpLowMarkToTarget::Config' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_TryAddHpLowMarkToTarget, Target) == 0x000050, "Member 'AITargetFactorLibrary_TryAddHpLowMarkToTarget::Target' has a wrong offset!");
static_assert(offsetof(AITargetFactorLibrary_TryAddHpLowMarkToTarget, MarkLife) == 0x000058, "Member 'AITargetFactorLibrary_TryAddHpLowMarkToTarget::MarkLife' has a wrong offset!");

// Function MarvelAI.AIBattleAreaFilterBase.CheckCouldPass
// 0x0010 (0x0010 - 0x0000)
struct AIBattleAreaFilterBase_CheckCouldPass final
{
public:
	class AAIBattleAreaBase*                      BattleArea;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBattleAreaFilterBase_CheckCouldPass) == 0x000008, "Wrong alignment on AIBattleAreaFilterBase_CheckCouldPass");
static_assert(sizeof(AIBattleAreaFilterBase_CheckCouldPass) == 0x000010, "Wrong size on AIBattleAreaFilterBase_CheckCouldPass");
static_assert(offsetof(AIBattleAreaFilterBase_CheckCouldPass, BattleArea) == 0x000000, "Member 'AIBattleAreaFilterBase_CheckCouldPass::BattleArea' has a wrong offset!");
static_assert(offsetof(AIBattleAreaFilterBase_CheckCouldPass, ReturnValue) == 0x000008, "Member 'AIBattleAreaFilterBase_CheckCouldPass::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIBattleAreaManager.FindBattleArea
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIBattleAreaManager_FindBattleArea final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIBattleAreaBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIBattleAreaManager_FindBattleArea) == 0x000008, "Wrong alignment on MarvelAIBattleAreaManager_FindBattleArea");
static_assert(sizeof(MarvelAIBattleAreaManager_FindBattleArea) == 0x000018, "Wrong size on MarvelAIBattleAreaManager_FindBattleArea");
static_assert(offsetof(MarvelAIBattleAreaManager_FindBattleArea, AreaName) == 0x000000, "Member 'MarvelAIBattleAreaManager_FindBattleArea::AreaName' has a wrong offset!");
static_assert(offsetof(MarvelAIBattleAreaManager_FindBattleArea, ReturnValue) == 0x000010, "Member 'MarvelAIBattleAreaManager_FindBattleArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIBattleAreaManager.GetCurrentBattleArea
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIBattleAreaManager_GetCurrentBattleArea final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleAreaType                               InBattleAreaType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIBattleAreaBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIBattleAreaManager_GetCurrentBattleArea) == 0x000008, "Wrong alignment on MarvelAIBattleAreaManager_GetCurrentBattleArea");
static_assert(sizeof(MarvelAIBattleAreaManager_GetCurrentBattleArea) == 0x000018, "Wrong size on MarvelAIBattleAreaManager_GetCurrentBattleArea");
static_assert(offsetof(MarvelAIBattleAreaManager_GetCurrentBattleArea, TargetActor) == 0x000000, "Member 'MarvelAIBattleAreaManager_GetCurrentBattleArea::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAIBattleAreaManager_GetCurrentBattleArea, InBattleAreaType) == 0x000008, "Member 'MarvelAIBattleAreaManager_GetCurrentBattleArea::InBattleAreaType' has a wrong offset!");
static_assert(offsetof(MarvelAIBattleAreaManager_GetCurrentBattleArea, ReturnValue) == 0x000010, "Member 'MarvelAIBattleAreaManager_GetCurrentBattleArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIBattleAreaManager.Init
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIBattleAreaManager_Init final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIBattleAreaManager_Init) == 0x000001, "Wrong alignment on MarvelAIBattleAreaManager_Init");
static_assert(sizeof(MarvelAIBattleAreaManager_Init) == 0x000001, "Wrong size on MarvelAIBattleAreaManager_Init");
static_assert(offsetof(MarvelAIBattleAreaManager_Init, ReturnValue) == 0x000000, "Member 'MarvelAIBattleAreaManager_Init::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIBattleAreaManager.RegisterBattleArea
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIBattleAreaManager_RegisterBattleArea final
{
public:
	class AAIBattleAreaBase*                      BattleArea;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIBattleAreaManager_RegisterBattleArea) == 0x000008, "Wrong alignment on MarvelAIBattleAreaManager_RegisterBattleArea");
static_assert(sizeof(MarvelAIBattleAreaManager_RegisterBattleArea) == 0x000008, "Wrong size on MarvelAIBattleAreaManager_RegisterBattleArea");
static_assert(offsetof(MarvelAIBattleAreaManager_RegisterBattleArea, BattleArea) == 0x000000, "Member 'MarvelAIBattleAreaManager_RegisterBattleArea::BattleArea' has a wrong offset!");

// Function MarvelAI.MarvelAIBattleAreaManager.UnRegisterBattleArea
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIBattleAreaManager_UnRegisterBattleArea final
{
public:
	class AAIBattleAreaBase*                      BattleArea;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIBattleAreaManager_UnRegisterBattleArea) == 0x000008, "Wrong alignment on MarvelAIBattleAreaManager_UnRegisterBattleArea");
static_assert(sizeof(MarvelAIBattleAreaManager_UnRegisterBattleArea) == 0x000008, "Wrong size on MarvelAIBattleAreaManager_UnRegisterBattleArea");
static_assert(offsetof(MarvelAIBattleAreaManager_UnRegisterBattleArea, BattleArea) == 0x000000, "Member 'MarvelAIBattleAreaManager_UnRegisterBattleArea::BattleArea' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.AddExtraConfig
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_AddExtraConfig final
{
public:
	class UAIAbilityActivationExtraConfig*        NewConfig;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_AddExtraConfig) == 0x000008, "Wrong alignment on AIControllerInfo_AddExtraConfig");
static_assert(sizeof(AIControllerInfo_AddExtraConfig) == 0x000010, "Wrong size on AIControllerInfo_AddExtraConfig");
static_assert(offsetof(AIControllerInfo_AddExtraConfig, NewConfig) == 0x000000, "Member 'AIControllerInfo_AddExtraConfig::NewConfig' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_AddExtraConfig, ReturnValue) == 0x000008, "Member 'AIControllerInfo_AddExtraConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.AddTag
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_AddTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_AddTag) == 0x000004, "Wrong alignment on AIControllerInfo_AddTag");
static_assert(sizeof(AIControllerInfo_AddTag) == 0x000010, "Wrong size on AIControllerInfo_AddTag");
static_assert(offsetof(AIControllerInfo_AddTag, Tag) == 0x000000, "Member 'AIControllerInfo_AddTag::Tag' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_AddTag, ReturnValue) == 0x00000C, "Member 'AIControllerInfo_AddTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.ApplyTagContainer
// 0x0068 (0x0068 - 0x0000)
struct AIControllerInfo_ApplyTagContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_ApplyTagContainer) == 0x000008, "Wrong alignment on AIControllerInfo_ApplyTagContainer");
static_assert(sizeof(AIControllerInfo_ApplyTagContainer) == 0x000068, "Wrong size on AIControllerInfo_ApplyTagContainer");
static_assert(offsetof(AIControllerInfo_ApplyTagContainer, TagContainer) == 0x000000, "Member 'AIControllerInfo_ApplyTagContainer::TagContainer' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.CheckIsConcentratingTarget
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_CheckIsConcentratingTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_CheckIsConcentratingTarget) == 0x000008, "Wrong alignment on AIControllerInfo_CheckIsConcentratingTarget");
static_assert(sizeof(AIControllerInfo_CheckIsConcentratingTarget) == 0x000010, "Wrong size on AIControllerInfo_CheckIsConcentratingTarget");
static_assert(offsetof(AIControllerInfo_CheckIsConcentratingTarget, Target) == 0x000000, "Member 'AIControllerInfo_CheckIsConcentratingTarget::Target' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_CheckIsConcentratingTarget, ReturnValue) == 0x000008, "Member 'AIControllerInfo_CheckIsConcentratingTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.CheckTeamActionIsExpired
// 0x0008 (0x0008 - 0x0000)
struct AIControllerInfo_CheckTeamActionIsExpired final
{
public:
	float                                         ValidDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_CheckTeamActionIsExpired) == 0x000004, "Wrong alignment on AIControllerInfo_CheckTeamActionIsExpired");
static_assert(sizeof(AIControllerInfo_CheckTeamActionIsExpired) == 0x000008, "Wrong size on AIControllerInfo_CheckTeamActionIsExpired");
static_assert(offsetof(AIControllerInfo_CheckTeamActionIsExpired, ValidDuration) == 0x000000, "Member 'AIControllerInfo_CheckTeamActionIsExpired::ValidDuration' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_CheckTeamActionIsExpired, ReturnValue) == 0x000004, "Member 'AIControllerInfo_CheckTeamActionIsExpired::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.DeleteConcentratedTarget
// 0x0008 (0x0008 - 0x0000)
struct AIControllerInfo_DeleteConcentratedTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_DeleteConcentratedTarget) == 0x000008, "Wrong alignment on AIControllerInfo_DeleteConcentratedTarget");
static_assert(sizeof(AIControllerInfo_DeleteConcentratedTarget) == 0x000008, "Wrong size on AIControllerInfo_DeleteConcentratedTarget");
static_assert(offsetof(AIControllerInfo_DeleteConcentratedTarget, Target) == 0x000000, "Member 'AIControllerInfo_DeleteConcentratedTarget::Target' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.GetExtraConfig
// 0x0018 (0x0018 - 0x0000)
struct AIControllerInfo_GetExtraConfig final
{
public:
	class FString                                 ConfigName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityActivationExtraConfig*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_GetExtraConfig) == 0x000008, "Wrong alignment on AIControllerInfo_GetExtraConfig");
static_assert(sizeof(AIControllerInfo_GetExtraConfig) == 0x000018, "Wrong size on AIControllerInfo_GetExtraConfig");
static_assert(offsetof(AIControllerInfo_GetExtraConfig, ConfigName) == 0x000000, "Member 'AIControllerInfo_GetExtraConfig::ConfigName' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_GetExtraConfig, ReturnValue) == 0x000010, "Member 'AIControllerInfo_GetExtraConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.HasExtraConfig
// 0x0018 (0x0018 - 0x0000)
struct AIControllerInfo_HasExtraConfig final
{
public:
	class FString                                 ConfigName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_HasExtraConfig) == 0x000008, "Wrong alignment on AIControllerInfo_HasExtraConfig");
static_assert(sizeof(AIControllerInfo_HasExtraConfig) == 0x000018, "Wrong size on AIControllerInfo_HasExtraConfig");
static_assert(offsetof(AIControllerInfo_HasExtraConfig, ConfigName) == 0x000000, "Member 'AIControllerInfo_HasExtraConfig::ConfigName' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_HasExtraConfig, ReturnValue) == 0x000010, "Member 'AIControllerInfo_HasExtraConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.OverwriteExtraConfig
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_OverwriteExtraConfig final
{
public:
	class UAIAbilityActivationExtraConfig*        NewConfig;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_OverwriteExtraConfig) == 0x000008, "Wrong alignment on AIControllerInfo_OverwriteExtraConfig");
static_assert(sizeof(AIControllerInfo_OverwriteExtraConfig) == 0x000010, "Wrong size on AIControllerInfo_OverwriteExtraConfig");
static_assert(offsetof(AIControllerInfo_OverwriteExtraConfig, NewConfig) == 0x000000, "Member 'AIControllerInfo_OverwriteExtraConfig::NewConfig' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_OverwriteExtraConfig, ReturnValue) == 0x000008, "Member 'AIControllerInfo_OverwriteExtraConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.RemoveExtraConfig
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_RemoveExtraConfig final
{
public:
	class FString                                 ConfigName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_RemoveExtraConfig) == 0x000008, "Wrong alignment on AIControllerInfo_RemoveExtraConfig");
static_assert(sizeof(AIControllerInfo_RemoveExtraConfig) == 0x000010, "Wrong size on AIControllerInfo_RemoveExtraConfig");
static_assert(offsetof(AIControllerInfo_RemoveExtraConfig, ConfigName) == 0x000000, "Member 'AIControllerInfo_RemoveExtraConfig::ConfigName' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.RemoveTag
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_RemoveTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_RemoveTag) == 0x000004, "Wrong alignment on AIControllerInfo_RemoveTag");
static_assert(sizeof(AIControllerInfo_RemoveTag) == 0x000010, "Wrong size on AIControllerInfo_RemoveTag");
static_assert(offsetof(AIControllerInfo_RemoveTag, Tag) == 0x000000, "Member 'AIControllerInfo_RemoveTag::Tag' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_RemoveTag, ReturnValue) == 0x00000C, "Member 'AIControllerInfo_RemoveTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.RemoveTagContainer
// 0x0068 (0x0068 - 0x0000)
struct AIControllerInfo_RemoveTagContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_RemoveTagContainer) == 0x000008, "Wrong alignment on AIControllerInfo_RemoveTagContainer");
static_assert(sizeof(AIControllerInfo_RemoveTagContainer) == 0x000068, "Wrong size on AIControllerInfo_RemoveTagContainer");
static_assert(offsetof(AIControllerInfo_RemoveTagContainer, TagContainer) == 0x000000, "Member 'AIControllerInfo_RemoveTagContainer::TagContainer' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.SetNewTeamAction
// 0x0002 (0x0002 - 0x0000)
struct AIControllerInfo_SetNewTeamAction final
{
public:
	EAITeamAction                                 NewAction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsActionFromSelf;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_SetNewTeamAction) == 0x000001, "Wrong alignment on AIControllerInfo_SetNewTeamAction");
static_assert(sizeof(AIControllerInfo_SetNewTeamAction) == 0x000002, "Wrong size on AIControllerInfo_SetNewTeamAction");
static_assert(offsetof(AIControllerInfo_SetNewTeamAction, NewAction) == 0x000000, "Member 'AIControllerInfo_SetNewTeamAction::NewAction' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_SetNewTeamAction, bNewIsActionFromSelf) == 0x000001, "Member 'AIControllerInfo_SetNewTeamAction::bNewIsActionFromSelf' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.TrySyncWaypointPathProgress
// 0x0050 (0x0050 - 0x0000)
struct AIControllerInfo_TrySyncWaypointPathProgress final
{
public:
	struct FWayPointPath                          Target;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_TrySyncWaypointPathProgress) == 0x000008, "Wrong alignment on AIControllerInfo_TrySyncWaypointPathProgress");
static_assert(sizeof(AIControllerInfo_TrySyncWaypointPathProgress) == 0x000050, "Wrong size on AIControllerInfo_TrySyncWaypointPathProgress");
static_assert(offsetof(AIControllerInfo_TrySyncWaypointPathProgress, Target) == 0x000000, "Member 'AIControllerInfo_TrySyncWaypointPathProgress::Target' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_TrySyncWaypointPathProgress, ReturnValue) == 0x000048, "Member 'AIControllerInfo_TrySyncWaypointPathProgress::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.UpdateConcentratedTarget
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_UpdateConcentratedTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_UpdateConcentratedTarget) == 0x000008, "Wrong alignment on AIControllerInfo_UpdateConcentratedTarget");
static_assert(sizeof(AIControllerInfo_UpdateConcentratedTarget) == 0x000010, "Wrong size on AIControllerInfo_UpdateConcentratedTarget");
static_assert(offsetof(AIControllerInfo_UpdateConcentratedTarget, Target) == 0x000000, "Member 'AIControllerInfo_UpdateConcentratedTarget::Target' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_UpdateConcentratedTarget, DeltaTime) == 0x000008, "Member 'AIControllerInfo_UpdateConcentratedTarget::DeltaTime' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.CheckIsInBattle
// 0x0001 (0x0001 - 0x0000)
struct AIControllerInfo_CheckIsInBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_CheckIsInBattle) == 0x000001, "Wrong alignment on AIControllerInfo_CheckIsInBattle");
static_assert(sizeof(AIControllerInfo_CheckIsInBattle) == 0x000001, "Wrong size on AIControllerInfo_CheckIsInBattle");
static_assert(offsetof(AIControllerInfo_CheckIsInBattle, ReturnValue) == 0x000000, "Member 'AIControllerInfo_CheckIsInBattle::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.GetConcentratedTargets
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_GetConcentratedTargets final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_GetConcentratedTargets) == 0x000008, "Wrong alignment on AIControllerInfo_GetConcentratedTargets");
static_assert(sizeof(AIControllerInfo_GetConcentratedTargets) == 0x000010, "Wrong size on AIControllerInfo_GetConcentratedTargets");
static_assert(offsetof(AIControllerInfo_GetConcentratedTargets, ReturnValue) == 0x000000, "Member 'AIControllerInfo_GetConcentratedTargets::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.GetCurrentTargetHitRate
// 0x0078 (0x0078 - 0x0000)
struct AIControllerInfo_GetCurrentTargetHitRate final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIHitRateTagContainer                 HitRateTagContainer;                               // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_GetCurrentTargetHitRate) == 0x000008, "Wrong alignment on AIControllerInfo_GetCurrentTargetHitRate");
static_assert(sizeof(AIControllerInfo_GetCurrentTargetHitRate) == 0x000078, "Wrong size on AIControllerInfo_GetCurrentTargetHitRate");
static_assert(offsetof(AIControllerInfo_GetCurrentTargetHitRate, Target) == 0x000000, "Member 'AIControllerInfo_GetCurrentTargetHitRate::Target' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_GetCurrentTargetHitRate, HitRateTagContainer) == 0x000008, "Member 'AIControllerInfo_GetCurrentTargetHitRate::HitRateTagContainer' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_GetCurrentTargetHitRate, ReturnValue) == 0x000070, "Member 'AIControllerInfo_GetCurrentTargetHitRate::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.GetTagCount
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_GetTagCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerInfo_GetTagCount) == 0x000004, "Wrong alignment on AIControllerInfo_GetTagCount");
static_assert(sizeof(AIControllerInfo_GetTagCount) == 0x000010, "Wrong size on AIControllerInfo_GetTagCount");
static_assert(offsetof(AIControllerInfo_GetTagCount, Tag) == 0x000000, "Member 'AIControllerInfo_GetTagCount::Tag' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_GetTagCount, ReturnValue) == 0x00000C, "Member 'AIControllerInfo_GetTagCount::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.HasAllMatchingTags
// 0x0070 (0x0070 - 0x0000)
struct AIControllerInfo_HasAllMatchingTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_HasAllMatchingTags) == 0x000008, "Wrong alignment on AIControllerInfo_HasAllMatchingTags");
static_assert(sizeof(AIControllerInfo_HasAllMatchingTags) == 0x000070, "Wrong size on AIControllerInfo_HasAllMatchingTags");
static_assert(offsetof(AIControllerInfo_HasAllMatchingTags, TagContainer) == 0x000000, "Member 'AIControllerInfo_HasAllMatchingTags::TagContainer' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_HasAllMatchingTags, ReturnValue) == 0x000068, "Member 'AIControllerInfo_HasAllMatchingTags::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.HasAnyMatchingTags
// 0x0070 (0x0070 - 0x0000)
struct AIControllerInfo_HasAnyMatchingTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_HasAnyMatchingTags) == 0x000008, "Wrong alignment on AIControllerInfo_HasAnyMatchingTags");
static_assert(sizeof(AIControllerInfo_HasAnyMatchingTags) == 0x000070, "Wrong size on AIControllerInfo_HasAnyMatchingTags");
static_assert(offsetof(AIControllerInfo_HasAnyMatchingTags, TagContainer) == 0x000000, "Member 'AIControllerInfo_HasAnyMatchingTags::TagContainer' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_HasAnyMatchingTags, ReturnValue) == 0x000068, "Member 'AIControllerInfo_HasAnyMatchingTags::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIControllerInfo.HasMatchingTag
// 0x0010 (0x0010 - 0x0000)
struct AIControllerInfo_HasMatchingTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerInfo_HasMatchingTag) == 0x000004, "Wrong alignment on AIControllerInfo_HasMatchingTag");
static_assert(sizeof(AIControllerInfo_HasMatchingTag) == 0x000010, "Wrong size on AIControllerInfo_HasMatchingTag");
static_assert(offsetof(AIControllerInfo_HasMatchingTag, Tag) == 0x000000, "Member 'AIControllerInfo_HasMatchingTag::Tag' has a wrong offset!");
static_assert(offsetof(AIControllerInfo_HasMatchingTag, ReturnValue) == 0x00000C, "Member 'AIControllerInfo_HasMatchingTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.AICustomServiceLogicBase.TickService
// 0x0004 (0x0004 - 0x0000)
struct AICustomServiceLogicBase_TickService final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICustomServiceLogicBase_TickService) == 0x000004, "Wrong alignment on AICustomServiceLogicBase_TickService");
static_assert(sizeof(AICustomServiceLogicBase_TickService) == 0x000004, "Wrong size on AICustomServiceLogicBase_TickService");
static_assert(offsetof(AICustomServiceLogicBase_TickService, DeltaSeconds) == 0x000000, "Member 'AICustomServiceLogicBase_TickService::DeltaSeconds' has a wrong offset!");

// Function MarvelAI.AIDebugSubSystem.GetSubsystem
// 0x0010 (0x0010 - 0x0000)
struct AIDebugSubSystem_GetSubsystem final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIDebugSubSystem*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDebugSubSystem_GetSubsystem) == 0x000008, "Wrong alignment on AIDebugSubSystem_GetSubsystem");
static_assert(sizeof(AIDebugSubSystem_GetSubsystem) == 0x000010, "Wrong size on AIDebugSubSystem_GetSubsystem");
static_assert(offsetof(AIDebugSubSystem_GetSubsystem, ContextObject) == 0x000000, "Member 'AIDebugSubSystem_GetSubsystem::ContextObject' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_GetSubsystem, ReturnValue) == 0x000008, "Member 'AIDebugSubSystem_GetSubsystem::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIDebugSubSystem.StoreMoveResultDebugInfo
// 0x0018 (0x0018 - 0x0000)
struct AIDebugSubSystem_StoreMoveResultDebugInfo final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NodeTag;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveSuccess;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIDebugSubSystem_StoreMoveResultDebugInfo) == 0x000008, "Wrong alignment on AIDebugSubSystem_StoreMoveResultDebugInfo");
static_assert(sizeof(AIDebugSubSystem_StoreMoveResultDebugInfo) == 0x000018, "Wrong size on AIDebugSubSystem_StoreMoveResultDebugInfo");
static_assert(offsetof(AIDebugSubSystem_StoreMoveResultDebugInfo, WCO) == 0x000000, "Member 'AIDebugSubSystem_StoreMoveResultDebugInfo::WCO' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_StoreMoveResultDebugInfo, NodeTag) == 0x000008, "Member 'AIDebugSubSystem_StoreMoveResultDebugInfo::NodeTag' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_StoreMoveResultDebugInfo, MoveSuccess) == 0x000014, "Member 'AIDebugSubSystem_StoreMoveResultDebugInfo::MoveSuccess' has a wrong offset!");

// Function MarvelAI.AIDebugSubSystem.StoreMoveTargetDebugInfo
// 0x0030 (0x0030 - 0x0000)
struct AIDebugSubSystem_StoreMoveTargetDebugInfo final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDebugSubSystem_StoreMoveTargetDebugInfo) == 0x000008, "Wrong alignment on AIDebugSubSystem_StoreMoveTargetDebugInfo");
static_assert(sizeof(AIDebugSubSystem_StoreMoveTargetDebugInfo) == 0x000030, "Wrong size on AIDebugSubSystem_StoreMoveTargetDebugInfo");
static_assert(offsetof(AIDebugSubSystem_StoreMoveTargetDebugInfo, WCO) == 0x000000, "Member 'AIDebugSubSystem_StoreMoveTargetDebugInfo::WCO' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_StoreMoveTargetDebugInfo, AIController) == 0x000008, "Member 'AIDebugSubSystem_StoreMoveTargetDebugInfo::AIController' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_StoreMoveTargetDebugInfo, TargetActor) == 0x000010, "Member 'AIDebugSubSystem_StoreMoveTargetDebugInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(AIDebugSubSystem_StoreMoveTargetDebugInfo, TargetLocation) == 0x000018, "Member 'AIDebugSubSystem_StoreMoveTargetDebugInfo::TargetLocation' has a wrong offset!");

// Function MarvelAI.AIDifficultyExtendAsset.GetHitRateModifyFactor
// 0x0080 (0x0080 - 0x0000)
struct AIDifficultyExtendAsset_GetHitRateModifyFactor final
{
public:
	class AMarvelBaseCharacter*                   Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIHitRateTagContainer                 HitRateTagContainer;                               // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIDifficultyExtendAsset_GetHitRateModifyFactor) == 0x000008, "Wrong alignment on AIDifficultyExtendAsset_GetHitRateModifyFactor");
static_assert(sizeof(AIDifficultyExtendAsset_GetHitRateModifyFactor) == 0x000080, "Wrong size on AIDifficultyExtendAsset_GetHitRateModifyFactor");
static_assert(offsetof(AIDifficultyExtendAsset_GetHitRateModifyFactor, Source) == 0x000000, "Member 'AIDifficultyExtendAsset_GetHitRateModifyFactor::Source' has a wrong offset!");
static_assert(offsetof(AIDifficultyExtendAsset_GetHitRateModifyFactor, HitRateTagContainer) == 0x000008, "Member 'AIDifficultyExtendAsset_GetHitRateModifyFactor::HitRateTagContainer' has a wrong offset!");
static_assert(offsetof(AIDifficultyExtendAsset_GetHitRateModifyFactor, Target) == 0x000070, "Member 'AIDifficultyExtendAsset_GetHitRateModifyFactor::Target' has a wrong offset!");
static_assert(offsetof(AIDifficultyExtendAsset_GetHitRateModifyFactor, ReturnValue) == 0x000078, "Member 'AIDifficultyExtendAsset_GetHitRateModifyFactor::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.GetSelectTargetLogicObject
// 0x0018 (0x0018 - 0x0000)
struct AISelectTargetLogicBase_GetSelectTargetLogicObject final
{
public:
	class AMarvelAIController*                    MarvelAIOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISelectTargetLogicBase>   SelectLogicClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAISelectTargetLogicBase*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISelectTargetLogicBase_GetSelectTargetLogicObject) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_GetSelectTargetLogicObject");
static_assert(sizeof(AISelectTargetLogicBase_GetSelectTargetLogicObject) == 0x000018, "Wrong size on AISelectTargetLogicBase_GetSelectTargetLogicObject");
static_assert(offsetof(AISelectTargetLogicBase_GetSelectTargetLogicObject, MarvelAIOwner) == 0x000000, "Member 'AISelectTargetLogicBase_GetSelectTargetLogicObject::MarvelAIOwner' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_GetSelectTargetLogicObject, SelectLogicClass) == 0x000008, "Member 'AISelectTargetLogicBase_GetSelectTargetLogicObject::SelectLogicClass' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_GetSelectTargetLogicObject, ReturnValue) == 0x000010, "Member 'AISelectTargetLogicBase_GetSelectTargetLogicObject::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.CheckMissAndAddMissOffset
// 0x0158 (0x0158 - 0x0000)
struct AISelectTargetLogicBase_CheckMissAndAddMissOffset final
{
public:
	class AMarvelAIController*                    MarvelAI;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAITarget                        OutAITarget;                                       // 0x0008(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0068(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISelectTargetLogicBase_CheckMissAndAddMissOffset) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_CheckMissAndAddMissOffset");
static_assert(sizeof(AISelectTargetLogicBase_CheckMissAndAddMissOffset) == 0x000158, "Wrong size on AISelectTargetLogicBase_CheckMissAndAddMissOffset");
static_assert(offsetof(AISelectTargetLogicBase_CheckMissAndAddMissOffset, MarvelAI) == 0x000000, "Member 'AISelectTargetLogicBase_CheckMissAndAddMissOffset::MarvelAI' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_CheckMissAndAddMissOffset, OutAITarget) == 0x000008, "Member 'AISelectTargetLogicBase_CheckMissAndAddMissOffset::OutAITarget' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_CheckMissAndAddMissOffset, AbilityUsage) == 0x000068, "Member 'AISelectTargetLogicBase_CheckMissAndAddMissOffset::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_CheckMissAndAddMissOffset, ReturnValue) == 0x000150, "Member 'AISelectTargetLogicBase_CheckMissAndAddMissOffset::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.OnDestroy
// 0x00F0 (0x00F0 - 0x0000)
struct AISelectTargetLogicBase_OnDestroy final
{
public:
	class AMarvelAIController*                    MarvelAIController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISelectTargetLogicBase_OnDestroy) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_OnDestroy");
static_assert(sizeof(AISelectTargetLogicBase_OnDestroy) == 0x0000F0, "Wrong size on AISelectTargetLogicBase_OnDestroy");
static_assert(offsetof(AISelectTargetLogicBase_OnDestroy, MarvelAIController) == 0x000000, "Member 'AISelectTargetLogicBase_OnDestroy::MarvelAIController' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_OnDestroy, AbilityUsage) == 0x000008, "Member 'AISelectTargetLogicBase_OnDestroy::AbilityUsage' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.OnInitialize
// 0x00F0 (0x00F0 - 0x0000)
struct AISelectTargetLogicBase_OnInitialize final
{
public:
	class AMarvelAIController*                    MarvelAIController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISelectTargetLogicBase_OnInitialize) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_OnInitialize");
static_assert(sizeof(AISelectTargetLogicBase_OnInitialize) == 0x0000F0, "Wrong size on AISelectTargetLogicBase_OnInitialize");
static_assert(offsetof(AISelectTargetLogicBase_OnInitialize, MarvelAIController) == 0x000000, "Member 'AISelectTargetLogicBase_OnInitialize::MarvelAIController' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_OnInitialize, AbilityUsage) == 0x000008, "Member 'AISelectTargetLogicBase_OnInitialize::AbilityUsage' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.SelectTargetForAbilityCheck
// 0x00A0 (0x00A0 - 0x0000)
struct AISelectTargetLogicBase_SelectTargetForAbilityCheck final
{
public:
	struct FRequiredAIDataForAutoAbility          AbilityContext;                                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelAITarget                        OutAITarget;                                       // 0x0038(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISelectTargetLogicBase_SelectTargetForAbilityCheck) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_SelectTargetForAbilityCheck");
static_assert(sizeof(AISelectTargetLogicBase_SelectTargetForAbilityCheck) == 0x0000A0, "Wrong size on AISelectTargetLogicBase_SelectTargetForAbilityCheck");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetForAbilityCheck, AbilityContext) == 0x000000, "Member 'AISelectTargetLogicBase_SelectTargetForAbilityCheck::AbilityContext' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetForAbilityCheck, OutAITarget) == 0x000038, "Member 'AISelectTargetLogicBase_SelectTargetForAbilityCheck::OutAITarget' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetForAbilityCheck, ReturnValue) == 0x000098, "Member 'AISelectTargetLogicBase_SelectTargetForAbilityCheck::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.SelectTargetOrLocation
// 0x0158 (0x0158 - 0x0000)
struct AISelectTargetLogicBase_SelectTargetOrLocation final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAITarget                        OutAITarget;                                       // 0x0008(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0068(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISelectTargetLogicBase_SelectTargetOrLocation) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_SelectTargetOrLocation");
static_assert(sizeof(AISelectTargetLogicBase_SelectTargetOrLocation) == 0x000158, "Wrong size on AISelectTargetLogicBase_SelectTargetOrLocation");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetOrLocation, AIController) == 0x000000, "Member 'AISelectTargetLogicBase_SelectTargetOrLocation::AIController' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetOrLocation, OutAITarget) == 0x000008, "Member 'AISelectTargetLogicBase_SelectTargetOrLocation::OutAITarget' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetOrLocation, AbilityUsage) == 0x000068, "Member 'AISelectTargetLogicBase_SelectTargetOrLocation::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_SelectTargetOrLocation, ReturnValue) == 0x000150, "Member 'AISelectTargetLogicBase_SelectTargetOrLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.TakeResultAITarget
// 0x0158 (0x0158 - 0x0000)
struct AISelectTargetLogicBase_TakeResultAITarget final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAITarget                        OutAITarget;                                       // 0x0008(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0068(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISelectTargetLogicBase_TakeResultAITarget) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_TakeResultAITarget");
static_assert(sizeof(AISelectTargetLogicBase_TakeResultAITarget) == 0x000158, "Wrong size on AISelectTargetLogicBase_TakeResultAITarget");
static_assert(offsetof(AISelectTargetLogicBase_TakeResultAITarget, AIController) == 0x000000, "Member 'AISelectTargetLogicBase_TakeResultAITarget::AIController' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_TakeResultAITarget, OutAITarget) == 0x000008, "Member 'AISelectTargetLogicBase_TakeResultAITarget::OutAITarget' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_TakeResultAITarget, AbilityUsage) == 0x000068, "Member 'AISelectTargetLogicBase_TakeResultAITarget::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_TakeResultAITarget, ReturnValue) == 0x000150, "Member 'AISelectTargetLogicBase_TakeResultAITarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.AISelectTargetLogicBase.UpdateProjectilePredicateSpeed
// 0x10D0 (0x10D0 - 0x0000)
struct AISelectTargetLogicBase_UpdateProjectilePredicateSpeed final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelProjectileAgentTable            ProjectileAgentTable;                              // 0x00F0(0x0FD8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x10C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C9[0x7];                                     // 0x10C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed) == 0x000008, "Wrong alignment on AISelectTargetLogicBase_UpdateProjectilePredicateSpeed");
static_assert(sizeof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed) == 0x0010D0, "Wrong size on AISelectTargetLogicBase_UpdateProjectilePredicateSpeed");
static_assert(offsetof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed, AIController) == 0x000000, "Member 'AISelectTargetLogicBase_UpdateProjectilePredicateSpeed::AIController' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed, AbilityUsage) == 0x000008, "Member 'AISelectTargetLogicBase_UpdateProjectilePredicateSpeed::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed, ProjectileAgentTable) == 0x0000F0, "Member 'AISelectTargetLogicBase_UpdateProjectilePredicateSpeed::ProjectileAgentTable' has a wrong offset!");
static_assert(offsetof(AISelectTargetLogicBase_UpdateProjectilePredicateSpeed, ReturnValue) == 0x0010C8, "Member 'AISelectTargetLogicBase_UpdateProjectilePredicateSpeed::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIDynamicDifficultyAsset.IsValid
// 0x0001 (0x0001 - 0x0000)
struct AIDynamicDifficultyAsset_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDynamicDifficultyAsset_IsValid) == 0x000001, "Wrong alignment on AIDynamicDifficultyAsset_IsValid");
static_assert(sizeof(AIDynamicDifficultyAsset_IsValid) == 0x000001, "Wrong size on AIDynamicDifficultyAsset_IsValid");
static_assert(offsetof(AIDynamicDifficultyAsset_IsValid, ReturnValue) == 0x000000, "Member 'AIDynamicDifficultyAsset_IsValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIGameEventSubsystem.OnActorEnergyFull
// 0x0028 (0x0028 - 0x0000)
struct AIGameEventSubsystem_OnActorEnergyFull final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0020(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIGameEventSubsystem_OnActorEnergyFull) == 0x000008, "Wrong alignment on AIGameEventSubsystem_OnActorEnergyFull");
static_assert(sizeof(AIGameEventSubsystem_OnActorEnergyFull) == 0x000028, "Wrong size on AIGameEventSubsystem_OnActorEnergyFull");
static_assert(offsetof(AIGameEventSubsystem_OnActorEnergyFull, Source) == 0x000000, "Member 'AIGameEventSubsystem_OnActorEnergyFull::Source' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnActorEnergyFull, ModifierParameterHandle) == 0x000008, "Member 'AIGameEventSubsystem_OnActorEnergyFull::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnActorEnergyFull, ExtraData) == 0x000020, "Member 'AIGameEventSubsystem_OnActorEnergyFull::ExtraData' has a wrong offset!");

// Function MarvelAI.AIGameEventSubsystem.OnHealthChanged
// 0x0020 (0x0020 - 0x0000)
struct AIGameEventSubsystem_OnHealthChanged final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIGameEventSubsystem_OnHealthChanged) == 0x000008, "Wrong alignment on AIGameEventSubsystem_OnHealthChanged");
static_assert(sizeof(AIGameEventSubsystem_OnHealthChanged) == 0x000020, "Wrong size on AIGameEventSubsystem_OnHealthChanged");
static_assert(offsetof(AIGameEventSubsystem_OnHealthChanged, Source) == 0x000000, "Member 'AIGameEventSubsystem_OnHealthChanged::Source' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnHealthChanged, ModifierParameterHandle) == 0x000008, "Member 'AIGameEventSubsystem_OnHealthChanged::ModifierParameterHandle' has a wrong offset!");

// Function MarvelAI.AIGameEventSubsystem.OnPlayerKill
// 0x0030 (0x0030 - 0x0000)
struct AIGameEventSubsystem_OnPlayerKill final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIGameEventSubsystem_OnPlayerKill) == 0x000008, "Wrong alignment on AIGameEventSubsystem_OnPlayerKill");
static_assert(sizeof(AIGameEventSubsystem_OnPlayerKill) == 0x000030, "Wrong size on AIGameEventSubsystem_OnPlayerKill");
static_assert(offsetof(AIGameEventSubsystem_OnPlayerKill, Killer) == 0x000000, "Member 'AIGameEventSubsystem_OnPlayerKill::Killer' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnPlayerKill, Target) == 0x000008, "Member 'AIGameEventSubsystem_OnPlayerKill::Target' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnPlayerKill, ModifierParameterHandle) == 0x000010, "Member 'AIGameEventSubsystem_OnPlayerKill::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(AIGameEventSubsystem_OnPlayerKill, ExtraData) == 0x000028, "Member 'AIGameEventSubsystem_OnPlayerKill::ExtraData' has a wrong offset!");

// Function MarvelAI.AIGameInstanceSubsystem.OnAIAssetsLoaded
// 0x0010 (0x0010 - 0x0000)
struct AIGameInstanceSubsystem_OnAIAssetsLoaded final
{
public:
	TArray<class UObject*>                        AIAssets_0;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIGameInstanceSubsystem_OnAIAssetsLoaded) == 0x000008, "Wrong alignment on AIGameInstanceSubsystem_OnAIAssetsLoaded");
static_assert(sizeof(AIGameInstanceSubsystem_OnAIAssetsLoaded) == 0x000010, "Wrong size on AIGameInstanceSubsystem_OnAIAssetsLoaded");
static_assert(offsetof(AIGameInstanceSubsystem_OnAIAssetsLoaded, AIAssets_0) == 0x000000, "Member 'AIGameInstanceSubsystem_OnAIAssetsLoaded::AIAssets_0' has a wrong offset!");

// Function MarvelAI.AIHitRateModify.CalculateHitRateModifyAI
// 0x0018 (0x0018 - 0x0000)
struct AIHitRateModify_CalculateHitRateModifyAI final
{
public:
	class AMarvelBaseCharacter*                   Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHitRateModify_CalculateHitRateModifyAI) == 0x000008, "Wrong alignment on AIHitRateModify_CalculateHitRateModifyAI");
static_assert(sizeof(AIHitRateModify_CalculateHitRateModifyAI) == 0x000018, "Wrong size on AIHitRateModify_CalculateHitRateModifyAI");
static_assert(offsetof(AIHitRateModify_CalculateHitRateModifyAI, Source) == 0x000000, "Member 'AIHitRateModify_CalculateHitRateModifyAI::Source' has a wrong offset!");
static_assert(offsetof(AIHitRateModify_CalculateHitRateModifyAI, Target) == 0x000008, "Member 'AIHitRateModify_CalculateHitRateModifyAI::Target' has a wrong offset!");
static_assert(offsetof(AIHitRateModify_CalculateHitRateModifyAI, ReturnValue) == 0x000010, "Member 'AIHitRateModify_CalculateHitRateModifyAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetAILabSubSystem
// 0x0010 (0x0010 - 0x0000)
struct AILabSubSystem_GetAILabSubSystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAILabSubSystem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetAILabSubSystem) == 0x000008, "Wrong alignment on AILabSubSystem_GetAILabSubSystem");
static_assert(sizeof(AILabSubSystem_GetAILabSubSystem) == 0x000010, "Wrong size on AILabSubSystem_GetAILabSubSystem");
static_assert(offsetof(AILabSubSystem_GetAILabSubSystem, WorldContextObject) == 0x000000, "Member 'AILabSubSystem_GetAILabSubSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_GetAILabSubSystem, ReturnValue) == 0x000008, "Member 'AILabSubSystem_GetAILabSubSystem::ReturnValue' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetAbilitySummonedDataList
// 0x0010 (0x0010 - 0x0000)
struct AILabSubSystem_GetAbilitySummonedDataList final
{
public:
	TArray<struct FAILabProtoSummonedData>        OutSummonedDataList;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetAbilitySummonedDataList) == 0x000008, "Wrong alignment on AILabSubSystem_GetAbilitySummonedDataList");
static_assert(sizeof(AILabSubSystem_GetAbilitySummonedDataList) == 0x000010, "Wrong size on AILabSubSystem_GetAbilitySummonedDataList");
static_assert(offsetof(AILabSubSystem_GetAbilitySummonedDataList, OutSummonedDataList) == 0x000000, "Member 'AILabSubSystem_GetAbilitySummonedDataList::OutSummonedDataList' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetAILabProtoTickData
// 0x0090 (0x0090 - 0x0000)
struct AILabSubSystem_GetAILabProtoTickData final
{
public:
	struct FAILabProtoTickData                    OutTickData;                                       // 0x0000(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetAILabProtoTickData) == 0x000008, "Wrong alignment on AILabSubSystem_GetAILabProtoTickData");
static_assert(sizeof(AILabSubSystem_GetAILabProtoTickData) == 0x000090, "Wrong size on AILabSubSystem_GetAILabProtoTickData");
static_assert(offsetof(AILabSubSystem_GetAILabProtoTickData, OutTickData) == 0x000000, "Member 'AILabSubSystem_GetAILabProtoTickData::OutTickData' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetAmmoClipData
// 0x0028 (0x0028 - 0x0000)
struct AILabSubSystem_GetAmmoClipData final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAILabProtoWeaponClipData              OutWeaponClipData;                                 // 0x0008(0x001C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AILabSubSystem_GetAmmoClipData) == 0x000008, "Wrong alignment on AILabSubSystem_GetAmmoClipData");
static_assert(sizeof(AILabSubSystem_GetAmmoClipData) == 0x000028, "Wrong size on AILabSubSystem_GetAmmoClipData");
static_assert(offsetof(AILabSubSystem_GetAmmoClipData, Character) == 0x000000, "Member 'AILabSubSystem_GetAmmoClipData::Character' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_GetAmmoClipData, OutWeaponClipData) == 0x000008, "Member 'AILabSubSystem_GetAmmoClipData::OutWeaponClipData' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetBuffData
// 0x0018 (0x0018 - 0x0000)
struct AILabSubSystem_GetBuffData final
{
public:
	const class AMarvelBaseCharacter*             Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAILabProtoBuffData>            OutBuffDataList;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetBuffData) == 0x000008, "Wrong alignment on AILabSubSystem_GetBuffData");
static_assert(sizeof(AILabSubSystem_GetBuffData) == 0x000018, "Wrong size on AILabSubSystem_GetBuffData");
static_assert(offsetof(AILabSubSystem_GetBuffData, Character) == 0x000000, "Member 'AILabSubSystem_GetBuffData::Character' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_GetBuffData, OutBuffDataList) == 0x000008, "Member 'AILabSubSystem_GetBuffData::OutBuffDataList' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetCharacterAbilityData
// 0x00A8 (0x00A8 - 0x0000)
struct AILabSubSystem_GetCharacterAbilityData final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAILabProtoAbilityData                 OutAbilityData;                                    // 0x0008(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetCharacterAbilityData) == 0x000008, "Wrong alignment on AILabSubSystem_GetCharacterAbilityData");
static_assert(sizeof(AILabSubSystem_GetCharacterAbilityData) == 0x0000A8, "Wrong size on AILabSubSystem_GetCharacterAbilityData");
static_assert(offsetof(AILabSubSystem_GetCharacterAbilityData, Character) == 0x000000, "Member 'AILabSubSystem_GetCharacterAbilityData::Character' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_GetCharacterAbilityData, OutAbilityData) == 0x000008, "Member 'AILabSubSystem_GetCharacterAbilityData::OutAbilityData' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetCurrentAmmoTypeList
// 0x0018 (0x0018 - 0x0000)
struct AILabSubSystem_GetCurrentAmmoTypeList final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetCurrentAmmoTypeList) == 0x000008, "Wrong alignment on AILabSubSystem_GetCurrentAmmoTypeList");
static_assert(sizeof(AILabSubSystem_GetCurrentAmmoTypeList) == 0x000018, "Wrong size on AILabSubSystem_GetCurrentAmmoTypeList");
static_assert(offsetof(AILabSubSystem_GetCurrentAmmoTypeList, Character) == 0x000000, "Member 'AILabSubSystem_GetCurrentAmmoTypeList::Character' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_GetCurrentAmmoTypeList, ReturnValue) == 0x000008, "Member 'AILabSubSystem_GetCurrentAmmoTypeList::ReturnValue' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.GetLevelParamData
// 0x0010 (0x0010 - 0x0000)
struct AILabSubSystem_GetLevelParamData final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_GetLevelParamData) == 0x000008, "Wrong alignment on AILabSubSystem_GetLevelParamData");
static_assert(sizeof(AILabSubSystem_GetLevelParamData) == 0x000010, "Wrong size on AILabSubSystem_GetLevelParamData");
static_assert(offsetof(AILabSubSystem_GetLevelParamData, ReturnValue) == 0x000000, "Member 'AILabSubSystem_GetLevelParamData::ReturnValue' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.OnActorEndAbility
// 0x0028 (0x0028 - 0x0000)
struct AILabSubSystem_OnActorEndAbility final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_OnActorEndAbility) == 0x000008, "Wrong alignment on AILabSubSystem_OnActorEndAbility");
static_assert(sizeof(AILabSubSystem_OnActorEndAbility) == 0x000028, "Wrong size on AILabSubSystem_OnActorEndAbility");
static_assert(offsetof(AILabSubSystem_OnActorEndAbility, Source) == 0x000000, "Member 'AILabSubSystem_OnActorEndAbility::Source' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_OnActorEndAbility, AbilityID) == 0x000008, "Member 'AILabSubSystem_OnActorEndAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_OnActorEndAbility, SessionID) == 0x000010, "Member 'AILabSubSystem_OnActorEndAbility::SessionID' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_OnActorEndAbility, SourceAbility) == 0x000020, "Member 'AILabSubSystem_OnActorEndAbility::SourceAbility' has a wrong offset!");

// Function MarvelAI.AILabSubSystem.TryGetAICharacterView
// 0x0048 (0x0048 - 0x0000)
struct AILabSubSystem_TryGetAICharacterView final
{
public:
	const class AMarvelBaseCharacter*             Characters;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAILabProtoEnvironmentData             OutEnvironmentData;                                // 0x0008(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AILabSubSystem_TryGetAICharacterView) == 0x000008, "Wrong alignment on AILabSubSystem_TryGetAICharacterView");
static_assert(sizeof(AILabSubSystem_TryGetAICharacterView) == 0x000048, "Wrong size on AILabSubSystem_TryGetAICharacterView");
static_assert(offsetof(AILabSubSystem_TryGetAICharacterView, Characters) == 0x000000, "Member 'AILabSubSystem_TryGetAICharacterView::Characters' has a wrong offset!");
static_assert(offsetof(AILabSubSystem_TryGetAICharacterView, OutEnvironmentData) == 0x000008, "Member 'AILabSubSystem_TryGetAICharacterView::OutEnvironmentData' has a wrong offset!");

// Function MarvelAI.AIMementoComponent.OnAbilityActivate
// 0x0028 (0x0028 - 0x0000)
struct AIMementoComponent_OnAbilityActivate final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  GlobalEventExtraData;                              // 0x0020(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMementoComponent_OnAbilityActivate) == 0x000008, "Wrong alignment on AIMementoComponent_OnAbilityActivate");
static_assert(sizeof(AIMementoComponent_OnAbilityActivate) == 0x000028, "Wrong size on AIMementoComponent_OnAbilityActivate");
static_assert(offsetof(AIMementoComponent_OnAbilityActivate, ASC) == 0x000000, "Member 'AIMementoComponent_OnAbilityActivate::ASC' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityActivate, AbilityID) == 0x000008, "Member 'AIMementoComponent_OnAbilityActivate::AbilityID' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityActivate, String) == 0x000010, "Member 'AIMementoComponent_OnAbilityActivate::String' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityActivate, GlobalEventExtraData) == 0x000020, "Member 'AIMementoComponent_OnAbilityActivate::GlobalEventExtraData' has a wrong offset!");

// Function MarvelAI.AIMementoComponent.OnAbilityDeActivate
// 0x0028 (0x0028 - 0x0000)
struct AIMementoComponent_OnAbilityDeActivate final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  GlobalEventExtraData;                              // 0x0020(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMementoComponent_OnAbilityDeActivate) == 0x000008, "Wrong alignment on AIMementoComponent_OnAbilityDeActivate");
static_assert(sizeof(AIMementoComponent_OnAbilityDeActivate) == 0x000028, "Wrong size on AIMementoComponent_OnAbilityDeActivate");
static_assert(offsetof(AIMementoComponent_OnAbilityDeActivate, ASC) == 0x000000, "Member 'AIMementoComponent_OnAbilityDeActivate::ASC' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityDeActivate, AbilityID) == 0x000008, "Member 'AIMementoComponent_OnAbilityDeActivate::AbilityID' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityDeActivate, String) == 0x000010, "Member 'AIMementoComponent_OnAbilityDeActivate::String' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnAbilityDeActivate, GlobalEventExtraData) == 0x000020, "Member 'AIMementoComponent_OnAbilityDeActivate::GlobalEventExtraData' has a wrong offset!");

// Function MarvelAI.AIMementoComponent.OnTagUpdated
// 0x0018 (0x0018 - 0x0000)
struct AIMementoComponent_OnTagUpdated final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMementoComponent_OnTagUpdated) == 0x000008, "Wrong alignment on AIMementoComponent_OnTagUpdated");
static_assert(sizeof(AIMementoComponent_OnTagUpdated) == 0x000018, "Wrong size on AIMementoComponent_OnTagUpdated");
static_assert(offsetof(AIMementoComponent_OnTagUpdated, ASC) == 0x000000, "Member 'AIMementoComponent_OnTagUpdated::ASC' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnTagUpdated, GameplayTag) == 0x000008, "Member 'AIMementoComponent_OnTagUpdated::GameplayTag' has a wrong offset!");
static_assert(offsetof(AIMementoComponent_OnTagUpdated, bTagExists) == 0x000014, "Member 'AIMementoComponent_OnTagUpdated::bTagExists' has a wrong offset!");

// Function MarvelAI.AIPathSelectComponent.GetPathToTargetFromActor
// 0x0068 (0x0068 - 0x0000)
struct AIPathSelectComponent_GetPathToTargetFromActor final
{
public:
	class AActor*                                 PathSelector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorMovingAlong;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0018(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ShouldUpdateProgressInPath;                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIPathSelectComponent_GetPathToTargetFromActor) == 0x000008, "Wrong alignment on AIPathSelectComponent_GetPathToTargetFromActor");
static_assert(sizeof(AIPathSelectComponent_GetPathToTargetFromActor) == 0x000068, "Wrong size on AIPathSelectComponent_GetPathToTargetFromActor");
static_assert(offsetof(AIPathSelectComponent_GetPathToTargetFromActor, PathSelector) == 0x000000, "Member 'AIPathSelectComponent_GetPathToTargetFromActor::PathSelector' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTargetFromActor, ActorMovingAlong) == 0x000008, "Member 'AIPathSelectComponent_GetPathToTargetFromActor::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTargetFromActor, Target) == 0x000010, "Member 'AIPathSelectComponent_GetPathToTargetFromActor::Target' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTargetFromActor, OutWayPointPath) == 0x000018, "Member 'AIPathSelectComponent_GetPathToTargetFromActor::OutWayPointPath' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTargetFromActor, ShouldUpdateProgressInPath) == 0x000060, "Member 'AIPathSelectComponent_GetPathToTargetFromActor::ShouldUpdateProgressInPath' has a wrong offset!");

// Function MarvelAI.AIPathSelectComponent.GetPathToTarget
// 0x0060 (0x0060 - 0x0000)
struct AIPathSelectComponent_GetPathToTarget final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ShouldUpdateProgressInPath;                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIPathSelectComponent_GetPathToTarget) == 0x000008, "Wrong alignment on AIPathSelectComponent_GetPathToTarget");
static_assert(sizeof(AIPathSelectComponent_GetPathToTarget) == 0x000060, "Wrong size on AIPathSelectComponent_GetPathToTarget");
static_assert(offsetof(AIPathSelectComponent_GetPathToTarget, ActorMovingAlong) == 0x000000, "Member 'AIPathSelectComponent_GetPathToTarget::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTarget, Target) == 0x000008, "Member 'AIPathSelectComponent_GetPathToTarget::Target' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTarget, OutWayPointPath) == 0x000010, "Member 'AIPathSelectComponent_GetPathToTarget::OutWayPointPath' has a wrong offset!");
static_assert(offsetof(AIPathSelectComponent_GetPathToTarget, ShouldUpdateProgressInPath) == 0x000058, "Member 'AIPathSelectComponent_GetPathToTarget::ShouldUpdateProgressInPath' has a wrong offset!");

// Function MarvelAI.AIServerRequestServices.GetAILabServerUrl
// 0x0010 (0x0010 - 0x0000)
struct AIServerRequestServices_GetAILabServerUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServerRequestServices_GetAILabServerUrl) == 0x000008, "Wrong alignment on AIServerRequestServices_GetAILabServerUrl");
static_assert(sizeof(AIServerRequestServices_GetAILabServerUrl) == 0x000010, "Wrong size on AIServerRequestServices_GetAILabServerUrl");
static_assert(offsetof(AIServerRequestServices_GetAILabServerUrl, ReturnValue) == 0x000000, "Member 'AIServerRequestServices_GetAILabServerUrl::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIServerRequestServices.RequestTimer
// 0x0001 (0x0001 - 0x0000)
struct AIServerRequestServices_RequestTimer final
{
public:
	bool                                          bRetry;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServerRequestServices_RequestTimer) == 0x000001, "Wrong alignment on AIServerRequestServices_RequestTimer");
static_assert(sizeof(AIServerRequestServices_RequestTimer) == 0x000001, "Wrong size on AIServerRequestServices_RequestTimer");
static_assert(offsetof(AIServerRequestServices_RequestTimer, bRetry) == 0x000000, "Member 'AIServerRequestServices_RequestTimer::bRetry' has a wrong offset!");

// Function MarvelAI.AIServerRequestServices.SetAILabServerUrl
// 0x0020 (0x0020 - 0x0000)
struct AIServerRequestServices_SetAILabServerUrl final
{
public:
	class FString                                 NewUrl;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIServerRequestServices_SetAILabServerUrl) == 0x000008, "Wrong alignment on AIServerRequestServices_SetAILabServerUrl");
static_assert(sizeof(AIServerRequestServices_SetAILabServerUrl) == 0x000020, "Wrong size on AIServerRequestServices_SetAILabServerUrl");
static_assert(offsetof(AIServerRequestServices_SetAILabServerUrl, NewUrl) == 0x000000, "Member 'AIServerRequestServices_SetAILabServerUrl::NewUrl' has a wrong offset!");
static_assert(offsetof(AIServerRequestServices_SetAILabServerUrl, Msg) == 0x000010, "Member 'AIServerRequestServices_SetAILabServerUrl::Msg' has a wrong offset!");

// Function MarvelAI.MarvelAIStandPointManager.FindStandPoint
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIStandPointManager_FindStandPoint final
{
public:
	class FName                                   PointName;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStandPointBase*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStandPointManager_FindStandPoint) == 0x000008, "Wrong alignment on MarvelAIStandPointManager_FindStandPoint");
static_assert(sizeof(MarvelAIStandPointManager_FindStandPoint) == 0x000018, "Wrong size on MarvelAIStandPointManager_FindStandPoint");
static_assert(offsetof(MarvelAIStandPointManager_FindStandPoint, PointName) == 0x000000, "Member 'MarvelAIStandPointManager_FindStandPoint::PointName' has a wrong offset!");
static_assert(offsetof(MarvelAIStandPointManager_FindStandPoint, ReturnValue) == 0x000010, "Member 'MarvelAIStandPointManager_FindStandPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIStandPointManager.RegisterStandPoint
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIStandPointManager_RegisterStandPoint final
{
public:
	class AStandPointBase*                        StandPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStandPointManager_RegisterStandPoint) == 0x000008, "Wrong alignment on MarvelAIStandPointManager_RegisterStandPoint");
static_assert(sizeof(MarvelAIStandPointManager_RegisterStandPoint) == 0x000008, "Wrong size on MarvelAIStandPointManager_RegisterStandPoint");
static_assert(offsetof(MarvelAIStandPointManager_RegisterStandPoint, StandPoint) == 0x000000, "Member 'MarvelAIStandPointManager_RegisterStandPoint::StandPoint' has a wrong offset!");

// Function MarvelAI.MarvelAIStandPointManager.UnRegisterStandPoint
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIStandPointManager_UnRegisterStandPoint final
{
public:
	class AStandPointBase*                        StandPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStandPointManager_UnRegisterStandPoint) == 0x000008, "Wrong alignment on MarvelAIStandPointManager_UnRegisterStandPoint");
static_assert(sizeof(MarvelAIStandPointManager_UnRegisterStandPoint) == 0x000008, "Wrong size on MarvelAIStandPointManager_UnRegisterStandPoint");
static_assert(offsetof(MarvelAIStandPointManager_UnRegisterStandPoint, StandPoint) == 0x000000, "Member 'MarvelAIStandPointManager_UnRegisterStandPoint::StandPoint' has a wrong offset!");

// Function MarvelAI.AIStrategyAreaVolume.GetGroupState
// 0x0004 (0x0004 - 0x0000)
struct AIStrategyAreaVolume_GetGroupState final
{
public:
	EGroupState                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIStrategyAreaVolume_GetGroupState) == 0x000004, "Wrong alignment on AIStrategyAreaVolume_GetGroupState");
static_assert(sizeof(AIStrategyAreaVolume_GetGroupState) == 0x000004, "Wrong size on AIStrategyAreaVolume_GetGroupState");
static_assert(offsetof(AIStrategyAreaVolume_GetGroupState, ReturnValue) == 0x000000, "Member 'AIStrategyAreaVolume_GetGroupState::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIStrategyAreaVolume.GetMatchState
// 0x0004 (0x0004 - 0x0000)
struct AIStrategyAreaVolume_GetMatchState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIStrategyAreaVolume_GetMatchState) == 0x000004, "Wrong alignment on AIStrategyAreaVolume_GetMatchState");
static_assert(sizeof(AIStrategyAreaVolume_GetMatchState) == 0x000004, "Wrong size on AIStrategyAreaVolume_GetMatchState");
static_assert(offsetof(AIStrategyAreaVolume_GetMatchState, ReturnValue) == 0x000000, "Member 'AIStrategyAreaVolume_GetMatchState::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIStrategyAreaVolume.GetStrategyType
// 0x0004 (0x0004 - 0x0000)
struct AIStrategyAreaVolume_GetStrategyType final
{
public:
	EStrategyType                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIStrategyAreaVolume_GetStrategyType) == 0x000004, "Wrong alignment on AIStrategyAreaVolume_GetStrategyType");
static_assert(sizeof(AIStrategyAreaVolume_GetStrategyType) == 0x000004, "Wrong size on AIStrategyAreaVolume_GetStrategyType");
static_assert(offsetof(AIStrategyAreaVolume_GetStrategyType, ReturnValue) == 0x000000, "Member 'AIStrategyAreaVolume_GetStrategyType::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetAbilityByUsageID
// 0x0018 (0x0018 - 0x0000)
struct AIAbilityUsageLibrary_GetAbilityByUsageID final
{
public:
	int32                                         AbilityUsageID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelAIController*                    OwnerController;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageLibrary_GetAbilityByUsageID) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetAbilityByUsageID");
static_assert(sizeof(AIAbilityUsageLibrary_GetAbilityByUsageID) == 0x000018, "Wrong size on AIAbilityUsageLibrary_GetAbilityByUsageID");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityByUsageID, AbilityUsageID) == 0x000000, "Member 'AIAbilityUsageLibrary_GetAbilityByUsageID::AbilityUsageID' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityByUsageID, OwnerController) == 0x000008, "Member 'AIAbilityUsageLibrary_GetAbilityByUsageID::OwnerController' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityByUsageID, ReturnValue) == 0x000010, "Member 'AIAbilityUsageLibrary_GetAbilityByUsageID::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetAbilityFromContext
// 0x0040 (0x0040 - 0x0000)
struct AIAbilityUsageLibrary_GetAbilityFromContext final
{
public:
	struct FRequiredAIDataForAutoAbility          AutoAbilityContext;                                // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageLibrary_GetAbilityFromContext) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetAbilityFromContext");
static_assert(sizeof(AIAbilityUsageLibrary_GetAbilityFromContext) == 0x000040, "Wrong size on AIAbilityUsageLibrary_GetAbilityFromContext");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityFromContext, AutoAbilityContext) == 0x000000, "Member 'AIAbilityUsageLibrary_GetAbilityFromContext::AutoAbilityContext' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityFromContext, ReturnValue) == 0x000038, "Member 'AIAbilityUsageLibrary_GetAbilityFromContext::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetAbilityUsageDescription
// 0x00F8 (0x00F8 - 0x0000)
struct AIAbilityUsageLibrary_GetAbilityUsageDescription final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00E8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageLibrary_GetAbilityUsageDescription) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetAbilityUsageDescription");
static_assert(sizeof(AIAbilityUsageLibrary_GetAbilityUsageDescription) == 0x0000F8, "Wrong size on AIAbilityUsageLibrary_GetAbilityUsageDescription");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityUsageDescription, AbilityUsage) == 0x000000, "Member 'AIAbilityUsageLibrary_GetAbilityUsageDescription::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetAbilityUsageDescription, ReturnValue) == 0x0000E8, "Member 'AIAbilityUsageLibrary_GetAbilityUsageDescription::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetTargetLocation
// 0x0100 (0x0100 - 0x0000)
struct AIAbilityUsageLibrary_GetTargetLocation final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageLibrary_GetTargetLocation) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetTargetLocation");
static_assert(sizeof(AIAbilityUsageLibrary_GetTargetLocation) == 0x000100, "Wrong size on AIAbilityUsageLibrary_GetTargetLocation");
static_assert(offsetof(AIAbilityUsageLibrary_GetTargetLocation, AbilityUsage) == 0x000000, "Member 'AIAbilityUsageLibrary_GetTargetLocation::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetTargetLocation, ReturnValue) == 0x0000E8, "Member 'AIAbilityUsageLibrary_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetUsageConfig
// 0x0350 (0x0350 - 0x0000)
struct AIAbilityUsageLibrary_GetUsageConfig final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAIAutoAbilityTable              ReturnValue;                                       // 0x00E8(0x0268)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageLibrary_GetUsageConfig) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetUsageConfig");
static_assert(sizeof(AIAbilityUsageLibrary_GetUsageConfig) == 0x000350, "Wrong size on AIAbilityUsageLibrary_GetUsageConfig");
static_assert(offsetof(AIAbilityUsageLibrary_GetUsageConfig, AbilityUsage) == 0x000000, "Member 'AIAbilityUsageLibrary_GetUsageConfig::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetUsageConfig, ReturnValue) == 0x0000E8, "Member 'AIAbilityUsageLibrary_GetUsageConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.GetUsageConfigFromContext
// 0x02A8 (0x02A8 - 0x0000)
struct AIAbilityUsageLibrary_GetUsageConfigFromContext final
{
public:
	struct FRequiredAIDataForAutoAbility          AutoAbilityContext;                                // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelAIAutoAbilityTable              OutUsageConfig;                                    // 0x0038(0x0268)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityUsageLibrary_GetUsageConfigFromContext) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_GetUsageConfigFromContext");
static_assert(sizeof(AIAbilityUsageLibrary_GetUsageConfigFromContext) == 0x0002A8, "Wrong size on AIAbilityUsageLibrary_GetUsageConfigFromContext");
static_assert(offsetof(AIAbilityUsageLibrary_GetUsageConfigFromContext, AutoAbilityContext) == 0x000000, "Member 'AIAbilityUsageLibrary_GetUsageConfigFromContext::AutoAbilityContext' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetUsageConfigFromContext, OutUsageConfig) == 0x000038, "Member 'AIAbilityUsageLibrary_GetUsageConfigFromContext::OutUsageConfig' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_GetUsageConfigFromContext, ReturnValue) == 0x0002A0, "Member 'AIAbilityUsageLibrary_GetUsageConfigFromContext::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageLibrary.IsValidAbilityUsage
// 0x00F0 (0x00F0 - 0x0000)
struct AIAbilityUsageLibrary_IsValidAbilityUsage final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityUsageLibrary_IsValidAbilityUsage) == 0x000008, "Wrong alignment on AIAbilityUsageLibrary_IsValidAbilityUsage");
static_assert(sizeof(AIAbilityUsageLibrary_IsValidAbilityUsage) == 0x0000F0, "Wrong size on AIAbilityUsageLibrary_IsValidAbilityUsage");
static_assert(offsetof(AIAbilityUsageLibrary_IsValidAbilityUsage, AbilityUsage) == 0x000000, "Member 'AIAbilityUsageLibrary_IsValidAbilityUsage::AbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageLibrary_IsValidAbilityUsage, ReturnValue) == 0x0000E8, "Member 'AIAbilityUsageLibrary_IsValidAbilityUsage::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsagePointCondition.CheckIsValidPoint
// 0x0080 (0x0080 - 0x0000)
struct AIAbilityUsagePointCondition_CheckIsValidPoint final
{
public:
	struct FAbilityUsagePointData                 StandPoint;                                        // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AMarvelAIController*              AIController;                                      // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityUsagePointCondition_CheckIsValidPoint) == 0x000008, "Wrong alignment on AIAbilityUsagePointCondition_CheckIsValidPoint");
static_assert(sizeof(AIAbilityUsagePointCondition_CheckIsValidPoint) == 0x000080, "Wrong size on AIAbilityUsagePointCondition_CheckIsValidPoint");
static_assert(offsetof(AIAbilityUsagePointCondition_CheckIsValidPoint, StandPoint) == 0x000000, "Member 'AIAbilityUsagePointCondition_CheckIsValidPoint::StandPoint' has a wrong offset!");
static_assert(offsetof(AIAbilityUsagePointCondition_CheckIsValidPoint, AIController) == 0x000070, "Member 'AIAbilityUsagePointCondition_CheckIsValidPoint::AIController' has a wrong offset!");
static_assert(offsetof(AIAbilityUsagePointCondition_CheckIsValidPoint, ReturnValue) == 0x000078, "Member 'AIAbilityUsagePointCondition_CheckIsValidPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityUsagePointCalculator.CalculateUsagePointPosition
// 0x0080 (0x0080 - 0x0000)
struct AIAbilityUsagePointCalculator_CalculateUsagePointPosition final
{
public:
	struct FAbilityUsagePointData                 StandPoint;                                        // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    AIController;                                      // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAbilityUsagePointCalculator_CalculateUsagePointPosition) == 0x000008, "Wrong alignment on AIAbilityUsagePointCalculator_CalculateUsagePointPosition");
static_assert(sizeof(AIAbilityUsagePointCalculator_CalculateUsagePointPosition) == 0x000080, "Wrong size on AIAbilityUsagePointCalculator_CalculateUsagePointPosition");
static_assert(offsetof(AIAbilityUsagePointCalculator_CalculateUsagePointPosition, StandPoint) == 0x000000, "Member 'AIAbilityUsagePointCalculator_CalculateUsagePointPosition::StandPoint' has a wrong offset!");
static_assert(offsetof(AIAbilityUsagePointCalculator_CalculateUsagePointPosition, AIController) == 0x000070, "Member 'AIAbilityUsagePointCalculator_CalculateUsagePointPosition::AIController' has a wrong offset!");
static_assert(offsetof(AIAbilityUsagePointCalculator_CalculateUsagePointPosition, ReturnValue) == 0x000078, "Member 'AIAbilityUsagePointCalculator_CalculateUsagePointPosition::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityPreAction.DoPreAction
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityPreAction_DoPreAction final
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityPreAction_DoPreAction) == 0x000008, "Wrong alignment on AIAbilityPreAction_DoPreAction");
static_assert(sizeof(AIAbilityPreAction_DoPreAction) == 0x000010, "Wrong size on AIAbilityPreAction_DoPreAction");
static_assert(offsetof(AIAbilityPreAction_DoPreAction, Ability) == 0x000000, "Member 'AIAbilityPreAction_DoPreAction::Ability' has a wrong offset!");
static_assert(offsetof(AIAbilityPreAction_DoPreAction, AIController) == 0x000008, "Member 'AIAbilityPreAction_DoPreAction::AIController' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageAsset.DoAllPreActions
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityUsageAsset_DoAllPreActions final
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageAsset_DoAllPreActions) == 0x000008, "Wrong alignment on AIAbilityUsageAsset_DoAllPreActions");
static_assert(sizeof(AIAbilityUsageAsset_DoAllPreActions) == 0x000010, "Wrong size on AIAbilityUsageAsset_DoAllPreActions");
static_assert(offsetof(AIAbilityUsageAsset_DoAllPreActions, Ability) == 0x000000, "Member 'AIAbilityUsageAsset_DoAllPreActions::Ability' has a wrong offset!");
static_assert(offsetof(AIAbilityUsageAsset_DoAllPreActions, AIController) == 0x000008, "Member 'AIAbilityUsageAsset_DoAllPreActions::AIController' has a wrong offset!");

// Function MarvelAI.AIAbilityUsageAsset.ShouldSkipCanActivateCheck
// 0x0001 (0x0001 - 0x0000)
struct AIAbilityUsageAsset_ShouldSkipCanActivateCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityUsageAsset_ShouldSkipCanActivateCheck) == 0x000001, "Wrong alignment on AIAbilityUsageAsset_ShouldSkipCanActivateCheck");
static_assert(sizeof(AIAbilityUsageAsset_ShouldSkipCanActivateCheck) == 0x000001, "Wrong size on AIAbilityUsageAsset_ShouldSkipCanActivateCheck");
static_assert(offsetof(AIAbilityUsageAsset_ShouldSkipCanActivateCheck, ReturnValue) == 0x000000, "Member 'AIAbilityUsageAsset_ShouldSkipCanActivateCheck::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAutoAbilitySolver.Init
// 0x0010 (0x0010 - 0x0000)
struct AIAutoAbilitySolver_Init final
{
public:
	TArray<int32>                                 UsageList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAutoAbilitySolver_Init) == 0x000008, "Wrong alignment on AIAutoAbilitySolver_Init");
static_assert(sizeof(AIAutoAbilitySolver_Init) == 0x000010, "Wrong size on AIAutoAbilitySolver_Init");
static_assert(offsetof(AIAutoAbilitySolver_Init, UsageList) == 0x000000, "Member 'AIAutoAbilitySolver_Init::UsageList' has a wrong offset!");

// Function MarvelAI.AIAutoAbilitySolver.TryGetAbilityUsage
// 0x0128 (0x0128 - 0x0000)
struct AIAutoAbilitySolver_TryGetAbilityUsage final
{
public:
	struct FRequiredAIDataForAutoAbility          RequiredData;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAIAbilityUsage                        OutAbilityUsage;                                   // 0x0038(0x00E8)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIAutoAbilitySolver_TryGetAbilityUsage) == 0x000008, "Wrong alignment on AIAutoAbilitySolver_TryGetAbilityUsage");
static_assert(sizeof(AIAutoAbilitySolver_TryGetAbilityUsage) == 0x000128, "Wrong size on AIAutoAbilitySolver_TryGetAbilityUsage");
static_assert(offsetof(AIAutoAbilitySolver_TryGetAbilityUsage, RequiredData) == 0x000000, "Member 'AIAutoAbilitySolver_TryGetAbilityUsage::RequiredData' has a wrong offset!");
static_assert(offsetof(AIAutoAbilitySolver_TryGetAbilityUsage, OutAbilityUsage) == 0x000038, "Member 'AIAutoAbilitySolver_TryGetAbilityUsage::OutAbilityUsage' has a wrong offset!");
static_assert(offsetof(AIAutoAbilitySolver_TryGetAbilityUsage, ReturnValue) == 0x000120, "Member 'AIAutoAbilitySolver_TryGetAbilityUsage::ReturnValue' has a wrong offset!");

// Function MarvelAI.BattleScoreSubsystem.GetBattleScoreSubsystem
// 0x0010 (0x0010 - 0x0000)
struct BattleScoreSubsystem_GetBattleScoreSubsystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattleScoreSubsystem*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleScoreSubsystem_GetBattleScoreSubsystem) == 0x000008, "Wrong alignment on BattleScoreSubsystem_GetBattleScoreSubsystem");
static_assert(sizeof(BattleScoreSubsystem_GetBattleScoreSubsystem) == 0x000010, "Wrong size on BattleScoreSubsystem_GetBattleScoreSubsystem");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreSubsystem, WorldContextObject) == 0x000000, "Member 'BattleScoreSubsystem_GetBattleScoreSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreSubsystem, ReturnValue) == 0x000008, "Member 'BattleScoreSubsystem_GetBattleScoreSubsystem::ReturnValue' has a wrong offset!");

// Function MarvelAI.BattleScoreSubsystem.GetBattleScoreForActor
// 0x0010 (0x0010 - 0x0000)
struct BattleScoreSubsystem_GetBattleScoreForActor final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleScoreSubsystem_GetBattleScoreForActor) == 0x000008, "Wrong alignment on BattleScoreSubsystem_GetBattleScoreForActor");
static_assert(sizeof(BattleScoreSubsystem_GetBattleScoreForActor) == 0x000010, "Wrong size on BattleScoreSubsystem_GetBattleScoreForActor");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForActor, TargetActor) == 0x000000, "Member 'BattleScoreSubsystem_GetBattleScoreForActor::TargetActor' has a wrong offset!");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForActor, ReturnValue) == 0x000008, "Member 'BattleScoreSubsystem_GetBattleScoreForActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.BattleScoreSubsystem.GetBattleScoreForCharacter
// 0x0010 (0x0010 - 0x0000)
struct BattleScoreSubsystem_GetBattleScoreForCharacter final
{
public:
	const class AMarvelBaseCharacter*             HeroCharacter;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleScoreSubsystem_GetBattleScoreForCharacter) == 0x000008, "Wrong alignment on BattleScoreSubsystem_GetBattleScoreForCharacter");
static_assert(sizeof(BattleScoreSubsystem_GetBattleScoreForCharacter) == 0x000010, "Wrong size on BattleScoreSubsystem_GetBattleScoreForCharacter");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForCharacter, HeroCharacter) == 0x000000, "Member 'BattleScoreSubsystem_GetBattleScoreForCharacter::HeroCharacter' has a wrong offset!");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForCharacter, ReturnValue) == 0x000008, "Member 'BattleScoreSubsystem_GetBattleScoreForCharacter::ReturnValue' has a wrong offset!");

// Function MarvelAI.BattleScoreSubsystem.GetBattleScoreForCharacterGroup
// 0x0018 (0x0018 - 0x0000)
struct BattleScoreSubsystem_GetBattleScoreForCharacterGroup final
{
public:
	TArray<class AMarvelBaseCharacter*>           CharacterGroup;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleScoreSubsystem_GetBattleScoreForCharacterGroup) == 0x000008, "Wrong alignment on BattleScoreSubsystem_GetBattleScoreForCharacterGroup");
static_assert(sizeof(BattleScoreSubsystem_GetBattleScoreForCharacterGroup) == 0x000018, "Wrong size on BattleScoreSubsystem_GetBattleScoreForCharacterGroup");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForCharacterGroup, CharacterGroup) == 0x000000, "Member 'BattleScoreSubsystem_GetBattleScoreForCharacterGroup::CharacterGroup' has a wrong offset!");
static_assert(offsetof(BattleScoreSubsystem_GetBattleScoreForCharacterGroup, ReturnValue) == 0x000010, "Member 'BattleScoreSubsystem_GetBattleScoreForCharacterGroup::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTD_CampCheck.Check
// 0x0010 (0x0010 - 0x0000)
struct BTD_CampCheck_Check final
{
public:
	const class UBehaviorTreeComponent*           OwnerComp;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTD_CampCheck_Check) == 0x000008, "Wrong alignment on BTD_CampCheck_Check");
static_assert(sizeof(BTD_CampCheck_Check) == 0x000010, "Wrong size on BTD_CampCheck_Check");
static_assert(offsetof(BTD_CampCheck_Check, OwnerComp) == 0x000000, "Member 'BTD_CampCheck_Check::OwnerComp' has a wrong offset!");
static_assert(offsetof(BTD_CampCheck_Check, ReturnValue) == 0x000008, "Member 'BTD_CampCheck_Check::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTD_CampCheck.CheckOwnershipType
// 0x0010 (0x0010 - 0x0000)
struct BTD_CampCheck_CheckOwnershipType final
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 BattleSide;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTD_CampCheck_CheckOwnershipType) == 0x000008, "Wrong alignment on BTD_CampCheck_CheckOwnershipType");
static_assert(sizeof(BTD_CampCheck_CheckOwnershipType) == 0x000010, "Wrong size on BTD_CampCheck_CheckOwnershipType");
static_assert(offsetof(BTD_CampCheck_CheckOwnershipType, OwnerCharacter) == 0x000000, "Member 'BTD_CampCheck_CheckOwnershipType::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BTD_CampCheck_CheckOwnershipType, BattleSide) == 0x000008, "Member 'BTD_CampCheck_CheckOwnershipType::BattleSide' has a wrong offset!");
static_assert(offsetof(BTD_CampCheck_CheckOwnershipType, ReturnValue) == 0x000009, "Member 'BTD_CampCheck_CheckOwnershipType::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTD_CampCheck.GetScoreForSide
// 0x0010 (0x0010 - 0x0000)
struct BTD_CampCheck_GetScoreForSide final
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 BattleSide;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTD_CampCheck_GetScoreForSide) == 0x000008, "Wrong alignment on BTD_CampCheck_GetScoreForSide");
static_assert(sizeof(BTD_CampCheck_GetScoreForSide) == 0x000010, "Wrong size on BTD_CampCheck_GetScoreForSide");
static_assert(offsetof(BTD_CampCheck_GetScoreForSide, OwnerCharacter) == 0x000000, "Member 'BTD_CampCheck_GetScoreForSide::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BTD_CampCheck_GetScoreForSide, BattleSide) == 0x000008, "Member 'BTD_CampCheck_GetScoreForSide::BattleSide' has a wrong offset!");
static_assert(offsetof(BTD_CampCheck_GetScoreForSide, ReturnValue) == 0x00000C, "Member 'BTD_CampCheck_GetScoreForSide::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTD_PayloadCheck.Check
// 0x0014 (0x0014 - 0x0000)
struct BTD_PayloadCheck_Check final
{
public:
	int32                                         Stage;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                Ownership;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTD_PayloadCheck_Check) == 0x000004, "Wrong alignment on BTD_PayloadCheck_Check");
static_assert(sizeof(BTD_PayloadCheck_Check) == 0x000014, "Wrong size on BTD_PayloadCheck_Check");
static_assert(offsetof(BTD_PayloadCheck_Check, Stage) == 0x000000, "Member 'BTD_PayloadCheck_Check::Stage' has a wrong offset!");
static_assert(offsetof(BTD_PayloadCheck_Check, Score) == 0x000004, "Member 'BTD_PayloadCheck_Check::Score' has a wrong offset!");
static_assert(offsetof(BTD_PayloadCheck_Check, Speed) == 0x000008, "Member 'BTD_PayloadCheck_Check::Speed' has a wrong offset!");
static_assert(offsetof(BTD_PayloadCheck_Check, Team) == 0x00000C, "Member 'BTD_PayloadCheck_Check::Team' has a wrong offset!");
static_assert(offsetof(BTD_PayloadCheck_Check, Ownership) == 0x000010, "Member 'BTD_PayloadCheck_Check::Ownership' has a wrong offset!");
static_assert(offsetof(BTD_PayloadCheck_Check, ReturnValue) == 0x000011, "Member 'BTD_PayloadCheck_Check::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTD_SpaceDistCheck.Check
// 0x0010 (0x0010 - 0x0000)
struct BTD_SpaceDistCheck_Check final
{
public:
	class UBehaviorTreeComponent*                 OwnerComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTD_SpaceDistCheck_Check) == 0x000008, "Wrong alignment on BTD_SpaceDistCheck_Check");
static_assert(sizeof(BTD_SpaceDistCheck_Check) == 0x000010, "Wrong size on BTD_SpaceDistCheck_Check");
static_assert(offsetof(BTD_SpaceDistCheck_Check, OwnerComp) == 0x000000, "Member 'BTD_SpaceDistCheck_Check::OwnerComp' has a wrong offset!");
static_assert(offsetof(BTD_SpaceDistCheck_Check, ReturnValue) == 0x000008, "Member 'BTD_SpaceDistCheck_Check::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_SelectTargetNew.OnTargetTakingDamage
// 0x0028 (0x0028 - 0x0000)
struct BTS_SelectTargetNew_OnTargetTakingDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SelectTargetNew_OnTargetTakingDamage) == 0x000008, "Wrong alignment on BTS_SelectTargetNew_OnTargetTakingDamage");
static_assert(sizeof(BTS_SelectTargetNew_OnTargetTakingDamage) == 0x000028, "Wrong size on BTS_SelectTargetNew_OnTargetTakingDamage");
static_assert(offsetof(BTS_SelectTargetNew_OnTargetTakingDamage, InSourceAvatar) == 0x000000, "Member 'BTS_SelectTargetNew_OnTargetTakingDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(BTS_SelectTargetNew_OnTargetTakingDamage, InTargetAvatar) == 0x000008, "Member 'BTS_SelectTargetNew_OnTargetTakingDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(BTS_SelectTargetNew_OnTargetTakingDamage, ModifierParameterHandle) == 0x000010, "Member 'BTS_SelectTargetNew_OnTargetTakingDamage::ModifierParameterHandle' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.GetAIUserName
// 0x0018 (0x0018 - 0x0000)
struct BTS_SendChatMessage_GetAIUserName final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_GetAIUserName) == 0x000008, "Wrong alignment on BTS_SendChatMessage_GetAIUserName");
static_assert(sizeof(BTS_SendChatMessage_GetAIUserName) == 0x000018, "Wrong size on BTS_SendChatMessage_GetAIUserName");
static_assert(offsetof(BTS_SendChatMessage_GetAIUserName, Target) == 0x000000, "Member 'BTS_SendChatMessage_GetAIUserName::Target' has a wrong offset!");
static_assert(offsetof(BTS_SendChatMessage_GetAIUserName, ReturnValue) == 0x000008, "Member 'BTS_SendChatMessage_GetAIUserName::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnAllDeath
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnAllDeath final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnAllDeath) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnAllDeath");
static_assert(sizeof(BTS_SendChatMessage_OnAllDeath) == 0x000028, "Wrong size on BTS_SendChatMessage_OnAllDeath");
static_assert(offsetof(BTS_SendChatMessage_OnAllDeath, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnAllDeath::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnDeath
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnDeath final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnDeath) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnDeath");
static_assert(sizeof(BTS_SendChatMessage_OnDeath) == 0x000028, "Wrong size on BTS_SendChatMessage_OnDeath");
static_assert(offsetof(BTS_SendChatMessage_OnDeath, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnDeath::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnEnergyFull
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnEnergyFull final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnEnergyFull) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnEnergyFull");
static_assert(sizeof(BTS_SendChatMessage_OnEnergyFull) == 0x000028, "Wrong size on BTS_SendChatMessage_OnEnergyFull");
static_assert(offsetof(BTS_SendChatMessage_OnEnergyFull, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnEnergyFull::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnGameBegin
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnGameBegin final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnGameBegin) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnGameBegin");
static_assert(sizeof(BTS_SendChatMessage_OnGameBegin) == 0x000028, "Wrong size on BTS_SendChatMessage_OnGameBegin");
static_assert(offsetof(BTS_SendChatMessage_OnGameBegin, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnGameBegin::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnGameEnd
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnGameEnd final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnGameEnd) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnGameEnd");
static_assert(sizeof(BTS_SendChatMessage_OnGameEnd) == 0x000028, "Wrong size on BTS_SendChatMessage_OnGameEnd");
static_assert(offsetof(BTS_SendChatMessage_OnGameEnd, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnGameEnd::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnHeal
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnHeal final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnHeal) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnHeal");
static_assert(sizeof(BTS_SendChatMessage_OnHeal) == 0x000028, "Wrong size on BTS_SendChatMessage_OnHeal");
static_assert(offsetof(BTS_SendChatMessage_OnHeal, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnHeal::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct BTS_SendChatMessage_OnHealthChanged final
{
public:
	struct FAIEventArgs                           Args;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_OnHealthChanged) == 0x000008, "Wrong alignment on BTS_SendChatMessage_OnHealthChanged");
static_assert(sizeof(BTS_SendChatMessage_OnHealthChanged) == 0x000028, "Wrong size on BTS_SendChatMessage_OnHealthChanged");
static_assert(offsetof(BTS_SendChatMessage_OnHealthChanged, Args) == 0x000000, "Member 'BTS_SendChatMessage_OnHealthChanged::Args' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.SendChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BTS_SendChatMessage_SendChatMessage final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_SendChatMessage) == 0x000008, "Wrong alignment on BTS_SendChatMessage_SendChatMessage");
static_assert(sizeof(BTS_SendChatMessage_SendChatMessage) == 0x000018, "Wrong size on BTS_SendChatMessage_SendChatMessage");
static_assert(offsetof(BTS_SendChatMessage_SendChatMessage, Msg) == 0x000000, "Member 'BTS_SendChatMessage_SendChatMessage::Msg' has a wrong offset!");
static_assert(offsetof(BTS_SendChatMessage_SendChatMessage, Target) == 0x000010, "Member 'BTS_SendChatMessage_SendChatMessage::Target' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.SendMessage
// 0x0078 (0x0078 - 0x0000)
struct BTS_SendChatMessage_SendMessage final
{
public:
	struct FAICommunicateEx                       Communicate;                                       // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_SendMessage) == 0x000008, "Wrong alignment on BTS_SendChatMessage_SendMessage");
static_assert(sizeof(BTS_SendChatMessage_SendMessage) == 0x000078, "Wrong size on BTS_SendChatMessage_SendMessage");
static_assert(offsetof(BTS_SendChatMessage_SendMessage, Communicate) == 0x000000, "Member 'BTS_SendChatMessage_SendMessage::Communicate' has a wrong offset!");
static_assert(offsetof(BTS_SendChatMessage_SendMessage, Target) == 0x000070, "Member 'BTS_SendChatMessage_SendMessage::Target' has a wrong offset!");

// Function MarvelAI.BTS_SendChatMessage.SendQuickMessage
// 0x0010 (0x0010 - 0x0000)
struct BTS_SendChatMessage_SendQuickMessage final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_SendChatMessage_SendQuickMessage) == 0x000008, "Wrong alignment on BTS_SendChatMessage_SendQuickMessage");
static_assert(sizeof(BTS_SendChatMessage_SendQuickMessage) == 0x000010, "Wrong size on BTS_SendChatMessage_SendQuickMessage");
static_assert(offsetof(BTS_SendChatMessage_SendQuickMessage, ID) == 0x000000, "Member 'BTS_SendChatMessage_SendQuickMessage::ID' has a wrong offset!");
static_assert(offsetof(BTS_SendChatMessage_SendQuickMessage, Target) == 0x000008, "Member 'BTS_SendChatMessage_SendQuickMessage::Target' has a wrong offset!");

// Function MarvelAI.BTS_UpdateControlState.GetCampControlState
// 0x0010 (0x0010 - 0x0000)
struct BTS_UpdateControlState_GetCampControlState final
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTS_UpdateControlState_GetCampControlState) == 0x000008, "Wrong alignment on BTS_UpdateControlState_GetCampControlState");
static_assert(sizeof(BTS_UpdateControlState_GetCampControlState) == 0x000010, "Wrong size on BTS_UpdateControlState_GetCampControlState");
static_assert(offsetof(BTS_UpdateControlState_GetCampControlState, OwnerCharacter) == 0x000000, "Member 'BTS_UpdateControlState_GetCampControlState::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BTS_UpdateControlState_GetCampControlState, ReturnValue) == 0x000008, "Member 'BTS_UpdateControlState_GetCampControlState::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateControlState.GetCampProgress
// 0x0018 (0x0018 - 0x0000)
struct BTS_UpdateControlState_GetCampProgress final
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateControlState_GetCampProgress) == 0x000008, "Wrong alignment on BTS_UpdateControlState_GetCampProgress");
static_assert(sizeof(BTS_UpdateControlState_GetCampProgress) == 0x000018, "Wrong size on BTS_UpdateControlState_GetCampProgress");
static_assert(offsetof(BTS_UpdateControlState_GetCampProgress, OwnerCharacter) == 0x000000, "Member 'BTS_UpdateControlState_GetCampProgress::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BTS_UpdateControlState_GetCampProgress, ReturnValue) == 0x000008, "Member 'BTS_UpdateControlState_GetCampProgress::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateEscortStateNew.GetPayloadOwnership
// 0x0001 (0x0001 - 0x0000)
struct BTS_UpdateEscortStateNew_GetPayloadOwnership final
{
public:
	EOwnershipType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateEscortStateNew_GetPayloadOwnership) == 0x000001, "Wrong alignment on BTS_UpdateEscortStateNew_GetPayloadOwnership");
static_assert(sizeof(BTS_UpdateEscortStateNew_GetPayloadOwnership) == 0x000001, "Wrong size on BTS_UpdateEscortStateNew_GetPayloadOwnership");
static_assert(offsetof(BTS_UpdateEscortStateNew_GetPayloadOwnership, ReturnValue) == 0x000000, "Member 'BTS_UpdateEscortStateNew_GetPayloadOwnership::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateEscortStateNew.GetPayLoadProgress
// 0x0004 (0x0004 - 0x0000)
struct BTS_UpdateEscortStateNew_GetPayLoadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateEscortStateNew_GetPayLoadProgress) == 0x000004, "Wrong alignment on BTS_UpdateEscortStateNew_GetPayLoadProgress");
static_assert(sizeof(BTS_UpdateEscortStateNew_GetPayLoadProgress) == 0x000004, "Wrong size on BTS_UpdateEscortStateNew_GetPayLoadProgress");
static_assert(offsetof(BTS_UpdateEscortStateNew_GetPayLoadProgress, ReturnValue) == 0x000000, "Member 'BTS_UpdateEscortStateNew_GetPayLoadProgress::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateEscortStateNew.GetPayLoadSpeed
// 0x0004 (0x0004 - 0x0000)
struct BTS_UpdateEscortStateNew_GetPayLoadSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateEscortStateNew_GetPayLoadSpeed) == 0x000004, "Wrong alignment on BTS_UpdateEscortStateNew_GetPayLoadSpeed");
static_assert(sizeof(BTS_UpdateEscortStateNew_GetPayLoadSpeed) == 0x000004, "Wrong size on BTS_UpdateEscortStateNew_GetPayLoadSpeed");
static_assert(offsetof(BTS_UpdateEscortStateNew_GetPayLoadSpeed, ReturnValue) == 0x000000, "Member 'BTS_UpdateEscortStateNew_GetPayLoadSpeed::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTS_UpdateEscortStateNew.SetCurrentStage
// 0x0010 (0x0010 - 0x0000)
struct BTS_UpdateEscortStateNew_SetCurrentStage final
{
public:
	class FString                                 StageName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateEscortStateNew_SetCurrentStage) == 0x000008, "Wrong alignment on BTS_UpdateEscortStateNew_SetCurrentStage");
static_assert(sizeof(BTS_UpdateEscortStateNew_SetCurrentStage) == 0x000010, "Wrong size on BTS_UpdateEscortStateNew_SetCurrentStage");
static_assert(offsetof(BTS_UpdateEscortStateNew_SetCurrentStage, StageName) == 0x000000, "Member 'BTS_UpdateEscortStateNew_SetCurrentStage::StageName' has a wrong offset!");

// Function MarvelAI.BTS_UpdateMatchState.OnMatchStateChange
// 0x0001 (0x0001 - 0x0000)
struct BTS_UpdateMatchState_OnMatchStateChange final
{
public:
	EMatchState                                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_UpdateMatchState_OnMatchStateChange) == 0x000001, "Wrong alignment on BTS_UpdateMatchState_OnMatchStateChange");
static_assert(sizeof(BTS_UpdateMatchState_OnMatchStateChange) == 0x000001, "Wrong size on BTS_UpdateMatchState_OnMatchStateChange");
static_assert(offsetof(BTS_UpdateMatchState_OnMatchStateChange, NewState) == 0x000000, "Member 'BTS_UpdateMatchState_OnMatchStateChange::NewState' has a wrong offset!");

// Function MarvelAI.BTTask_ChaseTarget.OnActorBump
// 0x0198 (0x0198 - 0x0000)
struct BTTask_ChaseTarget_OnActorBump final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_ChaseTarget_OnActorBump) == 0x000008, "Wrong alignment on BTTask_ChaseTarget_OnActorBump");
static_assert(sizeof(BTTask_ChaseTarget_OnActorBump) == 0x000198, "Wrong size on BTTask_ChaseTarget_OnActorBump");
static_assert(offsetof(BTTask_ChaseTarget_OnActorBump, SelfActor) == 0x000000, "Member 'BTTask_ChaseTarget_OnActorBump::SelfActor' has a wrong offset!");
static_assert(offsetof(BTTask_ChaseTarget_OnActorBump, OtherActor) == 0x000008, "Member 'BTTask_ChaseTarget_OnActorBump::OtherActor' has a wrong offset!");
static_assert(offsetof(BTTask_ChaseTarget_OnActorBump, NormalImpulse) == 0x000010, "Member 'BTTask_ChaseTarget_OnActorBump::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BTTask_ChaseTarget_OnActorBump, Hit) == 0x000028, "Member 'BTTask_ChaseTarget_OnActorBump::Hit' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.IsTaskEnded
// 0x0001 (0x0001 - 0x0000)
struct BTTask_MarvelInstancedBase_IsTaskEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_IsTaskEnded) == 0x000001, "Wrong alignment on BTTask_MarvelInstancedBase_IsTaskEnded");
static_assert(sizeof(BTTask_MarvelInstancedBase_IsTaskEnded) == 0x000001, "Wrong size on BTTask_MarvelInstancedBase_IsTaskEnded");
static_assert(offsetof(BTTask_MarvelInstancedBase_IsTaskEnded, ReturnValue) == 0x000000, "Member 'BTTask_MarvelInstancedBase_IsTaskEnded::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.ReceiveOnTaskFinished
// 0x0018 (0x0018 - 0x0000)
struct BTTask_MarvelInstancedBase_ReceiveOnTaskFinished final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBTNodeResult                                 Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_MarvelInstancedBase_ReceiveOnTaskFinished) == 0x000008, "Wrong alignment on BTTask_MarvelInstancedBase_ReceiveOnTaskFinished");
static_assert(sizeof(BTTask_MarvelInstancedBase_ReceiveOnTaskFinished) == 0x000018, "Wrong size on BTTask_MarvelInstancedBase_ReceiveOnTaskFinished");
static_assert(offsetof(BTTask_MarvelInstancedBase_ReceiveOnTaskFinished, OwnerController) == 0x000000, "Member 'BTTask_MarvelInstancedBase_ReceiveOnTaskFinished::OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_MarvelInstancedBase_ReceiveOnTaskFinished, ControlledPawn) == 0x000008, "Member 'BTTask_MarvelInstancedBase_ReceiveOnTaskFinished::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTTask_MarvelInstancedBase_ReceiveOnTaskFinished, Result) == 0x000010, "Member 'BTTask_MarvelInstancedBase_ReceiveOnTaskFinished::Result' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.SetTickInterval
// 0x0004 (0x0004 - 0x0000)
struct BTTask_MarvelInstancedBase_SetTickInterval final
{
public:
	float                                         NewTickInterval;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_SetTickInterval) == 0x000004, "Wrong alignment on BTTask_MarvelInstancedBase_SetTickInterval");
static_assert(sizeof(BTTask_MarvelInstancedBase_SetTickInterval) == 0x000004, "Wrong size on BTTask_MarvelInstancedBase_SetTickInterval");
static_assert(offsetof(BTTask_MarvelInstancedBase_SetTickInterval, NewTickInterval) == 0x000000, "Member 'BTTask_MarvelInstancedBase_SetTickInterval::NewTickInterval' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.K2_GetControlledHero
// 0x0008 (0x0008 - 0x0000)
struct BTTask_MarvelInstancedBase_K2_GetControlledHero final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong alignment on BTTask_MarvelInstancedBase_K2_GetControlledHero");
static_assert(sizeof(BTTask_MarvelInstancedBase_K2_GetControlledHero) == 0x000008, "Wrong size on BTTask_MarvelInstancedBase_K2_GetControlledHero");
static_assert(offsetof(BTTask_MarvelInstancedBase_K2_GetControlledHero, ReturnValue) == 0x000000, "Member 'BTTask_MarvelInstancedBase_K2_GetControlledHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.K2_GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct BTTask_MarvelInstancedBase_K2_GetControlledPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong alignment on BTTask_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(sizeof(BTTask_MarvelInstancedBase_K2_GetControlledPawn) == 0x000008, "Wrong size on BTTask_MarvelInstancedBase_K2_GetControlledPawn");
static_assert(offsetof(BTTask_MarvelInstancedBase_K2_GetControlledPawn, ReturnValue) == 0x000000, "Member 'BTTask_MarvelInstancedBase_K2_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.K2_GetMarvelAIOwner
// 0x0008 (0x0008 - 0x0000)
struct BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner final
{
public:
	class AMarvelAIController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong alignment on BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(sizeof(BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner) == 0x000008, "Wrong size on BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner");
static_assert(offsetof(BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner, ReturnValue) == 0x000000, "Member 'BTTask_MarvelInstancedBase_K2_GetMarvelAIOwner::ReturnValue' has a wrong offset!");

// Function MarvelAI.BTTask_MarvelInstancedBase.K2_GetOwnerBTComp
// 0x0008 (0x0008 - 0x0000)
struct BTTask_MarvelInstancedBase_K2_GetOwnerBTComp final
{
public:
	class UBehaviorTreeComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong alignment on BTTask_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(sizeof(BTTask_MarvelInstancedBase_K2_GetOwnerBTComp) == 0x000008, "Wrong size on BTTask_MarvelInstancedBase_K2_GetOwnerBTComp");
static_assert(offsetof(BTTask_MarvelInstancedBase_K2_GetOwnerBTComp, ReturnValue) == 0x000000, "Member 'BTTask_MarvelInstancedBase_K2_GetOwnerBTComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationExtraConfig.GetConfigName
// 0x0010 (0x0010 - 0x0000)
struct AIAbilityActivationExtraConfig_GetConfigName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityActivationExtraConfig_GetConfigName) == 0x000008, "Wrong alignment on AIAbilityActivationExtraConfig_GetConfigName");
static_assert(sizeof(AIAbilityActivationExtraConfig_GetConfigName) == 0x000010, "Wrong size on AIAbilityActivationExtraConfig_GetConfigName");
static_assert(offsetof(AIAbilityActivationExtraConfig_GetConfigName, ReturnValue) == 0x000000, "Member 'AIAbilityActivationExtraConfig_GetConfigName::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIAbilityActivationExtraConfig.InitExtraConfig
// 0x0008 (0x0008 - 0x0000)
struct AIAbilityActivationExtraConfig_InitExtraConfig final
{
public:
	class UObject*                                AIOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIAbilityActivationExtraConfig_InitExtraConfig) == 0x000008, "Wrong alignment on AIAbilityActivationExtraConfig_InitExtraConfig");
static_assert(sizeof(AIAbilityActivationExtraConfig_InitExtraConfig) == 0x000008, "Wrong size on AIAbilityActivationExtraConfig_InitExtraConfig");
static_assert(offsetof(AIAbilityActivationExtraConfig_InitExtraConfig, AIOwner) == 0x000000, "Member 'AIAbilityActivationExtraConfig_InitExtraConfig::AIOwner' has a wrong offset!");

// Function MarvelAI.MarvelAIController.AllowPreSelectHeroDelay
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_AllowPreSelectHeroDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_AllowPreSelectHeroDelay) == 0x000004, "Wrong alignment on MarvelAIController_AllowPreSelectHeroDelay");
static_assert(sizeof(MarvelAIController_AllowPreSelectHeroDelay) == 0x000004, "Wrong size on MarvelAIController_AllowPreSelectHeroDelay");
static_assert(offsetof(MarvelAIController_AllowPreSelectHeroDelay, Delay) == 0x000000, "Member 'MarvelAIController_AllowPreSelectHeroDelay::Delay' has a wrong offset!");

// Function MarvelAI.MarvelAIController.ApplyGameplayEffectToPawn
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIController_ApplyGameplayEffectToPawn final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallerMagnitude;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseControllerAsCauser;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_ApplyGameplayEffectToPawn) == 0x000008, "Wrong alignment on MarvelAIController_ApplyGameplayEffectToPawn");
static_assert(sizeof(MarvelAIController_ApplyGameplayEffectToPawn) == 0x000028, "Wrong size on MarvelAIController_ApplyGameplayEffectToPawn");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, EffectClass) == 0x000000, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::EffectClass' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, DataTag) == 0x000008, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::DataTag' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, CallerMagnitude) == 0x000014, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::CallerMagnitude' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, Period) == 0x000018, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::Period' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, bUseControllerAsCauser) == 0x00001C, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::bUseControllerAsCauser' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ApplyGameplayEffectToPawn, ReturnValue) == 0x000020, "Member 'MarvelAIController_ApplyGameplayEffectToPawn::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.CallInputAction
// 0x0014 (0x0014 - 0x0000)
struct MarvelAIController_CallInputAction final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_CallInputAction) == 0x000004, "Wrong alignment on MarvelAIController_CallInputAction");
static_assert(sizeof(MarvelAIController_CallInputAction) == 0x000014, "Wrong size on MarvelAIController_CallInputAction");
static_assert(offsetof(MarvelAIController_CallInputAction, AbilityID) == 0x000000, "Member 'MarvelAIController_CallInputAction::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_CallInputAction, ActionName) == 0x000004, "Member 'MarvelAIController_CallInputAction::ActionName' has a wrong offset!");
static_assert(offsetof(MarvelAIController_CallInputAction, bPressed) == 0x000010, "Member 'MarvelAIController_CallInputAction::bPressed' has a wrong offset!");

// Function MarvelAI.MarvelAIController.CanActivateAbility
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_CanActivateAbility final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_CanActivateAbility) == 0x000004, "Wrong alignment on MarvelAIController_CanActivateAbility");
static_assert(sizeof(MarvelAIController_CanActivateAbility) == 0x000008, "Wrong size on MarvelAIController_CanActivateAbility");
static_assert(offsetof(MarvelAIController_CanActivateAbility, AbilityID) == 0x000000, "Member 'MarvelAIController_CanActivateAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_CanActivateAbility, ReturnValue) == 0x000004, "Member 'MarvelAIController_CanActivateAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.CheckInitAIDifficulty
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_CheckInitAIDifficulty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_CheckInitAIDifficulty) == 0x000001, "Wrong alignment on MarvelAIController_CheckInitAIDifficulty");
static_assert(sizeof(MarvelAIController_CheckInitAIDifficulty) == 0x000001, "Wrong size on MarvelAIController_CheckInitAIDifficulty");
static_assert(offsetof(MarvelAIController_CheckInitAIDifficulty, ReturnValue) == 0x000000, "Member 'MarvelAIController_CheckInitAIDifficulty::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.ClearBehaviorTreeFocus
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_ClearBehaviorTreeFocus final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_ClearBehaviorTreeFocus) == 0x000004, "Wrong alignment on MarvelAIController_ClearBehaviorTreeFocus");
static_assert(sizeof(MarvelAIController_ClearBehaviorTreeFocus) == 0x000004, "Wrong size on MarvelAIController_ClearBehaviorTreeFocus");
static_assert(offsetof(MarvelAIController_ClearBehaviorTreeFocus, Delay) == 0x000000, "Member 'MarvelAIController_ClearBehaviorTreeFocus::Delay' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetCurrentMoveDirection
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIController_GetCurrentMoveDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetCurrentMoveDirection) == 0x000008, "Wrong alignment on MarvelAIController_GetCurrentMoveDirection");
static_assert(sizeof(MarvelAIController_GetCurrentMoveDirection) == 0x000018, "Wrong size on MarvelAIController_GetCurrentMoveDirection");
static_assert(offsetof(MarvelAIController_GetCurrentMoveDirection, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetCurrentMoveDirection::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.InitAIDifficulty
// 0x000C (0x000C - 0x0000)
struct MarvelAIController_InitAIDifficulty final
{
public:
	EAIDifficultyMode                             DifficultyMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DifficultyLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_InitAIDifficulty) == 0x000004, "Wrong alignment on MarvelAIController_InitAIDifficulty");
static_assert(sizeof(MarvelAIController_InitAIDifficulty) == 0x00000C, "Wrong size on MarvelAIController_InitAIDifficulty");
static_assert(offsetof(MarvelAIController_InitAIDifficulty, DifficultyMode) == 0x000000, "Member 'MarvelAIController_InitAIDifficulty::DifficultyMode' has a wrong offset!");
static_assert(offsetof(MarvelAIController_InitAIDifficulty, DifficultyLevel) == 0x000004, "Member 'MarvelAIController_InitAIDifficulty::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(MarvelAIController_InitAIDifficulty, ReturnValue) == 0x000008, "Member 'MarvelAIController_InitAIDifficulty::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.InitDifficultyEffect
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_InitDifficultyEffect final
{
public:
	bool                                          ForceInit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_InitDifficultyEffect) == 0x000001, "Wrong alignment on MarvelAIController_InitDifficultyEffect");
static_assert(sizeof(MarvelAIController_InitDifficultyEffect) == 0x000001, "Wrong size on MarvelAIController_InitDifficultyEffect");
static_assert(offsetof(MarvelAIController_InitDifficultyEffect, ForceInit) == 0x000000, "Member 'MarvelAIController_InitDifficultyEffect::ForceInit' has a wrong offset!");

// Function MarvelAI.MarvelAIController.InitSummonedForAI
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_InitSummonedForAI final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_InitSummonedForAI) == 0x000008, "Wrong alignment on MarvelAIController_InitSummonedForAI");
static_assert(sizeof(MarvelAIController_InitSummonedForAI) == 0x000008, "Wrong size on MarvelAIController_InitSummonedForAI");
static_assert(offsetof(MarvelAIController_InitSummonedForAI, Source) == 0x000000, "Member 'MarvelAIController_InitSummonedForAI::Source' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsInArea
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_IsInArea final
{
public:
	TSubclassOf<class AAIActionArea>              AreaClassType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_IsInArea) == 0x000008, "Wrong alignment on MarvelAIController_IsInArea");
static_assert(sizeof(MarvelAIController_IsInArea) == 0x000010, "Wrong size on MarvelAIController_IsInArea");
static_assert(offsetof(MarvelAIController_IsInArea, AreaClassType) == 0x000000, "Member 'MarvelAIController_IsInArea::AreaClassType' has a wrong offset!");
static_assert(offsetof(MarvelAIController_IsInArea, ReturnValue) == 0x000008, "Member 'MarvelAIController_IsInArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsInView
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_IsInView final
{
public:
	const class AActor*                           ToCheckTarget;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_IsInView) == 0x000008, "Wrong alignment on MarvelAIController_IsInView");
static_assert(sizeof(MarvelAIController_IsInView) == 0x000010, "Wrong size on MarvelAIController_IsInView");
static_assert(offsetof(MarvelAIController_IsInView, ToCheckTarget) == 0x000000, "Member 'MarvelAIController_IsInView::ToCheckTarget' has a wrong offset!");
static_assert(offsetof(MarvelAIController_IsInView, ReturnValue) == 0x000008, "Member 'MarvelAIController_IsInView::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsTakingCure
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsTakingCure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsTakingCure) == 0x000001, "Wrong alignment on MarvelAIController_IsTakingCure");
static_assert(sizeof(MarvelAIController_IsTakingCure) == 0x000001, "Wrong size on MarvelAIController_IsTakingCure");
static_assert(offsetof(MarvelAIController_IsTakingCure, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsTakingCure::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_ClearFocusByPriority
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_K2_ClearFocusByPriority final
{
public:
	uint8                                         FocusPriority;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_K2_ClearFocusByPriority) == 0x000001, "Wrong alignment on MarvelAIController_K2_ClearFocusByPriority");
static_assert(sizeof(MarvelAIController_K2_ClearFocusByPriority) == 0x000001, "Wrong size on MarvelAIController_K2_ClearFocusByPriority");
static_assert(offsetof(MarvelAIController_K2_ClearFocusByPriority, FocusPriority) == 0x000000, "Member 'MarvelAIController_K2_ClearFocusByPriority::FocusPriority' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_GetAIDifficultyConfig
// 0x0220 (0x0220 - 0x0000)
struct MarvelAIController_K2_GetAIDifficultyConfig final
{
public:
	struct FMarvelAIDifficultyTable               OutDifficultyConfig;                               // 0x0000(0x0218)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0218(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_GetAIDifficultyConfig) == 0x000008, "Wrong alignment on MarvelAIController_K2_GetAIDifficultyConfig");
static_assert(sizeof(MarvelAIController_K2_GetAIDifficultyConfig) == 0x000220, "Wrong size on MarvelAIController_K2_GetAIDifficultyConfig");
static_assert(offsetof(MarvelAIController_K2_GetAIDifficultyConfig, OutDifficultyConfig) == 0x000000, "Member 'MarvelAIController_K2_GetAIDifficultyConfig::OutDifficultyConfig' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_GetAIDifficultyConfig, ReturnValue) == 0x000218, "Member 'MarvelAIController_K2_GetAIDifficultyConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_GetPriorityFactorInPerceptionComp
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_K2_GetPriorityFactorInPerceptionComp final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_GetPriorityFactorInPerceptionComp) == 0x000008, "Wrong alignment on MarvelAIController_K2_GetPriorityFactorInPerceptionComp");
static_assert(sizeof(MarvelAIController_K2_GetPriorityFactorInPerceptionComp) == 0x000010, "Wrong size on MarvelAIController_K2_GetPriorityFactorInPerceptionComp");
static_assert(offsetof(MarvelAIController_K2_GetPriorityFactorInPerceptionComp, TargetActor) == 0x000000, "Member 'MarvelAIController_K2_GetPriorityFactorInPerceptionComp::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_GetPriorityFactorInPerceptionComp, ReturnValue) == 0x000008, "Member 'MarvelAIController_K2_GetPriorityFactorInPerceptionComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_PauseCurrentMove
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_K2_PauseCurrentMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_K2_PauseCurrentMove) == 0x000001, "Wrong alignment on MarvelAIController_K2_PauseCurrentMove");
static_assert(sizeof(MarvelAIController_K2_PauseCurrentMove) == 0x000001, "Wrong size on MarvelAIController_K2_PauseCurrentMove");
static_assert(offsetof(MarvelAIController_K2_PauseCurrentMove, ReturnValue) == 0x000000, "Member 'MarvelAIController_K2_PauseCurrentMove::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_ResumeCurrentMove
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_K2_ResumeCurrentMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_K2_ResumeCurrentMove) == 0x000001, "Wrong alignment on MarvelAIController_K2_ResumeCurrentMove");
static_assert(sizeof(MarvelAIController_K2_ResumeCurrentMove) == 0x000001, "Wrong size on MarvelAIController_K2_ResumeCurrentMove");
static_assert(offsetof(MarvelAIController_K2_ResumeCurrentMove, ReturnValue) == 0x000000, "Member 'MarvelAIController_K2_ResumeCurrentMove::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_SetFocalPointByPriority
// 0x0020 (0x0020 - 0x0000)
struct MarvelAIController_K2_SetFocalPointByPriority final
{
public:
	struct FVector                                NewFocus;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FocusPriority;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_SetFocalPointByPriority) == 0x000008, "Wrong alignment on MarvelAIController_K2_SetFocalPointByPriority");
static_assert(sizeof(MarvelAIController_K2_SetFocalPointByPriority) == 0x000020, "Wrong size on MarvelAIController_K2_SetFocalPointByPriority");
static_assert(offsetof(MarvelAIController_K2_SetFocalPointByPriority, NewFocus) == 0x000000, "Member 'MarvelAIController_K2_SetFocalPointByPriority::NewFocus' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_SetFocalPointByPriority, FocusPriority) == 0x000018, "Member 'MarvelAIController_K2_SetFocalPointByPriority::FocusPriority' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_SetFocusByPriority
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_K2_SetFocusByPriority final
{
public:
	class AActor*                                 NewFocus;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FocusPriority;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_SetFocusByPriority) == 0x000008, "Wrong alignment on MarvelAIController_K2_SetFocusByPriority");
static_assert(sizeof(MarvelAIController_K2_SetFocusByPriority) == 0x000010, "Wrong size on MarvelAIController_K2_SetFocusByPriority");
static_assert(offsetof(MarvelAIController_K2_SetFocusByPriority, NewFocus) == 0x000000, "Member 'MarvelAIController_K2_SetFocusByPriority::NewFocus' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_SetFocusByPriority, FocusPriority) == 0x000008, "Member 'MarvelAIController_K2_SetFocusByPriority::FocusPriority' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_SetFocusByTarget
// 0x0068 (0x0068 - 0x0000)
struct MarvelAIController_K2_SetFocusByTarget final
{
public:
	struct FMarvelAITarget                        Target;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         FocusPriority;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_SetFocusByTarget) == 0x000008, "Wrong alignment on MarvelAIController_K2_SetFocusByTarget");
static_assert(sizeof(MarvelAIController_K2_SetFocusByTarget) == 0x000068, "Wrong size on MarvelAIController_K2_SetFocusByTarget");
static_assert(offsetof(MarvelAIController_K2_SetFocusByTarget, Target) == 0x000000, "Member 'MarvelAIController_K2_SetFocusByTarget::Target' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_SetFocusByTarget, FocusPriority) == 0x000060, "Member 'MarvelAIController_K2_SetFocusByTarget::FocusPriority' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnAIApplyFogEffect
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_OnAIApplyFogEffect final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_OnAIApplyFogEffect) == 0x000004, "Wrong alignment on MarvelAIController_OnAIApplyFogEffect");
static_assert(sizeof(MarvelAIController_OnAIApplyFogEffect) == 0x000010, "Wrong size on MarvelAIController_OnAIApplyFogEffect");
static_assert(offsetof(MarvelAIController_OnAIApplyFogEffect, TagUpdated) == 0x000000, "Member 'MarvelAIController_OnAIApplyFogEffect::TagUpdated' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnAIApplyFogEffect, TagExists) == 0x00000C, "Member 'MarvelAIController_OnAIApplyFogEffect::TagExists' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnAIChangeHero
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_OnAIChangeHero final
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnAIChangeHero) == 0x000008, "Wrong alignment on MarvelAIController_OnAIChangeHero");
static_assert(sizeof(MarvelAIController_OnAIChangeHero) == 0x000008, "Wrong size on MarvelAIController_OnAIChangeHero");
static_assert(offsetof(MarvelAIController_OnAIChangeHero, NewPawn) == 0x000000, "Member 'MarvelAIController_OnAIChangeHero::NewPawn' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnAIMoveBlockTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_OnAIMoveBlockTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_OnAIMoveBlockTagUpdated) == 0x000004, "Wrong alignment on MarvelAIController_OnAIMoveBlockTagUpdated");
static_assert(sizeof(MarvelAIController_OnAIMoveBlockTagUpdated) == 0x000010, "Wrong size on MarvelAIController_OnAIMoveBlockTagUpdated");
static_assert(offsetof(MarvelAIController_OnAIMoveBlockTagUpdated, TagUpdated) == 0x000000, "Member 'MarvelAIController_OnAIMoveBlockTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnAIMoveBlockTagUpdated, TagExists) == 0x00000C, "Member 'MarvelAIController_OnAIMoveBlockTagUpdated::TagExists' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnEnterArea
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_OnEnterArea final
{
public:
	class AAIActionArea*                          NewArea;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnEnterArea) == 0x000008, "Wrong alignment on MarvelAIController_OnEnterArea");
static_assert(sizeof(MarvelAIController_OnEnterArea) == 0x000008, "Wrong size on MarvelAIController_OnEnterArea");
static_assert(offsetof(MarvelAIController_OnEnterArea, NewArea) == 0x000000, "Member 'MarvelAIController_OnEnterArea::NewArea' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnExitArea
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_OnExitArea final
{
public:
	class AAIActionArea*                          OldArea;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnExitArea) == 0x000008, "Wrong alignment on MarvelAIController_OnExitArea");
static_assert(sizeof(MarvelAIController_OnExitArea) == 0x000008, "Wrong size on MarvelAIController_OnExitArea");
static_assert(offsetof(MarvelAIController_OnExitArea, OldArea) == 0x000000, "Member 'MarvelAIController_OnExitArea::OldArea' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnPawnDeath
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIController_OnPawnDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnPawnDeath) == 0x000008, "Wrong alignment on MarvelAIController_OnPawnDeath");
static_assert(sizeof(MarvelAIController_OnPawnDeath) == 0x000028, "Wrong size on MarvelAIController_OnPawnDeath");
static_assert(offsetof(MarvelAIController_OnPawnDeath, InSourceAvatar) == 0x000000, "Member 'MarvelAIController_OnPawnDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnPawnDeath, InTargetAvatar) == 0x000008, "Member 'MarvelAIController_OnPawnDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnPawnDeath, ModifierParameterHandle) == 0x000010, "Member 'MarvelAIController_OnPawnDeath::ModifierParameterHandle' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnPawnTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIController_OnPawnTakeDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnPawnTakeDamage) == 0x000008, "Wrong alignment on MarvelAIController_OnPawnTakeDamage");
static_assert(sizeof(MarvelAIController_OnPawnTakeDamage) == 0x000028, "Wrong size on MarvelAIController_OnPawnTakeDamage");
static_assert(offsetof(MarvelAIController_OnPawnTakeDamage, InSourceAvatar) == 0x000000, "Member 'MarvelAIController_OnPawnTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnPawnTakeDamage, InTargetAvatar) == 0x000008, "Member 'MarvelAIController_OnPawnTakeDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIController_OnPawnTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'MarvelAIController_OnPawnTakeDamage::ModifierParameterHandle' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnPostReplaceController
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_OnPostReplaceController final
{
public:
	class AController*                            Old_controller;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnPostReplaceController) == 0x000008, "Wrong alignment on MarvelAIController_OnPostReplaceController");
static_assert(sizeof(MarvelAIController_OnPostReplaceController) == 0x000008, "Wrong size on MarvelAIController_OnPostReplaceController");
static_assert(offsetof(MarvelAIController_OnPostReplaceController, Old_controller) == 0x000000, "Member 'MarvelAIController_OnPostReplaceController::Old_controller' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnPreReplaceController
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_OnPreReplaceController final
{
public:
	class AController*                            New_controller;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnPreReplaceController) == 0x000008, "Wrong alignment on MarvelAIController_OnPreReplaceController");
static_assert(sizeof(MarvelAIController_OnPreReplaceController) == 0x000008, "Wrong size on MarvelAIController_OnPreReplaceController");
static_assert(offsetof(MarvelAIController_OnPreReplaceController, New_controller) == 0x000000, "Member 'MarvelAIController_OnPreReplaceController::New_controller' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OnSculptChanged
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_OnSculptChanged final
{
public:
	int32                                         SculptID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OnSculptChanged) == 0x000004, "Wrong alignment on MarvelAIController_OnSculptChanged");
static_assert(sizeof(MarvelAIController_OnSculptChanged) == 0x000004, "Wrong size on MarvelAIController_OnSculptChanged");
static_assert(offsetof(MarvelAIController_OnSculptChanged, SculptID) == 0x000000, "Member 'MarvelAIController_OnSculptChanged::SculptID' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OverrideJumpAbility
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_OverrideJumpAbility final
{
public:
	int32                                         NewJumpAbilityID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OverrideJumpAbility) == 0x000004, "Wrong alignment on MarvelAIController_OverrideJumpAbility");
static_assert(sizeof(MarvelAIController_OverrideJumpAbility) == 0x000004, "Wrong size on MarvelAIController_OverrideJumpAbility");
static_assert(offsetof(MarvelAIController_OverrideJumpAbility, NewJumpAbilityID) == 0x000000, "Member 'MarvelAIController_OverrideJumpAbility::NewJumpAbilityID' has a wrong offset!");

// Function MarvelAI.MarvelAIController.ResetBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_ResetBehaviorTree final
{
public:
	class UBehaviorTree*                          BTAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_ResetBehaviorTree) == 0x000008, "Wrong alignment on MarvelAIController_ResetBehaviorTree");
static_assert(sizeof(MarvelAIController_ResetBehaviorTree) == 0x000010, "Wrong size on MarvelAIController_ResetBehaviorTree");
static_assert(offsetof(MarvelAIController_ResetBehaviorTree, BTAsset) == 0x000000, "Member 'MarvelAIController_ResetBehaviorTree::BTAsset' has a wrong offset!");
static_assert(offsetof(MarvelAIController_ResetBehaviorTree, ReturnValue) == 0x000008, "Member 'MarvelAIController_ResetBehaviorTree::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SelectChangeHero
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_SelectChangeHero final
{
public:
	bool                                          NeedChangeRole;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowRepeatHero;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SelectChangeHero) == 0x000004, "Wrong alignment on MarvelAIController_SelectChangeHero");
static_assert(sizeof(MarvelAIController_SelectChangeHero) == 0x000008, "Wrong size on MarvelAIController_SelectChangeHero");
static_assert(offsetof(MarvelAIController_SelectChangeHero, NeedChangeRole) == 0x000000, "Member 'MarvelAIController_SelectChangeHero::NeedChangeRole' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SelectChangeHero, AllowRepeatHero) == 0x000001, "Member 'MarvelAIController_SelectChangeHero::AllowRepeatHero' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SelectChangeHero, ReturnValue) == 0x000004, "Member 'MarvelAIController_SelectChangeHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetAbilityTacticClass
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_SetAbilityTacticClass final
{
public:
	class UClass*                                 AbilityTacticClass_0;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetAbilityTacticClass) == 0x000008, "Wrong alignment on MarvelAIController_SetAbilityTacticClass");
static_assert(sizeof(MarvelAIController_SetAbilityTacticClass) == 0x000008, "Wrong size on MarvelAIController_SetAbilityTacticClass");
static_assert(offsetof(MarvelAIController_SetAbilityTacticClass, AbilityTacticClass_0) == 0x000000, "Member 'MarvelAIController_SetAbilityTacticClass::AbilityTacticClass_0' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetAIAbilityServer
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_SetAIAbilityServer final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetAIAbilityServer) == 0x000004, "Wrong alignment on MarvelAIController_SetAIAbilityServer");
static_assert(sizeof(MarvelAIController_SetAIAbilityServer) == 0x000004, "Wrong size on MarvelAIController_SetAIAbilityServer");
static_assert(offsetof(MarvelAIController_SetAIAbilityServer, NewValue) == 0x000000, "Member 'MarvelAIController_SetAIAbilityServer::NewValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetAIAnthropomorphic
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetAIAnthropomorphic final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetAIAnthropomorphic) == 0x000001, "Wrong alignment on MarvelAIController_SetAIAnthropomorphic");
static_assert(sizeof(MarvelAIController_SetAIAnthropomorphic) == 0x000001, "Wrong size on MarvelAIController_SetAIAnthropomorphic");
static_assert(offsetof(MarvelAIController_SetAIAnthropomorphic, bEnable) == 0x000000, "Member 'MarvelAIController_SetAIAnthropomorphic::bEnable' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetDynamicDifficultyEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetDynamicDifficultyEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetDynamicDifficultyEnabled) == 0x000001, "Wrong alignment on MarvelAIController_SetDynamicDifficultyEnabled");
static_assert(sizeof(MarvelAIController_SetDynamicDifficultyEnabled) == 0x000001, "Wrong size on MarvelAIController_SetDynamicDifficultyEnabled");
static_assert(offsetof(MarvelAIController_SetDynamicDifficultyEnabled, Enable) == 0x000000, "Member 'MarvelAIController_SetDynamicDifficultyEnabled::Enable' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetEnableAIProcessInput
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetEnableAIProcessInput final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetEnableAIProcessInput) == 0x000001, "Wrong alignment on MarvelAIController_SetEnableAIProcessInput");
static_assert(sizeof(MarvelAIController_SetEnableAIProcessInput) == 0x000001, "Wrong size on MarvelAIController_SetEnableAIProcessInput");
static_assert(offsetof(MarvelAIController_SetEnableAIProcessInput, Enable) == 0x000000, "Member 'MarvelAIController_SetEnableAIProcessInput::Enable' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetFocusOffsetOnActor
// 0x0020 (0x0020 - 0x0000)
struct MarvelAIController_SetFocusOffsetOnActor final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInLocalCoordinate;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_SetFocusOffsetOnActor) == 0x000008, "Wrong alignment on MarvelAIController_SetFocusOffsetOnActor");
static_assert(sizeof(MarvelAIController_SetFocusOffsetOnActor) == 0x000020, "Wrong size on MarvelAIController_SetFocusOffsetOnActor");
static_assert(offsetof(MarvelAIController_SetFocusOffsetOnActor, Offset) == 0x000000, "Member 'MarvelAIController_SetFocusOffsetOnActor::Offset' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SetFocusOffsetOnActor, IsInLocalCoordinate) == 0x000018, "Member 'MarvelAIController_SetFocusOffsetOnActor::IsInLocalCoordinate' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetFocusSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_SetFocusSpeedFactor final
{
public:
	float                                         NewFocusSpeedFactor;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetFocusSpeedFactor) == 0x000004, "Wrong alignment on MarvelAIController_SetFocusSpeedFactor");
static_assert(sizeof(MarvelAIController_SetFocusSpeedFactor) == 0x000004, "Wrong size on MarvelAIController_SetFocusSpeedFactor");
static_assert(offsetof(MarvelAIController_SetFocusSpeedFactor, NewFocusSpeedFactor) == 0x000000, "Member 'MarvelAIController_SetFocusSpeedFactor::NewFocusSpeedFactor' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetIsTestAI
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetIsTestAI final
{
public:
	bool                                          NewIsTestAI;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetIsTestAI) == 0x000001, "Wrong alignment on MarvelAIController_SetIsTestAI");
static_assert(sizeof(MarvelAIController_SetIsTestAI) == 0x000001, "Wrong size on MarvelAIController_SetIsTestAI");
static_assert(offsetof(MarvelAIController_SetIsTestAI, NewIsTestAI) == 0x000000, "Member 'MarvelAIController_SetIsTestAI::NewIsTestAI' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetSVONPathFindingMethod
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetSVONPathFindingMethod final
{
public:
	ESVONPathFindingMethod                        ModeMethod;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetSVONPathFindingMethod) == 0x000001, "Wrong alignment on MarvelAIController_SetSVONPathFindingMethod");
static_assert(sizeof(MarvelAIController_SetSVONPathFindingMethod) == 0x000001, "Wrong size on MarvelAIController_SetSVONPathFindingMethod");
static_assert(offsetof(MarvelAIController_SetSVONPathFindingMethod, ModeMethod) == 0x000000, "Member 'MarvelAIController_SetSVONPathFindingMethod::ModeMethod' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetTestAttributeRatio
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_SetTestAttributeRatio final
{
public:
	float                                         NewRatio;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_SetTestAttributeRatio) == 0x000004, "Wrong alignment on MarvelAIController_SetTestAttributeRatio");
static_assert(sizeof(MarvelAIController_SetTestAttributeRatio) == 0x000008, "Wrong size on MarvelAIController_SetTestAttributeRatio");
static_assert(offsetof(MarvelAIController_SetTestAttributeRatio, NewRatio) == 0x000000, "Member 'MarvelAIController_SetTestAttributeRatio::NewRatio' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SetTestAttributeRatio, ReturnValue) == 0x000004, "Member 'MarvelAIController_SetTestAttributeRatio::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SetUsePreciseReachLogic
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_SetUsePreciseReachLogic final
{
public:
	bool                                          UsePrecise;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_SetUsePreciseReachLogic) == 0x000001, "Wrong alignment on MarvelAIController_SetUsePreciseReachLogic");
static_assert(sizeof(MarvelAIController_SetUsePreciseReachLogic) == 0x000001, "Wrong size on MarvelAIController_SetUsePreciseReachLogic");
static_assert(offsetof(MarvelAIController_SetUsePreciseReachLogic, UsePrecise) == 0x000000, "Member 'MarvelAIController_SetUsePreciseReachLogic::UsePrecise' has a wrong offset!");

// Function MarvelAI.MarvelAIController.SvonMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct MarvelAIController_SvonMoveToLocation final
{
public:
	struct FVector                                Dest;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePathfinding;                                   // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectDestinationToNavigation;                   // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStrafe;                                        // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialPath;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_SvonMoveToLocation) == 0x000008, "Wrong alignment on MarvelAIController_SvonMoveToLocation");
static_assert(sizeof(MarvelAIController_SvonMoveToLocation) == 0x000030, "Wrong size on MarvelAIController_SvonMoveToLocation");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, Dest) == 0x000000, "Member 'MarvelAIController_SvonMoveToLocation::Dest' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, AcceptanceRadius) == 0x000018, "Member 'MarvelAIController_SvonMoveToLocation::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, bStopOnOverlap) == 0x00001C, "Member 'MarvelAIController_SvonMoveToLocation::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, bUsePathfinding) == 0x00001D, "Member 'MarvelAIController_SvonMoveToLocation::bUsePathfinding' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, bProjectDestinationToNavigation) == 0x00001E, "Member 'MarvelAIController_SvonMoveToLocation::bProjectDestinationToNavigation' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, bCanStrafe) == 0x00001F, "Member 'MarvelAIController_SvonMoveToLocation::bCanStrafe' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, FilterClass) == 0x000020, "Member 'MarvelAIController_SvonMoveToLocation::FilterClass' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, bAllowPartialPath) == 0x000028, "Member 'MarvelAIController_SvonMoveToLocation::bAllowPartialPath' has a wrong offset!");
static_assert(offsetof(MarvelAIController_SvonMoveToLocation, ReturnValue) == 0x000029, "Member 'MarvelAIController_SvonMoveToLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TriggerAbilityLocalInput
// 0x000C (0x000C - 0x0000)
struct MarvelAIController_TriggerAbilityLocalInput final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPressed;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TriggerAbilityLocalInput) == 0x000004, "Wrong alignment on MarvelAIController_TriggerAbilityLocalInput");
static_assert(sizeof(MarvelAIController_TriggerAbilityLocalInput) == 0x00000C, "Wrong size on MarvelAIController_TriggerAbilityLocalInput");
static_assert(offsetof(MarvelAIController_TriggerAbilityLocalInput, InputID) == 0x000000, "Member 'MarvelAIController_TriggerAbilityLocalInput::InputID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TriggerAbilityLocalInput, AbilityID) == 0x000004, "Member 'MarvelAIController_TriggerAbilityLocalInput::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TriggerAbilityLocalInput, bIsPressed) == 0x000008, "Member 'MarvelAIController_TriggerAbilityLocalInput::bIsPressed' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TriggerPawnAbilityInputBinding
// 0x000C (0x000C - 0x0000)
struct MarvelAIController_TriggerPawnAbilityInputBinding final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPressed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TriggerPawnAbilityInputBinding) == 0x000004, "Wrong alignment on MarvelAIController_TriggerPawnAbilityInputBinding");
static_assert(sizeof(MarvelAIController_TriggerPawnAbilityInputBinding) == 0x00000C, "Wrong size on MarvelAIController_TriggerPawnAbilityInputBinding");
static_assert(offsetof(MarvelAIController_TriggerPawnAbilityInputBinding, InputID) == 0x000000, "Member 'MarvelAIController_TriggerPawnAbilityInputBinding::InputID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TriggerPawnAbilityInputBinding, AbilityID) == 0x000004, "Member 'MarvelAIController_TriggerPawnAbilityInputBinding::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TriggerPawnAbilityInputBinding, IsPressed) == 0x000008, "Member 'MarvelAIController_TriggerPawnAbilityInputBinding::IsPressed' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TriggerPawnLocalInputBind
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_TriggerPawnLocalInputBind final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConfirmed;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TriggerPawnLocalInputBind) == 0x000004, "Wrong alignment on MarvelAIController_TriggerPawnLocalInputBind");
static_assert(sizeof(MarvelAIController_TriggerPawnLocalInputBind) == 0x000008, "Wrong size on MarvelAIController_TriggerPawnLocalInputBind");
static_assert(offsetof(MarvelAIController_TriggerPawnLocalInputBind, InputID) == 0x000000, "Member 'MarvelAIController_TriggerPawnLocalInputBind::InputID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TriggerPawnLocalInputBind, IsConfirmed) == 0x000004, "Member 'MarvelAIController_TriggerPawnLocalInputBind::IsConfirmed' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryActivateAbilityWithID
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_TryActivateAbilityWithID final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInputPressed;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             OutHandle;                                         // 0x0008(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TryActivateAbilityWithID) == 0x000004, "Wrong alignment on MarvelAIController_TryActivateAbilityWithID");
static_assert(sizeof(MarvelAIController_TryActivateAbilityWithID) == 0x000010, "Wrong size on MarvelAIController_TryActivateAbilityWithID");
static_assert(offsetof(MarvelAIController_TryActivateAbilityWithID, AbilityID) == 0x000000, "Member 'MarvelAIController_TryActivateAbilityWithID::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryActivateAbilityWithID, UseInputPressed) == 0x000004, "Member 'MarvelAIController_TryActivateAbilityWithID::UseInputPressed' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryActivateAbilityWithID, OutHandle) == 0x000008, "Member 'MarvelAIController_TryActivateAbilityWithID::OutHandle' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryActivateAbilityWithID, ReturnValue) == 0x00000C, "Member 'MarvelAIController_TryActivateAbilityWithID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryEndAbility
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_TryEndAbility final
{
public:
	struct FGameplayAbilitySpecHandle             SpecHandle;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInputRelease;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TryEndAbility) == 0x000004, "Wrong alignment on MarvelAIController_TryEndAbility");
static_assert(sizeof(MarvelAIController_TryEndAbility) == 0x000008, "Wrong size on MarvelAIController_TryEndAbility");
static_assert(offsetof(MarvelAIController_TryEndAbility, SpecHandle) == 0x000000, "Member 'MarvelAIController_TryEndAbility::SpecHandle' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryEndAbility, UseInputRelease) == 0x000004, "Member 'MarvelAIController_TryEndAbility::UseInputRelease' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryEndAbility, ReturnValue) == 0x000005, "Member 'MarvelAIController_TryEndAbility::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryGetActionArea
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIController_TryGetActionArea final
{
public:
	TSubclassOf<class AAIActionArea>              AreaClassType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIActionArea*                          OutArea;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TryGetActionArea) == 0x000008, "Wrong alignment on MarvelAIController_TryGetActionArea");
static_assert(sizeof(MarvelAIController_TryGetActionArea) == 0x000018, "Wrong size on MarvelAIController_TryGetActionArea");
static_assert(offsetof(MarvelAIController_TryGetActionArea, AreaClassType) == 0x000000, "Member 'MarvelAIController_TryGetActionArea::AreaClassType' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryGetActionArea, OutArea) == 0x000008, "Member 'MarvelAIController_TryGetActionArea::OutArea' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryGetActionArea, ReturnValue) == 0x000010, "Member 'MarvelAIController_TryGetActionArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.UpdateAIDifficulty
// 0x000C (0x000C - 0x0000)
struct MarvelAIController_UpdateAIDifficulty final
{
public:
	EAIDifficultyMode                             DifficultyMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DifficultyLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_UpdateAIDifficulty) == 0x000004, "Wrong alignment on MarvelAIController_UpdateAIDifficulty");
static_assert(sizeof(MarvelAIController_UpdateAIDifficulty) == 0x00000C, "Wrong size on MarvelAIController_UpdateAIDifficulty");
static_assert(offsetof(MarvelAIController_UpdateAIDifficulty, DifficultyMode) == 0x000000, "Member 'MarvelAIController_UpdateAIDifficulty::DifficultyMode' has a wrong offset!");
static_assert(offsetof(MarvelAIController_UpdateAIDifficulty, DifficultyLevel) == 0x000004, "Member 'MarvelAIController_UpdateAIDifficulty::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(MarvelAIController_UpdateAIDifficulty, ReturnValue) == 0x000008, "Member 'MarvelAIController_UpdateAIDifficulty::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.UpdateAILevel
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_UpdateAILevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_UpdateAILevel) == 0x000001, "Wrong alignment on MarvelAIController_UpdateAILevel");
static_assert(sizeof(MarvelAIController_UpdateAILevel) == 0x000001, "Wrong size on MarvelAIController_UpdateAILevel");
static_assert(offsetof(MarvelAIController_UpdateAILevel, ReturnValue) == 0x000000, "Member 'MarvelAIController_UpdateAILevel::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.UpdateMoveBlockFlag
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_UpdateMoveBlockFlag final
{
public:
	bool                                          bAdd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_UpdateMoveBlockFlag) == 0x000001, "Wrong alignment on MarvelAIController_UpdateMoveBlockFlag");
static_assert(sizeof(MarvelAIController_UpdateMoveBlockFlag) == 0x000001, "Wrong size on MarvelAIController_UpdateMoveBlockFlag");
static_assert(offsetof(MarvelAIController_UpdateMoveBlockFlag, bAdd) == 0x000000, "Member 'MarvelAIController_UpdateMoveBlockFlag::bAdd' has a wrong offset!");

// Function MarvelAI.MarvelAIController.UpdatePreviewHeroID
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_UpdatePreviewHeroID final
{
public:
	int32                                         NewHeroID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Immediate;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_UpdatePreviewHeroID) == 0x000004, "Wrong alignment on MarvelAIController_UpdatePreviewHeroID");
static_assert(sizeof(MarvelAIController_UpdatePreviewHeroID) == 0x000008, "Wrong size on MarvelAIController_UpdatePreviewHeroID");
static_assert(offsetof(MarvelAIController_UpdatePreviewHeroID, NewHeroID) == 0x000000, "Member 'MarvelAIController_UpdatePreviewHeroID::NewHeroID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_UpdatePreviewHeroID, Immediate) == 0x000004, "Member 'MarvelAIController_UpdatePreviewHeroID::Immediate' has a wrong offset!");

// Function MarvelAI.MarvelAIController.CanChangeSelectedHero
// 0x0003 (0x0003 - 0x0000)
struct MarvelAIController_CanChangeSelectedHero final
{
public:
	bool                                          OutNeedChangeRole;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyCheckForLineup;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_CanChangeSelectedHero) == 0x000001, "Wrong alignment on MarvelAIController_CanChangeSelectedHero");
static_assert(sizeof(MarvelAIController_CanChangeSelectedHero) == 0x000003, "Wrong size on MarvelAIController_CanChangeSelectedHero");
static_assert(offsetof(MarvelAIController_CanChangeSelectedHero, OutNeedChangeRole) == 0x000000, "Member 'MarvelAIController_CanChangeSelectedHero::OutNeedChangeRole' has a wrong offset!");
static_assert(offsetof(MarvelAIController_CanChangeSelectedHero, OnlyCheckForLineup) == 0x000001, "Member 'MarvelAIController_CanChangeSelectedHero::OnlyCheckForLineup' has a wrong offset!");
static_assert(offsetof(MarvelAIController_CanChangeSelectedHero, ReturnValue) == 0x000002, "Member 'MarvelAIController_CanChangeSelectedHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetAIAbilityServer
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_GetAIAbilityServer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetAIAbilityServer) == 0x000004, "Wrong alignment on MarvelAIController_GetAIAbilityServer");
static_assert(sizeof(MarvelAIController_GetAIAbilityServer) == 0x000004, "Wrong size on MarvelAIController_GetAIAbilityServer");
static_assert(offsetof(MarvelAIController_GetAIAbilityServer, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetAIAbilityServer::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetAIAnthropomorphic
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetAIAnthropomorphic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetAIAnthropomorphic) == 0x000001, "Wrong alignment on MarvelAIController_GetAIAnthropomorphic");
static_assert(sizeof(MarvelAIController_GetAIAnthropomorphic) == 0x000001, "Wrong size on MarvelAIController_GetAIAnthropomorphic");
static_assert(offsetof(MarvelAIController_GetAIAnthropomorphic, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetAIAnthropomorphic::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetAIInfo
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_GetAIInfo final
{
public:
	class UAIControllerInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetAIInfo) == 0x000008, "Wrong alignment on MarvelAIController_GetAIInfo");
static_assert(sizeof(MarvelAIController_GetAIInfo) == 0x000008, "Wrong size on MarvelAIController_GetAIInfo");
static_assert(offsetof(MarvelAIController_GetAIInfo, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetAIInfo::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetBehaviorTreeComp
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_GetBehaviorTreeComp final
{
public:
	class UMarvelBehaviorTreeComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetBehaviorTreeComp) == 0x000008, "Wrong alignment on MarvelAIController_GetBehaviorTreeComp");
static_assert(sizeof(MarvelAIController_GetBehaviorTreeComp) == 0x000008, "Wrong size on MarvelAIController_GetBehaviorTreeComp");
static_assert(offsetof(MarvelAIController_GetBehaviorTreeComp, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetBehaviorTreeComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetCurrentTreeName
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_GetCurrentTreeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetCurrentTreeName) == 0x000008, "Wrong alignment on MarvelAIController_GetCurrentTreeName");
static_assert(sizeof(MarvelAIController_GetCurrentTreeName) == 0x000010, "Wrong size on MarvelAIController_GetCurrentTreeName");
static_assert(offsetof(MarvelAIController_GetCurrentTreeName, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetCurrentTreeName::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetDynamicTreatApplyMagnitude
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_GetDynamicTreatApplyMagnitude final
{
public:
	float                                         DynamicDifficultyFactor;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetDynamicTreatApplyMagnitude) == 0x000004, "Wrong alignment on MarvelAIController_GetDynamicTreatApplyMagnitude");
static_assert(sizeof(MarvelAIController_GetDynamicTreatApplyMagnitude) == 0x000008, "Wrong size on MarvelAIController_GetDynamicTreatApplyMagnitude");
static_assert(offsetof(MarvelAIController_GetDynamicTreatApplyMagnitude, DynamicDifficultyFactor) == 0x000000, "Member 'MarvelAIController_GetDynamicTreatApplyMagnitude::DynamicDifficultyFactor' has a wrong offset!");
static_assert(offsetof(MarvelAIController_GetDynamicTreatApplyMagnitude, ReturnValue) == 0x000004, "Member 'MarvelAIController_GetDynamicTreatApplyMagnitude::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetEnableAIProcessInput
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetEnableAIProcessInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetEnableAIProcessInput) == 0x000001, "Wrong alignment on MarvelAIController_GetEnableAIProcessInput");
static_assert(sizeof(MarvelAIController_GetEnableAIProcessInput) == 0x000001, "Wrong size on MarvelAIController_GetEnableAIProcessInput");
static_assert(offsetof(MarvelAIController_GetEnableAIProcessInput, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetEnableAIProcessInput::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetHasMeetEnemy
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetHasMeetEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetHasMeetEnemy) == 0x000001, "Wrong alignment on MarvelAIController_GetHasMeetEnemy");
static_assert(sizeof(MarvelAIController_GetHasMeetEnemy) == 0x000001, "Wrong size on MarvelAIController_GetHasMeetEnemy");
static_assert(offsetof(MarvelAIController_GetHasMeetEnemy, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetHasMeetEnemy::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetHeroBTConfig
// 0x0118 (0x0118 - 0x0000)
struct MarvelAIController_GetHeroBTConfig final
{
public:
	struct FMarvelHeroBehaviorTreeTable           OutHeroBTConfig;                                   // 0x0000(0x0110)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_GetHeroBTConfig) == 0x000008, "Wrong alignment on MarvelAIController_GetHeroBTConfig");
static_assert(sizeof(MarvelAIController_GetHeroBTConfig) == 0x000118, "Wrong size on MarvelAIController_GetHeroBTConfig");
static_assert(offsetof(MarvelAIController_GetHeroBTConfig, OutHeroBTConfig) == 0x000000, "Member 'MarvelAIController_GetHeroBTConfig::OutHeroBTConfig' has a wrong offset!");
static_assert(offsetof(MarvelAIController_GetHeroBTConfig, ReturnValue) == 0x000110, "Member 'MarvelAIController_GetHeroBTConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetIsTestAI
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetIsTestAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetIsTestAI) == 0x000001, "Wrong alignment on MarvelAIController_GetIsTestAI");
static_assert(sizeof(MarvelAIController_GetIsTestAI) == 0x000001, "Wrong size on MarvelAIController_GetIsTestAI");
static_assert(offsetof(MarvelAIController_GetIsTestAI, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetIsTestAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetMarvelAIPerceptionComp
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_GetMarvelAIPerceptionComp final
{
public:
	class UMarvelAIPerceptionComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetMarvelAIPerceptionComp) == 0x000008, "Wrong alignment on MarvelAIController_GetMarvelAIPerceptionComp");
static_assert(sizeof(MarvelAIController_GetMarvelAIPerceptionComp) == 0x000008, "Wrong size on MarvelAIController_GetMarvelAIPerceptionComp");
static_assert(offsetof(MarvelAIController_GetMarvelAIPerceptionComp, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetMarvelAIPerceptionComp::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetPawnAbilityByID
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_GetPawnAbilityByID final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetPawnAbilityByID) == 0x000008, "Wrong alignment on MarvelAIController_GetPawnAbilityByID");
static_assert(sizeof(MarvelAIController_GetPawnAbilityByID) == 0x000010, "Wrong size on MarvelAIController_GetPawnAbilityByID");
static_assert(offsetof(MarvelAIController_GetPawnAbilityByID, AbilityID) == 0x000000, "Member 'MarvelAIController_GetPawnAbilityByID::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_GetPawnAbilityByID, ReturnValue) == 0x000008, "Member 'MarvelAIController_GetPawnAbilityByID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetPawnAbilityIdByInputBind
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_GetPawnAbilityIdByInputBind final
{
public:
	EAbilityInputBinds                            InputBind;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetPawnAbilityIdByInputBind) == 0x000004, "Wrong alignment on MarvelAIController_GetPawnAbilityIdByInputBind");
static_assert(sizeof(MarvelAIController_GetPawnAbilityIdByInputBind) == 0x000008, "Wrong size on MarvelAIController_GetPawnAbilityIdByInputBind");
static_assert(offsetof(MarvelAIController_GetPawnAbilityIdByInputBind, InputBind) == 0x000000, "Member 'MarvelAIController_GetPawnAbilityIdByInputBind::InputBind' has a wrong offset!");
static_assert(offsetof(MarvelAIController_GetPawnAbilityIdByInputBind, ReturnValue) == 0x000004, "Member 'MarvelAIController_GetPawnAbilityIdByInputBind::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetPawnHeroRole
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetPawnHeroRole final
{
public:
	EHeroRole                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetPawnHeroRole) == 0x000001, "Wrong alignment on MarvelAIController_GetPawnHeroRole");
static_assert(sizeof(MarvelAIController_GetPawnHeroRole) == 0x000001, "Wrong size on MarvelAIController_GetPawnHeroRole");
static_assert(offsetof(MarvelAIController_GetPawnHeroRole, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetPawnHeroRole::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_GetRotateSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetRotateSpeed) == 0x000004, "Wrong alignment on MarvelAIController_GetRotateSpeed");
static_assert(sizeof(MarvelAIController_GetRotateSpeed) == 0x000004, "Wrong size on MarvelAIController_GetRotateSpeed");
static_assert(offsetof(MarvelAIController_GetRotateSpeed, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetRotateSpeed::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetTestAttributeRatio
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_GetTestAttributeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetTestAttributeRatio) == 0x000004, "Wrong alignment on MarvelAIController_GetTestAttributeRatio");
static_assert(sizeof(MarvelAIController_GetTestAttributeRatio) == 0x000004, "Wrong size on MarvelAIController_GetTestAttributeRatio");
static_assert(offsetof(MarvelAIController_GetTestAttributeRatio, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetTestAttributeRatio::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetTestAttributeValues
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIController_GetTestAttributeValues final
{
public:
	TMap<class FString, float>                    OutAttributesList;                                 // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetTestAttributeValues) == 0x000008, "Wrong alignment on MarvelAIController_GetTestAttributeValues");
static_assert(sizeof(MarvelAIController_GetTestAttributeValues) == 0x000050, "Wrong size on MarvelAIController_GetTestAttributeValues");
static_assert(offsetof(MarvelAIController_GetTestAttributeValues, OutAttributesList) == 0x000000, "Member 'MarvelAIController_GetTestAttributeValues::OutAttributesList' has a wrong offset!");

// Function MarvelAI.MarvelAIController.GetUsePreciseReachLogic
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_GetUsePreciseReachLogic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_GetUsePreciseReachLogic) == 0x000001, "Wrong alignment on MarvelAIController_GetUsePreciseReachLogic");
static_assert(sizeof(MarvelAIController_GetUsePreciseReachLogic) == 0x000001, "Wrong size on MarvelAIController_GetUsePreciseReachLogic");
static_assert(offsetof(MarvelAIController_GetUsePreciseReachLogic, ReturnValue) == 0x000000, "Member 'MarvelAIController_GetUsePreciseReachLogic::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsAlreadyRequestAsyncPathFinding
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsAlreadyRequestAsyncPathFinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsAlreadyRequestAsyncPathFinding) == 0x000001, "Wrong alignment on MarvelAIController_IsAlreadyRequestAsyncPathFinding");
static_assert(sizeof(MarvelAIController_IsAlreadyRequestAsyncPathFinding) == 0x000001, "Wrong size on MarvelAIController_IsAlreadyRequestAsyncPathFinding");
static_assert(offsetof(MarvelAIController_IsAlreadyRequestAsyncPathFinding, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsAlreadyRequestAsyncPathFinding::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsDynamicDifficultyEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsDynamicDifficultyEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsDynamicDifficultyEnabled) == 0x000001, "Wrong alignment on MarvelAIController_IsDynamicDifficultyEnabled");
static_assert(sizeof(MarvelAIController_IsDynamicDifficultyEnabled) == 0x000001, "Wrong size on MarvelAIController_IsDynamicDifficultyEnabled");
static_assert(offsetof(MarvelAIController_IsDynamicDifficultyEnabled, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsDynamicDifficultyEnabled::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsMoveBlocked
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsMoveBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsMoveBlocked) == 0x000001, "Wrong alignment on MarvelAIController_IsMoveBlocked");
static_assert(sizeof(MarvelAIController_IsMoveBlocked) == 0x000001, "Wrong size on MarvelAIController_IsMoveBlocked");
static_assert(offsetof(MarvelAIController_IsMoveBlocked, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsMoveBlocked::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsTakingDamage
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsTakingDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsTakingDamage) == 0x000001, "Wrong alignment on MarvelAIController_IsTakingDamage");
static_assert(sizeof(MarvelAIController_IsTakingDamage) == 0x000001, "Wrong size on MarvelAIController_IsTakingDamage");
static_assert(offsetof(MarvelAIController_IsTakingDamage, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsTakingDamage::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsTakingDamageByTarget
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIController_IsTakingDamageByTarget final
{
public:
	const class AActor*                           ToCheckTarget;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_IsTakingDamageByTarget) == 0x000008, "Wrong alignment on MarvelAIController_IsTakingDamageByTarget");
static_assert(sizeof(MarvelAIController_IsTakingDamageByTarget) == 0x000010, "Wrong size on MarvelAIController_IsTakingDamageByTarget");
static_assert(offsetof(MarvelAIController_IsTakingDamageByTarget, ToCheckTarget) == 0x000000, "Member 'MarvelAIController_IsTakingDamageByTarget::ToCheckTarget' has a wrong offset!");
static_assert(offsetof(MarvelAIController_IsTakingDamageByTarget, ReturnValue) == 0x000008, "Member 'MarvelAIController_IsTakingDamageByTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.IsTrainingTarget
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_IsTrainingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_IsTrainingTarget) == 0x000001, "Wrong alignment on MarvelAIController_IsTrainingTarget");
static_assert(sizeof(MarvelAIController_IsTrainingTarget) == 0x000001, "Wrong size on MarvelAIController_IsTrainingTarget");
static_assert(offsetof(MarvelAIController_IsTrainingTarget, ReturnValue) == 0x000000, "Member 'MarvelAIController_IsTrainingTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_GetCurrentFocusAsAITarget
// 0x0060 (0x0060 - 0x0000)
struct MarvelAIController_K2_GetCurrentFocusAsAITarget final
{
public:
	struct FMarvelAITarget                        OutTarget;                                         // 0x0000(0x0060)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_K2_GetCurrentFocusAsAITarget) == 0x000008, "Wrong alignment on MarvelAIController_K2_GetCurrentFocusAsAITarget");
static_assert(sizeof(MarvelAIController_K2_GetCurrentFocusAsAITarget) == 0x000060, "Wrong size on MarvelAIController_K2_GetCurrentFocusAsAITarget");
static_assert(offsetof(MarvelAIController_K2_GetCurrentFocusAsAITarget, OutTarget) == 0x000000, "Member 'MarvelAIController_K2_GetCurrentFocusAsAITarget::OutTarget' has a wrong offset!");

// Function MarvelAI.MarvelAIController.K2_GetHeroBattleConfig
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_K2_GetHeroBattleConfig final
{
public:
	struct FAIBattleConfig                        OutBattleConfig;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_K2_GetHeroBattleConfig) == 0x000004, "Wrong alignment on MarvelAIController_K2_GetHeroBattleConfig");
static_assert(sizeof(MarvelAIController_K2_GetHeroBattleConfig) == 0x000008, "Wrong size on MarvelAIController_K2_GetHeroBattleConfig");
static_assert(offsetof(MarvelAIController_K2_GetHeroBattleConfig, OutBattleConfig) == 0x000000, "Member 'MarvelAIController_K2_GetHeroBattleConfig::OutBattleConfig' has a wrong offset!");
static_assert(offsetof(MarvelAIController_K2_GetHeroBattleConfig, ReturnValue) == 0x000004, "Member 'MarvelAIController_K2_GetHeroBattleConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.OverrideSightRadius
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIController_OverrideSightRadius final
{
public:
	float                                         NewRadius;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_OverrideSightRadius) == 0x000004, "Wrong alignment on MarvelAIController_OverrideSightRadius");
static_assert(sizeof(MarvelAIController_OverrideSightRadius) == 0x000004, "Wrong size on MarvelAIController_OverrideSightRadius");
static_assert(offsetof(MarvelAIController_OverrideSightRadius, NewRadius) == 0x000000, "Member 'MarvelAIController_OverrideSightRadius::NewRadius' has a wrong offset!");

// Function MarvelAI.MarvelAIController.StoreAutoChangeHeroDebugInfo
// 0x0014 (0x0014 - 0x0000)
struct MarvelAIController_StoreAutoChangeHeroDebugInfo final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIChangeHeroReason                           ChangeReason;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeResult;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Curve_Energy;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCD;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Curve_KD;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_StoreAutoChangeHeroDebugInfo) == 0x000004, "Wrong alignment on MarvelAIController_StoreAutoChangeHeroDebugInfo");
static_assert(sizeof(MarvelAIController_StoreAutoChangeHeroDebugInfo) == 0x000014, "Wrong size on MarvelAIController_StoreAutoChangeHeroDebugInfo");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, UID) == 0x000000, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::UID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, ChangeReason) == 0x000004, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::ChangeReason' has a wrong offset!");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, ChangeResult) == 0x000005, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::ChangeResult' has a wrong offset!");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, Curve_Energy) == 0x000008, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::Curve_Energy' has a wrong offset!");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, ChangeCD) == 0x00000C, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::ChangeCD' has a wrong offset!");
static_assert(offsetof(MarvelAIController_StoreAutoChangeHeroDebugInfo, Curve_KD) == 0x000010, "Member 'MarvelAIController_StoreAutoChangeHeroDebugInfo::Curve_KD' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryActivatePawnAbilityByID
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_TryActivatePawnAbilityByID final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TryActivatePawnAbilityByID) == 0x000004, "Wrong alignment on MarvelAIController_TryActivatePawnAbilityByID");
static_assert(sizeof(MarvelAIController_TryActivatePawnAbilityByID) == 0x000008, "Wrong size on MarvelAIController_TryActivatePawnAbilityByID");
static_assert(offsetof(MarvelAIController_TryActivatePawnAbilityByID, AbilityID) == 0x000000, "Member 'MarvelAIController_TryActivatePawnAbilityByID::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryActivatePawnAbilityByID, ReturnValue) == 0x000004, "Member 'MarvelAIController_TryActivatePawnAbilityByID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryActivatePawnAbilityByInputBind
// 0x0002 (0x0002 - 0x0000)
struct MarvelAIController_TryActivatePawnAbilityByInputBind final
{
public:
	EAbilityInputBinds                            InputBind;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_TryActivatePawnAbilityByInputBind) == 0x000001, "Wrong alignment on MarvelAIController_TryActivatePawnAbilityByInputBind");
static_assert(sizeof(MarvelAIController_TryActivatePawnAbilityByInputBind) == 0x000002, "Wrong size on MarvelAIController_TryActivatePawnAbilityByInputBind");
static_assert(offsetof(MarvelAIController_TryActivatePawnAbilityByInputBind, InputBind) == 0x000000, "Member 'MarvelAIController_TryActivatePawnAbilityByInputBind::InputBind' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryActivatePawnAbilityByInputBind, ReturnValue) == 0x000001, "Member 'MarvelAIController_TryActivatePawnAbilityByInputBind::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryActivatePawnNormalJump
// 0x0001 (0x0001 - 0x0000)
struct MarvelAIController_TryActivatePawnNormalJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIController_TryActivatePawnNormalJump) == 0x000001, "Wrong alignment on MarvelAIController_TryActivatePawnNormalJump");
static_assert(sizeof(MarvelAIController_TryActivatePawnNormalJump) == 0x000001, "Wrong size on MarvelAIController_TryActivatePawnNormalJump");
static_assert(offsetof(MarvelAIController_TryActivatePawnNormalJump, ReturnValue) == 0x000000, "Member 'MarvelAIController_TryActivatePawnNormalJump::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIController.TryCancelPawnAbilityByID
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIController_TryCancelPawnAbilityByID final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIController_TryCancelPawnAbilityByID) == 0x000004, "Wrong alignment on MarvelAIController_TryCancelPawnAbilityByID");
static_assert(sizeof(MarvelAIController_TryCancelPawnAbilityByID) == 0x000008, "Wrong size on MarvelAIController_TryCancelPawnAbilityByID");
static_assert(offsetof(MarvelAIController_TryCancelPawnAbilityByID, AbilityID) == 0x000000, "Member 'MarvelAIController_TryCancelPawnAbilityByID::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAIController_TryCancelPawnAbilityByID, ReturnValue) == 0x000004, "Member 'MarvelAIController_TryCancelPawnAbilityByID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.GetBoolValue
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIDataProvider_GetBoolValue final
{
public:
	struct FAIDataProviderBoolValue               InProvider;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIDataProvider_GetBoolValue) == 0x000008, "Wrong alignment on MarvelAIDataProvider_GetBoolValue");
static_assert(sizeof(MarvelAIDataProvider_GetBoolValue) == 0x000050, "Wrong size on MarvelAIDataProvider_GetBoolValue");
static_assert(offsetof(MarvelAIDataProvider_GetBoolValue, InProvider) == 0x000000, "Member 'MarvelAIDataProvider_GetBoolValue::InProvider' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetBoolValue, Owner) == 0x000040, "Member 'MarvelAIDataProvider_GetBoolValue::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetBoolValue, RequestID) == 0x000048, "Member 'MarvelAIDataProvider_GetBoolValue::RequestID' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetBoolValue, ReturnValue) == 0x00004C, "Member 'MarvelAIDataProvider_GetBoolValue::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.GetFloatValue
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIDataProvider_GetFloatValue final
{
public:
	struct FAIDataProviderFloatValue              InProvider;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIDataProvider_GetFloatValue) == 0x000008, "Wrong alignment on MarvelAIDataProvider_GetFloatValue");
static_assert(sizeof(MarvelAIDataProvider_GetFloatValue) == 0x000050, "Wrong size on MarvelAIDataProvider_GetFloatValue");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue, InProvider) == 0x000000, "Member 'MarvelAIDataProvider_GetFloatValue::InProvider' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue, Owner) == 0x000040, "Member 'MarvelAIDataProvider_GetFloatValue::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue, RequestID) == 0x000048, "Member 'MarvelAIDataProvider_GetFloatValue::RequestID' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue, ReturnValue) == 0x00004C, "Member 'MarvelAIDataProvider_GetFloatValue::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.GetFloatValue_Blueprint
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIDataProvider_GetFloatValue_Blueprint final
{
public:
	struct FAIDataProviderFloatValue              InProvider;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIDataProvider_GetFloatValue_Blueprint) == 0x000008, "Wrong alignment on MarvelAIDataProvider_GetFloatValue_Blueprint");
static_assert(sizeof(MarvelAIDataProvider_GetFloatValue_Blueprint) == 0x000050, "Wrong size on MarvelAIDataProvider_GetFloatValue_Blueprint");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue_Blueprint, InProvider) == 0x000000, "Member 'MarvelAIDataProvider_GetFloatValue_Blueprint::InProvider' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue_Blueprint, Owner) == 0x000040, "Member 'MarvelAIDataProvider_GetFloatValue_Blueprint::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetFloatValue_Blueprint, ReturnValue) == 0x000048, "Member 'MarvelAIDataProvider_GetFloatValue_Blueprint::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.GetIntValue
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIDataProvider_GetIntValue final
{
public:
	struct FAIDataProviderIntValue                InProvider;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIDataProvider_GetIntValue) == 0x000008, "Wrong alignment on MarvelAIDataProvider_GetIntValue");
static_assert(sizeof(MarvelAIDataProvider_GetIntValue) == 0x000050, "Wrong size on MarvelAIDataProvider_GetIntValue");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue, InProvider) == 0x000000, "Member 'MarvelAIDataProvider_GetIntValue::InProvider' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue, Owner) == 0x000040, "Member 'MarvelAIDataProvider_GetIntValue::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue, RequestID) == 0x000048, "Member 'MarvelAIDataProvider_GetIntValue::RequestID' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue, ReturnValue) == 0x00004C, "Member 'MarvelAIDataProvider_GetIntValue::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.GetIntValue_Blueprint
// 0x0050 (0x0050 - 0x0000)
struct MarvelAIDataProvider_GetIntValue_Blueprint final
{
public:
	struct FAIDataProviderIntValue                InProvider;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIDataProvider_GetIntValue_Blueprint) == 0x000008, "Wrong alignment on MarvelAIDataProvider_GetIntValue_Blueprint");
static_assert(sizeof(MarvelAIDataProvider_GetIntValue_Blueprint) == 0x000050, "Wrong size on MarvelAIDataProvider_GetIntValue_Blueprint");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue_Blueprint, InProvider) == 0x000000, "Member 'MarvelAIDataProvider_GetIntValue_Blueprint::InProvider' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue_Blueprint, Owner) == 0x000040, "Member 'MarvelAIDataProvider_GetIntValue_Blueprint::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_GetIntValue_Blueprint, ReturnValue) == 0x000048, "Member 'MarvelAIDataProvider_GetIntValue_Blueprint::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider.SetAllValue
// 0x0004 (0x0004 - 0x0000)
struct MarvelAIDataProvider_SetAllValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIDataProvider_SetAllValue) == 0x000004, "Wrong alignment on MarvelAIDataProvider_SetAllValue");
static_assert(sizeof(MarvelAIDataProvider_SetAllValue) == 0x000004, "Wrong size on MarvelAIDataProvider_SetAllValue");
static_assert(offsetof(MarvelAIDataProvider_SetAllValue, NewValue) == 0x000000, "Member 'MarvelAIDataProvider_SetAllValue::NewValue' has a wrong offset!");

// Function MarvelAI.MarvelAIDataProvider_PyBase.PyBindData
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIDataProvider_PyBase_PyBindData final
{
public:
	const class UObject*                          Owner;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIDataProvider_PyBase_PyBindData) == 0x000008, "Wrong alignment on MarvelAIDataProvider_PyBase_PyBindData");
static_assert(sizeof(MarvelAIDataProvider_PyBase_PyBindData) == 0x000010, "Wrong size on MarvelAIDataProvider_PyBase_PyBindData");
static_assert(offsetof(MarvelAIDataProvider_PyBase_PyBindData, Owner) == 0x000000, "Member 'MarvelAIDataProvider_PyBase_PyBindData::Owner' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_PyBase_PyBindData, RequestID) == 0x000008, "Member 'MarvelAIDataProvider_PyBase_PyBindData::RequestID' has a wrong offset!");
static_assert(offsetof(MarvelAIDataProvider_PyBase_PyBindData, ReturnValue) == 0x00000C, "Member 'MarvelAIDataProvider_PyBase_PyBindData::ReturnValue' has a wrong offset!");

// Function MarvelAI.AIDifficultyTableHelper.GetAttributeValueForHero
// 0x0060 (0x0060 - 0x0000)
struct AIDifficultyTableHelper_GetAttributeValueForHero final
{
public:
	struct FAIDifficultyAttributeConfig           AttributeConfig;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   MarvelHero;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIDifficultyTableHelper_GetAttributeValueForHero) == 0x000008, "Wrong alignment on AIDifficultyTableHelper_GetAttributeValueForHero");
static_assert(sizeof(AIDifficultyTableHelper_GetAttributeValueForHero) == 0x000060, "Wrong size on AIDifficultyTableHelper_GetAttributeValueForHero");
static_assert(offsetof(AIDifficultyTableHelper_GetAttributeValueForHero, AttributeConfig) == 0x000000, "Member 'AIDifficultyTableHelper_GetAttributeValueForHero::AttributeConfig' has a wrong offset!");
static_assert(offsetof(AIDifficultyTableHelper_GetAttributeValueForHero, MarvelHero) == 0x000050, "Member 'AIDifficultyTableHelper_GetAttributeValueForHero::MarvelHero' has a wrong offset!");
static_assert(offsetof(AIDifficultyTableHelper_GetAttributeValueForHero, ReturnValue) == 0x000058, "Member 'AIDifficultyTableHelper_GetAttributeValueForHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetAIGlobalDataSubsystem
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAIGlobalDataSubsystem*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem) == 0x000010, "Wrong size on MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem, WorldContextObject) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem, ReturnValue) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_GetAIGlobalDataSubsystem::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.CheckExistLevelStaticActor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor) == 0x000010, "Wrong size on MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor, ActorClass) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor::ActorClass' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor, ReturnValue) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_CheckExistLevelStaticActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetActorUID
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetActorUID final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetActorUID) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetActorUID");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetActorUID) == 0x000010, "Wrong size on MarvelAIGlobalDataSubsystem_GetActorUID");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetActorUID, Actor) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetActorUID::Actor' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetActorUID, ReturnValue) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_GetActorUID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetLevelStaticActors
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetLevelStaticActors final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetLevelStaticActors) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetLevelStaticActors");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetLevelStaticActors) == 0x000018, "Wrong size on MarvelAIGlobalDataSubsystem_GetLevelStaticActors");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetLevelStaticActors, ActorClass) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetLevelStaticActors::ActorClass' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetLevelStaticActors, OutActors) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_GetLevelStaticActors::OutActors' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetLevelStaticActorsWithTag
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag) == 0x000028, "Wrong size on MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag, ActorClass) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag::ActorClass' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag, Tag) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag::Tag' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag, OutActors) == 0x000018, "Member 'MarvelAIGlobalDataSubsystem_GetLevelStaticActorsWithTag::OutActors' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetNearestPortal
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetNearestPortal final
{
public:
	struct FVector                                QueryLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LimitDistance;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APortalViewActor_Level*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetNearestPortal) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetNearestPortal");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetNearestPortal) == 0x000028, "Wrong size on MarvelAIGlobalDataSubsystem_GetNearestPortal");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetNearestPortal, QueryLocation) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetNearestPortal::QueryLocation' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetNearestPortal, LimitDistance) == 0x000018, "Member 'MarvelAIGlobalDataSubsystem_GetNearestPortal::LimitDistance' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetNearestPortal, ReturnValue) == 0x000020, "Member 'MarvelAIGlobalDataSubsystem_GetNearestPortal::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.GetPositionProgress
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIGlobalDataSubsystem_GetPositionProgress final
{
public:
	const class AMarvelAIController*              QueryAI;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarvelBaseCharacter*             TargetChar;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionProgress;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_GetPositionProgress) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_GetPositionProgress");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_GetPositionProgress) == 0x000018, "Wrong size on MarvelAIGlobalDataSubsystem_GetPositionProgress");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetPositionProgress, QueryAI) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_GetPositionProgress::QueryAI' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetPositionProgress, TargetChar) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_GetPositionProgress::TargetChar' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetPositionProgress, PositionProgress) == 0x000010, "Member 'MarvelAIGlobalDataSubsystem_GetPositionProgress::PositionProgress' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_GetPositionProgress, ReturnValue) == 0x000014, "Member 'MarvelAIGlobalDataSubsystem_GetPositionProgress::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIGlobalDataSubsystem.IsAIUsableHero_Static
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static) == 0x000008, "Wrong alignment on MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static");
static_assert(sizeof(MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static) == 0x000010, "Wrong size on MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static, WorldContextObject) == 0x000000, "Member 'MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static, HeroID) == 0x000008, "Member 'MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static, ReturnValue) == 0x00000C, "Member 'MarvelAIGlobalDataSubsystem_IsAIUsableHero_Static::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ActivateAbilityUsage
// 0x0048 (0x0048 - 0x0000)
struct MarvelAILibrary_ActivateAbilityUsage final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRequiredAIDataForAutoAbility          AutoAbilityContext;                                // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         UsageID;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImitateAILab;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_ActivateAbilityUsage) == 0x000008, "Wrong alignment on MarvelAILibrary_ActivateAbilityUsage");
static_assert(sizeof(MarvelAILibrary_ActivateAbilityUsage) == 0x000048, "Wrong size on MarvelAILibrary_ActivateAbilityUsage");
static_assert(offsetof(MarvelAILibrary_ActivateAbilityUsage, AIController) == 0x000000, "Member 'MarvelAILibrary_ActivateAbilityUsage::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ActivateAbilityUsage, AutoAbilityContext) == 0x000008, "Member 'MarvelAILibrary_ActivateAbilityUsage::AutoAbilityContext' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ActivateAbilityUsage, UsageID) == 0x000040, "Member 'MarvelAILibrary_ActivateAbilityUsage::UsageID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ActivateAbilityUsage, ImitateAILab) == 0x000044, "Member 'MarvelAILibrary_ActivateAbilityUsage::ImitateAILab' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.AddInputRecordToAI
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_AddInputRecordToAI final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputRecordComponent*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_AddInputRecordToAI) == 0x000008, "Wrong alignment on MarvelAILibrary_AddInputRecordToAI");
static_assert(sizeof(MarvelAILibrary_AddInputRecordToAI) == 0x000010, "Wrong size on MarvelAILibrary_AddInputRecordToAI");
static_assert(offsetof(MarvelAILibrary_AddInputRecordToAI, AIController) == 0x000000, "Member 'MarvelAILibrary_AddInputRecordToAI::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_AddInputRecordToAI, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_AddInputRecordToAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CanFindNavPathToLocation
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_CanFindNavPathToLocation final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CanFindNavPathToLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_CanFindNavPathToLocation");
static_assert(sizeof(MarvelAILibrary_CanFindNavPathToLocation) == 0x000028, "Wrong size on MarvelAILibrary_CanFindNavPathToLocation");
static_assert(offsetof(MarvelAILibrary_CanFindNavPathToLocation, Controller) == 0x000000, "Member 'MarvelAILibrary_CanFindNavPathToLocation::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CanFindNavPathToLocation, TargetLocation) == 0x000008, "Member 'MarvelAILibrary_CanFindNavPathToLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CanFindNavPathToLocation, ReturnValue) == 0x000020, "Member 'MarvelAILibrary_CanFindNavPathToLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ChangeGamePlayDebuggerNetUpdateFrequency
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHighFrequency;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency) == 0x000008, "Wrong alignment on MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency");
static_assert(sizeof(MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency) == 0x000010, "Wrong size on MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency");
static_assert(offsetof(MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency, UseHighFrequency) == 0x000008, "Member 'MarvelAILibrary_ChangeGamePlayDebuggerNetUpdateFrequency::UseHighFrequency' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ChangeHero
// 0x0070 (0x0070 - 0x0000)
struct MarvelAILibrary_ChangeHero final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_ChangeHero) == 0x000010, "Wrong alignment on MarvelAILibrary_ChangeHero");
static_assert(sizeof(MarvelAILibrary_ChangeHero) == 0x000070, "Wrong size on MarvelAILibrary_ChangeHero");
static_assert(offsetof(MarvelAILibrary_ChangeHero, AIController) == 0x000000, "Member 'MarvelAILibrary_ChangeHero::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ChangeHero, HeroID) == 0x000008, "Member 'MarvelAILibrary_ChangeHero::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ChangeHero, SpawnTransform) == 0x000010, "Member 'MarvelAILibrary_ChangeHero::SpawnTransform' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckAbilityIsReady
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_CheckAbilityIsReady final
{
public:
	class AMarvelAIController*                    MyController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityUsageID;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCanUseNow;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckAbilityIsReady) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckAbilityIsReady");
static_assert(sizeof(MarvelAILibrary_CheckAbilityIsReady) == 0x000010, "Wrong size on MarvelAILibrary_CheckAbilityIsReady");
static_assert(offsetof(MarvelAILibrary_CheckAbilityIsReady, MyController) == 0x000000, "Member 'MarvelAILibrary_CheckAbilityIsReady::MyController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAbilityIsReady, AbilityUsageID) == 0x000008, "Member 'MarvelAILibrary_CheckAbilityIsReady::AbilityUsageID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAbilityIsReady, bCheckCanUseNow) == 0x00000C, "Member 'MarvelAILibrary_CheckAbilityIsReady::bCheckCanUseNow' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAbilityIsReady, ReturnValue) == 0x00000D, "Member 'MarvelAILibrary_CheckAbilityIsReady::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckActorHasTag
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_CheckActorHasTag final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToCheck;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckActorHasTag) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckActorHasTag");
static_assert(sizeof(MarvelAILibrary_CheckActorHasTag) == 0x000018, "Wrong size on MarvelAILibrary_CheckActorHasTag");
static_assert(offsetof(MarvelAILibrary_CheckActorHasTag, TargetActor) == 0x000000, "Member 'MarvelAILibrary_CheckActorHasTag::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckActorHasTag, TagToCheck) == 0x000008, "Member 'MarvelAILibrary_CheckActorHasTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckActorHasTag, ReturnValue) == 0x000014, "Member 'MarvelAILibrary_CheckActorHasTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckAICharacterTag
// 0x0078 (0x0078 - 0x0000)
struct MarvelAILibrary_CheckAICharacterTag final
{
public:
	const class AMarvelBaseCharacter*             Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIHeroTag                             Tags;                                              // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckAICharacterTag) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckAICharacterTag");
static_assert(sizeof(MarvelAILibrary_CheckAICharacterTag) == 0x000078, "Wrong size on MarvelAILibrary_CheckAICharacterTag");
static_assert(offsetof(MarvelAILibrary_CheckAICharacterTag, Character) == 0x000000, "Member 'MarvelAILibrary_CheckAICharacterTag::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAICharacterTag, Tags) == 0x000008, "Member 'MarvelAILibrary_CheckAICharacterTag::Tags' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAICharacterTag, MatchType) == 0x000070, "Member 'MarvelAILibrary_CheckAICharacterTag::MatchType' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckAICharacterTag, ReturnValue) == 0x000071, "Member 'MarvelAILibrary_CheckAICharacterTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckDashBarrierFree
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_CheckDashBarrierFree final
{
public:
	class AMarvelBaseCharacter*                   AICharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashDistance;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckDashBarrierFree) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckDashBarrierFree");
static_assert(sizeof(MarvelAILibrary_CheckDashBarrierFree) == 0x000018, "Wrong size on MarvelAILibrary_CheckDashBarrierFree");
static_assert(offsetof(MarvelAILibrary_CheckDashBarrierFree, AICharacter) == 0x000000, "Member 'MarvelAILibrary_CheckDashBarrierFree::AICharacter' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckDashBarrierFree, AIController) == 0x000008, "Member 'MarvelAILibrary_CheckDashBarrierFree::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckDashBarrierFree, DashDistance) == 0x000010, "Member 'MarvelAILibrary_CheckDashBarrierFree::DashDistance' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckDashBarrierFree, ReturnValue) == 0x000014, "Member 'MarvelAILibrary_CheckDashBarrierFree::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckIsImportantTarget
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_CheckIsImportantTarget final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckIsImportantTarget) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckIsImportantTarget");
static_assert(sizeof(MarvelAILibrary_CheckIsImportantTarget) == 0x000010, "Wrong size on MarvelAILibrary_CheckIsImportantTarget");
static_assert(offsetof(MarvelAILibrary_CheckIsImportantTarget, Target) == 0x000000, "Member 'MarvelAILibrary_CheckIsImportantTarget::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckIsImportantTarget, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_CheckIsImportantTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckIsInStealth
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_CheckIsInStealth final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckIsInStealth) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckIsInStealth");
static_assert(sizeof(MarvelAILibrary_CheckIsInStealth) == 0x000010, "Wrong size on MarvelAILibrary_CheckIsInStealth");
static_assert(offsetof(MarvelAILibrary_CheckIsInStealth, TargetActor) == 0x000000, "Member 'MarvelAILibrary_CheckIsInStealth::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckIsInStealth, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_CheckIsInStealth::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckIsRangeHero
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_CheckIsRangeHero final
{
public:
	const class AMarvelBaseCharacter*             MarvelHero;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckIsRangeHero) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckIsRangeHero");
static_assert(sizeof(MarvelAILibrary_CheckIsRangeHero) == 0x000010, "Wrong size on MarvelAILibrary_CheckIsRangeHero");
static_assert(offsetof(MarvelAILibrary_CheckIsRangeHero, MarvelHero) == 0x000000, "Member 'MarvelAILibrary_CheckIsRangeHero::MarvelHero' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckIsRangeHero, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_CheckIsRangeHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CheckLowHealthMarkValid
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_CheckLowHealthMarkValid final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CheckLowHealthMarkValid) == 0x000008, "Wrong alignment on MarvelAILibrary_CheckLowHealthMarkValid");
static_assert(sizeof(MarvelAILibrary_CheckLowHealthMarkValid) == 0x000018, "Wrong size on MarvelAILibrary_CheckLowHealthMarkValid");
static_assert(offsetof(MarvelAILibrary_CheckLowHealthMarkValid, AIController) == 0x000000, "Member 'MarvelAILibrary_CheckLowHealthMarkValid::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckLowHealthMarkValid, Target) == 0x000008, "Member 'MarvelAILibrary_CheckLowHealthMarkValid::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CheckLowHealthMarkValid, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_CheckLowHealthMarkValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CompareActorRelationWithFilter
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_CompareActorRelationWithFilter final
{
public:
	const class AActor*                           FromActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ToActor;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 Side;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CompareActorRelationWithFilter) == 0x000008, "Wrong alignment on MarvelAILibrary_CompareActorRelationWithFilter");
static_assert(sizeof(MarvelAILibrary_CompareActorRelationWithFilter) == 0x000018, "Wrong size on MarvelAILibrary_CompareActorRelationWithFilter");
static_assert(offsetof(MarvelAILibrary_CompareActorRelationWithFilter, FromActor) == 0x000000, "Member 'MarvelAILibrary_CompareActorRelationWithFilter::FromActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareActorRelationWithFilter, ToActor) == 0x000008, "Member 'MarvelAILibrary_CompareActorRelationWithFilter::ToActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareActorRelationWithFilter, Side) == 0x000010, "Member 'MarvelAILibrary_CompareActorRelationWithFilter::Side' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareActorRelationWithFilter, ReturnValue) == 0x000011, "Member 'MarvelAILibrary_CompareActorRelationWithFilter::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CompareAIFilterSide
// 0x000C (0x000C - 0x0000)
struct MarvelAILibrary_CompareAIFilterSide final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelArithmeticOperation                    ArithmeticOperation;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CompareAIFilterSide) == 0x000004, "Wrong alignment on MarvelAILibrary_CompareAIFilterSide");
static_assert(sizeof(MarvelAILibrary_CompareAIFilterSide) == 0x00000C, "Wrong size on MarvelAILibrary_CompareAIFilterSide");
static_assert(offsetof(MarvelAILibrary_CompareAIFilterSide, A) == 0x000000, "Member 'MarvelAILibrary_CompareAIFilterSide::A' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareAIFilterSide, B) == 0x000004, "Member 'MarvelAILibrary_CompareAIFilterSide::B' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareAIFilterSide, ArithmeticOperation) == 0x000008, "Member 'MarvelAILibrary_CompareAIFilterSide::ArithmeticOperation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareAIFilterSide, ReturnValue) == 0x000009, "Member 'MarvelAILibrary_CompareAIFilterSide::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.CompareOwnerShipTypeToAIFilterSide
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                ShipType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 Side;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide) == 0x000008, "Wrong alignment on MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide");
static_assert(sizeof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide) == 0x000010, "Wrong size on MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide");
static_assert(offsetof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide, Controller) == 0x000000, "Member 'MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide, ShipType) == 0x000008, "Member 'MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide::ShipType' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide, Side) == 0x000009, "Member 'MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide::Side' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide, ReturnValue) == 0x00000A, "Member 'MarvelAILibrary_CompareOwnerShipTypeToAIFilterSide::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ConvertOwnerShipTypeToAIFilterSide
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide final
{
public:
	class AMarvelAIController*                    Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                ShipType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide) == 0x000008, "Wrong alignment on MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide");
static_assert(sizeof(MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide) == 0x000010, "Wrong size on MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide");
static_assert(offsetof(MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide, Controller) == 0x000000, "Member 'MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide, ShipType) == 0x000008, "Member 'MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide::ShipType' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide, ReturnValue) == 0x000009, "Member 'MarvelAILibrary_ConvertOwnerShipTypeToAIFilterSide::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.DebugDrawPathPoints
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_DebugDrawPathPoints final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawStartActor;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DrawColor;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_DebugDrawPathPoints) == 0x000008, "Wrong alignment on MarvelAILibrary_DebugDrawPathPoints");
static_assert(sizeof(MarvelAILibrary_DebugDrawPathPoints) == 0x000028, "Wrong size on MarvelAILibrary_DebugDrawPathPoints");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, StartActor) == 0x000000, "Member 'MarvelAILibrary_DebugDrawPathPoints::StartActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, PathPoints) == 0x000008, "Member 'MarvelAILibrary_DebugDrawPathPoints::PathPoints' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, Duration) == 0x000018, "Member 'MarvelAILibrary_DebugDrawPathPoints::Duration' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, bDrawStartActor) == 0x00001C, "Member 'MarvelAILibrary_DebugDrawPathPoints::bDrawStartActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, DrawColor) == 0x000020, "Member 'MarvelAILibrary_DebugDrawPathPoints::DrawColor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DebugDrawPathPoints, Thickness) == 0x000024, "Member 'MarvelAILibrary_DebugDrawPathPoints::Thickness' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.DoesAIExistInGame
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_DoesAIExistInGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_DoesAIExistInGame) == 0x000008, "Wrong alignment on MarvelAILibrary_DoesAIExistInGame");
static_assert(sizeof(MarvelAILibrary_DoesAIExistInGame) == 0x000010, "Wrong size on MarvelAILibrary_DoesAIExistInGame");
static_assert(offsetof(MarvelAILibrary_DoesAIExistInGame, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_DoesAIExistInGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_DoesAIExistInGame, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_DoesAIExistInGame::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.FindNavPathToLocation
// 0x0030 (0x0030 - 0x0000)
struct MarvelAILibrary_FindNavPathToLocation final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_FindNavPathToLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_FindNavPathToLocation");
static_assert(sizeof(MarvelAILibrary_FindNavPathToLocation) == 0x000030, "Wrong size on MarvelAILibrary_FindNavPathToLocation");
static_assert(offsetof(MarvelAILibrary_FindNavPathToLocation, Controller) == 0x000000, "Member 'MarvelAILibrary_FindNavPathToLocation::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_FindNavPathToLocation, TargetLocation) == 0x000008, "Member 'MarvelAILibrary_FindNavPathToLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_FindNavPathToLocation, ReturnValue) == 0x000020, "Member 'MarvelAILibrary_FindNavPathToLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ForceUpdateAllGCNavigationData
// 0x0008 (0x0008 - 0x0000)
struct MarvelAILibrary_ForceUpdateAllGCNavigationData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_ForceUpdateAllGCNavigationData) == 0x000008, "Wrong alignment on MarvelAILibrary_ForceUpdateAllGCNavigationData");
static_assert(sizeof(MarvelAILibrary_ForceUpdateAllGCNavigationData) == 0x000008, "Wrong size on MarvelAILibrary_ForceUpdateAllGCNavigationData");
static_assert(offsetof(MarvelAILibrary_ForceUpdateAllGCNavigationData, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_ForceUpdateAllGCNavigationData::WorldContextObject' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GeneralMoveToLocation
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_GeneralMoveToLocation final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GeneralMoveToLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_GeneralMoveToLocation");
static_assert(sizeof(MarvelAILibrary_GeneralMoveToLocation) == 0x000028, "Wrong size on MarvelAILibrary_GeneralMoveToLocation");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocation, AIController) == 0x000000, "Member 'MarvelAILibrary_GeneralMoveToLocation::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocation, DestLocation) == 0x000008, "Member 'MarvelAILibrary_GeneralMoveToLocation::DestLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocation, ReturnValue) == 0x000020, "Member 'MarvelAILibrary_GeneralMoveToLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GeneralMoveToLocationAdvance
// 0x0038 (0x0038 - 0x0000)
struct MarvelAILibrary_GeneralMoveToLocationAdvance final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePathfinding;                                   // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectDestinationToNavigation;                   // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStrafe;                                        // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialPath;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GeneralMoveToLocationAdvance) == 0x000008, "Wrong alignment on MarvelAILibrary_GeneralMoveToLocationAdvance");
static_assert(sizeof(MarvelAILibrary_GeneralMoveToLocationAdvance) == 0x000038, "Wrong size on MarvelAILibrary_GeneralMoveToLocationAdvance");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, AIController) == 0x000000, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, DestLocation) == 0x000008, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::DestLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, AcceptanceRadius) == 0x000020, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, bStopOnOverlap) == 0x000024, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, bUsePathfinding) == 0x000025, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::bUsePathfinding' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, bProjectDestinationToNavigation) == 0x000026, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::bProjectDestinationToNavigation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, bCanStrafe) == 0x000027, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::bCanStrafe' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, FilterClass) == 0x000028, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::FilterClass' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, bAllowPartialPath) == 0x000030, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::bAllowPartialPath' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToLocationAdvance, ReturnValue) == 0x000031, "Member 'MarvelAILibrary_GeneralMoveToLocationAdvance::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GeneralMoveToStaticActor
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_GeneralMoveToStaticActor final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GeneralMoveToStaticActor) == 0x000008, "Wrong alignment on MarvelAILibrary_GeneralMoveToStaticActor");
static_assert(sizeof(MarvelAILibrary_GeneralMoveToStaticActor) == 0x000018, "Wrong size on MarvelAILibrary_GeneralMoveToStaticActor");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToStaticActor, AIController) == 0x000000, "Member 'MarvelAILibrary_GeneralMoveToStaticActor::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToStaticActor, DestActor) == 0x000008, "Member 'MarvelAILibrary_GeneralMoveToStaticActor::DestActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToStaticActor, RandomRadius) == 0x000010, "Member 'MarvelAILibrary_GeneralMoveToStaticActor::RandomRadius' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GeneralMoveToStaticActor, ReturnValue) == 0x000014, "Member 'MarvelAILibrary_GeneralMoveToStaticActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAbilityIDByConfig
// 0x0278 (0x0278 - 0x0000)
struct MarvelAILibrary_GetAbilityIDByConfig final
{
public:
	struct FMarvelAIAutoAbilityTable              Data;                                              // 0x0000(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AMarvelAIController*              OwnerController;                                   // 0x0268(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0270(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetAbilityIDByConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAbilityIDByConfig");
static_assert(sizeof(MarvelAILibrary_GetAbilityIDByConfig) == 0x000278, "Wrong size on MarvelAILibrary_GetAbilityIDByConfig");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByConfig, Data) == 0x000000, "Member 'MarvelAILibrary_GetAbilityIDByConfig::Data' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByConfig, OwnerController) == 0x000268, "Member 'MarvelAILibrary_GetAbilityIDByConfig::OwnerController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByConfig, ReturnValue) == 0x000270, "Member 'MarvelAILibrary_GetAbilityIDByConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAbilityIDByUsage
// 0x00F8 (0x00F8 - 0x0000)
struct MarvelAILibrary_GetAbilityIDByUsage final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    OwnerController;                                   // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetAbilityIDByUsage) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAbilityIDByUsage");
static_assert(sizeof(MarvelAILibrary_GetAbilityIDByUsage) == 0x0000F8, "Wrong size on MarvelAILibrary_GetAbilityIDByUsage");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByUsage, AbilityUsage) == 0x000000, "Member 'MarvelAILibrary_GetAbilityIDByUsage::AbilityUsage' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByUsage, OwnerController) == 0x0000E8, "Member 'MarvelAILibrary_GetAbilityIDByUsage::OwnerController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAbilityIDByUsage, ReturnValue) == 0x0000F0, "Member 'MarvelAILibrary_GetAbilityIDByUsage::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAIAutoAbilityConfig
// 0x0270 (0x0270 - 0x0000)
struct MarvelAILibrary_GetAIAutoAbilityConfig final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAIAutoAbilityTable              ReturnValue;                                       // 0x0008(0x0268)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAIAutoAbilityConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAIAutoAbilityConfig");
static_assert(sizeof(MarvelAILibrary_GetAIAutoAbilityConfig) == 0x000270, "Wrong size on MarvelAILibrary_GetAIAutoAbilityConfig");
static_assert(offsetof(MarvelAILibrary_GetAIAutoAbilityConfig, ID) == 0x000000, "Member 'MarvelAILibrary_GetAIAutoAbilityConfig::ID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIAutoAbilityConfig, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetAIAutoAbilityConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAIByTag
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_GetAIByTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarvelAIController*>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAIByTag) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAIByTag");
static_assert(sizeof(MarvelAILibrary_GetAIByTag) == 0x000028, "Wrong size on MarvelAILibrary_GetAIByTag");
static_assert(offsetof(MarvelAILibrary_GetAIByTag, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_GetAIByTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIByTag, GameplayTag) == 0x000008, "Member 'MarvelAILibrary_GetAIByTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIByTag, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_GetAIByTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAICount
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetAICount final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIFilterSide                                 FilterSide;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAICount) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAICount");
static_assert(sizeof(MarvelAILibrary_GetAICount) == 0x000010, "Wrong size on MarvelAILibrary_GetAICount");
static_assert(offsetof(MarvelAILibrary_GetAICount, Character) == 0x000000, "Member 'MarvelAILibrary_GetAICount::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAICount, FilterSide) == 0x000008, "Member 'MarvelAILibrary_GetAICount::FilterSide' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAICount, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_GetAICount::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAIDifficultyConfigByModeAndLevel
// 0x0228 (0x0228 - 0x0000)
struct MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel final
{
public:
	EAIDifficultyMode                             DifficultyMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DifficultyLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAIDifficultyTable               OutDifficultyConfig;                               // 0x0008(0x0218)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel");
static_assert(sizeof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel) == 0x000228, "Wrong size on MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel");
static_assert(offsetof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel, DifficultyMode) == 0x000000, "Member 'MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel::DifficultyMode' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel, DifficultyLevel) == 0x000004, "Member 'MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel, OutDifficultyConfig) == 0x000008, "Member 'MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel::OutDifficultyConfig' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel, ReturnValue) == 0x000220, "Member 'MarvelAILibrary_GetAIDifficultyConfigByModeAndLevel::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAIHeroTable
// 0x0008 (0x0008 - 0x0000)
struct MarvelAILibrary_GetAIHeroTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAIHeroTable) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAIHeroTable");
static_assert(sizeof(MarvelAILibrary_GetAIHeroTable) == 0x000008, "Wrong size on MarvelAILibrary_GetAIHeroTable");
static_assert(offsetof(MarvelAILibrary_GetAIHeroTable, ReturnValue) == 0x000000, "Member 'MarvelAILibrary_GetAIHeroTable::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAILabConfigAsset
// 0x0008 (0x0008 - 0x0000)
struct MarvelAILibrary_GetAILabConfigAsset final
{
public:
	class UAILabConfigAsset*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAILabConfigAsset) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAILabConfigAsset");
static_assert(sizeof(MarvelAILibrary_GetAILabConfigAsset) == 0x000008, "Wrong size on MarvelAILibrary_GetAILabConfigAsset");
static_assert(offsetof(MarvelAILibrary_GetAILabConfigAsset, ReturnValue) == 0x000000, "Member 'MarvelAILibrary_GetAILabConfigAsset::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAISenseMaxAge
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_GetAISenseMaxAge final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 AISenseClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetAISenseMaxAge) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAISenseMaxAge");
static_assert(sizeof(MarvelAILibrary_GetAISenseMaxAge) == 0x000018, "Wrong size on MarvelAILibrary_GetAISenseMaxAge");
static_assert(offsetof(MarvelAILibrary_GetAISenseMaxAge, AIController) == 0x000000, "Member 'MarvelAILibrary_GetAISenseMaxAge::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAISenseMaxAge, AISenseClass) == 0x000008, "Member 'MarvelAILibrary_GetAISenseMaxAge::AISenseClass' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAISenseMaxAge, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_GetAISenseMaxAge::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAIVisualLoggerConfig
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetAIVisualLoggerConfig final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIVisualLoggerConfig*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAIVisualLoggerConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAIVisualLoggerConfig");
static_assert(sizeof(MarvelAILibrary_GetAIVisualLoggerConfig) == 0x000010, "Wrong size on MarvelAILibrary_GetAIVisualLoggerConfig");
static_assert(offsetof(MarvelAILibrary_GetAIVisualLoggerConfig, WorldContext) == 0x000000, "Member 'MarvelAILibrary_GetAIVisualLoggerConfig::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAIVisualLoggerConfig, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetAIVisualLoggerConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAllAICount
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetAllAICount final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetAllAICount) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAllAICount");
static_assert(sizeof(MarvelAILibrary_GetAllAICount) == 0x000010, "Wrong size on MarvelAILibrary_GetAllAICount");
static_assert(offsetof(MarvelAILibrary_GetAllAICount, Character) == 0x000000, "Member 'MarvelAILibrary_GetAllAICount::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAllAICount, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetAllAICount::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAmmoClip
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetAmmoClip final
{
public:
	class UMarvelAbilitySystemCom*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmmoClipType                                 AmmoType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAmmoClip) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAmmoClip");
static_assert(sizeof(MarvelAILibrary_GetAmmoClip) == 0x000010, "Wrong size on MarvelAILibrary_GetAmmoClip");
static_assert(offsetof(MarvelAILibrary_GetAmmoClip, AbilitySystemComponent) == 0x000000, "Member 'MarvelAILibrary_GetAmmoClip::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAmmoClip, AmmoType) == 0x000008, "Member 'MarvelAILibrary_GetAmmoClip::AmmoType' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAmmoClip, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_GetAmmoClip::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetAndUpdatePreviewHeroIDForAI
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI final
{
public:
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmediatelyUpdate;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI) == 0x000008, "Wrong alignment on MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI");
static_assert(sizeof(MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI) == 0x000010, "Wrong size on MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI");
static_assert(offsetof(MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI, PlayerState) == 0x000000, "Member 'MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI::PlayerState' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI, ImmediatelyUpdate) == 0x000008, "Member 'MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI::ImmediatelyUpdate' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_GetAndUpdatePreviewHeroIDForAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetBattleDistanceFromTable
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetBattleDistanceFromTable final
{
public:
	class AMarvelAIController*                    Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetBattleDistanceFromTable) == 0x000008, "Wrong alignment on MarvelAILibrary_GetBattleDistanceFromTable");
static_assert(sizeof(MarvelAILibrary_GetBattleDistanceFromTable) == 0x000010, "Wrong size on MarvelAILibrary_GetBattleDistanceFromTable");
static_assert(offsetof(MarvelAILibrary_GetBattleDistanceFromTable, Controller) == 0x000000, "Member 'MarvelAILibrary_GetBattleDistanceFromTable::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetBattleDistanceFromTable, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetBattleDistanceFromTable::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetBattleScoreOfActor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetBattleScoreOfActor final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetBattleScoreOfActor) == 0x000008, "Wrong alignment on MarvelAILibrary_GetBattleScoreOfActor");
static_assert(sizeof(MarvelAILibrary_GetBattleScoreOfActor) == 0x000010, "Wrong size on MarvelAILibrary_GetBattleScoreOfActor");
static_assert(offsetof(MarvelAILibrary_GetBattleScoreOfActor, TargetActor) == 0x000000, "Member 'MarvelAILibrary_GetBattleScoreOfActor::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetBattleScoreOfActor, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetBattleScoreOfActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetCheckedHeroBehaviorTreeConfig
// 0x0120 (0x0120 - 0x0000)
struct MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig final
{
public:
	const class AMarvelBaseCharacter*             MarvelHero;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelHeroBehaviorTreeTable           OutConfigData;                                     // 0x0008(0x0110)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig");
static_assert(sizeof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig) == 0x000120, "Wrong size on MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig, MarvelHero) == 0x000000, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig::MarvelHero' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig, OutConfigData) == 0x000008, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig::OutConfigData' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig, ReturnValue) == 0x000118, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetCheckedHeroBehaviorTreeConfigByID
// 0x0120 (0x0120 - 0x0000)
struct MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelHeroBehaviorTreeTable           OutConfigData;                                     // 0x0008(0x0110)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID) == 0x000008, "Wrong alignment on MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID");
static_assert(sizeof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID) == 0x000120, "Wrong size on MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID, HeroID) == 0x000000, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID, SculptID) == 0x000004, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID::SculptID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID, OutConfigData) == 0x000008, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID::OutConfigData' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID, ReturnValue) == 0x000118, "Member 'MarvelAILibrary_GetCheckedHeroBehaviorTreeConfigByID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetDefaultRequestServerIndex
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetDefaultRequestServerIndex final
{
public:
	const class AMarvelAIController*              Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetDefaultRequestServerIndex) == 0x000008, "Wrong alignment on MarvelAILibrary_GetDefaultRequestServerIndex");
static_assert(sizeof(MarvelAILibrary_GetDefaultRequestServerIndex) == 0x000010, "Wrong size on MarvelAILibrary_GetDefaultRequestServerIndex");
static_assert(offsetof(MarvelAILibrary_GetDefaultRequestServerIndex, Controller) == 0x000000, "Member 'MarvelAILibrary_GetDefaultRequestServerIndex::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetDefaultRequestServerIndex, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetDefaultRequestServerIndex::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetEnemyAICount
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetEnemyAICount final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetEnemyAICount) == 0x000008, "Wrong alignment on MarvelAILibrary_GetEnemyAICount");
static_assert(sizeof(MarvelAILibrary_GetEnemyAICount) == 0x000010, "Wrong size on MarvelAILibrary_GetEnemyAICount");
static_assert(offsetof(MarvelAILibrary_GetEnemyAICount, Character) == 0x000000, "Member 'MarvelAILibrary_GetEnemyAICount::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetEnemyAICount, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetEnemyAICount::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetEnergyProportionOfActor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetEnergyProportionOfActor final
{
public:
	const class AActor*                           ActorWithEnergy;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetEnergyProportionOfActor) == 0x000008, "Wrong alignment on MarvelAILibrary_GetEnergyProportionOfActor");
static_assert(sizeof(MarvelAILibrary_GetEnergyProportionOfActor) == 0x000010, "Wrong size on MarvelAILibrary_GetEnergyProportionOfActor");
static_assert(offsetof(MarvelAILibrary_GetEnergyProportionOfActor, ActorWithEnergy) == 0x000000, "Member 'MarvelAILibrary_GetEnergyProportionOfActor::ActorWithEnergy' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetEnergyProportionOfActor, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetEnergyProportionOfActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetHealthProportionOfActor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetHealthProportionOfActor final
{
public:
	const class AActor*                           ActorWithHealth;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthBarTypeMask;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetHealthProportionOfActor) == 0x000008, "Wrong alignment on MarvelAILibrary_GetHealthProportionOfActor");
static_assert(sizeof(MarvelAILibrary_GetHealthProportionOfActor) == 0x000010, "Wrong size on MarvelAILibrary_GetHealthProportionOfActor");
static_assert(offsetof(MarvelAILibrary_GetHealthProportionOfActor, ActorWithHealth) == 0x000000, "Member 'MarvelAILibrary_GetHealthProportionOfActor::ActorWithHealth' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetHealthProportionOfActor, HealthBarTypeMask) == 0x000008, "Member 'MarvelAILibrary_GetHealthProportionOfActor::HealthBarTypeMask' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetHealthProportionOfActor, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_GetHealthProportionOfActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetHeroBehaviorTreeConfig
// 0x0118 (0x0118 - 0x0000)
struct MarvelAILibrary_GetHeroBehaviorTreeConfig final
{
public:
	const class AMarvelBaseCharacter*             MarvelHero;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelHeroBehaviorTreeTable           ReturnValue;                                       // 0x0008(0x0110)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetHeroBehaviorTreeConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_GetHeroBehaviorTreeConfig");
static_assert(sizeof(MarvelAILibrary_GetHeroBehaviorTreeConfig) == 0x000118, "Wrong size on MarvelAILibrary_GetHeroBehaviorTreeConfig");
static_assert(offsetof(MarvelAILibrary_GetHeroBehaviorTreeConfig, MarvelHero) == 0x000000, "Member 'MarvelAILibrary_GetHeroBehaviorTreeConfig::MarvelHero' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetHeroBehaviorTreeConfig, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetHeroBehaviorTreeConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetHeroGameModeBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetHeroGameModeBehaviorTree final
{
public:
	class AMarvelAIController*                    Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetHeroGameModeBehaviorTree) == 0x000008, "Wrong alignment on MarvelAILibrary_GetHeroGameModeBehaviorTree");
static_assert(sizeof(MarvelAILibrary_GetHeroGameModeBehaviorTree) == 0x000010, "Wrong size on MarvelAILibrary_GetHeroGameModeBehaviorTree");
static_assert(offsetof(MarvelAILibrary_GetHeroGameModeBehaviorTree, Controller) == 0x000000, "Member 'MarvelAILibrary_GetHeroGameModeBehaviorTree::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetHeroGameModeBehaviorTree, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetHeroGameModeBehaviorTree::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetInvalidLocation
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_GetInvalidLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetInvalidLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_GetInvalidLocation");
static_assert(sizeof(MarvelAILibrary_GetInvalidLocation) == 0x000018, "Wrong size on MarvelAILibrary_GetInvalidLocation");
static_assert(offsetof(MarvelAILibrary_GetInvalidLocation, ReturnValue) == 0x000000, "Member 'MarvelAILibrary_GetInvalidLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetMarvelAIStandPointGroupTables
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetMarvelAIStandPointGroupTables final
{
public:
	TArray<struct FMarvelAIStandPointGroupTable>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetMarvelAIStandPointGroupTables) == 0x000008, "Wrong alignment on MarvelAILibrary_GetMarvelAIStandPointGroupTables");
static_assert(sizeof(MarvelAILibrary_GetMarvelAIStandPointGroupTables) == 0x000010, "Wrong size on MarvelAILibrary_GetMarvelAIStandPointGroupTables");
static_assert(offsetof(MarvelAILibrary_GetMarvelAIStandPointGroupTables, ReturnValue) == 0x000000, "Member 'MarvelAILibrary_GetMarvelAIStandPointGroupTables::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetMarvelHeroAutoAITable
// 0x0038 (0x0038 - 0x0000)
struct MarvelAILibrary_GetMarvelHeroAutoAITable final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelHeroAutoAITable                 ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetMarvelHeroAutoAITable) == 0x000008, "Wrong alignment on MarvelAILibrary_GetMarvelHeroAutoAITable");
static_assert(sizeof(MarvelAILibrary_GetMarvelHeroAutoAITable) == 0x000038, "Wrong size on MarvelAILibrary_GetMarvelHeroAutoAITable");
static_assert(offsetof(MarvelAILibrary_GetMarvelHeroAutoAITable, HeroID) == 0x000000, "Member 'MarvelAILibrary_GetMarvelHeroAutoAITable::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetMarvelHeroAutoAITable, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetMarvelHeroAutoAITable::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetMaxHealthPropertyOfActor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetMaxHealthPropertyOfActor final
{
public:
	const class AActor*                           ActorWithHealth;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthBarTypeMask;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetMaxHealthPropertyOfActor) == 0x000008, "Wrong alignment on MarvelAILibrary_GetMaxHealthPropertyOfActor");
static_assert(sizeof(MarvelAILibrary_GetMaxHealthPropertyOfActor) == 0x000010, "Wrong size on MarvelAILibrary_GetMaxHealthPropertyOfActor");
static_assert(offsetof(MarvelAILibrary_GetMaxHealthPropertyOfActor, ActorWithHealth) == 0x000000, "Member 'MarvelAILibrary_GetMaxHealthPropertyOfActor::ActorWithHealth' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetMaxHealthPropertyOfActor, HealthBarTypeMask) == 0x000008, "Member 'MarvelAILibrary_GetMaxHealthPropertyOfActor::HealthBarTypeMask' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetMaxHealthPropertyOfActor, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_GetMaxHealthPropertyOfActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetNavNowSegmentEnd
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_GetNavNowSegmentEnd final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetNavNowSegmentEnd) == 0x000008, "Wrong alignment on MarvelAILibrary_GetNavNowSegmentEnd");
static_assert(sizeof(MarvelAILibrary_GetNavNowSegmentEnd) == 0x000020, "Wrong size on MarvelAILibrary_GetNavNowSegmentEnd");
static_assert(offsetof(MarvelAILibrary_GetNavNowSegmentEnd, Controller) == 0x000000, "Member 'MarvelAILibrary_GetNavNowSegmentEnd::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNavNowSegmentEnd, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetNavNowSegmentEnd::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetNavPathArray
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_GetNavPathArray final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetNavPathArray) == 0x000008, "Wrong alignment on MarvelAILibrary_GetNavPathArray");
static_assert(sizeof(MarvelAILibrary_GetNavPathArray) == 0x000018, "Wrong size on MarvelAILibrary_GetNavPathArray");
static_assert(offsetof(MarvelAILibrary_GetNavPathArray, Controller) == 0x000000, "Member 'MarvelAILibrary_GetNavPathArray::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNavPathArray, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetNavPathArray::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetNavPathEnd
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_GetNavPathEnd final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetNavPathEnd) == 0x000008, "Wrong alignment on MarvelAILibrary_GetNavPathEnd");
static_assert(sizeof(MarvelAILibrary_GetNavPathEnd) == 0x000020, "Wrong size on MarvelAILibrary_GetNavPathEnd");
static_assert(offsetof(MarvelAILibrary_GetNavPathEnd, Controller) == 0x000000, "Member 'MarvelAILibrary_GetNavPathEnd::Controller' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNavPathEnd, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetNavPathEnd::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetNearestReachableLocation
// 0x0050 (0x0050 - 0x0000)
struct MarvelAILibrary_GetNearestReachableLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchExtent;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetNearestReachableLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_GetNearestReachableLocation");
static_assert(sizeof(MarvelAILibrary_GetNearestReachableLocation) == 0x000050, "Wrong size on MarvelAILibrary_GetNearestReachableLocation");
static_assert(offsetof(MarvelAILibrary_GetNearestReachableLocation, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_GetNearestReachableLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNearestReachableLocation, QueryLocation) == 0x000008, "Member 'MarvelAILibrary_GetNearestReachableLocation::QueryLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNearestReachableLocation, SearchExtent) == 0x000020, "Member 'MarvelAILibrary_GetNearestReachableLocation::SearchExtent' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetNearestReachableLocation, ReturnValue) == 0x000038, "Member 'MarvelAILibrary_GetNearestReachableLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetPathPointsLength
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_GetPathPointsLength final
{
public:
	TArray<struct FVector>                        PathPoints;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetPathPointsLength) == 0x000008, "Wrong alignment on MarvelAILibrary_GetPathPointsLength");
static_assert(sizeof(MarvelAILibrary_GetPathPointsLength) == 0x000018, "Wrong size on MarvelAILibrary_GetPathPointsLength");
static_assert(offsetof(MarvelAILibrary_GetPathPointsLength, PathPoints) == 0x000000, "Member 'MarvelAILibrary_GetPathPointsLength::PathPoints' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetPathPointsLength, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_GetPathPointsLength::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetRandomJumpIntervalsScale
// 0x0220 (0x0220 - 0x0000)
struct MarvelAILibrary_GetRandomJumpIntervalsScale final
{
public:
	struct FMarvelAIDifficultyTable               Table;                                             // 0x0000(0x0218)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DynamicDifficultyFactor;                           // 0x0218(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x021C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetRandomJumpIntervalsScale) == 0x000008, "Wrong alignment on MarvelAILibrary_GetRandomJumpIntervalsScale");
static_assert(sizeof(MarvelAILibrary_GetRandomJumpIntervalsScale) == 0x000220, "Wrong size on MarvelAILibrary_GetRandomJumpIntervalsScale");
static_assert(offsetof(MarvelAILibrary_GetRandomJumpIntervalsScale, Table) == 0x000000, "Member 'MarvelAILibrary_GetRandomJumpIntervalsScale::Table' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomJumpIntervalsScale, DynamicDifficultyFactor) == 0x000218, "Member 'MarvelAILibrary_GetRandomJumpIntervalsScale::DynamicDifficultyFactor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomJumpIntervalsScale, ReturnValue) == 0x00021C, "Member 'MarvelAILibrary_GetRandomJumpIntervalsScale::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetRandomLocationAroundLocation
// 0x0040 (0x0040 - 0x0000)
struct MarvelAILibrary_GetRandomLocationAroundLocation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRadius;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetRandomLocationAroundLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_GetRandomLocationAroundLocation");
static_assert(sizeof(MarvelAILibrary_GetRandomLocationAroundLocation) == 0x000040, "Wrong size on MarvelAILibrary_GetRandomLocationAroundLocation");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationAroundLocation, WorldContext) == 0x000000, "Member 'MarvelAILibrary_GetRandomLocationAroundLocation::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationAroundLocation, InLocation) == 0x000008, "Member 'MarvelAILibrary_GetRandomLocationAroundLocation::InLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationAroundLocation, OutLocation) == 0x000020, "Member 'MarvelAILibrary_GetRandomLocationAroundLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationAroundLocation, RandomRadius) == 0x000038, "Member 'MarvelAILibrary_GetRandomLocationAroundLocation::RandomRadius' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationAroundLocation, ReturnValue) == 0x00003C, "Member 'MarvelAILibrary_GetRandomLocationAroundLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetRandomLocationInnerBoxArea
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_GetRandomLocationInnerBoxArea final
{
public:
	const class UBoxComponent*                    Area;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetRandomLocationInnerBoxArea) == 0x000008, "Wrong alignment on MarvelAILibrary_GetRandomLocationInnerBoxArea");
static_assert(sizeof(MarvelAILibrary_GetRandomLocationInnerBoxArea) == 0x000020, "Wrong size on MarvelAILibrary_GetRandomLocationInnerBoxArea");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationInnerBoxArea, Area) == 0x000000, "Member 'MarvelAILibrary_GetRandomLocationInnerBoxArea::Area' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationInnerBoxArea, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetRandomLocationInnerBoxArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetRandomLocationOnNavMesh
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_GetRandomLocationOnNavMesh final
{
public:
	const class AActor*                           DestActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetRandomLocationOnNavMesh) == 0x000008, "Wrong alignment on MarvelAILibrary_GetRandomLocationOnNavMesh");
static_assert(sizeof(MarvelAILibrary_GetRandomLocationOnNavMesh) == 0x000028, "Wrong size on MarvelAILibrary_GetRandomLocationOnNavMesh");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationOnNavMesh, DestActor) == 0x000000, "Member 'MarvelAILibrary_GetRandomLocationOnNavMesh::DestActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationOnNavMesh, OutLocation) == 0x000008, "Member 'MarvelAILibrary_GetRandomLocationOnNavMesh::OutLocation' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationOnNavMesh, RandomRadius) == 0x000020, "Member 'MarvelAILibrary_GetRandomLocationOnNavMesh::RandomRadius' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomLocationOnNavMesh, ReturnValue) == 0x000024, "Member 'MarvelAILibrary_GetRandomLocationOnNavMesh::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetRandomUpdatePreSelectHeroDelay
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay) == 0x000008, "Wrong alignment on MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay");
static_assert(sizeof(MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay) == 0x000010, "Wrong size on MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay");
static_assert(offsetof(MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetRandomUpdatePreSelectHeroDelay::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetStandPointByName
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_GetStandPointByName final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointName;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStandPointBase*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetStandPointByName) == 0x000008, "Wrong alignment on MarvelAILibrary_GetStandPointByName");
static_assert(sizeof(MarvelAILibrary_GetStandPointByName) == 0x000020, "Wrong size on MarvelAILibrary_GetStandPointByName");
static_assert(offsetof(MarvelAILibrary_GetStandPointByName, WorldContext) == 0x000000, "Member 'MarvelAILibrary_GetStandPointByName::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetStandPointByName, PointName) == 0x000008, "Member 'MarvelAILibrary_GetStandPointByName::PointName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetStandPointByName, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_GetStandPointByName::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetTargetLocationForAI
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_GetTargetLocationForAI final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OptRequestedBy;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetTargetLocationForAI) == 0x000008, "Wrong alignment on MarvelAILibrary_GetTargetLocationForAI");
static_assert(sizeof(MarvelAILibrary_GetTargetLocationForAI) == 0x000028, "Wrong size on MarvelAILibrary_GetTargetLocationForAI");
static_assert(offsetof(MarvelAILibrary_GetTargetLocationForAI, TargetActor) == 0x000000, "Member 'MarvelAILibrary_GetTargetLocationForAI::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetTargetLocationForAI, OptRequestedBy) == 0x000008, "Member 'MarvelAILibrary_GetTargetLocationForAI::OptRequestedBy' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetTargetLocationForAI, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_GetTargetLocationForAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetTeammateAICount
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_GetTeammateAICount final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_GetTeammateAICount) == 0x000008, "Wrong alignment on MarvelAILibrary_GetTeammateAICount");
static_assert(sizeof(MarvelAILibrary_GetTeammateAICount) == 0x000010, "Wrong size on MarvelAILibrary_GetTeammateAICount");
static_assert(offsetof(MarvelAILibrary_GetTeammateAICount, Character) == 0x000000, "Member 'MarvelAILibrary_GetTeammateAICount::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetTeammateAICount, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_GetTeammateAICount::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.GetTeammateSummoned
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_GetTeammateSummoned final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonedID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutSummonedComps;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_GetTeammateSummoned) == 0x000008, "Wrong alignment on MarvelAILibrary_GetTeammateSummoned");
static_assert(sizeof(MarvelAILibrary_GetTeammateSummoned) == 0x000020, "Wrong size on MarvelAILibrary_GetTeammateSummoned");
static_assert(offsetof(MarvelAILibrary_GetTeammateSummoned, AIController) == 0x000000, "Member 'MarvelAILibrary_GetTeammateSummoned::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetTeammateSummoned, SummonedID) == 0x000008, "Member 'MarvelAILibrary_GetTeammateSummoned::SummonedID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_GetTeammateSummoned, OutSummonedComps) == 0x000010, "Member 'MarvelAILibrary_GetTeammateSummoned::OutSummonedComps' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsAbilityActive
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_IsAbilityActive final
{
public:
	const class AMarvelBaseCharacter*             Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsAbilityActive) == 0x000008, "Wrong alignment on MarvelAILibrary_IsAbilityActive");
static_assert(sizeof(MarvelAILibrary_IsAbilityActive) == 0x000010, "Wrong size on MarvelAILibrary_IsAbilityActive");
static_assert(offsetof(MarvelAILibrary_IsAbilityActive, Character) == 0x000000, "Member 'MarvelAILibrary_IsAbilityActive::Character' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsAbilityActive, AbilityID) == 0x000008, "Member 'MarvelAILibrary_IsAbilityActive::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsAbilityActive, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_IsAbilityActive::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsAILabEnabled
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_IsAILabEnabled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsAILabEnabled) == 0x000008, "Wrong alignment on MarvelAILibrary_IsAILabEnabled");
static_assert(sizeof(MarvelAILibrary_IsAILabEnabled) == 0x000010, "Wrong size on MarvelAILibrary_IsAILabEnabled");
static_assert(offsetof(MarvelAILibrary_IsAILabEnabled, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_IsAILabEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsAILabEnabled, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_IsAILabEnabled::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsAIUsableHero
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_IsAIUsableHero final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsAIUsableHero) == 0x000008, "Wrong alignment on MarvelAILibrary_IsAIUsableHero");
static_assert(sizeof(MarvelAILibrary_IsAIUsableHero) == 0x000010, "Wrong size on MarvelAILibrary_IsAIUsableHero");
static_assert(offsetof(MarvelAILibrary_IsAIUsableHero, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_IsAIUsableHero::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsAIUsableHero, HeroID) == 0x000008, "Member 'MarvelAILibrary_IsAIUsableHero::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsAIUsableHero, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_IsAIUsableHero::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsTargetSeenFromPortal
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_IsTargetSeenFromPortal final
{
public:
	const class AMarvelAIController*              QueryAI;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsTargetSeenFromPortal) == 0x000008, "Wrong alignment on MarvelAILibrary_IsTargetSeenFromPortal");
static_assert(sizeof(MarvelAILibrary_IsTargetSeenFromPortal) == 0x000018, "Wrong size on MarvelAILibrary_IsTargetSeenFromPortal");
static_assert(offsetof(MarvelAILibrary_IsTargetSeenFromPortal, QueryAI) == 0x000000, "Member 'MarvelAILibrary_IsTargetSeenFromPortal::QueryAI' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsTargetSeenFromPortal, Target) == 0x000008, "Member 'MarvelAILibrary_IsTargetSeenFromPortal::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsTargetSeenFromPortal, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_IsTargetSeenFromPortal::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsValidAbilityUsage
// 0x00F0 (0x00F0 - 0x0000)
struct MarvelAILibrary_IsValidAbilityUsage final
{
public:
	struct FAIAbilityUsage                        AbilityUsage;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsValidAbilityUsage) == 0x000008, "Wrong alignment on MarvelAILibrary_IsValidAbilityUsage");
static_assert(sizeof(MarvelAILibrary_IsValidAbilityUsage) == 0x0000F0, "Wrong size on MarvelAILibrary_IsValidAbilityUsage");
static_assert(offsetof(MarvelAILibrary_IsValidAbilityUsage, AbilityUsage) == 0x000000, "Member 'MarvelAILibrary_IsValidAbilityUsage::AbilityUsage' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsValidAbilityUsage, ReturnValue) == 0x0000E8, "Member 'MarvelAILibrary_IsValidAbilityUsage::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsValidAIAutoAbilityConfig
// 0x0270 (0x0270 - 0x0000)
struct MarvelAILibrary_IsValidAIAutoAbilityConfig final
{
public:
	struct FMarvelAIAutoAbilityTable              Data;                                              // 0x0000(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0268(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsValidAIAutoAbilityConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_IsValidAIAutoAbilityConfig");
static_assert(sizeof(MarvelAILibrary_IsValidAIAutoAbilityConfig) == 0x000270, "Wrong size on MarvelAILibrary_IsValidAIAutoAbilityConfig");
static_assert(offsetof(MarvelAILibrary_IsValidAIAutoAbilityConfig, Data) == 0x000000, "Member 'MarvelAILibrary_IsValidAIAutoAbilityConfig::Data' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsValidAIAutoAbilityConfig, ReturnValue) == 0x000268, "Member 'MarvelAILibrary_IsValidAIAutoAbilityConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsValidHeroBehaviorTreeConfig
// 0x0118 (0x0118 - 0x0000)
struct MarvelAILibrary_IsValidHeroBehaviorTreeConfig final
{
public:
	struct FMarvelHeroBehaviorTreeTable           Data;                                              // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsValidHeroBehaviorTreeConfig) == 0x000008, "Wrong alignment on MarvelAILibrary_IsValidHeroBehaviorTreeConfig");
static_assert(sizeof(MarvelAILibrary_IsValidHeroBehaviorTreeConfig) == 0x000118, "Wrong size on MarvelAILibrary_IsValidHeroBehaviorTreeConfig");
static_assert(offsetof(MarvelAILibrary_IsValidHeroBehaviorTreeConfig, Data) == 0x000000, "Member 'MarvelAILibrary_IsValidHeroBehaviorTreeConfig::Data' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsValidHeroBehaviorTreeConfig, ReturnValue) == 0x000110, "Member 'MarvelAILibrary_IsValidHeroBehaviorTreeConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.IsValidLocation
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_IsValidLocation final
{
public:
	struct FVector                                LocationToCheck;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_IsValidLocation) == 0x000008, "Wrong alignment on MarvelAILibrary_IsValidLocation");
static_assert(sizeof(MarvelAILibrary_IsValidLocation) == 0x000020, "Wrong size on MarvelAILibrary_IsValidLocation");
static_assert(offsetof(MarvelAILibrary_IsValidLocation, LocationToCheck) == 0x000000, "Member 'MarvelAILibrary_IsValidLocation::LocationToCheck' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_IsValidLocation, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_IsValidLocation::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.LoadAndPlayRecord
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_LoadAndPlayRecord final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRecordPath                              RecordPath;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_LoadAndPlayRecord) == 0x000008, "Wrong alignment on MarvelAILibrary_LoadAndPlayRecord");
static_assert(sizeof(MarvelAILibrary_LoadAndPlayRecord) == 0x000020, "Wrong size on MarvelAILibrary_LoadAndPlayRecord");
static_assert(offsetof(MarvelAILibrary_LoadAndPlayRecord, AIController) == 0x000000, "Member 'MarvelAILibrary_LoadAndPlayRecord::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_LoadAndPlayRecord, RecordName) == 0x000008, "Member 'MarvelAILibrary_LoadAndPlayRecord::RecordName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_LoadAndPlayRecord, RecordPath) == 0x000018, "Member 'MarvelAILibrary_LoadAndPlayRecord::RecordPath' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.MarkIfSelectTargetNodeUseSense
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_MarkIfSelectTargetNodeUseSense final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSense;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_MarkIfSelectTargetNodeUseSense) == 0x000008, "Wrong alignment on MarvelAILibrary_MarkIfSelectTargetNodeUseSense");
static_assert(sizeof(MarvelAILibrary_MarkIfSelectTargetNodeUseSense) == 0x000020, "Wrong size on MarvelAILibrary_MarkIfSelectTargetNodeUseSense");
static_assert(offsetof(MarvelAILibrary_MarkIfSelectTargetNodeUseSense, AIController) == 0x000000, "Member 'MarvelAILibrary_MarkIfSelectTargetNodeUseSense::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_MarkIfSelectTargetNodeUseSense, NodeName) == 0x000008, "Member 'MarvelAILibrary_MarkIfSelectTargetNodeUseSense::NodeName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_MarkIfSelectTargetNodeUseSense, UseSense) == 0x000018, "Member 'MarvelAILibrary_MarkIfSelectTargetNodeUseSense::UseSense' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.PlayInputRecordByAI
// 0x00C8 (0x00C8 - 0x0000)
struct MarvelAILibrary_PlayInputRecordByAI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAISpawnParam                          AISpawnParam;                                      // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 RecordName;                                        // 0x00B0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRecordPath                              RecordPath;                                        // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DiscardLocationCorrection;                         // 0x00C1(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopPlay;                                         // 0x00C2(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_PlayInputRecordByAI) == 0x000008, "Wrong alignment on MarvelAILibrary_PlayInputRecordByAI");
static_assert(sizeof(MarvelAILibrary_PlayInputRecordByAI) == 0x0000C8, "Wrong size on MarvelAILibrary_PlayInputRecordByAI");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_PlayInputRecordByAI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, AISpawnParam) == 0x000008, "Member 'MarvelAILibrary_PlayInputRecordByAI::AISpawnParam' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, RecordName) == 0x0000B0, "Member 'MarvelAILibrary_PlayInputRecordByAI::RecordName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, RecordPath) == 0x0000C0, "Member 'MarvelAILibrary_PlayInputRecordByAI::RecordPath' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, DiscardLocationCorrection) == 0x0000C1, "Member 'MarvelAILibrary_PlayInputRecordByAI::DiscardLocationCorrection' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_PlayInputRecordByAI, bLoopPlay) == 0x0000C2, "Member 'MarvelAILibrary_PlayInputRecordByAI::bLoopPlay' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.RemoveScoreModuleDebugData
// 0x0038 (0x0038 - 0x0000)
struct MarvelAILibrary_RemoveScoreModuleDebugData final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIScoreArea                                  ScoreArea;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_RemoveScoreModuleDebugData) == 0x000008, "Wrong alignment on MarvelAILibrary_RemoveScoreModuleDebugData");
static_assert(sizeof(MarvelAILibrary_RemoveScoreModuleDebugData) == 0x000038, "Wrong size on MarvelAILibrary_RemoveScoreModuleDebugData");
static_assert(offsetof(MarvelAILibrary_RemoveScoreModuleDebugData, AIController) == 0x000000, "Member 'MarvelAILibrary_RemoveScoreModuleDebugData::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_RemoveScoreModuleDebugData, Target) == 0x000008, "Member 'MarvelAILibrary_RemoveScoreModuleDebugData::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_RemoveScoreModuleDebugData, NodeName) == 0x000010, "Member 'MarvelAILibrary_RemoveScoreModuleDebugData::NodeName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_RemoveScoreModuleDebugData, ModuleName) == 0x000020, "Member 'MarvelAILibrary_RemoveScoreModuleDebugData::ModuleName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_RemoveScoreModuleDebugData, ScoreArea) == 0x000030, "Member 'MarvelAILibrary_RemoveScoreModuleDebugData::ScoreArea' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SetAIAbilityServer
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_SetAIAbilityServer final
{
public:
	const class UObject*                          WCO;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityServerIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_SetAIAbilityServer) == 0x000008, "Wrong alignment on MarvelAILibrary_SetAIAbilityServer");
static_assert(sizeof(MarvelAILibrary_SetAIAbilityServer) == 0x000010, "Wrong size on MarvelAILibrary_SetAIAbilityServer");
static_assert(offsetof(MarvelAILibrary_SetAIAbilityServer, WCO) == 0x000000, "Member 'MarvelAILibrary_SetAIAbilityServer::WCO' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIAbilityServer, AbilityServerIndex) == 0x000008, "Member 'MarvelAILibrary_SetAIAbilityServer::AbilityServerIndex' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIAbilityServer, ReturnValue) == 0x00000C, "Member 'MarvelAILibrary_SetAIAbilityServer::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SetAIChangeHeroDebugInfo
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_SetAIChangeHeroDebugInfo final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIChangeHeroReason                           ChangeReason;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeResult;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Curve_Energy;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCD;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Curve_CD;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_SetAIChangeHeroDebugInfo) == 0x000008, "Wrong alignment on MarvelAILibrary_SetAIChangeHeroDebugInfo");
static_assert(sizeof(MarvelAILibrary_SetAIChangeHeroDebugInfo) == 0x000018, "Wrong size on MarvelAILibrary_SetAIChangeHeroDebugInfo");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, AIController) == 0x000000, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, ChangeReason) == 0x000008, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::ChangeReason' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, ChangeResult) == 0x000009, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::ChangeResult' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, Curve_Energy) == 0x00000C, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::Curve_Energy' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, ChangeCD) == 0x000010, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::ChangeCD' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAIChangeHeroDebugInfo, Curve_CD) == 0x000014, "Member 'MarvelAILibrary_SetAIChangeHeroDebugInfo::Curve_CD' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SetAILabServerUrl
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_SetAILabServerUrl final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewUrl;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_SetAILabServerUrl) == 0x000008, "Wrong alignment on MarvelAILibrary_SetAILabServerUrl");
static_assert(sizeof(MarvelAILibrary_SetAILabServerUrl) == 0x000028, "Wrong size on MarvelAILibrary_SetAILabServerUrl");
static_assert(offsetof(MarvelAILibrary_SetAILabServerUrl, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_SetAILabServerUrl::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAILabServerUrl, NewUrl) == 0x000008, "Member 'MarvelAILibrary_SetAILabServerUrl::NewUrl' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetAILabServerUrl, Msg) == 0x000018, "Member 'MarvelAILibrary_SetAILabServerUrl::Msg' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SetTeamAIAbilityTactic
// 0x0060 (0x0060 - 0x0000)
struct MarvelAILibrary_SetTeamAIAbilityTactic final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   TeamIDs;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 AbilityTacticClass;                                // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_SetTeamAIAbilityTactic) == 0x000008, "Wrong alignment on MarvelAILibrary_SetTeamAIAbilityTactic");
static_assert(sizeof(MarvelAILibrary_SetTeamAIAbilityTactic) == 0x000060, "Wrong size on MarvelAILibrary_SetTeamAIAbilityTactic");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTactic, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_SetTeamAIAbilityTactic::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTactic, TeamIDs) == 0x000008, "Member 'MarvelAILibrary_SetTeamAIAbilityTactic::TeamIDs' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTactic, AbilityTacticClass) == 0x000058, "Member 'MarvelAILibrary_SetTeamAIAbilityTactic::AbilityTacticClass' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SetTeamAIAbilityTacticClass
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_SetTeamAIAbilityTacticClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AbilityTacticClass;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_SetTeamAIAbilityTacticClass) == 0x000008, "Wrong alignment on MarvelAILibrary_SetTeamAIAbilityTacticClass");
static_assert(sizeof(MarvelAILibrary_SetTeamAIAbilityTacticClass) == 0x000018, "Wrong size on MarvelAILibrary_SetTeamAIAbilityTacticClass");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTacticClass, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_SetTeamAIAbilityTacticClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTacticClass, BattleSide) == 0x000008, "Member 'MarvelAILibrary_SetTeamAIAbilityTacticClass::BattleSide' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SetTeamAIAbilityTacticClass, AbilityTacticClass) == 0x000010, "Member 'MarvelAILibrary_SetTeamAIAbilityTacticClass::AbilityTacticClass' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.ShouldUseFlyPath
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_ShouldUseFlyPath final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_ShouldUseFlyPath) == 0x000008, "Wrong alignment on MarvelAILibrary_ShouldUseFlyPath");
static_assert(sizeof(MarvelAILibrary_ShouldUseFlyPath) == 0x000010, "Wrong size on MarvelAILibrary_ShouldUseFlyPath");
static_assert(offsetof(MarvelAILibrary_ShouldUseFlyPath, MovingActor) == 0x000000, "Member 'MarvelAILibrary_ShouldUseFlyPath::MovingActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_ShouldUseFlyPath, ReturnValue) == 0x000008, "Member 'MarvelAILibrary_ShouldUseFlyPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.SolveThreeSphereIntersections
// 0x0038 (0x0038 - 0x0000)
struct MarvelAILibrary_SolveThreeSphereIntersections final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 RadiusSq;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutIntersections;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_SolveThreeSphereIntersections) == 0x000008, "Wrong alignment on MarvelAILibrary_SolveThreeSphereIntersections");
static_assert(sizeof(MarvelAILibrary_SolveThreeSphereIntersections) == 0x000038, "Wrong size on MarvelAILibrary_SolveThreeSphereIntersections");
static_assert(offsetof(MarvelAILibrary_SolveThreeSphereIntersections, Points) == 0x000000, "Member 'MarvelAILibrary_SolveThreeSphereIntersections::Points' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SolveThreeSphereIntersections, RadiusSq) == 0x000010, "Member 'MarvelAILibrary_SolveThreeSphereIntersections::RadiusSq' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SolveThreeSphereIntersections, OutIntersections) == 0x000020, "Member 'MarvelAILibrary_SolveThreeSphereIntersections::OutIntersections' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_SolveThreeSphereIntersections, ReturnValue) == 0x000030, "Member 'MarvelAILibrary_SolveThreeSphereIntersections::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.StopInputRecordByAI
// 0x0008 (0x0008 - 0x0000)
struct MarvelAILibrary_StopInputRecordByAI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_StopInputRecordByAI) == 0x000008, "Wrong alignment on MarvelAILibrary_StopInputRecordByAI");
static_assert(sizeof(MarvelAILibrary_StopInputRecordByAI) == 0x000008, "Wrong size on MarvelAILibrary_StopInputRecordByAI");
static_assert(offsetof(MarvelAILibrary_StopInputRecordByAI, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_StopInputRecordByAI::WorldContextObject' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.StoreScoreModuleDebugData
// 0x0038 (0x0038 - 0x0000)
struct MarvelAILibrary_StoreScoreModuleDebugData final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIScoreArea                                  ScoreArea;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Score;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_StoreScoreModuleDebugData) == 0x000008, "Wrong alignment on MarvelAILibrary_StoreScoreModuleDebugData");
static_assert(sizeof(MarvelAILibrary_StoreScoreModuleDebugData) == 0x000038, "Wrong size on MarvelAILibrary_StoreScoreModuleDebugData");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, AIController) == 0x000000, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, Target) == 0x000008, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, NodeName) == 0x000010, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::NodeName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, ModuleName) == 0x000020, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::ModuleName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, ScoreArea) == 0x000030, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::ScoreArea' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreScoreModuleDebugData, Score) == 0x000034, "Member 'MarvelAILibrary_StoreScoreModuleDebugData::Score' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.StoreTargetFinalScoreForDebug
// 0x0028 (0x0028 - 0x0000)
struct MarvelAILibrary_StoreTargetFinalScoreForDebug final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalScore;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_StoreTargetFinalScoreForDebug) == 0x000008, "Wrong alignment on MarvelAILibrary_StoreTargetFinalScoreForDebug");
static_assert(sizeof(MarvelAILibrary_StoreTargetFinalScoreForDebug) == 0x000028, "Wrong size on MarvelAILibrary_StoreTargetFinalScoreForDebug");
static_assert(offsetof(MarvelAILibrary_StoreTargetFinalScoreForDebug, AIController) == 0x000000, "Member 'MarvelAILibrary_StoreTargetFinalScoreForDebug::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreTargetFinalScoreForDebug, Target) == 0x000008, "Member 'MarvelAILibrary_StoreTargetFinalScoreForDebug::Target' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreTargetFinalScoreForDebug, NodeName) == 0x000010, "Member 'MarvelAILibrary_StoreTargetFinalScoreForDebug::NodeName' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_StoreTargetFinalScoreForDebug, FinalScore) == 0x000020, "Member 'MarvelAILibrary_StoreTargetFinalScoreForDebug::FinalScore' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.TakeFlyLocationFromBox
// 0x0030 (0x0030 - 0x0000)
struct MarvelAILibrary_TakeFlyLocationFromBox final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBoxComponent*                    Area;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttemptTime;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_TakeFlyLocationFromBox) == 0x000008, "Wrong alignment on MarvelAILibrary_TakeFlyLocationFromBox");
static_assert(sizeof(MarvelAILibrary_TakeFlyLocationFromBox) == 0x000030, "Wrong size on MarvelAILibrary_TakeFlyLocationFromBox");
static_assert(offsetof(MarvelAILibrary_TakeFlyLocationFromBox, MovingActor) == 0x000000, "Member 'MarvelAILibrary_TakeFlyLocationFromBox::MovingActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeFlyLocationFromBox, Area) == 0x000008, "Member 'MarvelAILibrary_TakeFlyLocationFromBox::Area' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeFlyLocationFromBox, MaxAttemptTime) == 0x000010, "Member 'MarvelAILibrary_TakeFlyLocationFromBox::MaxAttemptTime' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeFlyLocationFromBox, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_TakeFlyLocationFromBox::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.TakeTargetLocationForStaticActor
// 0x0030 (0x0030 - 0x0000)
struct MarvelAILibrary_TakeTargetLocationForStaticActor final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNavAgent;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_TakeTargetLocationForStaticActor) == 0x000008, "Wrong alignment on MarvelAILibrary_TakeTargetLocationForStaticActor");
static_assert(sizeof(MarvelAILibrary_TakeTargetLocationForStaticActor) == 0x000030, "Wrong size on MarvelAILibrary_TakeTargetLocationForStaticActor");
static_assert(offsetof(MarvelAILibrary_TakeTargetLocationForStaticActor, MovingActor) == 0x000000, "Member 'MarvelAILibrary_TakeTargetLocationForStaticActor::MovingActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeTargetLocationForStaticActor, DestActor) == 0x000008, "Member 'MarvelAILibrary_TakeTargetLocationForStaticActor::DestActor' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeTargetLocationForStaticActor, RandomRadius) == 0x000010, "Member 'MarvelAILibrary_TakeTargetLocationForStaticActor::RandomRadius' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeTargetLocationForStaticActor, UseNavAgent) == 0x000014, "Member 'MarvelAILibrary_TakeTargetLocationForStaticActor::UseNavAgent' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TakeTargetLocationForStaticActor, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_TakeTargetLocationForStaticActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.TestRotateVector
// 0x0048 (0x0048 - 0x0000)
struct MarvelAILibrary_TestRotateVector final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRot;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_TestRotateVector) == 0x000008, "Wrong alignment on MarvelAILibrary_TestRotateVector");
static_assert(sizeof(MarvelAILibrary_TestRotateVector) == 0x000048, "Wrong size on MarvelAILibrary_TestRotateVector");
static_assert(offsetof(MarvelAILibrary_TestRotateVector, InVec) == 0x000000, "Member 'MarvelAILibrary_TestRotateVector::InVec' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TestRotateVector, InRot) == 0x000018, "Member 'MarvelAILibrary_TestRotateVector::InRot' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TestRotateVector, ReturnValue) == 0x000030, "Member 'MarvelAILibrary_TestRotateVector::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.TryAddLowHealthMark
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_TryAddLowHealthMark final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_TryAddLowHealthMark) == 0x000008, "Wrong alignment on MarvelAILibrary_TryAddLowHealthMark");
static_assert(sizeof(MarvelAILibrary_TryAddLowHealthMark) == 0x000010, "Wrong size on MarvelAILibrary_TryAddLowHealthMark");
static_assert(offsetof(MarvelAILibrary_TryAddLowHealthMark, AIController) == 0x000000, "Member 'MarvelAILibrary_TryAddLowHealthMark::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_TryAddLowHealthMark, Target) == 0x000008, "Member 'MarvelAILibrary_TryAddLowHealthMark::Target' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.UpdateAIGameModeConfigDataAsset
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_UpdateAIGameModeConfigDataAsset final
{
public:
	class FString                                 DataExec;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_UpdateAIGameModeConfigDataAsset) == 0x000008, "Wrong alignment on MarvelAILibrary_UpdateAIGameModeConfigDataAsset");
static_assert(sizeof(MarvelAILibrary_UpdateAIGameModeConfigDataAsset) == 0x000018, "Wrong size on MarvelAILibrary_UpdateAIGameModeConfigDataAsset");
static_assert(offsetof(MarvelAILibrary_UpdateAIGameModeConfigDataAsset, DataExec) == 0x000000, "Member 'MarvelAILibrary_UpdateAIGameModeConfigDataAsset::DataExec' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateAIGameModeConfigDataAsset, ReturnValue) == 0x000010, "Member 'MarvelAILibrary_UpdateAIGameModeConfigDataAsset::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.UpdateAIHitRateDataAsset
// 0x0020 (0x0020 - 0x0000)
struct MarvelAILibrary_UpdateAIHitRateDataAsset final
{
public:
	int32                                         DifficultyLevel;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataExec;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAILibrary_UpdateAIHitRateDataAsset) == 0x000008, "Wrong alignment on MarvelAILibrary_UpdateAIHitRateDataAsset");
static_assert(sizeof(MarvelAILibrary_UpdateAIHitRateDataAsset) == 0x000020, "Wrong size on MarvelAILibrary_UpdateAIHitRateDataAsset");
static_assert(offsetof(MarvelAILibrary_UpdateAIHitRateDataAsset, DifficultyLevel) == 0x000000, "Member 'MarvelAILibrary_UpdateAIHitRateDataAsset::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateAIHitRateDataAsset, DataExec) == 0x000008, "Member 'MarvelAILibrary_UpdateAIHitRateDataAsset::DataExec' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateAIHitRateDataAsset, ReturnValue) == 0x000018, "Member 'MarvelAILibrary_UpdateAIHitRateDataAsset::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.UpdateTeamDifficulty
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_UpdateTeamDifficulty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyLevel;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_UpdateTeamDifficulty) == 0x000008, "Wrong alignment on MarvelAILibrary_UpdateTeamDifficulty");
static_assert(sizeof(MarvelAILibrary_UpdateTeamDifficulty) == 0x000010, "Wrong size on MarvelAILibrary_UpdateTeamDifficulty");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDifficulty, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_UpdateTeamDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDifficulty, TeamNum) == 0x000008, "Member 'MarvelAILibrary_UpdateTeamDifficulty::TeamNum' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDifficulty, DifficultyLevel) == 0x00000C, "Member 'MarvelAILibrary_UpdateTeamDifficulty::DifficultyLevel' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.UpdateTeamDynamicDifficulty
// 0x0010 (0x0010 - 0x0000)
struct MarvelAILibrary_UpdateTeamDynamicDifficulty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicDifficultyFactor;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_UpdateTeamDynamicDifficulty) == 0x000008, "Wrong alignment on MarvelAILibrary_UpdateTeamDynamicDifficulty");
static_assert(sizeof(MarvelAILibrary_UpdateTeamDynamicDifficulty) == 0x000010, "Wrong size on MarvelAILibrary_UpdateTeamDynamicDifficulty");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDynamicDifficulty, WorldContextObject) == 0x000000, "Member 'MarvelAILibrary_UpdateTeamDynamicDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDynamicDifficulty, TeamID) == 0x000008, "Member 'MarvelAILibrary_UpdateTeamDynamicDifficulty::TeamID' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_UpdateTeamDynamicDifficulty, DynamicDifficultyFactor) == 0x00000C, "Member 'MarvelAILibrary_UpdateTeamDynamicDifficulty::DynamicDifficultyFactor' has a wrong offset!");

// Function MarvelAI.MarvelAILibrary.VlogPathPoints
// 0x0018 (0x0018 - 0x0000)
struct MarvelAILibrary_VlogPathPoints final
{
public:
	const class AActor*                           LogOwner;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAILibrary_VlogPathPoints) == 0x000008, "Wrong alignment on MarvelAILibrary_VlogPathPoints");
static_assert(sizeof(MarvelAILibrary_VlogPathPoints) == 0x000018, "Wrong size on MarvelAILibrary_VlogPathPoints");
static_assert(offsetof(MarvelAILibrary_VlogPathPoints, LogOwner) == 0x000000, "Member 'MarvelAILibrary_VlogPathPoints::LogOwner' has a wrong offset!");
static_assert(offsetof(MarvelAILibrary_VlogPathPoints, PathPoints) == 0x000008, "Member 'MarvelAILibrary_VlogPathPoints::PathPoints' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.K2_ConfigureSense
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIPerceptionComponent_K2_ConfigureSense final
{
public:
	class UAISenseConfig*                         SenseConfig;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIPerceptionComponent_K2_ConfigureSense) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_K2_ConfigureSense");
static_assert(sizeof(MarvelAIPerceptionComponent_K2_ConfigureSense) == 0x000008, "Wrong size on MarvelAIPerceptionComponent_K2_ConfigureSense");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_ConfigureSense, SenseConfig) == 0x000000, "Member 'MarvelAIPerceptionComponent_K2_ConfigureSense::SenseConfig' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.K2_NotifyTargetToTeam
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIPerceptionComponent_K2_NotifyTargetToTeam final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyRange;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyStrength;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIPerceptionComponent_K2_NotifyTargetToTeam) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_K2_NotifyTargetToTeam");
static_assert(sizeof(MarvelAIPerceptionComponent_K2_NotifyTargetToTeam) == 0x000010, "Wrong size on MarvelAIPerceptionComponent_K2_NotifyTargetToTeam");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_NotifyTargetToTeam, TargetActor) == 0x000000, "Member 'MarvelAIPerceptionComponent_K2_NotifyTargetToTeam::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_NotifyTargetToTeam, NotifyRange) == 0x000008, "Member 'MarvelAIPerceptionComponent_K2_NotifyTargetToTeam::NotifyRange' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_NotifyTargetToTeam, NotifyStrength) == 0x00000C, "Member 'MarvelAIPerceptionComponent_K2_NotifyTargetToTeam::NotifyStrength' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.NotifyEnemyTarget
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIPerceptionComponent_NotifyEnemyTarget final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyRange;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIPerceptionComponent_NotifyEnemyTarget) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_NotifyEnemyTarget");
static_assert(sizeof(MarvelAIPerceptionComponent_NotifyEnemyTarget) == 0x000010, "Wrong size on MarvelAIPerceptionComponent_NotifyEnemyTarget");
static_assert(offsetof(MarvelAIPerceptionComponent_NotifyEnemyTarget, TargetActor) == 0x000000, "Member 'MarvelAIPerceptionComponent_NotifyEnemyTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_NotifyEnemyTarget, NotifyRange) == 0x000008, "Member 'MarvelAIPerceptionComponent_NotifyEnemyTarget::NotifyRange' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.GetPerceivedActors
// 0x0018 (0x0018 - 0x0000)
struct MarvelAIPerceptionComponent_GetPerceivedActors final
{
public:
	TSubclassOf<class UAISense>                   SenseClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIPerceptionComponent_GetPerceivedActors) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_GetPerceivedActors");
static_assert(sizeof(MarvelAIPerceptionComponent_GetPerceivedActors) == 0x000018, "Wrong size on MarvelAIPerceptionComponent_GetPerceivedActors");
static_assert(offsetof(MarvelAIPerceptionComponent_GetPerceivedActors, SenseClass) == 0x000000, "Member 'MarvelAIPerceptionComponent_GetPerceivedActors::SenseClass' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_GetPerceivedActors, OutActors) == 0x000008, "Member 'MarvelAIPerceptionComponent_GetPerceivedActors::OutActors' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.GetTargetTeleportTransform
// 0x0080 (0x0080 - 0x0000)
struct MarvelAIPerceptionComponent_GetTargetTeleportTransform final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTeleportTransform;                              // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIPerceptionComponent_GetTargetTeleportTransform) == 0x000010, "Wrong alignment on MarvelAIPerceptionComponent_GetTargetTeleportTransform");
static_assert(sizeof(MarvelAIPerceptionComponent_GetTargetTeleportTransform) == 0x000080, "Wrong size on MarvelAIPerceptionComponent_GetTargetTeleportTransform");
static_assert(offsetof(MarvelAIPerceptionComponent_GetTargetTeleportTransform, TargetUID) == 0x000000, "Member 'MarvelAIPerceptionComponent_GetTargetTeleportTransform::TargetUID' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_GetTargetTeleportTransform, OutTeleportTransform) == 0x000010, "Member 'MarvelAIPerceptionComponent_GetTargetTeleportTransform::OutTeleportTransform' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_GetTargetTeleportTransform, ReturnValue) == 0x000070, "Member 'MarvelAIPerceptionComponent_GetTargetTeleportTransform::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.IsCurrentlyInSight
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIPerceptionComponent_IsCurrentlyInSight final
{
public:
	const class AActor*                           TargetToCheck;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIPerceptionComponent_IsCurrentlyInSight) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_IsCurrentlyInSight");
static_assert(sizeof(MarvelAIPerceptionComponent_IsCurrentlyInSight) == 0x000010, "Wrong size on MarvelAIPerceptionComponent_IsCurrentlyInSight");
static_assert(offsetof(MarvelAIPerceptionComponent_IsCurrentlyInSight, TargetToCheck) == 0x000000, "Member 'MarvelAIPerceptionComponent_IsCurrentlyInSight::TargetToCheck' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_IsCurrentlyInSight, ReturnValue) == 0x000008, "Member 'MarvelAIPerceptionComponent_IsCurrentlyInSight::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAIPerceptionComponent.K2_GetPriorityFactor
// 0x0010 (0x0010 - 0x0000)
struct MarvelAIPerceptionComponent_K2_GetPriorityFactor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAIPerceptionComponent_K2_GetPriorityFactor) == 0x000008, "Wrong alignment on MarvelAIPerceptionComponent_K2_GetPriorityFactor");
static_assert(sizeof(MarvelAIPerceptionComponent_K2_GetPriorityFactor) == 0x000010, "Wrong size on MarvelAIPerceptionComponent_K2_GetPriorityFactor");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_GetPriorityFactor, Target) == 0x000000, "Member 'MarvelAIPerceptionComponent_K2_GetPriorityFactor::Target' has a wrong offset!");
static_assert(offsetof(MarvelAIPerceptionComponent_K2_GetPriorityFactor, ReturnValue) == 0x000008, "Member 'MarvelAIPerceptionComponent_K2_GetPriorityFactor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISense_Damage.MarvelReportDamageEvent
// 0x0050 (0x0050 - 0x0000)
struct MarvelAISense_Damage_MarvelReportDamageEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EventLocation;                                     // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISense_Damage_MarvelReportDamageEvent) == 0x000008, "Wrong alignment on MarvelAISense_Damage_MarvelReportDamageEvent");
static_assert(sizeof(MarvelAISense_Damage_MarvelReportDamageEvent) == 0x000050, "Wrong size on MarvelAISense_Damage_MarvelReportDamageEvent");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, WorldContextObject) == 0x000000, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, DamagedActor) == 0x000008, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, Instigator) == 0x000010, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::Instigator' has a wrong offset!");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, DamageAmount) == 0x000018, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::DamageAmount' has a wrong offset!");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, EventLocation) == 0x000020, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::EventLocation' has a wrong offset!");
static_assert(offsetof(MarvelAISense_Damage_MarvelReportDamageEvent, HitLocation) == 0x000038, "Member 'MarvelAISense_Damage_MarvelReportDamageEvent::HitLocation' has a wrong offset!");

// Function MarvelAI.MarvelAISense_DangerousTarget.ReportAbilityEvent
// 0x0018 (0x0018 - 0x0000)
struct MarvelAISense_DangerousTarget_ReportAbilityEvent final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ability;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilitySenseNotify                           Notify;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAISense_DangerousTarget_ReportAbilityEvent) == 0x000008, "Wrong alignment on MarvelAISense_DangerousTarget_ReportAbilityEvent");
static_assert(sizeof(MarvelAISense_DangerousTarget_ReportAbilityEvent) == 0x000018, "Wrong size on MarvelAISense_DangerousTarget_ReportAbilityEvent");
static_assert(offsetof(MarvelAISense_DangerousTarget_ReportAbilityEvent, Source) == 0x000000, "Member 'MarvelAISense_DangerousTarget_ReportAbilityEvent::Source' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_ReportAbilityEvent, Ability) == 0x000008, "Member 'MarvelAISense_DangerousTarget_ReportAbilityEvent::Ability' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_ReportAbilityEvent, Notify) == 0x000010, "Member 'MarvelAISense_DangerousTarget_ReportAbilityEvent::Notify' has a wrong offset!");

// Function MarvelAI.MarvelAISense_DangerousTarget.EndAbility
// 0x0028 (0x0028 - 0x0000)
struct MarvelAISense_DangerousTarget_EndAbility final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISense_DangerousTarget_EndAbility) == 0x000008, "Wrong alignment on MarvelAISense_DangerousTarget_EndAbility");
static_assert(sizeof(MarvelAISense_DangerousTarget_EndAbility) == 0x000028, "Wrong size on MarvelAISense_DangerousTarget_EndAbility");
static_assert(offsetof(MarvelAISense_DangerousTarget_EndAbility, Source) == 0x000000, "Member 'MarvelAISense_DangerousTarget_EndAbility::Source' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_EndAbility, AbilityID) == 0x000008, "Member 'MarvelAISense_DangerousTarget_EndAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_EndAbility, SessionID) == 0x000010, "Member 'MarvelAISense_DangerousTarget_EndAbility::SessionID' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_EndAbility, SourceAbility) == 0x000020, "Member 'MarvelAISense_DangerousTarget_EndAbility::SourceAbility' has a wrong offset!");

// Function MarvelAI.MarvelAISense_DangerousTarget.OnAbilityActivate
// 0x0028 (0x0028 - 0x0000)
struct MarvelAISense_DangerousTarget_OnAbilityActivate final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISense_DangerousTarget_OnAbilityActivate) == 0x000008, "Wrong alignment on MarvelAISense_DangerousTarget_OnAbilityActivate");
static_assert(sizeof(MarvelAISense_DangerousTarget_OnAbilityActivate) == 0x000028, "Wrong size on MarvelAISense_DangerousTarget_OnAbilityActivate");
static_assert(offsetof(MarvelAISense_DangerousTarget_OnAbilityActivate, Source) == 0x000000, "Member 'MarvelAISense_DangerousTarget_OnAbilityActivate::Source' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_OnAbilityActivate, AbilityID) == 0x000008, "Member 'MarvelAISense_DangerousTarget_OnAbilityActivate::AbilityID' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_OnAbilityActivate, SessionID) == 0x000010, "Member 'MarvelAISense_DangerousTarget_OnAbilityActivate::SessionID' has a wrong offset!");
static_assert(offsetof(MarvelAISense_DangerousTarget_OnAbilityActivate, SourceAbility) == 0x000020, "Member 'MarvelAISense_DangerousTarget_OnAbilityActivate::SourceAbility' has a wrong offset!");

// Function MarvelAI.MarvelAIStimuliSourceComponent.OnSummonedBeginAgent
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIStimuliSourceComponent_OnSummonedBeginAgent final
{
public:
	class AActor*                                 SummonerTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStimuliSourceComponent_OnSummonedBeginAgent) == 0x000008, "Wrong alignment on MarvelAIStimuliSourceComponent_OnSummonedBeginAgent");
static_assert(sizeof(MarvelAIStimuliSourceComponent_OnSummonedBeginAgent) == 0x000008, "Wrong size on MarvelAIStimuliSourceComponent_OnSummonedBeginAgent");
static_assert(offsetof(MarvelAIStimuliSourceComponent_OnSummonedBeginAgent, SummonerTarget) == 0x000000, "Member 'MarvelAIStimuliSourceComponent_OnSummonedBeginAgent::SummonerTarget' has a wrong offset!");

// Function MarvelAI.MarvelAIStimuliSourceComponent.OnSummonedEndAgent
// 0x0008 (0x0008 - 0x0000)
struct MarvelAIStimuliSourceComponent_OnSummonedEndAgent final
{
public:
	class AActor*                                 SummonerTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStimuliSourceComponent_OnSummonedEndAgent) == 0x000008, "Wrong alignment on MarvelAIStimuliSourceComponent_OnSummonedEndAgent");
static_assert(sizeof(MarvelAIStimuliSourceComponent_OnSummonedEndAgent) == 0x000008, "Wrong size on MarvelAIStimuliSourceComponent_OnSummonedEndAgent");
static_assert(offsetof(MarvelAIStimuliSourceComponent_OnSummonedEndAgent, SummonerTarget) == 0x000000, "Member 'MarvelAIStimuliSourceComponent_OnSummonedEndAgent::SummonerTarget' has a wrong offset!");

// Function MarvelAI.MarvelAIStimuliSourceComponent.WhenOwnerDeath
// 0x0028 (0x0028 - 0x0000)
struct MarvelAIStimuliSourceComponent_WhenOwnerDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ParamHandle;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStimuliSourceComponent_WhenOwnerDeath) == 0x000008, "Wrong alignment on MarvelAIStimuliSourceComponent_WhenOwnerDeath");
static_assert(sizeof(MarvelAIStimuliSourceComponent_WhenOwnerDeath) == 0x000028, "Wrong size on MarvelAIStimuliSourceComponent_WhenOwnerDeath");
static_assert(offsetof(MarvelAIStimuliSourceComponent_WhenOwnerDeath, InSourceAvatar) == 0x000000, "Member 'MarvelAIStimuliSourceComponent_WhenOwnerDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIStimuliSourceComponent_WhenOwnerDeath, InTargetAvatar) == 0x000008, "Member 'MarvelAIStimuliSourceComponent_WhenOwnerDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(MarvelAIStimuliSourceComponent_WhenOwnerDeath, ParamHandle) == 0x000010, "Member 'MarvelAIStimuliSourceComponent_WhenOwnerDeath::ParamHandle' has a wrong offset!");

// Function MarvelAI.MarvelAIStimuliSourceComponent.WhenOwnerReborn
// 0x0740 (0x0740 - 0x0000)
struct MarvelAIStimuliSourceComponent_WhenOwnerReborn final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRebornParam                  Param;                                             // 0x0010(0x0730)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAIStimuliSourceComponent_WhenOwnerReborn) == 0x000010, "Wrong alignment on MarvelAIStimuliSourceComponent_WhenOwnerReborn");
static_assert(sizeof(MarvelAIStimuliSourceComponent_WhenOwnerReborn) == 0x000740, "Wrong size on MarvelAIStimuliSourceComponent_WhenOwnerReborn");
static_assert(offsetof(MarvelAIStimuliSourceComponent_WhenOwnerReborn, TargetActor) == 0x000000, "Member 'MarvelAIStimuliSourceComponent_WhenOwnerReborn::TargetActor' has a wrong offset!");
static_assert(offsetof(MarvelAIStimuliSourceComponent_WhenOwnerReborn, Param) == 0x000010, "Member 'MarvelAIStimuliSourceComponent_WhenOwnerReborn::Param' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetAbilityTacticsManager
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetAbilityTacticsManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTacticsManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetAbilityTacticsManager) == 0x000008, "Wrong alignment on MarvelAISystem_GetAbilityTacticsManager");
static_assert(sizeof(MarvelAISystem_GetAbilityTacticsManager) == 0x000010, "Wrong size on MarvelAISystem_GetAbilityTacticsManager");
static_assert(offsetof(MarvelAISystem_GetAbilityTacticsManager, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetAbilityTacticsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetAbilityTacticsManager, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetAbilityTacticsManager::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetAITeamManager
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetAITeamManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAITeamManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetAITeamManager) == 0x000008, "Wrong alignment on MarvelAISystem_GetAITeamManager");
static_assert(sizeof(MarvelAISystem_GetAITeamManager) == 0x000010, "Wrong size on MarvelAISystem_GetAITeamManager");
static_assert(offsetof(MarvelAISystem_GetAITeamManager, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetAITeamManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetAITeamManager, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetAITeamManager::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetAutoAbilityGlobalConfig
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetAutoAbilityGlobalConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarvelAIAutoAbilityGlobalConfig* ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetAutoAbilityGlobalConfig) == 0x000008, "Wrong alignment on MarvelAISystem_GetAutoAbilityGlobalConfig");
static_assert(sizeof(MarvelAISystem_GetAutoAbilityGlobalConfig) == 0x000010, "Wrong size on MarvelAISystem_GetAutoAbilityGlobalConfig");
static_assert(offsetof(MarvelAISystem_GetAutoAbilityGlobalConfig, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetAutoAbilityGlobalConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetAutoAbilityGlobalConfig, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetAutoAbilityGlobalConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetBattleAreaManager
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetBattleAreaManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAIBattleAreaManager*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetBattleAreaManager) == 0x000008, "Wrong alignment on MarvelAISystem_GetBattleAreaManager");
static_assert(sizeof(MarvelAISystem_GetBattleAreaManager) == 0x000010, "Wrong size on MarvelAISystem_GetBattleAreaManager");
static_assert(offsetof(MarvelAISystem_GetBattleAreaManager, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetBattleAreaManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetBattleAreaManager, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetBattleAreaManager::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetDifficultyGlobalConfig
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetDifficultyGlobalConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarvelAIDifficultyGlobalConfig*  ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetDifficultyGlobalConfig) == 0x000008, "Wrong alignment on MarvelAISystem_GetDifficultyGlobalConfig");
static_assert(sizeof(MarvelAISystem_GetDifficultyGlobalConfig) == 0x000010, "Wrong size on MarvelAISystem_GetDifficultyGlobalConfig");
static_assert(offsetof(MarvelAISystem_GetDifficultyGlobalConfig, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetDifficultyGlobalConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetDifficultyGlobalConfig, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetDifficultyGlobalConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetMarvelAISystem
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetMarvelAISystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAISystem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetMarvelAISystem) == 0x000008, "Wrong alignment on MarvelAISystem_GetMarvelAISystem");
static_assert(sizeof(MarvelAISystem_GetMarvelAISystem) == 0x000010, "Wrong size on MarvelAISystem_GetMarvelAISystem");
static_assert(offsetof(MarvelAISystem_GetMarvelAISystem, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetMarvelAISystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetMarvelAISystem, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetMarvelAISystem::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetQaAIGlobalConfig
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetQaAIGlobalConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UQA_AIGlobalConfig*               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetQaAIGlobalConfig) == 0x000008, "Wrong alignment on MarvelAISystem_GetQaAIGlobalConfig");
static_assert(sizeof(MarvelAISystem_GetQaAIGlobalConfig) == 0x000010, "Wrong size on MarvelAISystem_GetQaAIGlobalConfig");
static_assert(offsetof(MarvelAISystem_GetQaAIGlobalConfig, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetQaAIGlobalConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetQaAIGlobalConfig, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetQaAIGlobalConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetStandPointManager
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetStandPointManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAIStandPointManager*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetStandPointManager) == 0x000008, "Wrong alignment on MarvelAISystem_GetStandPointManager");
static_assert(sizeof(MarvelAISystem_GetStandPointManager) == 0x000010, "Wrong size on MarvelAISystem_GetStandPointManager");
static_assert(offsetof(MarvelAISystem_GetStandPointManager, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetStandPointManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetStandPointManager, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetStandPointManager::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetStandPointRecorder
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetStandPointRecorder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStandPointRecorder*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetStandPointRecorder) == 0x000008, "Wrong alignment on MarvelAISystem_GetStandPointRecorder");
static_assert(sizeof(MarvelAISystem_GetStandPointRecorder) == 0x000010, "Wrong size on MarvelAISystem_GetStandPointRecorder");
static_assert(offsetof(MarvelAISystem_GetStandPointRecorder, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetStandPointRecorder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetStandPointRecorder, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetStandPointRecorder::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetWayPointManager
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_GetWayPointManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelWayPointManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetWayPointManager) == 0x000008, "Wrong alignment on MarvelAISystem_GetWayPointManager");
static_assert(sizeof(MarvelAISystem_GetWayPointManager) == 0x000010, "Wrong size on MarvelAISystem_GetWayPointManager");
static_assert(offsetof(MarvelAISystem_GetWayPointManager, WorldContextObject) == 0x000000, "Member 'MarvelAISystem_GetWayPointManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_GetWayPointManager, ReturnValue) == 0x000008, "Member 'MarvelAISystem_GetWayPointManager::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.AddAICustom
// 0x00B0 (0x00B0 - 0x0000)
struct MarvelAISystem_AddAICustom final
{
public:
	struct FAISpawnParam                          SpawnParam;                                        // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
	class AMarvelAIController*                    ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_AddAICustom) == 0x000008, "Wrong alignment on MarvelAISystem_AddAICustom");
static_assert(sizeof(MarvelAISystem_AddAICustom) == 0x0000B0, "Wrong size on MarvelAISystem_AddAICustom");
static_assert(offsetof(MarvelAISystem_AddAICustom, SpawnParam) == 0x000000, "Member 'MarvelAISystem_AddAICustom::SpawnParam' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAICustom, ReturnValue) == 0x0000A8, "Member 'MarvelAISystem_AddAICustom::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.InitAIAnthropomorphic
// 0x0050 (0x0050 - 0x0000)
struct MarvelAISystem_InitAIAnthropomorphic final
{
public:
	TSet<int32>                                   TeamHasHumanPlayer;                                // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_InitAIAnthropomorphic) == 0x000008, "Wrong alignment on MarvelAISystem_InitAIAnthropomorphic");
static_assert(sizeof(MarvelAISystem_InitAIAnthropomorphic) == 0x000050, "Wrong size on MarvelAISystem_InitAIAnthropomorphic");
static_assert(offsetof(MarvelAISystem_InitAIAnthropomorphic, TeamHasHumanPlayer) == 0x000000, "Member 'MarvelAISystem_InitAIAnthropomorphic::TeamHasHumanPlayer' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.InitBattleAreaData
// 0x0010 (0x0010 - 0x0000)
struct MarvelAISystem_InitBattleAreaData final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_InitBattleAreaData) == 0x000008, "Wrong alignment on MarvelAISystem_InitBattleAreaData");
static_assert(sizeof(MarvelAISystem_InitBattleAreaData) == 0x000010, "Wrong size on MarvelAISystem_InitBattleAreaData");
static_assert(offsetof(MarvelAISystem_InitBattleAreaData, LevelName) == 0x000000, "Member 'MarvelAISystem_InitBattleAreaData::LevelName' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.RegisterNewAI
// 0x0008 (0x0008 - 0x0000)
struct MarvelAISystem_RegisterNewAI final
{
public:
	class AMarvelAIController*                    NewAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_RegisterNewAI) == 0x000008, "Wrong alignment on MarvelAISystem_RegisterNewAI");
static_assert(sizeof(MarvelAISystem_RegisterNewAI) == 0x000008, "Wrong size on MarvelAISystem_RegisterNewAI");
static_assert(offsetof(MarvelAISystem_RegisterNewAI, NewAI) == 0x000000, "Member 'MarvelAISystem_RegisterNewAI::NewAI' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.RemoveAI
// 0x0008 (0x0008 - 0x0000)
struct MarvelAISystem_RemoveAI final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_RemoveAI) == 0x000008, "Wrong alignment on MarvelAISystem_RemoveAI");
static_assert(sizeof(MarvelAISystem_RemoveAI) == 0x000008, "Wrong size on MarvelAISystem_RemoveAI");
static_assert(offsetof(MarvelAISystem_RemoveAI, Controller) == 0x000000, "Member 'MarvelAISystem_RemoveAI::Controller' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.RemoveAIByUID
// 0x0008 (0x0008 - 0x0000)
struct MarvelAISystem_RemoveAIByUID final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAISystem_RemoveAIByUID) == 0x000004, "Wrong alignment on MarvelAISystem_RemoveAIByUID");
static_assert(sizeof(MarvelAISystem_RemoveAIByUID) == 0x000008, "Wrong size on MarvelAISystem_RemoveAIByUID");
static_assert(offsetof(MarvelAISystem_RemoveAIByUID, UID) == 0x000000, "Member 'MarvelAISystem_RemoveAIByUID::UID' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_RemoveAIByUID, ReturnValue) == 0x000004, "Member 'MarvelAISystem_RemoveAIByUID::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.SetCustomVisLogCategories
// 0x0050 (0x0050 - 0x0000)
struct MarvelAISystem_SetCustomVisLogCategories final
{
public:
	TSet<class FName>                             NewCategories;                                     // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_SetCustomVisLogCategories) == 0x000008, "Wrong alignment on MarvelAISystem_SetCustomVisLogCategories");
static_assert(sizeof(MarvelAISystem_SetCustomVisLogCategories) == 0x000050, "Wrong size on MarvelAISystem_SetCustomVisLogCategories");
static_assert(offsetof(MarvelAISystem_SetCustomVisLogCategories, NewCategories) == 0x000000, "Member 'MarvelAISystem_SetCustomVisLogCategories::NewCategories' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.SetVisLogRecording
// 0x0002 (0x0002 - 0x0000)
struct MarvelAISystem_SetVisLogRecording final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCleanUp;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_SetVisLogRecording) == 0x000001, "Wrong alignment on MarvelAISystem_SetVisLogRecording");
static_assert(sizeof(MarvelAISystem_SetVisLogRecording) == 0x000002, "Wrong size on MarvelAISystem_SetVisLogRecording");
static_assert(offsetof(MarvelAISystem_SetVisLogRecording, bNewEnabled) == 0x000000, "Member 'MarvelAISystem_SetVisLogRecording::bNewEnabled' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_SetVisLogRecording, bShouldCleanUp) == 0x000001, "Member 'MarvelAISystem_SetVisLogRecording::bShouldCleanUp' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.UnregisterAI
// 0x0008 (0x0008 - 0x0000)
struct MarvelAISystem_UnregisterAI final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_UnregisterAI) == 0x000008, "Wrong alignment on MarvelAISystem_UnregisterAI");
static_assert(sizeof(MarvelAISystem_UnregisterAI) == 0x000008, "Wrong size on MarvelAISystem_UnregisterAI");
static_assert(offsetof(MarvelAISystem_UnregisterAI, AIController) == 0x000000, "Member 'MarvelAISystem_UnregisterAI::AIController' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.AddAI
// 0x0030 (0x0030 - 0x0000)
struct MarvelAISystem_AddAI final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyMode;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAIControllerBase*                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_AddAI) == 0x000008, "Wrong alignment on MarvelAISystem_AddAI");
static_assert(sizeof(MarvelAISystem_AddAI) == 0x000030, "Wrong size on MarvelAISystem_AddAI");
static_assert(offsetof(MarvelAISystem_AddAI, UID) == 0x000000, "Member 'MarvelAISystem_AddAI::UID' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, HeroID) == 0x000004, "Member 'MarvelAISystem_AddAI::HeroID' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, BattleSide) == 0x000008, "Member 'MarvelAISystem_AddAI::BattleSide' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, Name_0) == 0x000010, "Member 'MarvelAISystem_AddAI::Name_0' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, DifficultyMode) == 0x000020, "Member 'MarvelAISystem_AddAI::DifficultyMode' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, DifficultyLevel) == 0x000024, "Member 'MarvelAISystem_AddAI::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(MarvelAISystem_AddAI, ReturnValue) == 0x000028, "Member 'MarvelAISystem_AddAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.CheckIsInMarvelGameWorld
// 0x0001 (0x0001 - 0x0000)
struct MarvelAISystem_CheckIsInMarvelGameWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_CheckIsInMarvelGameWorld) == 0x000001, "Wrong alignment on MarvelAISystem_CheckIsInMarvelGameWorld");
static_assert(sizeof(MarvelAISystem_CheckIsInMarvelGameWorld) == 0x000001, "Wrong size on MarvelAISystem_CheckIsInMarvelGameWorld");
static_assert(offsetof(MarvelAISystem_CheckIsInMarvelGameWorld, ReturnValue) == 0x000000, "Member 'MarvelAISystem_CheckIsInMarvelGameWorld::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAISystem.GetAIGameModeConfig
// 0x0008 (0x0008 - 0x0000)
struct MarvelAISystem_GetAIGameModeConfig final
{
public:
	const class UMarvelAIGameModeDefaultConfigAsset* ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAISystem_GetAIGameModeConfig) == 0x000008, "Wrong alignment on MarvelAISystem_GetAIGameModeConfig");
static_assert(sizeof(MarvelAISystem_GetAIGameModeConfig) == 0x000008, "Wrong size on MarvelAISystem_GetAIGameModeConfig");
static_assert(offsetof(MarvelAISystem_GetAIGameModeConfig, ReturnValue) == 0x000000, "Member 'MarvelAISystem_GetAIGameModeConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.CheckAITeamLineup
// 0x0004 (0x0004 - 0x0000)
struct MarvelAITeamManager_CheckAITeamLineup final
{
public:
	int32                                         TeamID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAITeamManager_CheckAITeamLineup) == 0x000004, "Wrong alignment on MarvelAITeamManager_CheckAITeamLineup");
static_assert(sizeof(MarvelAITeamManager_CheckAITeamLineup) == 0x000004, "Wrong size on MarvelAITeamManager_CheckAITeamLineup");
static_assert(offsetof(MarvelAITeamManager_CheckAITeamLineup, TeamID) == 0x000000, "Member 'MarvelAITeamManager_CheckAITeamLineup::TeamID' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.CheckCanBuildBondInPreSelect
// 0x0248 (0x0248 - 0x0000)
struct MarvelAITeamManager_CheckCanBuildBondInPreSelect final
{
public:
	int32                                         OldPlayerHroID;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPlayerHeroID;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAITeamInfo                      TeamInfo;                                          // 0x0008(0x0240)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAITeamManager_CheckCanBuildBondInPreSelect) == 0x000008, "Wrong alignment on MarvelAITeamManager_CheckCanBuildBondInPreSelect");
static_assert(sizeof(MarvelAITeamManager_CheckCanBuildBondInPreSelect) == 0x000248, "Wrong size on MarvelAITeamManager_CheckCanBuildBondInPreSelect");
static_assert(offsetof(MarvelAITeamManager_CheckCanBuildBondInPreSelect, OldPlayerHroID) == 0x000000, "Member 'MarvelAITeamManager_CheckCanBuildBondInPreSelect::OldPlayerHroID' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckCanBuildBondInPreSelect, NewPlayerHeroID) == 0x000004, "Member 'MarvelAITeamManager_CheckCanBuildBondInPreSelect::NewPlayerHeroID' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckCanBuildBondInPreSelect, TeamInfo) == 0x000008, "Member 'MarvelAITeamManager_CheckCanBuildBondInPreSelect::TeamInfo' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.CheckLowHealthMarkValid
// 0x0018 (0x0018 - 0x0000)
struct MarvelAITeamManager_CheckLowHealthMarkValid final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAITeamManager_CheckLowHealthMarkValid) == 0x000008, "Wrong alignment on MarvelAITeamManager_CheckLowHealthMarkValid");
static_assert(sizeof(MarvelAITeamManager_CheckLowHealthMarkValid) == 0x000018, "Wrong size on MarvelAITeamManager_CheckLowHealthMarkValid");
static_assert(offsetof(MarvelAITeamManager_CheckLowHealthMarkValid, AIController) == 0x000000, "Member 'MarvelAITeamManager_CheckLowHealthMarkValid::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckLowHealthMarkValid, Target) == 0x000008, "Member 'MarvelAITeamManager_CheckLowHealthMarkValid::Target' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckLowHealthMarkValid, ReturnValue) == 0x000010, "Member 'MarvelAITeamManager_CheckLowHealthMarkValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.CheckLowHpMarkValid
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_CheckLowHpMarkValid final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkLife;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAITeamManager_CheckLowHpMarkValid) == 0x000008, "Wrong alignment on MarvelAITeamManager_CheckLowHpMarkValid");
static_assert(sizeof(MarvelAITeamManager_CheckLowHpMarkValid) == 0x000010, "Wrong size on MarvelAITeamManager_CheckLowHpMarkValid");
static_assert(offsetof(MarvelAITeamManager_CheckLowHpMarkValid, Target) == 0x000000, "Member 'MarvelAITeamManager_CheckLowHpMarkValid::Target' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckLowHpMarkValid, MarkLife) == 0x000008, "Member 'MarvelAITeamManager_CheckLowHpMarkValid::MarkLife' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_CheckLowHpMarkValid, ReturnValue) == 0x00000C, "Member 'MarvelAITeamManager_CheckLowHpMarkValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.GetAndUpdatePreviewHeroIDForAI
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmediatelyUpdate;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI) == 0x000008, "Wrong alignment on MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI");
static_assert(sizeof(MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI) == 0x000010, "Wrong size on MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI");
static_assert(offsetof(MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI, AIController) == 0x000000, "Member 'MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI, ImmediatelyUpdate) == 0x000008, "Member 'MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI::ImmediatelyUpdate' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI, ReturnValue) == 0x00000C, "Member 'MarvelAITeamManager_GetAndUpdatePreviewHeroIDForAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.IsAutoChangeHeroAI
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_IsAutoChangeHeroAI final
{
public:
	const class AMarvelPlayerState*               PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAITeamManager_IsAutoChangeHeroAI) == 0x000008, "Wrong alignment on MarvelAITeamManager_IsAutoChangeHeroAI");
static_assert(sizeof(MarvelAITeamManager_IsAutoChangeHeroAI) == 0x000010, "Wrong size on MarvelAITeamManager_IsAutoChangeHeroAI");
static_assert(offsetof(MarvelAITeamManager_IsAutoChangeHeroAI, PlayerState) == 0x000000, "Member 'MarvelAITeamManager_IsAutoChangeHeroAI::PlayerState' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_IsAutoChangeHeroAI, ReturnValue) == 0x000008, "Member 'MarvelAITeamManager_IsAutoChangeHeroAI::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.OnPlayerChangeHero
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_OnPlayerChangeHero final
{
public:
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAITeamManager_OnPlayerChangeHero) == 0x000008, "Wrong alignment on MarvelAITeamManager_OnPlayerChangeHero");
static_assert(sizeof(MarvelAITeamManager_OnPlayerChangeHero) == 0x000010, "Wrong size on MarvelAITeamManager_OnPlayerChangeHero");
static_assert(offsetof(MarvelAITeamManager_OnPlayerChangeHero, PlayerState) == 0x000000, "Member 'MarvelAITeamManager_OnPlayerChangeHero::PlayerState' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_OnPlayerChangeHero, HeroID) == 0x000008, "Member 'MarvelAITeamManager_OnPlayerChangeHero::HeroID' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.TryAddLowHealthMark
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_TryAddLowHealthMark final
{
public:
	class AMarvelAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAITeamManager_TryAddLowHealthMark) == 0x000008, "Wrong alignment on MarvelAITeamManager_TryAddLowHealthMark");
static_assert(sizeof(MarvelAITeamManager_TryAddLowHealthMark) == 0x000010, "Wrong size on MarvelAITeamManager_TryAddLowHealthMark");
static_assert(offsetof(MarvelAITeamManager_TryAddLowHealthMark, AIController) == 0x000000, "Member 'MarvelAITeamManager_TryAddLowHealthMark::AIController' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_TryAddLowHealthMark, Target) == 0x000008, "Member 'MarvelAITeamManager_TryAddLowHealthMark::Target' has a wrong offset!");

// Function MarvelAI.MarvelAITeamManager.UpdateTeamInfo
// 0x0010 (0x0010 - 0x0000)
struct MarvelAITeamManager_UpdateTeamInfo final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoChangeHeroAI;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewHeroID;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAITeamManager_UpdateTeamInfo) == 0x000004, "Wrong alignment on MarvelAITeamManager_UpdateTeamInfo");
static_assert(sizeof(MarvelAITeamManager_UpdateTeamInfo) == 0x000010, "Wrong size on MarvelAITeamManager_UpdateTeamInfo");
static_assert(offsetof(MarvelAITeamManager_UpdateTeamInfo, UID) == 0x000000, "Member 'MarvelAITeamManager_UpdateTeamInfo::UID' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_UpdateTeamInfo, TeamID) == 0x000004, "Member 'MarvelAITeamManager_UpdateTeamInfo::TeamID' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_UpdateTeamInfo, IsAutoChangeHeroAI) == 0x000008, "Member 'MarvelAITeamManager_UpdateTeamInfo::IsAutoChangeHeroAI' has a wrong offset!");
static_assert(offsetof(MarvelAITeamManager_UpdateTeamInfo, NewHeroID) == 0x00000C, "Member 'MarvelAITeamManager_UpdateTeamInfo::NewHeroID' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.GetBTAssetByTag
// 0x0018 (0x0018 - 0x0000)
struct MarvelBehaviorTreeComponent_GetBTAssetByTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBehaviorTreeComponent_GetBTAssetByTag) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_GetBTAssetByTag");
static_assert(sizeof(MarvelBehaviorTreeComponent_GetBTAssetByTag) == 0x000018, "Wrong size on MarvelBehaviorTreeComponent_GetBTAssetByTag");
static_assert(offsetof(MarvelBehaviorTreeComponent_GetBTAssetByTag, GameplayTag) == 0x000000, "Member 'MarvelBehaviorTreeComponent_GetBTAssetByTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarvelBehaviorTreeComponent_GetBTAssetByTag, ReturnValue) == 0x000010, "Member 'MarvelBehaviorTreeComponent_GetBTAssetByTag::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.IsBTRunning
// 0x0010 (0x0010 - 0x0000)
struct MarvelBehaviorTreeComponent_IsBTRunning final
{
public:
	class UBehaviorTree*                          BehaviorTreeAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelBehaviorTreeComponent_IsBTRunning) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_IsBTRunning");
static_assert(sizeof(MarvelBehaviorTreeComponent_IsBTRunning) == 0x000010, "Wrong size on MarvelBehaviorTreeComponent_IsBTRunning");
static_assert(offsetof(MarvelBehaviorTreeComponent_IsBTRunning, BehaviorTreeAsset) == 0x000000, "Member 'MarvelBehaviorTreeComponent_IsBTRunning::BehaviorTreeAsset' has a wrong offset!");
static_assert(offsetof(MarvelBehaviorTreeComponent_IsBTRunning, ReturnValue) == 0x000008, "Member 'MarvelBehaviorTreeComponent_IsBTRunning::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.K2_PauseLogic
// 0x0010 (0x0010 - 0x0000)
struct MarvelBehaviorTreeComponent_K2_PauseLogic final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBehaviorTreeComponent_K2_PauseLogic) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_K2_PauseLogic");
static_assert(sizeof(MarvelBehaviorTreeComponent_K2_PauseLogic) == 0x000010, "Wrong size on MarvelBehaviorTreeComponent_K2_PauseLogic");
static_assert(offsetof(MarvelBehaviorTreeComponent_K2_PauseLogic, Reason) == 0x000000, "Member 'MarvelBehaviorTreeComponent_K2_PauseLogic::Reason' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.K2_ResumeLogic
// 0x0010 (0x0010 - 0x0000)
struct MarvelBehaviorTreeComponent_K2_ResumeLogic final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBehaviorTreeComponent_K2_ResumeLogic) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_K2_ResumeLogic");
static_assert(sizeof(MarvelBehaviorTreeComponent_K2_ResumeLogic) == 0x000010, "Wrong size on MarvelBehaviorTreeComponent_K2_ResumeLogic");
static_assert(offsetof(MarvelBehaviorTreeComponent_K2_ResumeLogic, Reason) == 0x000000, "Member 'MarvelBehaviorTreeComponent_K2_ResumeLogic::Reason' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.K2_StopLogic
// 0x0010 (0x0010 - 0x0000)
struct MarvelBehaviorTreeComponent_K2_StopLogic final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBehaviorTreeComponent_K2_StopLogic) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_K2_StopLogic");
static_assert(sizeof(MarvelBehaviorTreeComponent_K2_StopLogic) == 0x000010, "Wrong size on MarvelBehaviorTreeComponent_K2_StopLogic");
static_assert(offsetof(MarvelBehaviorTreeComponent_K2_StopLogic, Reason) == 0x000000, "Member 'MarvelBehaviorTreeComponent_K2_StopLogic::Reason' has a wrong offset!");

// Function MarvelAI.MarvelBehaviorTreeComponent.UpdateSubTreeMap
// 0x0050 (0x0050 - 0x0000)
struct MarvelBehaviorTreeComponent_UpdateSubTreeMap final
{
public:
	TMap<struct FGameplayTag, class UBehaviorTree*> SubTreeMap;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBehaviorTreeComponent_UpdateSubTreeMap) == 0x000008, "Wrong alignment on MarvelBehaviorTreeComponent_UpdateSubTreeMap");
static_assert(sizeof(MarvelBehaviorTreeComponent_UpdateSubTreeMap) == 0x000050, "Wrong size on MarvelBehaviorTreeComponent_UpdateSubTreeMap");
static_assert(offsetof(MarvelBehaviorTreeComponent_UpdateSubTreeMap, SubTreeMap) == 0x000000, "Member 'MarvelBehaviorTreeComponent_UpdateSubTreeMap::SubTreeMap' has a wrong offset!");

// Function MarvelAI.MarvelBTFunctionLibrary.AddClassFilterForBBKeySelector
// 0x0050 (0x0050 - 0x0000)
struct MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector final
{
public:
	struct FBlackboardKeySelector                 KeySelector;                                       // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                Owner;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    AllowedClass;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector) == 0x000008, "Wrong alignment on MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector");
static_assert(sizeof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector) == 0x000050, "Wrong size on MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector");
static_assert(offsetof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector, KeySelector) == 0x000000, "Member 'MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector::KeySelector' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector, Owner) == 0x000030, "Member 'MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector::Owner' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector, PropertyName) == 0x000038, "Member 'MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector::PropertyName' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector, AllowedClass) == 0x000048, "Member 'MarvelBTFunctionLibrary_AddClassFilterForBBKeySelector::AllowedClass' has a wrong offset!");

// Function MarvelAI.MarvelBTFunctionLibrary.AddEnumFilterForBBKeySelector
// 0x0050 (0x0050 - 0x0000)
struct MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector final
{
public:
	struct FBlackboardKeySelector                 KeySelector;                                       // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                Owner;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  AllowedEnum;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector) == 0x000008, "Wrong alignment on MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector");
static_assert(sizeof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector) == 0x000050, "Wrong size on MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector");
static_assert(offsetof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector, KeySelector) == 0x000000, "Member 'MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector::KeySelector' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector, Owner) == 0x000030, "Member 'MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector::Owner' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector, PropertyName) == 0x000038, "Member 'MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector::PropertyName' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector, AllowedEnum) == 0x000048, "Member 'MarvelBTFunctionLibrary_AddEnumFilterForBBKeySelector::AllowedEnum' has a wrong offset!");

// Function MarvelAI.MarvelBTFunctionLibrary.AddObjectFilterForBBKeySelector
// 0x0050 (0x0050 - 0x0000)
struct MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector final
{
public:
	struct FBlackboardKeySelector                 KeySelector;                                       // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                Owner;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    AllowedClass;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector) == 0x000008, "Wrong alignment on MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector");
static_assert(sizeof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector) == 0x000050, "Wrong size on MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector");
static_assert(offsetof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector, KeySelector) == 0x000000, "Member 'MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector::KeySelector' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector, Owner) == 0x000030, "Member 'MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector::Owner' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector, PropertyName) == 0x000038, "Member 'MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector::PropertyName' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector, AllowedClass) == 0x000048, "Member 'MarvelBTFunctionLibrary_AddObjectFilterForBBKeySelector::AllowedClass' has a wrong offset!");

// Function MarvelAI.MarvelBTFunctionLibrary.AddSimpleFilterForBBKeySelector
// 0x0058 (0x0058 - 0x0000)
struct MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector final
{
public:
	struct FBlackboardKeySelector                 KeySelector;                                       // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                Owner;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UBlackboardKeyType>> FilterTypes;                                       // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector) == 0x000008, "Wrong alignment on MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector");
static_assert(sizeof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector) == 0x000058, "Wrong size on MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector");
static_assert(offsetof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector, KeySelector) == 0x000000, "Member 'MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector::KeySelector' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector, Owner) == 0x000030, "Member 'MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector::Owner' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector, PropertyName) == 0x000038, "Member 'MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector::PropertyName' has a wrong offset!");
static_assert(offsetof(MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector, FilterTypes) == 0x000048, "Member 'MarvelBTFunctionLibrary_AddSimpleFilterForBBKeySelector::FilterTypes' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.CheckShortDistancePointReachable
// 0x0028 (0x0028 - 0x0000)
struct MarvelNavigationLibrary_CheckShortDistancePointReachable final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchNode;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_CheckShortDistancePointReachable) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_CheckShortDistancePointReachable");
static_assert(sizeof(MarvelNavigationLibrary_CheckShortDistancePointReachable) == 0x000028, "Wrong size on MarvelNavigationLibrary_CheckShortDistancePointReachable");
static_assert(offsetof(MarvelNavigationLibrary_CheckShortDistancePointReachable, AIController) == 0x000000, "Member 'MarvelNavigationLibrary_CheckShortDistancePointReachable::AIController' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_CheckShortDistancePointReachable, TargetLocation) == 0x000008, "Member 'MarvelNavigationLibrary_CheckShortDistancePointReachable::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_CheckShortDistancePointReachable, MaxSearchNode) == 0x000020, "Member 'MarvelNavigationLibrary_CheckShortDistancePointReachable::MaxSearchNode' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_CheckShortDistancePointReachable, ReturnValue) == 0x000024, "Member 'MarvelNavigationLibrary_CheckShortDistancePointReachable::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.DebugDrawTileLayersBB
// 0x0020 (0x0020 - 0x0000)
struct MarvelNavigationLibrary_DebugDrawTileLayersBB final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelNavigationLibrary_DebugDrawTileLayersBB) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_DebugDrawTileLayersBB");
static_assert(sizeof(MarvelNavigationLibrary_DebugDrawTileLayersBB) == 0x000020, "Wrong size on MarvelNavigationLibrary_DebugDrawTileLayersBB");
static_assert(offsetof(MarvelNavigationLibrary_DebugDrawTileLayersBB, WorldContextObject) == 0x000000, "Member 'MarvelNavigationLibrary_DebugDrawTileLayersBB::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_DebugDrawTileLayersBB, WorldPosition) == 0x000008, "Member 'MarvelNavigationLibrary_DebugDrawTileLayersBB::WorldPosition' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.GetLocationTileCoord
// 0x0030 (0x0030 - 0x0000)
struct MarvelNavigationLibrary_GetLocationTileCoord final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldMarkDebug;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutTileX;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTileY;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_GetLocationTileCoord) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_GetLocationTileCoord");
static_assert(sizeof(MarvelNavigationLibrary_GetLocationTileCoord) == 0x000030, "Wrong size on MarvelNavigationLibrary_GetLocationTileCoord");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, WorldContext) == 0x000000, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, InLocation) == 0x000008, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::InLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, ShouldMarkDebug) == 0x000020, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::ShouldMarkDebug' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, OutTileX) == 0x000024, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::OutTileX' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, OutTileY) == 0x000028, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::OutTileY' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_GetLocationTileCoord, ReturnValue) == 0x00002C, "Member 'MarvelNavigationLibrary_GetLocationTileCoord::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.HasValidFlyPath
// 0x0040 (0x0040 - 0x0000)
struct MarvelNavigationLibrary_HasValidFlyPath final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_HasValidFlyPath) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_HasValidFlyPath");
static_assert(sizeof(MarvelNavigationLibrary_HasValidFlyPath) == 0x000040, "Wrong size on MarvelNavigationLibrary_HasValidFlyPath");
static_assert(offsetof(MarvelNavigationLibrary_HasValidFlyPath, WCO) == 0x000000, "Member 'MarvelNavigationLibrary_HasValidFlyPath::WCO' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_HasValidFlyPath, StartLocation) == 0x000008, "Member 'MarvelNavigationLibrary_HasValidFlyPath::StartLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_HasValidFlyPath, TargetLocation) == 0x000020, "Member 'MarvelNavigationLibrary_HasValidFlyPath::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_HasValidFlyPath, ReturnValue) == 0x000038, "Member 'MarvelNavigationLibrary_HasValidFlyPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.K2_ProjectLocationToNavMesh
// 0x0058 (0x0058 - 0x0000)
struct MarvelNavigationLibrary_K2_ProjectLocationToNavMesh final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InExtent;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_K2_ProjectLocationToNavMesh");
static_assert(sizeof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh) == 0x000058, "Wrong size on MarvelNavigationLibrary_K2_ProjectLocationToNavMesh");
static_assert(offsetof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh, WorldContext) == 0x000000, "Member 'MarvelNavigationLibrary_K2_ProjectLocationToNavMesh::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh, InLocation) == 0x000008, "Member 'MarvelNavigationLibrary_K2_ProjectLocationToNavMesh::InLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh, InExtent) == 0x000020, "Member 'MarvelNavigationLibrary_K2_ProjectLocationToNavMesh::InExtent' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh, OutLocation) == 0x000038, "Member 'MarvelNavigationLibrary_K2_ProjectLocationToNavMesh::OutLocation' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_K2_ProjectLocationToNavMesh, ReturnValue) == 0x000050, "Member 'MarvelNavigationLibrary_K2_ProjectLocationToNavMesh::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.RebuildNavmesh
// 0x0008 (0x0008 - 0x0000)
struct MarvelNavigationLibrary_RebuildNavmesh final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelNavigationLibrary_RebuildNavmesh) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_RebuildNavmesh");
static_assert(sizeof(MarvelNavigationLibrary_RebuildNavmesh) == 0x000008, "Wrong size on MarvelNavigationLibrary_RebuildNavmesh");
static_assert(offsetof(MarvelNavigationLibrary_RebuildNavmesh, WorldContextObject) == 0x000000, "Member 'MarvelNavigationLibrary_RebuildNavmesh::WorldContextObject' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.SetDirtyAreaMarkEnabled
// 0x0010 (0x0010 - 0x0000)
struct MarvelNavigationLibrary_SetDirtyAreaMarkEnabled final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewIsEnabled;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_SetDirtyAreaMarkEnabled) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_SetDirtyAreaMarkEnabled");
static_assert(sizeof(MarvelNavigationLibrary_SetDirtyAreaMarkEnabled) == 0x000010, "Wrong size on MarvelNavigationLibrary_SetDirtyAreaMarkEnabled");
static_assert(offsetof(MarvelNavigationLibrary_SetDirtyAreaMarkEnabled, WorldContext) == 0x000000, "Member 'MarvelNavigationLibrary_SetDirtyAreaMarkEnabled::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_SetDirtyAreaMarkEnabled, NewIsEnabled) == 0x000008, "Member 'MarvelNavigationLibrary_SetDirtyAreaMarkEnabled::NewIsEnabled' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.SetStaticNavigation
// 0x0001 (0x0001 - 0x0000)
struct MarvelNavigationLibrary_SetStaticNavigation final
{
public:
	bool                                          bNewIsStrictlyStatic;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelNavigationLibrary_SetStaticNavigation) == 0x000001, "Wrong alignment on MarvelNavigationLibrary_SetStaticNavigation");
static_assert(sizeof(MarvelNavigationLibrary_SetStaticNavigation) == 0x000001, "Wrong size on MarvelNavigationLibrary_SetStaticNavigation");
static_assert(offsetof(MarvelNavigationLibrary_SetStaticNavigation, bNewIsStrictlyStatic) == 0x000000, "Member 'MarvelNavigationLibrary_SetStaticNavigation::bNewIsStrictlyStatic' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.VLogNavData
// 0x0028 (0x0028 - 0x0000)
struct MarvelNavigationLibrary_VLogNavData final
{
public:
	class AActor*                                 CenterActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_VLogNavData) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_VLogNavData");
static_assert(sizeof(MarvelNavigationLibrary_VLogNavData) == 0x000028, "Wrong size on MarvelNavigationLibrary_VLogNavData");
static_assert(offsetof(MarvelNavigationLibrary_VLogNavData, CenterActor) == 0x000000, "Member 'MarvelNavigationLibrary_VLogNavData::CenterActor' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_VLogNavData, Extent) == 0x000008, "Member 'MarvelNavigationLibrary_VLogNavData::Extent' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_VLogNavData, ReturnValue) == 0x000020, "Member 'MarvelNavigationLibrary_VLogNavData::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelNavigationLibrary.VLogTileData
// 0x0018 (0x0018 - 0x0000)
struct MarvelNavigationLibrary_VLogTileData final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileX;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelNavigationLibrary_VLogTileData) == 0x000008, "Wrong alignment on MarvelNavigationLibrary_VLogTileData");
static_assert(sizeof(MarvelNavigationLibrary_VLogTileData) == 0x000018, "Wrong size on MarvelNavigationLibrary_VLogTileData");
static_assert(offsetof(MarvelNavigationLibrary_VLogTileData, WorldContext) == 0x000000, "Member 'MarvelNavigationLibrary_VLogTileData::WorldContext' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_VLogTileData, InTileX) == 0x000008, "Member 'MarvelNavigationLibrary_VLogTileData::InTileX' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_VLogTileData, InTileY) == 0x00000C, "Member 'MarvelNavigationLibrary_VLogTileData::InTileY' has a wrong offset!");
static_assert(offsetof(MarvelNavigationLibrary_VLogTileData, ReturnValue) == 0x000010, "Member 'MarvelNavigationLibrary_VLogTileData::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.MarkCrossMoveForDuration
// 0x0004 (0x0004 - 0x0000)
struct MarvelPathFollowingComponent_MarkCrossMoveForDuration final
{
public:
	float                                         NewDuration;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_MarkCrossMoveForDuration) == 0x000004, "Wrong alignment on MarvelPathFollowingComponent_MarkCrossMoveForDuration");
static_assert(sizeof(MarvelPathFollowingComponent_MarkCrossMoveForDuration) == 0x000004, "Wrong size on MarvelPathFollowingComponent_MarkCrossMoveForDuration");
static_assert(offsetof(MarvelPathFollowingComponent_MarkCrossMoveForDuration, NewDuration) == 0x000000, "Member 'MarvelPathFollowingComponent_MarkCrossMoveForDuration::NewDuration' has a wrong offset!");

// DelegateFunction MarvelAI.MarvelPathFollowingComponent.OnMovePathSegmentDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature final
{
public:
	struct FVector                                MoveEnd;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature");
static_assert(sizeof(MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature) == 0x000018, "Wrong size on MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature");
static_assert(offsetof(MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature, MoveEnd) == 0x000000, "Member 'MarvelPathFollowingComponent_OnMovePathSegmentDelegate__DelegateSignature::MoveEnd' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.SetCrossMoveEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarvelPathFollowingComponent_SetCrossMoveEnabled final
{
public:
	bool                                          NewIsEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_SetCrossMoveEnabled) == 0x000001, "Wrong alignment on MarvelPathFollowingComponent_SetCrossMoveEnabled");
static_assert(sizeof(MarvelPathFollowingComponent_SetCrossMoveEnabled) == 0x000001, "Wrong size on MarvelPathFollowingComponent_SetCrossMoveEnabled");
static_assert(offsetof(MarvelPathFollowingComponent_SetCrossMoveEnabled, NewIsEnabled) == 0x000000, "Member 'MarvelPathFollowingComponent_SetCrossMoveEnabled::NewIsEnabled' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.SetDecelerateForLastPathSegment
// 0x0001 (0x0001 - 0x0000)
struct MarvelPathFollowingComponent_SetDecelerateForLastPathSegment final
{
public:
	bool                                          bNewIsEnabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_SetDecelerateForLastPathSegment) == 0x000001, "Wrong alignment on MarvelPathFollowingComponent_SetDecelerateForLastPathSegment");
static_assert(sizeof(MarvelPathFollowingComponent_SetDecelerateForLastPathSegment) == 0x000001, "Wrong size on MarvelPathFollowingComponent_SetDecelerateForLastPathSegment");
static_assert(offsetof(MarvelPathFollowingComponent_SetDecelerateForLastPathSegment, bNewIsEnabled) == 0x000000, "Member 'MarvelPathFollowingComponent_SetDecelerateForLastPathSegment::bNewIsEnabled' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.SetOverrideMoveFocus
// 0x0018 (0x0018 - 0x0000)
struct MarvelPathFollowingComponent_SetOverrideMoveFocus final
{
public:
	struct FVector                                NewMoveFocus;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_SetOverrideMoveFocus) == 0x000008, "Wrong alignment on MarvelPathFollowingComponent_SetOverrideMoveFocus");
static_assert(sizeof(MarvelPathFollowingComponent_SetOverrideMoveFocus) == 0x000018, "Wrong size on MarvelPathFollowingComponent_SetOverrideMoveFocus");
static_assert(offsetof(MarvelPathFollowingComponent_SetOverrideMoveFocus, NewMoveFocus) == 0x000000, "Member 'MarvelPathFollowingComponent_SetOverrideMoveFocus::NewMoveFocus' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.CheckCurrentStatus
// 0x0002 (0x0002 - 0x0000)
struct MarvelPathFollowingComponent_CheckCurrentStatus final
{
public:
	EPathFollowingStatus                          TargetStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_CheckCurrentStatus) == 0x000001, "Wrong alignment on MarvelPathFollowingComponent_CheckCurrentStatus");
static_assert(sizeof(MarvelPathFollowingComponent_CheckCurrentStatus) == 0x000002, "Wrong size on MarvelPathFollowingComponent_CheckCurrentStatus");
static_assert(offsetof(MarvelPathFollowingComponent_CheckCurrentStatus, TargetStatus) == 0x000000, "Member 'MarvelPathFollowingComponent_CheckCurrentStatus::TargetStatus' has a wrong offset!");
static_assert(offsetof(MarvelPathFollowingComponent_CheckCurrentStatus, ReturnValue) == 0x000001, "Member 'MarvelPathFollowingComponent_CheckCurrentStatus::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.GetCurrentStatus
// 0x0001 (0x0001 - 0x0000)
struct MarvelPathFollowingComponent_GetCurrentStatus final
{
public:
	EPathFollowingStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_GetCurrentStatus) == 0x000001, "Wrong alignment on MarvelPathFollowingComponent_GetCurrentStatus");
static_assert(sizeof(MarvelPathFollowingComponent_GetCurrentStatus) == 0x000001, "Wrong size on MarvelPathFollowingComponent_GetCurrentStatus");
static_assert(offsetof(MarvelPathFollowingComponent_GetCurrentStatus, ReturnValue) == 0x000000, "Member 'MarvelPathFollowingComponent_GetCurrentStatus::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelPathFollowingComponent.IsHandlingLinkMove
// 0x0001 (0x0001 - 0x0000)
struct MarvelPathFollowingComponent_IsHandlingLinkMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelPathFollowingComponent_IsHandlingLinkMove) == 0x000001, "Wrong alignment on MarvelPathFollowingComponent_IsHandlingLinkMove");
static_assert(sizeof(MarvelPathFollowingComponent_IsHandlingLinkMove) == 0x000001, "Wrong size on MarvelPathFollowingComponent_IsHandlingLinkMove");
static_assert(offsetof(MarvelPathFollowingComponent_IsHandlingLinkMove, ReturnValue) == 0x000000, "Member 'MarvelPathFollowingComponent_IsHandlingLinkMove::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelWayPointManager.GetPathToTargetFromActor
// 0x0068 (0x0068 - 0x0000)
struct MarvelWayPointManager_GetPathToTargetFromActor final
{
public:
	class AActor*                                 PathSelector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorMovingAlong;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0018(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ShouldUpdateProgressInPath;                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWayPointManager_GetPathToTargetFromActor) == 0x000008, "Wrong alignment on MarvelWayPointManager_GetPathToTargetFromActor");
static_assert(sizeof(MarvelWayPointManager_GetPathToTargetFromActor) == 0x000068, "Wrong size on MarvelWayPointManager_GetPathToTargetFromActor");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, PathSelector) == 0x000000, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::PathSelector' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, ActorMovingAlong) == 0x000008, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, Target) == 0x000010, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::Target' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, OutWayPointPath) == 0x000018, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::OutWayPointPath' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, ShouldUpdateProgressInPath) == 0x000060, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::ShouldUpdateProgressInPath' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetPathToTargetFromActor, ReturnValue) == 0x000061, "Member 'MarvelWayPointManager_GetPathToTargetFromActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelWayPointManager.GetStartWayPointFromConfig
// 0x0018 (0x0018 - 0x0000)
struct MarvelWayPointManager_GetStartWayPointFromConfig final
{
public:
	class AActor*                                 PathStart;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PathTarget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStartWayPoint*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWayPointManager_GetStartWayPointFromConfig) == 0x000008, "Wrong alignment on MarvelWayPointManager_GetStartWayPointFromConfig");
static_assert(sizeof(MarvelWayPointManager_GetStartWayPointFromConfig) == 0x000018, "Wrong size on MarvelWayPointManager_GetStartWayPointFromConfig");
static_assert(offsetof(MarvelWayPointManager_GetStartWayPointFromConfig, PathStart) == 0x000000, "Member 'MarvelWayPointManager_GetStartWayPointFromConfig::PathStart' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetStartWayPointFromConfig, PathTarget) == 0x000008, "Member 'MarvelWayPointManager_GetStartWayPointFromConfig::PathTarget' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetStartWayPointFromConfig, ReturnValue) == 0x000010, "Member 'MarvelWayPointManager_GetStartWayPointFromConfig::ReturnValue' has a wrong offset!");

// Function MarvelAI.MarvelWayPointManager.GetStartWayPointFromMap
// 0x0018 (0x0018 - 0x0000)
struct MarvelWayPointManager_GetStartWayPointFromMap final
{
public:
	class FName                                   StartWayPointID;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStartWayPoint*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWayPointManager_GetStartWayPointFromMap) == 0x000008, "Wrong alignment on MarvelWayPointManager_GetStartWayPointFromMap");
static_assert(sizeof(MarvelWayPointManager_GetStartWayPointFromMap) == 0x000018, "Wrong size on MarvelWayPointManager_GetStartWayPointFromMap");
static_assert(offsetof(MarvelWayPointManager_GetStartWayPointFromMap, StartWayPointID) == 0x000000, "Member 'MarvelWayPointManager_GetStartWayPointFromMap::StartWayPointID' has a wrong offset!");
static_assert(offsetof(MarvelWayPointManager_GetStartWayPointFromMap, ReturnValue) == 0x000010, "Member 'MarvelWayPointManager_GetStartWayPointFromMap::ReturnValue' has a wrong offset!");

// Function MarvelAI.PrepareAreaComponent.CheckIsActorInRange
// 0x0010 (0x0010 - 0x0000)
struct PrepareAreaComponent_CheckIsActorInRange final
{
public:
	const class AActor*                           ToCheckActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PrepareAreaComponent_CheckIsActorInRange) == 0x000008, "Wrong alignment on PrepareAreaComponent_CheckIsActorInRange");
static_assert(sizeof(PrepareAreaComponent_CheckIsActorInRange) == 0x000010, "Wrong size on PrepareAreaComponent_CheckIsActorInRange");
static_assert(offsetof(PrepareAreaComponent_CheckIsActorInRange, ToCheckActor) == 0x000000, "Member 'PrepareAreaComponent_CheckIsActorInRange::ToCheckActor' has a wrong offset!");
static_assert(offsetof(PrepareAreaComponent_CheckIsActorInRange, ReturnValue) == 0x000008, "Member 'PrepareAreaComponent_CheckIsActorInRange::ReturnValue' has a wrong offset!");

// Function MarvelAI.PrepareAreaComponent.CheckIsValidArea
// 0x0001 (0x0001 - 0x0000)
struct PrepareAreaComponent_CheckIsValidArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrepareAreaComponent_CheckIsValidArea) == 0x000001, "Wrong alignment on PrepareAreaComponent_CheckIsValidArea");
static_assert(sizeof(PrepareAreaComponent_CheckIsValidArea) == 0x000001, "Wrong size on PrepareAreaComponent_CheckIsValidArea");
static_assert(offsetof(PrepareAreaComponent_CheckIsValidArea, ReturnValue) == 0x000000, "Member 'PrepareAreaComponent_CheckIsValidArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.ShelterPathFinder.RequestMove
// 0x0028 (0x0028 - 0x0000)
struct ShelterPathFinder_RequestMove final
{
public:
	class AMarvelAIController*                    AIOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterPathFinder_RequestMove) == 0x000008, "Wrong alignment on ShelterPathFinder_RequestMove");
static_assert(sizeof(ShelterPathFinder_RequestMove) == 0x000028, "Wrong size on ShelterPathFinder_RequestMove");
static_assert(offsetof(ShelterPathFinder_RequestMove, AIOwner) == 0x000000, "Member 'ShelterPathFinder_RequestMove::AIOwner' has a wrong offset!");
static_assert(offsetof(ShelterPathFinder_RequestMove, TargetLocation) == 0x000008, "Member 'ShelterPathFinder_RequestMove::TargetLocation' has a wrong offset!");
static_assert(offsetof(ShelterPathFinder_RequestMove, ReturnValue) == 0x000020, "Member 'ShelterPathFinder_RequestMove::ReturnValue' has a wrong offset!");

// Function MarvelAI.SniperStandPoint.CheckEnemyIsInWarningRange
// 0x0010 (0x0010 - 0x0000)
struct SniperStandPoint_CheckEnemyIsInWarningRange final
{
public:
	class AActor*                                 EnemyActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SniperStandPoint_CheckEnemyIsInWarningRange) == 0x000008, "Wrong alignment on SniperStandPoint_CheckEnemyIsInWarningRange");
static_assert(sizeof(SniperStandPoint_CheckEnemyIsInWarningRange) == 0x000010, "Wrong size on SniperStandPoint_CheckEnemyIsInWarningRange");
static_assert(offsetof(SniperStandPoint_CheckEnemyIsInWarningRange, EnemyActor) == 0x000000, "Member 'SniperStandPoint_CheckEnemyIsInWarningRange::EnemyActor' has a wrong offset!");
static_assert(offsetof(SniperStandPoint_CheckEnemyIsInWarningRange, ReturnValue) == 0x000008, "Member 'SniperStandPoint_CheckEnemyIsInWarningRange::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.FindStandPoint
// 0x0018 (0x0018 - 0x0000)
struct StandPointRecorder_FindStandPoint final
{
public:
	class FName                                   PointName;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStandPointBase*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_FindStandPoint) == 0x000008, "Wrong alignment on StandPointRecorder_FindStandPoint");
static_assert(sizeof(StandPointRecorder_FindStandPoint) == 0x000018, "Wrong size on StandPointRecorder_FindStandPoint");
static_assert(offsetof(StandPointRecorder_FindStandPoint, PointName) == 0x000000, "Member 'StandPointRecorder_FindStandPoint::PointName' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_FindStandPoint, ReturnValue) == 0x000010, "Member 'StandPointRecorder_FindStandPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.GetPointsByClassWithRadius
// 0x0038 (0x0038 - 0x0000)
struct StandPointRecorder_GetPointsByClassWithRadius final
{
public:
	TSubclassOf<class AStandPointBase>            PointClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AStandPointBase*>                ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_GetPointsByClassWithRadius) == 0x000008, "Wrong alignment on StandPointRecorder_GetPointsByClassWithRadius");
static_assert(sizeof(StandPointRecorder_GetPointsByClassWithRadius) == 0x000038, "Wrong size on StandPointRecorder_GetPointsByClassWithRadius");
static_assert(offsetof(StandPointRecorder_GetPointsByClassWithRadius, PointClass) == 0x000000, "Member 'StandPointRecorder_GetPointsByClassWithRadius::PointClass' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetPointsByClassWithRadius, Center) == 0x000008, "Member 'StandPointRecorder_GetPointsByClassWithRadius::Center' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetPointsByClassWithRadius, Radius) == 0x000020, "Member 'StandPointRecorder_GetPointsByClassWithRadius::Radius' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetPointsByClassWithRadius, ReturnValue) == 0x000028, "Member 'StandPointRecorder_GetPointsByClassWithRadius::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.GetStandPointsByClass
// 0x0018 (0x0018 - 0x0000)
struct StandPointRecorder_GetStandPointsByClass final
{
public:
	TSubclassOf<class AStandPointBase>            PointClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AStandPointBase*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_GetStandPointsByClass) == 0x000008, "Wrong alignment on StandPointRecorder_GetStandPointsByClass");
static_assert(sizeof(StandPointRecorder_GetStandPointsByClass) == 0x000018, "Wrong size on StandPointRecorder_GetStandPointsByClass");
static_assert(offsetof(StandPointRecorder_GetStandPointsByClass, PointClass) == 0x000000, "Member 'StandPointRecorder_GetStandPointsByClass::PointClass' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetStandPointsByClass, ReturnValue) == 0x000008, "Member 'StandPointRecorder_GetStandPointsByClass::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.GetValidAbilityUsagePoints
// 0x0020 (0x0020 - 0x0000)
struct StandPointRecorder_GetValidAbilityUsagePoints final
{
public:
	class AMarvelBaseCharacter*                   ToCheckHero;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIAbilityUsageObject*                  ToCheckUsage;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AStandPointBase*>                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_GetValidAbilityUsagePoints) == 0x000008, "Wrong alignment on StandPointRecorder_GetValidAbilityUsagePoints");
static_assert(sizeof(StandPointRecorder_GetValidAbilityUsagePoints) == 0x000020, "Wrong size on StandPointRecorder_GetValidAbilityUsagePoints");
static_assert(offsetof(StandPointRecorder_GetValidAbilityUsagePoints, ToCheckHero) == 0x000000, "Member 'StandPointRecorder_GetValidAbilityUsagePoints::ToCheckHero' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetValidAbilityUsagePoints, ToCheckUsage) == 0x000008, "Member 'StandPointRecorder_GetValidAbilityUsagePoints::ToCheckUsage' has a wrong offset!");
static_assert(offsetof(StandPointRecorder_GetValidAbilityUsagePoints, ReturnValue) == 0x000010, "Member 'StandPointRecorder_GetValidAbilityUsagePoints::ReturnValue' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.RegisterStandPoint
// 0x0008 (0x0008 - 0x0000)
struct StandPointRecorder_RegisterStandPoint final
{
public:
	class AStandPointBase*                        StandPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_RegisterStandPoint) == 0x000008, "Wrong alignment on StandPointRecorder_RegisterStandPoint");
static_assert(sizeof(StandPointRecorder_RegisterStandPoint) == 0x000008, "Wrong size on StandPointRecorder_RegisterStandPoint");
static_assert(offsetof(StandPointRecorder_RegisterStandPoint, StandPoint) == 0x000000, "Member 'StandPointRecorder_RegisterStandPoint::StandPoint' has a wrong offset!");

// Function MarvelAI.StandPointRecorder.UnRegisterStandPoint
// 0x0008 (0x0008 - 0x0000)
struct StandPointRecorder_UnRegisterStandPoint final
{
public:
	class AStandPointBase*                        StandPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StandPointRecorder_UnRegisterStandPoint) == 0x000008, "Wrong alignment on StandPointRecorder_UnRegisterStandPoint");
static_assert(sizeof(StandPointRecorder_UnRegisterStandPoint) == 0x000008, "Wrong size on StandPointRecorder_UnRegisterStandPoint");
static_assert(offsetof(StandPointRecorder_UnRegisterStandPoint, StandPoint) == 0x000000, "Member 'StandPointRecorder_UnRegisterStandPoint::StandPoint' has a wrong offset!");

// Function MarvelAI.WayPoint.CheckValid
// 0x0001 (0x0001 - 0x0000)
struct WayPoint_CheckValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPoint_CheckValid) == 0x000001, "Wrong alignment on WayPoint_CheckValid");
static_assert(sizeof(WayPoint_CheckValid) == 0x000001, "Wrong size on WayPoint_CheckValid");
static_assert(offsetof(WayPoint_CheckValid, ReturnValue) == 0x000000, "Member 'WayPoint_CheckValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPoint.SelectNextWayPoint
// 0x0018 (0x0018 - 0x0000)
struct WayPoint_SelectNextWayPoint final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWayPoint*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPoint_SelectNextWayPoint) == 0x000008, "Wrong alignment on WayPoint_SelectNextWayPoint");
static_assert(sizeof(WayPoint_SelectNextWayPoint) == 0x000018, "Wrong size on WayPoint_SelectNextWayPoint");
static_assert(offsetof(WayPoint_SelectNextWayPoint, ActorMovingAlong) == 0x000000, "Member 'WayPoint_SelectNextWayPoint::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(WayPoint_SelectNextWayPoint, Target) == 0x000008, "Member 'WayPoint_SelectNextWayPoint::Target' has a wrong offset!");
static_assert(offsetof(WayPoint_SelectNextWayPoint, ReturnValue) == 0x000010, "Member 'WayPoint_SelectNextWayPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPoint.CheckIsProgressInRange
// 0x0008 (0x0008 - 0x0000)
struct WayPoint_CheckIsProgressInRange final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPoint_CheckIsProgressInRange) == 0x000004, "Wrong alignment on WayPoint_CheckIsProgressInRange");
static_assert(sizeof(WayPoint_CheckIsProgressInRange) == 0x000008, "Wrong size on WayPoint_CheckIsProgressInRange");
static_assert(offsetof(WayPoint_CheckIsProgressInRange, CurrentProgress) == 0x000000, "Member 'WayPoint_CheckIsProgressInRange::CurrentProgress' has a wrong offset!");
static_assert(offsetof(WayPoint_CheckIsProgressInRange, ReturnValue) == 0x000004, "Member 'WayPoint_CheckIsProgressInRange::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPoint.GetMaxSafeFactorInNextRoutes
// 0x0004 (0x0004 - 0x0000)
struct WayPoint_GetMaxSafeFactorInNextRoutes final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPoint_GetMaxSafeFactorInNextRoutes) == 0x000004, "Wrong alignment on WayPoint_GetMaxSafeFactorInNextRoutes");
static_assert(sizeof(WayPoint_GetMaxSafeFactorInNextRoutes) == 0x000004, "Wrong size on WayPoint_GetMaxSafeFactorInNextRoutes");
static_assert(offsetof(WayPoint_GetMaxSafeFactorInNextRoutes, ReturnValue) == 0x000000, "Member 'WayPoint_GetMaxSafeFactorInNextRoutes::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPoint.IsPrepareArea
// 0x0001 (0x0001 - 0x0000)
struct WayPoint_IsPrepareArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPoint_IsPrepareArea) == 0x000001, "Wrong alignment on WayPoint_IsPrepareArea");
static_assert(sizeof(WayPoint_IsPrepareArea) == 0x000001, "Wrong size on WayPoint_IsPrepareArea");
static_assert(offsetof(WayPoint_IsPrepareArea, ReturnValue) == 0x000000, "Member 'WayPoint_IsPrepareArea::ReturnValue' has a wrong offset!");

// Function MarvelAI.StartWayPoint.GetMarkFromActor
// 0x0010 (0x0010 - 0x0000)
struct StartWayPoint_GetMarkFromActor final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWayPointMark                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StartWayPoint_GetMarkFromActor) == 0x000008, "Wrong alignment on StartWayPoint_GetMarkFromActor");
static_assert(sizeof(StartWayPoint_GetMarkFromActor) == 0x000010, "Wrong size on StartWayPoint_GetMarkFromActor");
static_assert(offsetof(StartWayPoint_GetMarkFromActor, ActorMovingAlong) == 0x000000, "Member 'StartWayPoint_GetMarkFromActor::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(StartWayPoint_GetMarkFromActor, ReturnValue) == 0x000008, "Member 'StartWayPoint_GetMarkFromActor::ReturnValue' has a wrong offset!");

// Function MarvelAI.StartWayPoint.FetchWayPointPath
// 0x0060 (0x0060 - 0x0000)
struct StartWayPoint_FetchWayPointPath final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          UseLastValidPath;                                  // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StartWayPoint_FetchWayPointPath) == 0x000008, "Wrong alignment on StartWayPoint_FetchWayPointPath");
static_assert(sizeof(StartWayPoint_FetchWayPointPath) == 0x000060, "Wrong size on StartWayPoint_FetchWayPointPath");
static_assert(offsetof(StartWayPoint_FetchWayPointPath, ActorMovingAlong) == 0x000000, "Member 'StartWayPoint_FetchWayPointPath::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(StartWayPoint_FetchWayPointPath, Target) == 0x000008, "Member 'StartWayPoint_FetchWayPointPath::Target' has a wrong offset!");
static_assert(offsetof(StartWayPoint_FetchWayPointPath, OutWayPointPath) == 0x000010, "Member 'StartWayPoint_FetchWayPointPath::OutWayPointPath' has a wrong offset!");
static_assert(offsetof(StartWayPoint_FetchWayPointPath, UseLastValidPath) == 0x000058, "Member 'StartWayPoint_FetchWayPointPath::UseLastValidPath' has a wrong offset!");

// Function MarvelAI.StartWayPoint.GenerateWayPointPath
// 0x0058 (0x0058 - 0x0000)
struct StartWayPoint_GenerateWayPointPath final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWayPoint*                              Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartWayPoint_GenerateWayPointPath) == 0x000008, "Wrong alignment on StartWayPoint_GenerateWayPointPath");
static_assert(sizeof(StartWayPoint_GenerateWayPointPath) == 0x000058, "Wrong size on StartWayPoint_GenerateWayPointPath");
static_assert(offsetof(StartWayPoint_GenerateWayPointPath, ActorMovingAlong) == 0x000000, "Member 'StartWayPoint_GenerateWayPointPath::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(StartWayPoint_GenerateWayPointPath, Target) == 0x000008, "Member 'StartWayPoint_GenerateWayPointPath::Target' has a wrong offset!");
static_assert(offsetof(StartWayPoint_GenerateWayPointPath, OutWayPointPath) == 0x000010, "Member 'StartWayPoint_GenerateWayPointPath::OutWayPointPath' has a wrong offset!");

// Function MarvelAI.StartWayPoint.GenerateWayPointPathByMark
// 0x0058 (0x0058 - 0x0000)
struct StartWayPoint_GenerateWayPointPathByMark final
{
public:
	EWayPointMark                                 WayPointMark;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FinalTarget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          OutWayPointPath;                                   // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartWayPoint_GenerateWayPointPathByMark) == 0x000008, "Wrong alignment on StartWayPoint_GenerateWayPointPathByMark");
static_assert(sizeof(StartWayPoint_GenerateWayPointPathByMark) == 0x000058, "Wrong size on StartWayPoint_GenerateWayPointPathByMark");
static_assert(offsetof(StartWayPoint_GenerateWayPointPathByMark, WayPointMark) == 0x000000, "Member 'StartWayPoint_GenerateWayPointPathByMark::WayPointMark' has a wrong offset!");
static_assert(offsetof(StartWayPoint_GenerateWayPointPathByMark, FinalTarget) == 0x000008, "Member 'StartWayPoint_GenerateWayPointPathByMark::FinalTarget' has a wrong offset!");
static_assert(offsetof(StartWayPoint_GenerateWayPointPathByMark, OutWayPointPath) == 0x000010, "Member 'StartWayPoint_GenerateWayPointPathByMark::OutWayPointPath' has a wrong offset!");

// Function MarvelAI.StartWayPoint.PyFetchWayPointPath
// 0x0058 (0x0058 - 0x0000)
struct StartWayPoint_PyFetchWayPointPath final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWayPointPath                          ReturnValue;                                       // 0x0010(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartWayPoint_PyFetchWayPointPath) == 0x000008, "Wrong alignment on StartWayPoint_PyFetchWayPointPath");
static_assert(sizeof(StartWayPoint_PyFetchWayPointPath) == 0x000058, "Wrong size on StartWayPoint_PyFetchWayPointPath");
static_assert(offsetof(StartWayPoint_PyFetchWayPointPath, ActorMovingAlong) == 0x000000, "Member 'StartWayPoint_PyFetchWayPointPath::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(StartWayPoint_PyFetchWayPointPath, Target) == 0x000008, "Member 'StartWayPoint_PyFetchWayPointPath::Target' has a wrong offset!");
static_assert(offsetof(StartWayPoint_PyFetchWayPointPath, ReturnValue) == 0x000010, "Member 'StartWayPoint_PyFetchWayPointPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.StrategyPointActor.SetShelterIsBroken
// 0x0001 (0x0001 - 0x0000)
struct StrategyPointActor_SetShelterIsBroken final
{
public:
	bool                                          bNewIsBroken;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategyPointActor_SetShelterIsBroken) == 0x000001, "Wrong alignment on StrategyPointActor_SetShelterIsBroken");
static_assert(sizeof(StrategyPointActor_SetShelterIsBroken) == 0x000001, "Wrong size on StrategyPointActor_SetShelterIsBroken");
static_assert(offsetof(StrategyPointActor_SetShelterIsBroken, bNewIsBroken) == 0x000000, "Member 'StrategyPointActor_SetShelterIsBroken::bNewIsBroken' has a wrong offset!");

// Function MarvelAI.StrategyPointSubsystem.GetAllStrategyPointActors
// 0x0010 (0x0010 - 0x0000)
struct StrategyPointSubsystem_GetAllStrategyPointActors final
{
public:
	TArray<class AStrategyPointActor*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategyPointSubsystem_GetAllStrategyPointActors) == 0x000008, "Wrong alignment on StrategyPointSubsystem_GetAllStrategyPointActors");
static_assert(sizeof(StrategyPointSubsystem_GetAllStrategyPointActors) == 0x000010, "Wrong size on StrategyPointSubsystem_GetAllStrategyPointActors");
static_assert(offsetof(StrategyPointSubsystem_GetAllStrategyPointActors, ReturnValue) == 0x000000, "Member 'StrategyPointSubsystem_GetAllStrategyPointActors::ReturnValue' has a wrong offset!");

// Function MarvelAI.StrategyPointSubsystem.GetAllStrategyPointActorsWithRadius
// 0x0030 (0x0030 - 0x0000)
struct StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AStrategyPointActor*>            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius) == 0x000008, "Wrong alignment on StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius");
static_assert(sizeof(StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius) == 0x000030, "Wrong size on StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius");
static_assert(offsetof(StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius, Center) == 0x000000, "Member 'StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius::Center' has a wrong offset!");
static_assert(offsetof(StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius, Radius) == 0x000018, "Member 'StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius::Radius' has a wrong offset!");
static_assert(offsetof(StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius, ReturnValue) == 0x000020, "Member 'StrategyPointSubsystem_GetAllStrategyPointActorsWithRadius::ReturnValue' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.GenerateRandomTestCasesFromActorList
// 0x0018 (0x0018 - 0x0000)
struct SVONPathFindTester_GenerateRandomTestCasesFromActorList final
{
public:
	TArray<class AActor*>                         ActorList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         TryTimes;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SVONPathFindTester_GenerateRandomTestCasesFromActorList) == 0x000008, "Wrong alignment on SVONPathFindTester_GenerateRandomTestCasesFromActorList");
static_assert(sizeof(SVONPathFindTester_GenerateRandomTestCasesFromActorList) == 0x000018, "Wrong size on SVONPathFindTester_GenerateRandomTestCasesFromActorList");
static_assert(offsetof(SVONPathFindTester_GenerateRandomTestCasesFromActorList, ActorList) == 0x000000, "Member 'SVONPathFindTester_GenerateRandomTestCasesFromActorList::ActorList' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_GenerateRandomTestCasesFromActorList, TryTimes) == 0x000010, "Member 'SVONPathFindTester_GenerateRandomTestCasesFromActorList::TryTimes' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.MakeDataForTestCase
// 0x0038 (0x0038 - 0x0000)
struct SVONPathFindTester_MakeDataForTestCase final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPoint;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireHavePath;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SVONPathFindTester_MakeDataForTestCase) == 0x000008, "Wrong alignment on SVONPathFindTester_MakeDataForTestCase");
static_assert(sizeof(SVONPathFindTester_MakeDataForTestCase) == 0x000038, "Wrong size on SVONPathFindTester_MakeDataForTestCase");
static_assert(offsetof(SVONPathFindTester_MakeDataForTestCase, StartPoint) == 0x000000, "Member 'SVONPathFindTester_MakeDataForTestCase::StartPoint' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_MakeDataForTestCase, TargetPoint) == 0x000018, "Member 'SVONPathFindTester_MakeDataForTestCase::TargetPoint' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_MakeDataForTestCase, bRequireHavePath) == 0x000030, "Member 'SVONPathFindTester_MakeDataForTestCase::bRequireHavePath' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_MakeDataForTestCase, ReturnValue) == 0x000031, "Member 'SVONPathFindTester_MakeDataForTestCase::ReturnValue' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.K2_FindPath
// 0x0048 (0x0048 - 0x0000)
struct SVONPathFindTester_K2_FindPath final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPoint;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathPoints;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SVONPathFindTester_K2_FindPath) == 0x000008, "Wrong alignment on SVONPathFindTester_K2_FindPath");
static_assert(sizeof(SVONPathFindTester_K2_FindPath) == 0x000048, "Wrong size on SVONPathFindTester_K2_FindPath");
static_assert(offsetof(SVONPathFindTester_K2_FindPath, StartPoint) == 0x000000, "Member 'SVONPathFindTester_K2_FindPath::StartPoint' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_K2_FindPath, TargetPoint) == 0x000018, "Member 'SVONPathFindTester_K2_FindPath::TargetPoint' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_K2_FindPath, OutPathPoints) == 0x000030, "Member 'SVONPathFindTester_K2_FindPath::OutPathPoints' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_K2_FindPath, ReturnValue) == 0x000040, "Member 'SVONPathFindTester_K2_FindPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.K2_RunCheckForCase
// 0x0058 (0x0058 - 0x0000)
struct SVONPathFindTester_K2_RunCheckForCase final
{
public:
	struct FPathFindTestCase                      TestCase;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SVONPathFindTester_K2_RunCheckForCase) == 0x000008, "Wrong alignment on SVONPathFindTester_K2_RunCheckForCase");
static_assert(sizeof(SVONPathFindTester_K2_RunCheckForCase) == 0x000058, "Wrong size on SVONPathFindTester_K2_RunCheckForCase");
static_assert(offsetof(SVONPathFindTester_K2_RunCheckForCase, TestCase) == 0x000000, "Member 'SVONPathFindTester_K2_RunCheckForCase::TestCase' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_K2_RunCheckForCase, ReturnValue) == 0x000050, "Member 'SVONPathFindTester_K2_RunCheckForCase::ReturnValue' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.RunTestCaseWithIndexList
// 0x0018 (0x0018 - 0x0000)
struct SVONPathFindTester_RunTestCaseWithIndexList final
{
public:
	TArray<int32>                                 CaseIndexList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SVONPathFindTester_RunTestCaseWithIndexList) == 0x000008, "Wrong alignment on SVONPathFindTester_RunTestCaseWithIndexList");
static_assert(sizeof(SVONPathFindTester_RunTestCaseWithIndexList) == 0x000018, "Wrong size on SVONPathFindTester_RunTestCaseWithIndexList");
static_assert(offsetof(SVONPathFindTester_RunTestCaseWithIndexList, CaseIndexList) == 0x000000, "Member 'SVONPathFindTester_RunTestCaseWithIndexList::CaseIndexList' has a wrong offset!");
static_assert(offsetof(SVONPathFindTester_RunTestCaseWithIndexList, ReturnValue) == 0x000010, "Member 'SVONPathFindTester_RunTestCaseWithIndexList::ReturnValue' has a wrong offset!");

// Function MarvelAI.SVONPathFindTester.RunTestCategory
// 0x0030 (0x0030 - 0x0000)
struct SVONPathFindTester_RunTestCategory final
{
public:
	struct FPathTestCaseCategory                  TestCaseCategory;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SVONPathFindTester_RunTestCategory) == 0x000008, "Wrong alignment on SVONPathFindTester_RunTestCategory");
static_assert(sizeof(SVONPathFindTester_RunTestCategory) == 0x000030, "Wrong size on SVONPathFindTester_RunTestCategory");
static_assert(offsetof(SVONPathFindTester_RunTestCategory, TestCaseCategory) == 0x000000, "Member 'SVONPathFindTester_RunTestCategory::TestCaseCategory' has a wrong offset!");

// Function MarvelAI.WayPointRandomSelectComponent.SelectNextWayPoint
// 0x0018 (0x0018 - 0x0000)
struct WayPointRandomSelectComponent_SelectNextWayPoint final
{
public:
	class AActor*                                 ActorMovingAlong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointRandomSelectComponent_SelectNextWayPoint) == 0x000008, "Wrong alignment on WayPointRandomSelectComponent_SelectNextWayPoint");
static_assert(sizeof(WayPointRandomSelectComponent_SelectNextWayPoint) == 0x000018, "Wrong size on WayPointRandomSelectComponent_SelectNextWayPoint");
static_assert(offsetof(WayPointRandomSelectComponent_SelectNextWayPoint, ActorMovingAlong) == 0x000000, "Member 'WayPointRandomSelectComponent_SelectNextWayPoint::ActorMovingAlong' has a wrong offset!");
static_assert(offsetof(WayPointRandomSelectComponent_SelectNextWayPoint, Target) == 0x000008, "Member 'WayPointRandomSelectComponent_SelectNextWayPoint::Target' has a wrong offset!");
static_assert(offsetof(WayPointRandomSelectComponent_SelectNextWayPoint, ReturnValue) == 0x000010, "Member 'WayPointRandomSelectComponent_SelectNextWayPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.BuildDefaultSimplePath
// 0x0058 (0x0058 - 0x0000)
struct WayPointPathFunctionLibrary_BuildDefaultSimplePath final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 MovingActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FinalTarget;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_BuildDefaultSimplePath) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_BuildDefaultSimplePath");
static_assert(sizeof(WayPointPathFunctionLibrary_BuildDefaultSimplePath) == 0x000058, "Wrong size on WayPointPathFunctionLibrary_BuildDefaultSimplePath");
static_assert(offsetof(WayPointPathFunctionLibrary_BuildDefaultSimplePath, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_BuildDefaultSimplePath::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_BuildDefaultSimplePath, MovingActor) == 0x000048, "Member 'WayPointPathFunctionLibrary_BuildDefaultSimplePath::MovingActor' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_BuildDefaultSimplePath, FinalTarget) == 0x000050, "Member 'WayPointPathFunctionLibrary_BuildDefaultSimplePath::FinalTarget' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.Clear
// 0x0048 (0x0048 - 0x0000)
struct WayPointPathFunctionLibrary_Clear final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_Clear) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_Clear");
static_assert(sizeof(WayPointPathFunctionLibrary_Clear) == 0x000048, "Wrong size on WayPointPathFunctionLibrary_Clear");
static_assert(offsetof(WayPointPathFunctionLibrary_Clear, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_Clear::WayPointPath' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.GetCurrentWayPoint
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_GetCurrentWayPoint final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_GetCurrentWayPoint) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_GetCurrentWayPoint");
static_assert(sizeof(WayPointPathFunctionLibrary_GetCurrentWayPoint) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_GetCurrentWayPoint");
static_assert(offsetof(WayPointPathFunctionLibrary_GetCurrentWayPoint, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_GetCurrentWayPoint::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_GetCurrentWayPoint, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_GetCurrentWayPoint::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.GetFinalTarget
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_GetFinalTarget final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_GetFinalTarget) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_GetFinalTarget");
static_assert(sizeof(WayPointPathFunctionLibrary_GetFinalTarget) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_GetFinalTarget");
static_assert(offsetof(WayPointPathFunctionLibrary_GetFinalTarget, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_GetFinalTarget::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_GetFinalTarget, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_GetFinalTarget::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.GoNext
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_GoNext final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_GoNext) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_GoNext");
static_assert(sizeof(WayPointPathFunctionLibrary_GoNext) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_GoNext");
static_assert(offsetof(WayPointPathFunctionLibrary_GoNext, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_GoNext::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_GoNext, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_GoNext::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.InitPathForMovingActor
// 0x0058 (0x0058 - 0x0000)
struct WayPointPathFunctionLibrary_InitPathForMovingActor final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 MovingActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldUpdateProgress;                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWayPointMark                                 PathMark;                                          // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_InitPathForMovingActor) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_InitPathForMovingActor");
static_assert(sizeof(WayPointPathFunctionLibrary_InitPathForMovingActor) == 0x000058, "Wrong size on WayPointPathFunctionLibrary_InitPathForMovingActor");
static_assert(offsetof(WayPointPathFunctionLibrary_InitPathForMovingActor, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_InitPathForMovingActor::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_InitPathForMovingActor, MovingActor) == 0x000048, "Member 'WayPointPathFunctionLibrary_InitPathForMovingActor::MovingActor' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_InitPathForMovingActor, ShouldUpdateProgress) == 0x000050, "Member 'WayPointPathFunctionLibrary_InitPathForMovingActor::ShouldUpdateProgress' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_InitPathForMovingActor, PathMark) == 0x000051, "Member 'WayPointPathFunctionLibrary_InitPathForMovingActor::PathMark' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.IsMovingActorOutOfPath
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_IsMovingActorOutOfPath final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         AllowedRadius;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_IsMovingActorOutOfPath) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_IsMovingActorOutOfPath");
static_assert(sizeof(WayPointPathFunctionLibrary_IsMovingActorOutOfPath) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_IsMovingActorOutOfPath");
static_assert(offsetof(WayPointPathFunctionLibrary_IsMovingActorOutOfPath, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_IsMovingActorOutOfPath::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_IsMovingActorOutOfPath, AllowedRadius) == 0x000048, "Member 'WayPointPathFunctionLibrary_IsMovingActorOutOfPath::AllowedRadius' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_IsMovingActorOutOfPath, ReturnValue) == 0x00004C, "Member 'WayPointPathFunctionLibrary_IsMovingActorOutOfPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.IsPathFinished
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_IsPathFinished final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_IsPathFinished) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_IsPathFinished");
static_assert(sizeof(WayPointPathFunctionLibrary_IsPathFinished) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_IsPathFinished");
static_assert(offsetof(WayPointPathFunctionLibrary_IsPathFinished, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_IsPathFinished::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_IsPathFinished, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_IsPathFinished::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.IsPathValid
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_IsPathValid final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_IsPathValid) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_IsPathValid");
static_assert(sizeof(WayPointPathFunctionLibrary_IsPathValid) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_IsPathValid");
static_assert(offsetof(WayPointPathFunctionLibrary_IsPathValid, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_IsPathValid::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_IsPathValid, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_IsPathValid::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.IsRingPath
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_IsRingPath final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_IsRingPath) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_IsRingPath");
static_assert(sizeof(WayPointPathFunctionLibrary_IsRingPath) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_IsRingPath");
static_assert(offsetof(WayPointPathFunctionLibrary_IsRingPath, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_IsRingPath::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_IsRingPath, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_IsRingPath::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.MarkRingPath
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_MarkRingPath final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 RingStartPoint;                                    // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_MarkRingPath) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_MarkRingPath");
static_assert(sizeof(WayPointPathFunctionLibrary_MarkRingPath) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_MarkRingPath");
static_assert(offsetof(WayPointPathFunctionLibrary_MarkRingPath, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_MarkRingPath::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_MarkRingPath, RingStartPoint) == 0x000048, "Member 'WayPointPathFunctionLibrary_MarkRingPath::RingStartPoint' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.ResetProgress
// 0x0048 (0x0048 - 0x0000)
struct WayPointPathFunctionLibrary_ResetProgress final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_ResetProgress) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_ResetProgress");
static_assert(sizeof(WayPointPathFunctionLibrary_ResetProgress) == 0x000048, "Wrong size on WayPointPathFunctionLibrary_ResetProgress");
static_assert(offsetof(WayPointPathFunctionLibrary_ResetProgress, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_ResetProgress::WayPointPath' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.SetPathMark
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_SetPathMark final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWayPointMark                                 NewWayPointMark;                                   // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_SetPathMark) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_SetPathMark");
static_assert(sizeof(WayPointPathFunctionLibrary_SetPathMark) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_SetPathMark");
static_assert(offsetof(WayPointPathFunctionLibrary_SetPathMark, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_SetPathMark::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_SetPathMark, NewWayPointMark) == 0x000048, "Member 'WayPointPathFunctionLibrary_SetPathMark::NewWayPointMark' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.TakeNextLocationToReach
// 0x0060 (0x0060 - 0x0000)
struct WayPointPathFunctionLibrary_TakeNextLocationToReach final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_TakeNextLocationToReach) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_TakeNextLocationToReach");
static_assert(sizeof(WayPointPathFunctionLibrary_TakeNextLocationToReach) == 0x000060, "Wrong size on WayPointPathFunctionLibrary_TakeNextLocationToReach");
static_assert(offsetof(WayPointPathFunctionLibrary_TakeNextLocationToReach, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_TakeNextLocationToReach::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_TakeNextLocationToReach, ReturnValue) == 0x000048, "Member 'WayPointPathFunctionLibrary_TakeNextLocationToReach::ReturnValue' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.UpdateProgressInPath
// 0x0048 (0x0048 - 0x0000)
struct WayPointPathFunctionLibrary_UpdateProgressInPath final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WayPointPathFunctionLibrary_UpdateProgressInPath) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_UpdateProgressInPath");
static_assert(sizeof(WayPointPathFunctionLibrary_UpdateProgressInPath) == 0x000048, "Wrong size on WayPointPathFunctionLibrary_UpdateProgressInPath");
static_assert(offsetof(WayPointPathFunctionLibrary_UpdateProgressInPath, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_UpdateProgressInPath::WayPointPath' has a wrong offset!");

// Function MarvelAI.WayPointPathFunctionLibrary.UpdateSafeFactorForRoutes
// 0x0050 (0x0050 - 0x0000)
struct WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes final
{
public:
	struct FWayPointPath                          WayPointPath;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         SafeFactor;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes) == 0x000008, "Wrong alignment on WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes");
static_assert(sizeof(WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes) == 0x000050, "Wrong size on WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes");
static_assert(offsetof(WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes, WayPointPath) == 0x000000, "Member 'WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes::WayPointPath' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes, SafeFactor) == 0x000048, "Member 'WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes::SafeFactor' has a wrong offset!");
static_assert(offsetof(WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes, ReturnValue) == 0x00004C, "Member 'WayPointPathFunctionLibrary_UpdateSafeFactorForRoutes::ReturnValue' has a wrong offset!");

}

