#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineCore

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "StructUtils_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieRenderPipelineCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "OpenColorIO_structs.hpp"


namespace SDK
{

// Class MovieRenderPipelineCore.MovieGraphBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UMovieGraphBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FFrameRate GetEffectiveFrameRate(class UMovieGraphOutputSettingNode* InNode, const struct FFrameRate& InDefaultRate);
	static struct FIntPoint GetEffectiveOutputResolution(class UMovieGraphEvaluatedConfig* InEvaluatedGraph, const class FName& InBranchName);
	static class FString ResolveFilenameFormatArguments(const class FString& InFormatString, const struct FMovieGraphFilenameResolveParams& InParams, struct FMovieGraphResolveArgs* OutMergedFormatArgs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBlueprintLibrary">();
	}
	static class UMovieGraphBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBlueprintLibrary>();
	}
};
static_assert(alignof(UMovieGraphBlueprintLibrary) == 0x000008, "Wrong alignment on UMovieGraphBlueprintLibrary");
static_assert(sizeof(UMovieGraphBlueprintLibrary) == 0x000030, "Wrong size on UMovieGraphBlueprintLibrary");

// Class MovieRenderPipelineCore.MovieGraphNode
// 0x0068 (0x0098 - 0x0030)
class UMovieGraphNode : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieGraphPin*>                 InputPins;                                         // 0x0048(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UMovieGraphPin*>                 OutputPins;                                        // 0x0058(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FInstancedPropertyBag                  DynamicProperties;                                 // 0x0068(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMovieGraphPropertyInfo>        ExposedPropertyInfo;                               // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphNode">();
	}
	static class UMovieGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphNode>();
	}
};
static_assert(alignof(UMovieGraphNode) == 0x000008, "Wrong alignment on UMovieGraphNode");
static_assert(sizeof(UMovieGraphNode) == 0x000098, "Wrong size on UMovieGraphNode");
static_assert(offsetof(UMovieGraphNode, InputPins) == 0x000048, "Member 'UMovieGraphNode::InputPins' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, OutputPins) == 0x000058, "Member 'UMovieGraphNode::OutputPins' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, DynamicProperties) == 0x000068, "Member 'UMovieGraphNode::DynamicProperties' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, ExposedPropertyInfo) == 0x000078, "Member 'UMovieGraphNode::ExposedPropertyInfo' has a wrong offset!");
static_assert(offsetof(UMovieGraphNode, Guid) == 0x000088, "Member 'UMovieGraphNode::Guid' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphBranchNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphBranchNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBranchNode">();
	}
	static class UMovieGraphBranchNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBranchNode>();
	}
};
static_assert(alignof(UMovieGraphBranchNode) == 0x000008, "Wrong alignment on UMovieGraphBranchNode");
static_assert(sizeof(UMovieGraphBranchNode) == 0x000098, "Wrong size on UMovieGraphBranchNode");

// Class MovieRenderPipelineCore.MovieGraphSettingNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphSettingNode : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSettingNode">();
	}
	static class UMovieGraphSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSettingNode>();
	}
};
static_assert(alignof(UMovieGraphSettingNode) == 0x000008, "Wrong alignment on UMovieGraphSettingNode");
static_assert(sizeof(UMovieGraphSettingNode) == 0x000098, "Wrong size on UMovieGraphSettingNode");

// Class MovieRenderPipelineCore.MovieGraphRenderPassNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphRenderPassNode : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderPassNode">();
	}
	static class UMovieGraphRenderPassNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderPassNode>();
	}
};
static_assert(alignof(UMovieGraphRenderPassNode) == 0x000008, "Wrong alignment on UMovieGraphRenderPassNode");
static_assert(sizeof(UMovieGraphRenderPassNode) == 0x000098, "Wrong size on UMovieGraphRenderPassNode");

// Class MovieRenderPipelineCore.MovieGraphBurnInNode
// 0x00F8 (0x0190 - 0x0098)
class UMovieGraphBurnInNode final : public UMovieGraphRenderPassNode
{
public:
	uint8                                         bOverride_BurnInClass : 1;                         // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bCompositeOntoFinalImage : 1;            // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         BurnInClass;                                       // 0x00A0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompositeOntoFinalImage;                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x67];                                      // 0x00C9(0x0067)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, class UMovieGraphBurnInWidget*> BurnInWidgetInstances;                             // 0x0130(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBurnInNode">();
	}
	static class UMovieGraphBurnInNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBurnInNode>();
	}
};
static_assert(alignof(UMovieGraphBurnInNode) == 0x000008, "Wrong alignment on UMovieGraphBurnInNode");
static_assert(sizeof(UMovieGraphBurnInNode) == 0x000190, "Wrong size on UMovieGraphBurnInNode");
static_assert(offsetof(UMovieGraphBurnInNode, BurnInClass) == 0x0000A0, "Member 'UMovieGraphBurnInNode::BurnInClass' has a wrong offset!");
static_assert(offsetof(UMovieGraphBurnInNode, bCompositeOntoFinalImage) == 0x0000C8, "Member 'UMovieGraphBurnInNode::bCompositeOntoFinalImage' has a wrong offset!");
static_assert(offsetof(UMovieGraphBurnInNode, BurnInWidgetInstances) == 0x000130, "Member 'UMovieGraphBurnInNode::BurnInWidgetInstances' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphBurnInWidget
// 0x0000 (0x03B8 - 0x03B8)
class UMovieGraphBurnInWidget final : public UUserWidget
{
public:
	void UpdateForGraph(class UMovieGraphPipeline* InGraphPipeline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphBurnInWidget">();
	}
	static class UMovieGraphBurnInWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphBurnInWidget>();
	}
};
static_assert(alignof(UMovieGraphBurnInWidget) == 0x000008, "Wrong alignment on UMovieGraphBurnInWidget");
static_assert(sizeof(UMovieGraphBurnInWidget) == 0x0003B8, "Wrong size on UMovieGraphBurnInWidget");

// Class MovieRenderPipelineCore.MovieGraphCollectionNode
// 0x0020 (0x00B8 - 0x0098)
class UMovieGraphCollectionNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_CollectionName : 1;                      // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_QueryClass : 1;                          // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CollectionName;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineCollectionQuery*          QueryClass;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphCollectionNode">();
	}
	static class UMovieGraphCollectionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphCollectionNode>();
	}
};
static_assert(alignof(UMovieGraphCollectionNode) == 0x000008, "Wrong alignment on UMovieGraphCollectionNode");
static_assert(sizeof(UMovieGraphCollectionNode) == 0x0000B8, "Wrong size on UMovieGraphCollectionNode");
static_assert(offsetof(UMovieGraphCollectionNode, CollectionName) == 0x0000A0, "Member 'UMovieGraphCollectionNode::CollectionName' has a wrong offset!");
static_assert(offsetof(UMovieGraphCollectionNode, QueryClass) == 0x0000B0, "Member 'UMovieGraphCollectionNode::QueryClass' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphValueContainer
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphValueContainer : public UObject
{
public:
	struct FInstancedPropertyBag                  Value;                                             // 0x0030(0x0010)(Edit, NativeAccessSpecifierPrivate)

public:
	class FString GetValueSerializedString();
	bool SetValueBool(const bool bInValue);
	bool SetValueByte(const uint8 InValue);
	bool SetValueClass(class UClass* InValue);
	void SetValueContainerType(EMovieGraphContainerType ContainerType);
	bool SetValueDouble(const double InValue);
	bool SetValueEnum(const uint8 InValue, const class UEnum* Enum);
	bool SetValueFloat(const float InValue);
	bool SetValueInt32(const int32 InValue);
	bool SetValueInt64(const int64 InValue);
	bool SetValueName(const class FName InValue);
	bool SetValueObject(class UObject* InValue);
	bool SetValueSerializedString(const class FString& NewValue);
	bool SetValueString(const class FString& InValue);
	bool SetValueText(const class FText& InValue);
	void SetValueType(EMovieGraphValueType ValueType);
	void SetValueTypeObject(const class UObject* ValueTypeObject);

	bool GetValueBool(bool* bOutValue) const;
	bool GetValueByte(uint8* OutValue) const;
	bool GetValueClass(class UClass* OutValue) const;
	EMovieGraphContainerType GetValueContainerType() const;
	bool GetValueDouble(double* OutValue) const;
	bool GetValueEnum(uint8* OutValue, const class UEnum* RequestedEnum) const;
	bool GetValueFloat(float* OutValue) const;
	bool GetValueInt32(int32* OutValue) const;
	bool GetValueInt64(int64* OutValue) const;
	bool GetValueName(class FName* OutValue) const;
	bool GetValueObject(class UObject* OutValue, const class UClass* RequestedClass) const;
	bool GetValueString(class FString* OutValue) const;
	bool GetValueText(class FText* OutValue) const;
	EMovieGraphValueType GetValueType() const;
	const class UObject* GetValueTypeObject() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphValueContainer">();
	}
	static class UMovieGraphValueContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphValueContainer>();
	}
};
static_assert(alignof(UMovieGraphValueContainer) == 0x000008, "Wrong alignment on UMovieGraphValueContainer");
static_assert(sizeof(UMovieGraphValueContainer) == 0x000040, "Wrong size on UMovieGraphValueContainer");
static_assert(offsetof(UMovieGraphValueContainer, Value) == 0x000030, "Member 'UMovieGraphValueContainer::Value' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphMember
// 0x0038 (0x0078 - 0x0040)
class UMovieGraphMember : public UMovieGraphValueContainer
{
public:
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0050(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEditable;                                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphMember">();
	}
	static class UMovieGraphMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphMember>();
	}
};
static_assert(alignof(UMovieGraphMember) == 0x000008, "Wrong alignment on UMovieGraphMember");
static_assert(sizeof(UMovieGraphMember) == 0x000078, "Wrong size on UMovieGraphMember");
static_assert(offsetof(UMovieGraphMember, Description) == 0x000040, "Member 'UMovieGraphMember::Description' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, Name_0) == 0x000050, "Member 'UMovieGraphMember::Name_0' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, Guid) == 0x000060, "Member 'UMovieGraphMember::Guid' has a wrong offset!");
static_assert(offsetof(UMovieGraphMember, bIsEditable) == 0x000070, "Member 'UMovieGraphMember::bIsEditable' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphVariable
// 0x0008 (0x0080 - 0x0078)
class UMovieGraphVariable final : public UMovieGraphMember
{
public:
	bool                                          bIsGlobal;                                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphVariable">();
	}
	static class UMovieGraphVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphVariable>();
	}
};
static_assert(alignof(UMovieGraphVariable) == 0x000008, "Wrong alignment on UMovieGraphVariable");
static_assert(sizeof(UMovieGraphVariable) == 0x000080, "Wrong size on UMovieGraphVariable");
static_assert(offsetof(UMovieGraphVariable, bIsGlobal) == 0x000078, "Member 'UMovieGraphVariable::bIsGlobal' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphInterfaceBase
// 0x0008 (0x0080 - 0x0078)
class UMovieGraphInterfaceBase : public UMovieGraphMember
{
public:
	bool                                          bIsBranch;                                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInterfaceBase">();
	}
	static class UMovieGraphInterfaceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInterfaceBase>();
	}
};
static_assert(alignof(UMovieGraphInterfaceBase) == 0x000008, "Wrong alignment on UMovieGraphInterfaceBase");
static_assert(sizeof(UMovieGraphInterfaceBase) == 0x000080, "Wrong size on UMovieGraphInterfaceBase");
static_assert(offsetof(UMovieGraphInterfaceBase, bIsBranch) == 0x000078, "Member 'UMovieGraphInterfaceBase::bIsBranch' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphInput
// 0x0000 (0x0080 - 0x0080)
class UMovieGraphInput final : public UMovieGraphInterfaceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInput">();
	}
	static class UMovieGraphInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInput>();
	}
};
static_assert(alignof(UMovieGraphInput) == 0x000008, "Wrong alignment on UMovieGraphInput");
static_assert(sizeof(UMovieGraphInput) == 0x000080, "Wrong size on UMovieGraphInput");

// Class MovieRenderPipelineCore.MovieGraphOutput
// 0x0000 (0x0080 - 0x0080)
class UMovieGraphOutput final : public UMovieGraphInterfaceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphOutput">();
	}
	static class UMovieGraphOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphOutput>();
	}
};
static_assert(alignof(UMovieGraphOutput) == 0x000008, "Wrong alignment on UMovieGraphOutput");
static_assert(sizeof(UMovieGraphOutput) == 0x000080, "Wrong size on UMovieGraphOutput");

// Class MovieRenderPipelineCore.MovieGraphEvaluatedConfig
// 0x0050 (0x0080 - 0x0030)
class UMovieGraphEvaluatedConfig final : public UObject
{
public:
	TMap<class FName, struct FMovieGraphEvaluatedBranchConfig> BranchConfigMapping;                               // 0x0030(0x0050)(Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEvaluatedConfig">();
	}
	static class UMovieGraphEvaluatedConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEvaluatedConfig>();
	}
};
static_assert(alignof(UMovieGraphEvaluatedConfig) == 0x000008, "Wrong alignment on UMovieGraphEvaluatedConfig");
static_assert(sizeof(UMovieGraphEvaluatedConfig) == 0x000080, "Wrong size on UMovieGraphEvaluatedConfig");
static_assert(offsetof(UMovieGraphEvaluatedConfig, BranchConfigMapping) == 0x000030, "Member 'UMovieGraphEvaluatedConfig::BranchConfigMapping' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphConfig
// 0x0050 (0x0080 - 0x0030)
class UMovieGraphConfig final : public UObject
{
public:
	TArray<class UMovieGraphNode*>                AllNodes;                                          // 0x0030(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMovieGraphNode*                        InputNode;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphNode*                        OutputNode;                                        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMovieGraphVariable*>            Variables;                                         // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphInput*>               Inputs;                                            // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMovieGraphOutput*>              Outputs;                                           // 0x0070(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UMovieGraphVariable* AddVariable(const class FName InCustomBaseName);
	class UMovieGraphEvaluatedConfig* CreateFlattenedGraph(const struct FMovieGraphTraversalContext& InContext);

	TArray<class UMovieGraphVariable*> GetVariables(const bool bIncludeGlobal) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphConfig">();
	}
	static class UMovieGraphConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphConfig>();
	}
};
static_assert(alignof(UMovieGraphConfig) == 0x000008, "Wrong alignment on UMovieGraphConfig");
static_assert(sizeof(UMovieGraphConfig) == 0x000080, "Wrong size on UMovieGraphConfig");
static_assert(offsetof(UMovieGraphConfig, AllNodes) == 0x000030, "Member 'UMovieGraphConfig::AllNodes' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, InputNode) == 0x000040, "Member 'UMovieGraphConfig::InputNode' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, OutputNode) == 0x000048, "Member 'UMovieGraphConfig::OutputNode' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Variables) == 0x000050, "Member 'UMovieGraphConfig::Variables' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Inputs) == 0x000060, "Member 'UMovieGraphConfig::Inputs' has a wrong offset!");
static_assert(offsetof(UMovieGraphConfig, Outputs) == 0x000070, "Member 'UMovieGraphConfig::Outputs' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphTimeStepBase
// 0x0000 (0x0030 - 0x0030)
class UMovieGraphTimeStepBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphTimeStepBase">();
	}
	static class UMovieGraphTimeStepBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphTimeStepBase>();
	}
};
static_assert(alignof(UMovieGraphTimeStepBase) == 0x000008, "Wrong alignment on UMovieGraphTimeStepBase");
static_assert(sizeof(UMovieGraphTimeStepBase) == 0x000030, "Wrong size on UMovieGraphTimeStepBase");

// Class MovieRenderPipelineCore.MovieGraphRendererBase
// 0x0000 (0x0030 - 0x0030)
class UMovieGraphRendererBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRendererBase">();
	}
	static class UMovieGraphRendererBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRendererBase>();
	}
};
static_assert(alignof(UMovieGraphRendererBase) == 0x000008, "Wrong alignment on UMovieGraphRendererBase");
static_assert(sizeof(UMovieGraphRendererBase) == 0x000030, "Wrong size on UMovieGraphRendererBase");

// Class MovieRenderPipelineCore.MovieGraphDataSourceBase
// 0x0000 (0x0030 - 0x0030)
class UMovieGraphDataSourceBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDataSourceBase">();
	}
	static class UMovieGraphDataSourceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDataSourceBase>();
	}
};
static_assert(alignof(UMovieGraphDataSourceBase) == 0x000008, "Wrong alignment on UMovieGraphDataSourceBase");
static_assert(sizeof(UMovieGraphDataSourceBase) == 0x000030, "Wrong size on UMovieGraphDataSourceBase");

// Class MovieRenderPipelineCore.MovieGraphDefaultRenderer
// 0x0188 (0x01B8 - 0x0030)
class UMovieGraphDefaultRenderer final : public UMovieGraphRendererBase
{
public:
	TArray<class UMovieGraphRenderPassNode*>      RenderPassesInUse;                                 // 0x0030(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x178];                                     // 0x0040(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDefaultRenderer">();
	}
	static class UMovieGraphDefaultRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDefaultRenderer>();
	}
};
static_assert(alignof(UMovieGraphDefaultRenderer) == 0x000008, "Wrong alignment on UMovieGraphDefaultRenderer");
static_assert(sizeof(UMovieGraphDefaultRenderer) == 0x0001B8, "Wrong size on UMovieGraphDefaultRenderer");
static_assert(offsetof(UMovieGraphDefaultRenderer, RenderPassesInUse) == 0x000030, "Member 'UMovieGraphDefaultRenderer::RenderPassesInUse' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphDeferredRenderPassNode
// 0x0010 (0x00A8 - 0x0098)
class UMovieGraphDeferredRenderPassNode final : public UMovieGraphRenderPassNode
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphDeferredRenderPassNode">();
	}
	static class UMovieGraphDeferredRenderPassNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphDeferredRenderPassNode>();
	}
};
static_assert(alignof(UMovieGraphDeferredRenderPassNode) == 0x000008, "Wrong alignment on UMovieGraphDeferredRenderPassNode");
static_assert(sizeof(UMovieGraphDeferredRenderPassNode) == 0x0000A8, "Wrong size on UMovieGraphDeferredRenderPassNode");

// Class MovieRenderPipelineCore.MovieGraphEdge
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphEdge final : public UObject
{
public:
	class UMovieGraphPin*                         InputPin;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieGraphPin*                         OutputPin;                                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEdge">();
	}
	static class UMovieGraphEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEdge>();
	}
};
static_assert(alignof(UMovieGraphEdge) == 0x000008, "Wrong alignment on UMovieGraphEdge");
static_assert(sizeof(UMovieGraphEdge) == 0x000040, "Wrong size on UMovieGraphEdge");
static_assert(offsetof(UMovieGraphEdge, InputPin) == 0x000030, "Member 'UMovieGraphEdge::InputPin' has a wrong offset!");
static_assert(offsetof(UMovieGraphEdge, OutputPin) == 0x000038, "Member 'UMovieGraphEdge::OutputPin' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphFileOutputNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphFileOutputNode : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphFileOutputNode">();
	}
	static class UMovieGraphFileOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphFileOutputNode>();
	}
};
static_assert(alignof(UMovieGraphFileOutputNode) == 0x000008, "Wrong alignment on UMovieGraphFileOutputNode");
static_assert(sizeof(UMovieGraphFileOutputNode) == 0x000098, "Wrong size on UMovieGraphFileOutputNode");

// Class MovieRenderPipelineCore.MovieGraphGetCVarValueNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphGetCVarValueNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_Name : 1;                                // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGetCVarValueNode">();
	}
	static class UMovieGraphGetCVarValueNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGetCVarValueNode>();
	}
};
static_assert(alignof(UMovieGraphGetCVarValueNode) == 0x000008, "Wrong alignment on UMovieGraphGetCVarValueNode");
static_assert(sizeof(UMovieGraphGetCVarValueNode) == 0x0000B0, "Wrong size on UMovieGraphGetCVarValueNode");
static_assert(offsetof(UMovieGraphGetCVarValueNode, Name_0) == 0x0000A0, "Member 'UMovieGraphGetCVarValueNode::Name_0' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphGlobalGameOverridesNode
// 0x0030 (0x00C8 - 0x0098)
class UMovieGraphGlobalGameOverridesNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_GameModeOverride : 1;                    // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CinematicQualitySettings : 1;            // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TextureStreaming : 1;                    // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UseLODZero : 1;                          // 0x0098(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisableHLODs : 1;                        // 0x0098(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UseHighQualityShadows : 1;               // 0x0098(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowDistanceScale : 1;                 // 0x0098(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowRadiusThreshold : 1;               // 0x0098(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideViewDistanceScale : 1;           // 0x0099(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ViewDistanceScale : 1;                   // 0x0099(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FlushGrassStreaming : 1;                 // 0x0099(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FlushStreamingManagers : 1;              // 0x0099(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VirtualTextureFeedbackFactor : 1;        // 0x0099(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisableGPUTimeout : 1;                   // 0x0099(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQualitySettings;                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePipelineTextureStreamingMethod          TextureStreaming;                                  // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLODZero;                                       // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHLODs;                                     // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighQualityShadows;                            // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowDistanceScale;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowRadiusThreshold;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistanceScale;                                 // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushGrassStreaming;                              // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushStreamingManagers;                           // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualTextureFeedbackFactor;                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphGlobalGameOverridesNode">();
	}
	static class UMovieGraphGlobalGameOverridesNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphGlobalGameOverridesNode>();
	}
};
static_assert(alignof(UMovieGraphGlobalGameOverridesNode) == 0x000008, "Wrong alignment on UMovieGraphGlobalGameOverridesNode");
static_assert(sizeof(UMovieGraphGlobalGameOverridesNode) == 0x0000C8, "Wrong size on UMovieGraphGlobalGameOverridesNode");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, GameModeOverride) == 0x0000A0, "Member 'UMovieGraphGlobalGameOverridesNode::GameModeOverride' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bCinematicQualitySettings) == 0x0000A8, "Member 'UMovieGraphGlobalGameOverridesNode::bCinematicQualitySettings' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, TextureStreaming) == 0x0000A9, "Member 'UMovieGraphGlobalGameOverridesNode::TextureStreaming' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bUseLODZero) == 0x0000AA, "Member 'UMovieGraphGlobalGameOverridesNode::bUseLODZero' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bDisableHLODs) == 0x0000AB, "Member 'UMovieGraphGlobalGameOverridesNode::bDisableHLODs' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bUseHighQualityShadows) == 0x0000AC, "Member 'UMovieGraphGlobalGameOverridesNode::bUseHighQualityShadows' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, ShadowDistanceScale) == 0x0000B0, "Member 'UMovieGraphGlobalGameOverridesNode::ShadowDistanceScale' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, ShadowRadiusThreshold) == 0x0000B4, "Member 'UMovieGraphGlobalGameOverridesNode::ShadowRadiusThreshold' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, ViewDistanceScale) == 0x0000B8, "Member 'UMovieGraphGlobalGameOverridesNode::ViewDistanceScale' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushGrassStreaming) == 0x0000BC, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushGrassStreaming' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, bFlushStreamingManagers) == 0x0000BD, "Member 'UMovieGraphGlobalGameOverridesNode::bFlushStreamingManagers' has a wrong offset!");
static_assert(offsetof(UMovieGraphGlobalGameOverridesNode, VirtualTextureFeedbackFactor) == 0x0000C0, "Member 'UMovieGraphGlobalGameOverridesNode::VirtualTextureFeedbackFactor' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphImageSequenceOutputNode
// 0x0020 (0x00B8 - 0x0098)
class UMovieGraphImageSequenceOutputNode : public UMovieGraphFileOutputNode
{
public:
	uint8                                         Pad_98[0x20];                                      // 0x0098(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode">();
	}
	static class UMovieGraphImageSequenceOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode) == 0x0000B8, "Wrong size on UMovieGraphImageSequenceOutputNode");

// Class MovieRenderPipelineCore.MovieGraphImageSequenceOutputNode_BMP
// 0x0000 (0x00B8 - 0x00B8)
class UMovieGraphImageSequenceOutputNode_BMP final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_BMP">();
	}
	static class UMovieGraphImageSequenceOutputNode_BMP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_BMP>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_BMP) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_BMP");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_BMP) == 0x0000B8, "Wrong size on UMovieGraphImageSequenceOutputNode_BMP");

// Class MovieRenderPipelineCore.MovieGraphImageSequenceOutputNode_JPG
// 0x0000 (0x00B8 - 0x00B8)
class UMovieGraphImageSequenceOutputNode_JPG final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_JPG">();
	}
	static class UMovieGraphImageSequenceOutputNode_JPG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_JPG>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_JPG) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_JPG");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_JPG) == 0x0000B8, "Wrong size on UMovieGraphImageSequenceOutputNode_JPG");

// Class MovieRenderPipelineCore.MovieGraphImageSequenceOutputNode_PNG
// 0x0000 (0x00B8 - 0x00B8)
class UMovieGraphImageSequenceOutputNode_PNG final : public UMovieGraphImageSequenceOutputNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphImageSequenceOutputNode_PNG">();
	}
	static class UMovieGraphImageSequenceOutputNode_PNG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphImageSequenceOutputNode_PNG>();
	}
};
static_assert(alignof(UMovieGraphImageSequenceOutputNode_PNG) == 0x000008, "Wrong alignment on UMovieGraphImageSequenceOutputNode_PNG");
static_assert(sizeof(UMovieGraphImageSequenceOutputNode_PNG) == 0x0000B8, "Wrong size on UMovieGraphImageSequenceOutputNode_PNG");

// Class MovieRenderPipelineCore.MovieGraphInputNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphInputNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphInputNode">();
	}
	static class UMovieGraphInputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphInputNode>();
	}
};
static_assert(alignof(UMovieGraphInputNode) == 0x000008, "Wrong alignment on UMovieGraphInputNode");
static_assert(sizeof(UMovieGraphInputNode) == 0x000098, "Wrong size on UMovieGraphInputNode");

// Class MovieRenderPipelineCore.MovieGraphLinearTimeStep
// 0x0118 (0x0148 - 0x0030)
class UMovieGraphLinearTimeStep final : public UMovieGraphTimeStepBase
{
public:
	struct FMovieGraphTimeStepData                CurrentTimeStepData;                               // 0x0030(0x0020)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0xE8];                                      // 0x0050(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieGraphEngineTimeStep*              CustomTimeStep;                                    // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEngineCustomTimeStep*                  PrevCustomTimeStep;                                // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphLinearTimeStep">();
	}
	static class UMovieGraphLinearTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphLinearTimeStep>();
	}
};
static_assert(alignof(UMovieGraphLinearTimeStep) == 0x000008, "Wrong alignment on UMovieGraphLinearTimeStep");
static_assert(sizeof(UMovieGraphLinearTimeStep) == 0x000148, "Wrong size on UMovieGraphLinearTimeStep");
static_assert(offsetof(UMovieGraphLinearTimeStep, CurrentTimeStepData) == 0x000030, "Member 'UMovieGraphLinearTimeStep::CurrentTimeStepData' has a wrong offset!");
static_assert(offsetof(UMovieGraphLinearTimeStep, CustomTimeStep) == 0x000138, "Member 'UMovieGraphLinearTimeStep::CustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMovieGraphLinearTimeStep, PrevCustomTimeStep) == 0x000140, "Member 'UMovieGraphLinearTimeStep::PrevCustomTimeStep' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphEngineTimeStep
// 0x0010 (0x0040 - 0x0030)
class UMovieGraphEngineTimeStep final : public UEngineCustomTimeStep
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEngineTimeStep">();
	}
	static class UMovieGraphEngineTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEngineTimeStep>();
	}
};
static_assert(alignof(UMovieGraphEngineTimeStep) == 0x000008, "Wrong alignment on UMovieGraphEngineTimeStep");
static_assert(sizeof(UMovieGraphEngineTimeStep) == 0x000040, "Wrong size on UMovieGraphEngineTimeStep");

// Class MovieRenderPipelineCore.MovieGraphModifierNode
// 0x0030 (0x00C8 - 0x0098)
class UMovieGraphModifierNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_ModifierName : 1;                        // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ModifiedCollectionName : 1;              // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ModifierClass : 1;                       // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModifierName;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifiedCollectionName;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineCollectionModifier*       ModifierClass;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphModifierNode">();
	}
	static class UMovieGraphModifierNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphModifierNode>();
	}
};
static_assert(alignof(UMovieGraphModifierNode) == 0x000008, "Wrong alignment on UMovieGraphModifierNode");
static_assert(sizeof(UMovieGraphModifierNode) == 0x0000C8, "Wrong size on UMovieGraphModifierNode");
static_assert(offsetof(UMovieGraphModifierNode, ModifierName) == 0x0000A0, "Member 'UMovieGraphModifierNode::ModifierName' has a wrong offset!");
static_assert(offsetof(UMovieGraphModifierNode, ModifiedCollectionName) == 0x0000B0, "Member 'UMovieGraphModifierNode::ModifiedCollectionName' has a wrong offset!");
static_assert(offsetof(UMovieGraphModifierNode, ModifierClass) == 0x0000C0, "Member 'UMovieGraphModifierNode::ModifierClass' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphOutputNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphOutputNode final : public UMovieGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphOutputNode">();
	}
	static class UMovieGraphOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphOutputNode>();
	}
};
static_assert(alignof(UMovieGraphOutputNode) == 0x000008, "Wrong alignment on UMovieGraphOutputNode");
static_assert(sizeof(UMovieGraphOutputNode) == 0x000098, "Wrong size on UMovieGraphOutputNode");

// Class MovieRenderPipelineCore.MovieGraphOutputSettingNode
// 0x0048 (0x00E0 - 0x0098)
class UMovieGraphOutputSettingNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_OutputDirectory : 1;                     // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FileNameFormat : 1;                      // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OutputResolution : 1;                    // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OutputFrameRate : 1;                     // 0x0098(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_bOverwriteExistingOutput : 1;            // 0x0098(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ZeroPadFrameNumbers : 1;                 // 0x0098(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FrameNumberOffset : 1;                   // 0x0098(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         OutputDirectory;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilenameFormat;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              OutputResolution;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             OutputFrameRate;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteExistingOutput;                          // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZeroPadFrameNumbers;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberOffset;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphOutputSettingNode">();
	}
	static class UMovieGraphOutputSettingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphOutputSettingNode>();
	}
};
static_assert(alignof(UMovieGraphOutputSettingNode) == 0x000008, "Wrong alignment on UMovieGraphOutputSettingNode");
static_assert(sizeof(UMovieGraphOutputSettingNode) == 0x0000E0, "Wrong size on UMovieGraphOutputSettingNode");
static_assert(offsetof(UMovieGraphOutputSettingNode, OutputDirectory) == 0x0000A0, "Member 'UMovieGraphOutputSettingNode::OutputDirectory' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, FilenameFormat) == 0x0000B0, "Member 'UMovieGraphOutputSettingNode::FilenameFormat' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, OutputResolution) == 0x0000C0, "Member 'UMovieGraphOutputSettingNode::OutputResolution' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, OutputFrameRate) == 0x0000C8, "Member 'UMovieGraphOutputSettingNode::OutputFrameRate' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, bOverwriteExistingOutput) == 0x0000D0, "Member 'UMovieGraphOutputSettingNode::bOverwriteExistingOutput' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, ZeroPadFrameNumbers) == 0x0000D4, "Member 'UMovieGraphOutputSettingNode::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(UMovieGraphOutputSettingNode, FrameNumberOffset) == 0x0000D8, "Member 'UMovieGraphOutputSettingNode::FrameNumberOffset' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphPin
// 0x0028 (0x0058 - 0x0030)
class UMovieGraphPin final : public UObject
{
public:
	class UMovieGraphNode*                        Node;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieGraphPinProperties               Properties;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UMovieGraphEdge*>                Edges;                                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPin">();
	}
	static class UMovieGraphPin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPin>();
	}
};
static_assert(alignof(UMovieGraphPin) == 0x000008, "Wrong alignment on UMovieGraphPin");
static_assert(sizeof(UMovieGraphPin) == 0x000058, "Wrong size on UMovieGraphPin");
static_assert(offsetof(UMovieGraphPin, Node) == 0x000030, "Member 'UMovieGraphPin::Node' has a wrong offset!");
static_assert(offsetof(UMovieGraphPin, Properties) == 0x000038, "Member 'UMovieGraphPin::Properties' has a wrong offset!");
static_assert(offsetof(UMovieGraphPin, Edges) == 0x000048, "Member 'UMovieGraphPin::Edges' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineBase
// 0x0030 (0x0060 - 0x0030)
class UMoviePipelineBase : public UObject
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestShutdown(bool bIsError);
	void Shutdown(bool bIsError);

	EMovieRenderPipelineState GetPipelineState() const;
	bool IsShutdownRequested() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBase">();
	}
	static class UMoviePipelineBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBase>();
	}
};
static_assert(alignof(UMoviePipelineBase) == 0x000008, "Wrong alignment on UMoviePipelineBase");
static_assert(sizeof(UMoviePipelineBase) == 0x000060, "Wrong size on UMoviePipelineBase");

// Class MovieRenderPipelineCore.MovieGraphPipeline
// 0x00D8 (0x0138 - 0x0060)
class UMovieGraphPipeline final : public UMoviePipelineBase
{
public:
	class UMovieGraphTimeStepBase*                GraphTimeStepInstance;                             // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphRendererBase*                GraphRendererInstance;                             // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovieGraphDataSourceBase*              GraphDataSourceInstance;                           // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineExecutorJob*              CurrentJob;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMoviePipelineExecutorShot*>     ActiveShotList;                                    // 0x0080(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSet<class UMovieGraphFileOutputNode*>        OutputNodesDataSentTo;                             // 0x0090(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x58];                                      // 0x00E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class UMoviePipelineExecutorJob* InJob, const struct FMovieGraphInitConfig& InitConfig);
	void OnMoviePipelineFinishedImpl();
	void SetInitializationTime(const struct FDateTime& InDateTime);

	class UMoviePipelineExecutorJob* GetCurrentJob() const;
	struct FDateTime GetInitializationTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPipeline">();
	}
	static class UMovieGraphPipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPipeline>();
	}
};
static_assert(alignof(UMovieGraphPipeline) == 0x000008, "Wrong alignment on UMovieGraphPipeline");
static_assert(sizeof(UMovieGraphPipeline) == 0x000138, "Wrong size on UMovieGraphPipeline");
static_assert(offsetof(UMovieGraphPipeline, GraphTimeStepInstance) == 0x000060, "Member 'UMovieGraphPipeline::GraphTimeStepInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphRendererInstance) == 0x000068, "Member 'UMovieGraphPipeline::GraphRendererInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, GraphDataSourceInstance) == 0x000070, "Member 'UMovieGraphPipeline::GraphDataSourceInstance' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, CurrentJob) == 0x000078, "Member 'UMovieGraphPipeline::CurrentJob' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, ActiveShotList) == 0x000080, "Member 'UMovieGraphPipeline::ActiveShotList' has a wrong offset!");
static_assert(offsetof(UMovieGraphPipeline, OutputNodesDataSentTo) == 0x000090, "Member 'UMovieGraphPipeline::OutputNodesDataSentTo' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphPathTracedRendererNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphPathTracedRendererNode final : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphPathTracedRendererNode">();
	}
	static class UMovieGraphPathTracedRendererNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphPathTracedRendererNode>();
	}
};
static_assert(alignof(UMovieGraphPathTracedRendererNode) == 0x000008, "Wrong alignment on UMovieGraphPathTracedRendererNode");
static_assert(sizeof(UMovieGraphPathTracedRendererNode) == 0x000098, "Wrong size on UMovieGraphPathTracedRendererNode");

// Class MovieRenderPipelineCore.MovieGraphEXRSequenceNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphEXRSequenceNode final : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphEXRSequenceNode">();
	}
	static class UMovieGraphEXRSequenceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphEXRSequenceNode>();
	}
};
static_assert(alignof(UMovieGraphEXRSequenceNode) == 0x000008, "Wrong alignment on UMovieGraphEXRSequenceNode");
static_assert(sizeof(UMovieGraphEXRSequenceNode) == 0x000098, "Wrong size on UMovieGraphEXRSequenceNode");

// Class MovieRenderPipelineCore.MovieGraphAntiAliasingNode
// 0x0000 (0x0098 - 0x0098)
class UMovieGraphAntiAliasingNode final : public UMovieGraphSettingNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphAntiAliasingNode">();
	}
	static class UMovieGraphAntiAliasingNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphAntiAliasingNode>();
	}
};
static_assert(alignof(UMovieGraphAntiAliasingNode) == 0x000008, "Wrong alignment on UMovieGraphAntiAliasingNode");
static_assert(sizeof(UMovieGraphAntiAliasingNode) == 0x000098, "Wrong size on UMovieGraphAntiAliasingNode");

// Class MovieRenderPipelineCore.MovieGraphRenderLayerNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphRenderLayerNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_LayerName : 1;                           // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LayerName;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphRenderLayerNode">();
	}
	static class UMovieGraphRenderLayerNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphRenderLayerNode>();
	}
};
static_assert(alignof(UMovieGraphRenderLayerNode) == 0x000008, "Wrong alignment on UMovieGraphRenderLayerNode");
static_assert(sizeof(UMovieGraphRenderLayerNode) == 0x0000B0, "Wrong size on UMovieGraphRenderLayerNode");
static_assert(offsetof(UMovieGraphRenderLayerNode, LayerName) == 0x0000A0, "Member 'UMovieGraphRenderLayerNode::LayerName' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSelectNode
// 0x0030 (0x00C8 - 0x0098)
class UMovieGraphSelectNode final : public UMovieGraphNode
{
public:
	TArray<class FString>                         SelectOptions;                                     // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SelectedOption;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSelectNode">();
	}
	static class UMovieGraphSelectNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSelectNode>();
	}
};
static_assert(alignof(UMovieGraphSelectNode) == 0x000008, "Wrong alignment on UMovieGraphSelectNode");
static_assert(sizeof(UMovieGraphSelectNode) == 0x0000C8, "Wrong size on UMovieGraphSelectNode");
static_assert(offsetof(UMovieGraphSelectNode, SelectOptions) == 0x000098, "Member 'UMovieGraphSelectNode::SelectOptions' has a wrong offset!");
static_assert(offsetof(UMovieGraphSelectNode, SelectedOption) == 0x0000A8, "Member 'UMovieGraphSelectNode::SelectedOption' has a wrong offset!");
static_assert(offsetof(UMovieGraphSelectNode, Description) == 0x0000B8, "Member 'UMovieGraphSelectNode::Description' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSequenceDataSource
// 0x0018 (0x0048 - 0x0030)
class UMovieGraphSequenceDataSource final : public UMovieGraphDataSourceBase
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSequenceDataSource">();
	}
	static class UMovieGraphSequenceDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSequenceDataSource>();
	}
};
static_assert(alignof(UMovieGraphSequenceDataSource) == 0x000008, "Wrong alignment on UMovieGraphSequenceDataSource");
static_assert(sizeof(UMovieGraphSequenceDataSource) == 0x000048, "Wrong size on UMovieGraphSequenceDataSource");
static_assert(offsetof(UMovieGraphSequenceDataSource, LevelSequenceActor) == 0x000030, "Member 'UMovieGraphSequenceDataSource::LevelSequenceActor' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSetCVarValueNode
// 0x0028 (0x00C0 - 0x0098)
class UMovieGraphSetCVarValueNode final : public UMovieGraphSettingNode
{
public:
	uint8                                         bOverride_Name : 1;                                // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Value : 1;                               // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSetCVarValueNode">();
	}
	static class UMovieGraphSetCVarValueNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSetCVarValueNode>();
	}
};
static_assert(alignof(UMovieGraphSetCVarValueNode) == 0x000008, "Wrong alignment on UMovieGraphSetCVarValueNode");
static_assert(sizeof(UMovieGraphSetCVarValueNode) == 0x0000C0, "Wrong size on UMovieGraphSetCVarValueNode");
static_assert(offsetof(UMovieGraphSetCVarValueNode, Name_0) == 0x0000A0, "Member 'UMovieGraphSetCVarValueNode::Name_0' has a wrong offset!");
static_assert(offsetof(UMovieGraphSetCVarValueNode, Value) == 0x0000B0, "Member 'UMovieGraphSetCVarValueNode::Value' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphSubgraphNode
// 0x0030 (0x00C8 - 0x0098)
class UMovieGraphSubgraphNode final : public UMovieGraphNode
{
public:
	TSoftObjectPtr<class UMovieGraphConfig>       SubgraphAsset;                                     // 0x0098(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetSubGraphAsset(const TSoftObjectPtr<class UMovieGraphConfig>& InSubgraphAsset);

	class UMovieGraphConfig* GetSubgraphAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphSubgraphNode">();
	}
	static class UMovieGraphSubgraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphSubgraphNode>();
	}
};
static_assert(alignof(UMovieGraphSubgraphNode) == 0x000008, "Wrong alignment on UMovieGraphSubgraphNode");
static_assert(sizeof(UMovieGraphSubgraphNode) == 0x0000C8, "Wrong size on UMovieGraphSubgraphNode");
static_assert(offsetof(UMovieGraphSubgraphNode, SubgraphAsset) == 0x000098, "Member 'UMovieGraphSubgraphNode::SubgraphAsset' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieGraphVariableNode
// 0x0018 (0x00B0 - 0x0098)
class UMovieGraphVariableNode final : public UMovieGraphNode
{
public:
	class UMovieGraphVariable*                    GraphVariable;                                     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieGraphPinProperties               OutputPin;                                         // 0x00A0(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieGraphVariableNode">();
	}
	static class UMovieGraphVariableNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieGraphVariableNode>();
	}
};
static_assert(alignof(UMovieGraphVariableNode) == 0x000008, "Wrong alignment on UMovieGraphVariableNode");
static_assert(sizeof(UMovieGraphVariableNode) == 0x0000B0, "Wrong size on UMovieGraphVariableNode");
static_assert(offsetof(UMovieGraphVariableNode, GraphVariable) == 0x000098, "Member 'UMovieGraphVariableNode::GraphVariable' has a wrong offset!");
static_assert(offsetof(UMovieGraphVariableNode, OutputPin) == 0x0000A0, "Member 'UMovieGraphVariableNode::OutputPin' has a wrong offset!");

// Class MovieRenderPipelineCore.MovieJobVariableAssignmentContainer
// 0x0040 (0x0070 - 0x0030)
class UMovieJobVariableAssignmentContainer final : public UObject
{
public:
	struct FInstancedPropertyBag                  Value;                                             // 0x0030(0x0010)(Edit, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0040(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FString GetValueSerializedString(const class FName& PropertyName);
	bool GetVariableAssignmentEnableState(const class UMovieGraphVariable* InGraphVariable, bool* bOutIsEnabled);
	void SetGraphConfig(const TSoftObjectPtr<class UMovieGraphConfig>& InGraphConfig);
	bool SetValueBool(const class FName& PropertyName, const bool bInValue);
	bool SetValueByte(const class FName& PropertyName, const uint8 InValue);
	bool SetValueClass(const class FName& PropertyName, class UClass* InValue);
	bool SetValueDouble(const class FName& PropertyName, const double InValue);
	bool SetValueEnum(const class FName& PropertyName, const uint8 InValue, const class UEnum* Enum);
	bool SetValueFloat(const class FName& PropertyName, const float InValue);
	bool SetValueInt32(const class FName& PropertyName, const int32 InValue);
	bool SetValueInt64(const class FName& PropertyName, const int64 InValue);
	bool SetValueName(const class FName& PropertyName, const class FName InValue);
	bool SetValueObject(const class FName& PropertyName, class UObject* InValue);
	bool SetValueSerializedString(const class FName& PropertyName, const class FString& NewValue);
	bool SetValueString(const class FName& PropertyName, const class FString& InValue);
	bool SetValueText(const class FName& PropertyName, const class FText& InValue);
	bool SetVariableAssignmentEnableState(const class UMovieGraphVariable* InGraphVariable, bool bIsEnabled);

	bool GetValueBool(const class FName& PropertyName, bool* bOutValue) const;
	bool GetValueByte(const class FName& PropertyName, uint8* OutValue) const;
	bool GetValueClass(const class FName& PropertyName, class UClass* OutValue) const;
	EMovieGraphContainerType GetValueContainerType(const class FName& PropertyName) const;
	bool GetValueDouble(const class FName& PropertyName, double* OutValue) const;
	bool GetValueEnum(const class FName& PropertyName, uint8* OutValue, const class UEnum* RequestedEnum) const;
	bool GetValueFloat(const class FName& PropertyName, float* OutValue) const;
	bool GetValueInt32(const class FName& PropertyName, int32* OutValue) const;
	bool GetValueInt64(const class FName& PropertyName, int64* OutValue) const;
	bool GetValueName(const class FName& PropertyName, class FName* OutValue) const;
	bool GetValueObject(const class FName& PropertyName, class UObject* OutValue, const class UClass* RequestedClass) const;
	bool GetValueString(const class FName& PropertyName, class FString* OutValue) const;
	bool GetValueText(const class FName& PropertyName, class FText* OutValue) const;
	EMovieGraphValueType GetValueType(const class FName& PropertyName) const;
	const class UObject* GetValueTypeObject(const class FName& PropertyName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieJobVariableAssignmentContainer">();
	}
	static class UMovieJobVariableAssignmentContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieJobVariableAssignmentContainer>();
	}
};
static_assert(alignof(UMovieJobVariableAssignmentContainer) == 0x000008, "Wrong alignment on UMovieJobVariableAssignmentContainer");
static_assert(sizeof(UMovieJobVariableAssignmentContainer) == 0x000070, "Wrong size on UMovieJobVariableAssignmentContainer");
static_assert(offsetof(UMovieJobVariableAssignmentContainer, Value) == 0x000030, "Member 'UMovieJobVariableAssignmentContainer::Value' has a wrong offset!");
static_assert(offsetof(UMovieJobVariableAssignmentContainer, GraphPreset) == 0x000040, "Member 'UMovieJobVariableAssignmentContainer::GraphPreset' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineSetting
// 0x0020 (0x0050 - 0x0030)
class UMoviePipelineSetting : public UObject
{
public:
	TWeakObjectPtr<class UMoviePipeline>          CachedPipeline;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x17];                                      // 0x0039(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsEnabled(bool bInEnabled);

	void BuildNewProcessCommandLine(class FString& InOutUnrealURLParams, class FString& InOutCommandLineArgs) const;
	void BuildNewProcessCommandLineArgs(TArray<class FString>& InOutUnrealURLParams, TArray<class FString>& InOutCommandLineArgs, TArray<class FString>& InOutDeviceProfileCvars, TArray<class FString>& InOutExecCmds) const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineSetting">();
	}
	static class UMoviePipelineSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineSetting>();
	}
};
static_assert(alignof(UMoviePipelineSetting) == 0x000008, "Wrong alignment on UMoviePipelineSetting");
static_assert(sizeof(UMoviePipelineSetting) == 0x000050, "Wrong size on UMoviePipelineSetting");
static_assert(offsetof(UMoviePipelineSetting, CachedPipeline) == 0x000030, "Member 'UMoviePipelineSetting::CachedPipeline' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting, bEnabled) == 0x000038, "Member 'UMoviePipelineSetting::bEnabled' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCameraSetting
// 0x0010 (0x0060 - 0x0050)
class UMoviePipelineCameraSetting final : public UMoviePipelineSetting
{
public:
	EMoviePipelineShutterTiming                   ShutterTiming;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverscanPercentage;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderAllCameras;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCameraSetting">();
	}
	static class UMoviePipelineCameraSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCameraSetting>();
	}
};
static_assert(alignof(UMoviePipelineCameraSetting) == 0x000008, "Wrong alignment on UMoviePipelineCameraSetting");
static_assert(sizeof(UMoviePipelineCameraSetting) == 0x000060, "Wrong size on UMoviePipelineCameraSetting");
static_assert(offsetof(UMoviePipelineCameraSetting, ShutterTiming) == 0x000050, "Member 'UMoviePipelineCameraSetting::ShutterTiming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCameraSetting, OverscanPercentage) == 0x000054, "Member 'UMoviePipelineCameraSetting::OverscanPercentage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCameraSetting, bRenderAllCameras) == 0x000058, "Member 'UMoviePipelineCameraSetting::bRenderAllCameras' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineGameMode
// 0x0000 (0x0530 - 0x0530)
class AMoviePipelineGameMode final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineGameMode">();
	}
	static class AMoviePipelineGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoviePipelineGameMode>();
	}
};
static_assert(alignof(AMoviePipelineGameMode) == 0x000008, "Wrong alignment on AMoviePipelineGameMode");
static_assert(sizeof(AMoviePipelineGameMode) == 0x000530, "Wrong size on AMoviePipelineGameMode");

// Class MovieRenderPipelineCore.MoviePipelineHighResSetting
// 0x0020 (0x0070 - 0x0050)
class UMoviePipelineHighResSetting final : public UMoviePipelineSetting
{
public:
	int32                                         TileCount;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureSharpnessBias;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapRatio;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSubSurfaceScattering;                     // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BurleySampleCount;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllocateHistoryPerTile;                           // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineHighResSetting">();
	}
	static class UMoviePipelineHighResSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineHighResSetting>();
	}
};
static_assert(alignof(UMoviePipelineHighResSetting) == 0x000008, "Wrong alignment on UMoviePipelineHighResSetting");
static_assert(sizeof(UMoviePipelineHighResSetting) == 0x000070, "Wrong size on UMoviePipelineHighResSetting");
static_assert(offsetof(UMoviePipelineHighResSetting, TileCount) == 0x000050, "Member 'UMoviePipelineHighResSetting::TileCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, TextureSharpnessBias) == 0x000054, "Member 'UMoviePipelineHighResSetting::TextureSharpnessBias' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, OverlapRatio) == 0x000058, "Member 'UMoviePipelineHighResSetting::OverlapRatio' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, bOverrideSubSurfaceScattering) == 0x00005C, "Member 'UMoviePipelineHighResSetting::bOverrideSubSurfaceScattering' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, BurleySampleCount) == 0x000060, "Member 'UMoviePipelineHighResSetting::BurleySampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineHighResSetting, bAllocateHistoryPerTile) == 0x000064, "Member 'UMoviePipelineHighResSetting::bAllocateHistoryPerTile' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineInProcessExecutorSettings
// 0x0030 (0x0078 - 0x0048)
class UMoviePipelineInProcessExecutorSettings final : public UDeveloperSettings
{
public:
	bool                                          bCloseEditor;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalCommandLineArguments;                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InheritedCommandLineArguments;                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDelayFrameCount;                            // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineInProcessExecutorSettings">();
	}
	static class UMoviePipelineInProcessExecutorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineInProcessExecutorSettings>();
	}
};
static_assert(alignof(UMoviePipelineInProcessExecutorSettings) == 0x000008, "Wrong alignment on UMoviePipelineInProcessExecutorSettings");
static_assert(sizeof(UMoviePipelineInProcessExecutorSettings) == 0x000078, "Wrong size on UMoviePipelineInProcessExecutorSettings");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, bCloseEditor) == 0x000048, "Member 'UMoviePipelineInProcessExecutorSettings::bCloseEditor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, AdditionalCommandLineArguments) == 0x000050, "Member 'UMoviePipelineInProcessExecutorSettings::AdditionalCommandLineArguments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, InheritedCommandLineArguments) == 0x000060, "Member 'UMoviePipelineInProcessExecutorSettings::InheritedCommandLineArguments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineInProcessExecutorSettings, InitialDelayFrameCount) == 0x000070, "Member 'UMoviePipelineInProcessExecutorSettings::InitialDelayFrameCount' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineOutputBase
// 0x0000 (0x0050 - 0x0050)
class UMoviePipelineOutputBase : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineOutputBase">();
	}
	static class UMoviePipelineOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineOutputBase");
static_assert(sizeof(UMoviePipelineOutputBase) == 0x000050, "Wrong size on UMoviePipelineOutputBase");

// Class MovieRenderPipelineCore.MoviePipelineCollection
// 0x0020 (0x0050 - 0x0030)
class UMoviePipelineCollection final : public UObject
{
public:
	class FString                                 CollectionName;                                    // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoviePipelineCollectionQuery*>  Queries;                                           // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddQuery(class UMoviePipelineCollectionQuery* Query);
	void SetCollectionName(const class FString& InName);

	class FString GetCollectionName() const;
	TArray<class AActor*> GetMatchingActors(const class UWorld* World, const bool bInvertResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCollection">();
	}
	static class UMoviePipelineCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCollection>();
	}
};
static_assert(alignof(UMoviePipelineCollection) == 0x000008, "Wrong alignment on UMoviePipelineCollection");
static_assert(sizeof(UMoviePipelineCollection) == 0x000050, "Wrong size on UMoviePipelineCollection");
static_assert(offsetof(UMoviePipelineCollection, CollectionName) == 0x000030, "Member 'UMoviePipelineCollection::CollectionName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCollection, Queries) == 0x000040, "Member 'UMoviePipelineCollection::Queries' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCollectionModifier
// 0x0018 (0x0048 - 0x0030)
class UMoviePipelineCollectionModifier : public UObject
{
public:
	TArray<class UMoviePipelineCollection*>       Collections;                                       // 0x0030(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bUseInvertedActors;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCollection(class UMoviePipelineCollection* Collection);
	void SetCollections(const TArray<class UMoviePipelineCollection*>& InCollections);
	void SetIsInverted(const bool bIsInverted);

	TArray<class UMoviePipelineCollection*> GetCollections() const;
	bool IsInverted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCollectionModifier">();
	}
	static class UMoviePipelineCollectionModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCollectionModifier>();
	}
};
static_assert(alignof(UMoviePipelineCollectionModifier) == 0x000008, "Wrong alignment on UMoviePipelineCollectionModifier");
static_assert(sizeof(UMoviePipelineCollectionModifier) == 0x000048, "Wrong size on UMoviePipelineCollectionModifier");
static_assert(offsetof(UMoviePipelineCollectionModifier, Collections) == 0x000030, "Member 'UMoviePipelineCollectionModifier::Collections' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCollectionModifier, bUseInvertedActors) == 0x000040, "Member 'UMoviePipelineCollectionModifier::bUseInvertedActors' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineMaterialModifier
// 0x0080 (0x00C8 - 0x0048)
class UMoviePipelineMaterialModifier final : public UMoviePipelineCollectionModifier
{
public:
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      MaterialToApply;                                   // 0x0098(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyModifier(const class UWorld* World);
	void SetMaterial(TSoftObjectPtr<class UMaterialInterface> InMaterial);
	void UndoModifier();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineMaterialModifier">();
	}
	static class UMoviePipelineMaterialModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineMaterialModifier>();
	}
};
static_assert(alignof(UMoviePipelineMaterialModifier) == 0x000008, "Wrong alignment on UMoviePipelineMaterialModifier");
static_assert(sizeof(UMoviePipelineMaterialModifier) == 0x0000C8, "Wrong size on UMoviePipelineMaterialModifier");
static_assert(offsetof(UMoviePipelineMaterialModifier, MaterialToApply) == 0x000098, "Member 'UMoviePipelineMaterialModifier::MaterialToApply' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineVisibilityModifier
// 0x0058 (0x00A0 - 0x0048)
class UMoviePipelineVisibilityModifier final : public UMoviePipelineCollectionModifier
{
public:
	TMap<TSoftObjectPtr<class AActor>, bool>      ModifiedActors;                                    // 0x0048(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bIsHidden;                                         // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyModifier(const class UWorld* World);
	void SetHidden(const bool bInIsHidden);
	void UndoModifier();

	bool IsHidden() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineVisibilityModifier">();
	}
	static class UMoviePipelineVisibilityModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineVisibilityModifier>();
	}
};
static_assert(alignof(UMoviePipelineVisibilityModifier) == 0x000008, "Wrong alignment on UMoviePipelineVisibilityModifier");
static_assert(sizeof(UMoviePipelineVisibilityModifier) == 0x0000A0, "Wrong size on UMoviePipelineVisibilityModifier");
static_assert(offsetof(UMoviePipelineVisibilityModifier, ModifiedActors) == 0x000048, "Member 'UMoviePipelineVisibilityModifier::ModifiedActors' has a wrong offset!");
static_assert(offsetof(UMoviePipelineVisibilityModifier, bIsHidden) == 0x000098, "Member 'UMoviePipelineVisibilityModifier::bIsHidden' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCollectionQuery
// 0x0000 (0x0030 - 0x0030)
class UMoviePipelineCollectionQuery : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCollectionQuery">();
	}
	static class UMoviePipelineCollectionQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCollectionQuery>();
	}
};
static_assert(alignof(UMoviePipelineCollectionQuery) == 0x000008, "Wrong alignment on UMoviePipelineCollectionQuery");
static_assert(sizeof(UMoviePipelineCollectionQuery) == 0x000030, "Wrong size on UMoviePipelineCollectionQuery");

// Class MovieRenderPipelineCore.MoviePipelineCollectionCommonQuery
// 0x0038 (0x0068 - 0x0030)
class UMoviePipelineCollectionCommonQuery final : public UMoviePipelineCollectionQuery
{
public:
	TArray<TSubclassOf<class UObject>>            ComponentTypes;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EMoviePipelineCollectionCommonQueryMode       QueryMode;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ActorNames;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetActorNames(const TArray<class FString>& InActorNames);
	void SetComponentTypes(const TArray<class UClass*>& InComponentTypes);
	void SetQueryMode(const EMoviePipelineCollectionCommonQueryMode InQueryMode);
	void SetTags(const TArray<class FName>& InTags);

	bool DoesActorMatchQuery(const class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCollectionCommonQuery">();
	}
	static class UMoviePipelineCollectionCommonQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCollectionCommonQuery>();
	}
};
static_assert(alignof(UMoviePipelineCollectionCommonQuery) == 0x000008, "Wrong alignment on UMoviePipelineCollectionCommonQuery");
static_assert(sizeof(UMoviePipelineCollectionCommonQuery) == 0x000068, "Wrong size on UMoviePipelineCollectionCommonQuery");
static_assert(offsetof(UMoviePipelineCollectionCommonQuery, ComponentTypes) == 0x000030, "Member 'UMoviePipelineCollectionCommonQuery::ComponentTypes' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCollectionCommonQuery, QueryMode) == 0x000040, "Member 'UMoviePipelineCollectionCommonQuery::QueryMode' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCollectionCommonQuery, ActorNames) == 0x000048, "Member 'UMoviePipelineCollectionCommonQuery::ActorNames' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCollectionCommonQuery, Tags) == 0x000058, "Member 'UMoviePipelineCollectionCommonQuery::Tags' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineRenderLayer
// 0x0020 (0x0050 - 0x0030)
class UMoviePipelineRenderLayer final : public UObject
{
public:
	class FString                                 RenderLayerName;                                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoviePipelineCollectionModifier*> Modifiers;                                         // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddModifier(class UMoviePipelineCollectionModifier* Modifier);
	void Preview(const class UWorld* World);
	void RemoveModifier(class UMoviePipelineCollectionModifier* Modifier);
	void SetRenderLayerName(const class FString& NewName);
	void UndoPreview(const class UWorld* World);

	class UMoviePipelineCollection* GetCollectionByName(const class FString& Name_0) const;
	TArray<class UMoviePipelineCollectionModifier*> GetModifiers() const;
	class FString GetRenderLayerName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineRenderLayer">();
	}
	static class UMoviePipelineRenderLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineRenderLayer>();
	}
};
static_assert(alignof(UMoviePipelineRenderLayer) == 0x000008, "Wrong alignment on UMoviePipelineRenderLayer");
static_assert(sizeof(UMoviePipelineRenderLayer) == 0x000050, "Wrong size on UMoviePipelineRenderLayer");
static_assert(offsetof(UMoviePipelineRenderLayer, RenderLayerName) == 0x000030, "Member 'UMoviePipelineRenderLayer::RenderLayerName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayer, Modifiers) == 0x000040, "Member 'UMoviePipelineRenderLayer::Modifiers' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineRenderLayerSubsystem
// 0x0048 (0x0080 - 0x0038)
class UMoviePipelineRenderLayerSubsystem final : public UWorldSubsystem
{
public:
	TArray<class UMoviePipelineRenderLayer*>      RenderLayers;                                      // 0x0038(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMoviePipelineRenderLayer*              ActiveRenderLayer;                                 // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineCollection*               ActiveCollection;                                  // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineCollectionModifier*       ActiveModifier;                                    // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineRenderLayer*              VisualizationRenderLayer;                          // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineCollection*               VisualizationEmptyCollection;                      // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineVisibilityModifier*       VisualizationModifier_HideWorld;                   // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineVisibilityModifier*       VisualizationModifier_VisibleCollections;          // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMoviePipelineRenderLayerSubsystem* GetFromWorld(const class UWorld* World);

	bool AddRenderLayer(class UMoviePipelineRenderLayer* RenderLayer);
	void ClearActiveRenderLayer();
	void ClearCollectionPreview();
	void ClearModifierPreview();
	const TArray<class UMoviePipelineRenderLayer*> GetRenderLayers();
	void PreviewCollection(class UMoviePipelineCollection* Collection);
	void PreviewModifier(class UMoviePipelineCollectionModifier* Modifier);
	void RemoveRenderLayer(const class FString& RenderLayerName);
	void Reset();
	void SetActiveRenderLayerByName(const class FString& RenderLayerName);
	void SetActiveRenderLayerByObj(class UMoviePipelineRenderLayer* RenderLayer);

	class UMoviePipelineRenderLayer* GetActiveRenderLayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineRenderLayerSubsystem">();
	}
	static class UMoviePipelineRenderLayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineRenderLayerSubsystem>();
	}
};
static_assert(alignof(UMoviePipelineRenderLayerSubsystem) == 0x000008, "Wrong alignment on UMoviePipelineRenderLayerSubsystem");
static_assert(sizeof(UMoviePipelineRenderLayerSubsystem) == 0x000080, "Wrong size on UMoviePipelineRenderLayerSubsystem");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, RenderLayers) == 0x000038, "Member 'UMoviePipelineRenderLayerSubsystem::RenderLayers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, ActiveRenderLayer) == 0x000048, "Member 'UMoviePipelineRenderLayerSubsystem::ActiveRenderLayer' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, ActiveCollection) == 0x000050, "Member 'UMoviePipelineRenderLayerSubsystem::ActiveCollection' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, ActiveModifier) == 0x000058, "Member 'UMoviePipelineRenderLayerSubsystem::ActiveModifier' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, VisualizationRenderLayer) == 0x000060, "Member 'UMoviePipelineRenderLayerSubsystem::VisualizationRenderLayer' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, VisualizationEmptyCollection) == 0x000068, "Member 'UMoviePipelineRenderLayerSubsystem::VisualizationEmptyCollection' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, VisualizationModifier_HideWorld) == 0x000070, "Member 'UMoviePipelineRenderLayerSubsystem::VisualizationModifier_HideWorld' has a wrong offset!");
static_assert(offsetof(UMoviePipelineRenderLayerSubsystem, VisualizationModifier_VisibleCollections) == 0x000078, "Member 'UMoviePipelineRenderLayerSubsystem::VisualizationModifier_VisibleCollections' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase
// 0x0020 (0x0070 - 0x0050)
class UMoviePipelineSetting_BlueprintBase final : public UMoviePipelineSetting
{
public:
	class FText                                   CategoryText;                                      // 0x0050(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsValidOnPrimary;                                 // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsValidOnShots;                                   // 0x0069(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeDisabled;                                    // 0x006A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEngineTickBeginFrame();
	void ReceiveSetupForPipelineImpl(class UMoviePipeline* InPipeline);
	void ReceiveTeardownForPipelineImpl(class UMoviePipeline* InPipeline);

	struct FMoviePipelineFormatArgs ReceiveGetFormatArguments(struct FMoviePipelineFormatArgs& InOutFormatArgs) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineSetting_BlueprintBase">();
	}
	static class UMoviePipelineSetting_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineSetting_BlueprintBase>();
	}
};
static_assert(alignof(UMoviePipelineSetting_BlueprintBase) == 0x000008, "Wrong alignment on UMoviePipelineSetting_BlueprintBase");
static_assert(sizeof(UMoviePipelineSetting_BlueprintBase) == 0x000070, "Wrong size on UMoviePipelineSetting_BlueprintBase");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, CategoryText) == 0x000050, "Member 'UMoviePipelineSetting_BlueprintBase::CategoryText' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bIsValidOnPrimary) == 0x000068, "Member 'UMoviePipelineSetting_BlueprintBase::bIsValidOnPrimary' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bIsValidOnShots) == 0x000069, "Member 'UMoviePipelineSetting_BlueprintBase::bIsValidOnShots' has a wrong offset!");
static_assert(offsetof(UMoviePipelineSetting_BlueprintBase, bCanBeDisabled) == 0x00006A, "Member 'UMoviePipelineSetting_BlueprintBase::bCanBeDisabled' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineViewFamilySetting
// 0x0000 (0x0050 - 0x0050)
class UMoviePipelineViewFamilySetting final : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineViewFamilySetting">();
	}
	static class UMoviePipelineViewFamilySetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineViewFamilySetting>();
	}
};
static_assert(alignof(UMoviePipelineViewFamilySetting) == 0x000008, "Wrong alignment on UMoviePipelineViewFamilySetting");
static_assert(sizeof(UMoviePipelineViewFamilySetting) == 0x000050, "Wrong size on UMoviePipelineViewFamilySetting");

// Class MovieRenderPipelineCore.MovieRenderDebugWidget
// 0x0000 (0x03B8 - 0x03B8)
class UMovieRenderDebugWidget final : public UUserWidget
{
public:
	void OnInitializedForPipeline(class UMoviePipeline* ForPipeline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieRenderDebugWidget">();
	}
	static class UMovieRenderDebugWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieRenderDebugWidget>();
	}
};
static_assert(alignof(UMovieRenderDebugWidget) == 0x000008, "Wrong alignment on UMovieRenderDebugWidget");
static_assert(sizeof(UMovieRenderDebugWidget) == 0x0003B8, "Wrong size on UMovieRenderDebugWidget");

// Class MovieRenderPipelineCore.MoviePipeline
// 0x03C8 (0x0428 - 0x0060)
class UMoviePipeline final : public UMoviePipelineBase
{
public:
	FMulticastInlineDelegateProperty_             OnMoviePipelineFinishedDelegate;                   // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMoviePipelineWorkFinishedDelegate;               // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMoviePipelineShotWorkFinishedDelegate;           // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMoviePipelineCustomTimeStep*           CustomTimeStep;                                    // 0x0090(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEngineCustomTimeStep*                  CachedPrevCustomTimeStep;                          // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequence*                         TargetSequence;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieRenderDebugWidget*                DebugWidget;                                       // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture*                               PreviewTexture;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x260];                                     // 0x00D0(0x0260)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMovieRenderDebugWidget>    DebugWidgetClass;                                  // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelineExecutorJob*              CurrentJob;                                        // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0xE0];                                     // 0x0348(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class UMoviePipelineExecutorJob* InJob);
	void OnMoviePipelineFinishedImpl();
	void SetInitializationTime(const struct FDateTime& InDateTime);

	class UMoviePipelineExecutorJob* GetCurrentJob() const;
	struct FDateTime GetInitializationTime() const;
	class UMoviePipelinePrimaryConfig* GetPipelineMasterConfig() const;
	class UMoviePipelinePrimaryConfig* GetPipelinePrimaryConfig() const;
	class UTexture* GetPreviewTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipeline">();
	}
	static class UMoviePipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipeline>();
	}
};
static_assert(alignof(UMoviePipeline) == 0x000008, "Wrong alignment on UMoviePipeline");
static_assert(sizeof(UMoviePipeline) == 0x000428, "Wrong size on UMoviePipeline");
static_assert(offsetof(UMoviePipeline, OnMoviePipelineFinishedDelegate) == 0x000060, "Member 'UMoviePipeline::OnMoviePipelineFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, OnMoviePipelineWorkFinishedDelegate) == 0x000070, "Member 'UMoviePipeline::OnMoviePipelineWorkFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, OnMoviePipelineShotWorkFinishedDelegate) == 0x000080, "Member 'UMoviePipeline::OnMoviePipelineShotWorkFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CustomTimeStep) == 0x000090, "Member 'UMoviePipeline::CustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CachedPrevCustomTimeStep) == 0x0000A8, "Member 'UMoviePipeline::CachedPrevCustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, TargetSequence) == 0x0000B0, "Member 'UMoviePipeline::TargetSequence' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, LevelSequenceActor) == 0x0000B8, "Member 'UMoviePipeline::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, DebugWidget) == 0x0000C0, "Member 'UMoviePipeline::DebugWidget' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, PreviewTexture) == 0x0000C8, "Member 'UMoviePipeline::PreviewTexture' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, DebugWidgetClass) == 0x000330, "Member 'UMoviePipeline::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoviePipeline, CurrentJob) == 0x000340, "Member 'UMoviePipeline::CurrentJob' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCustomTimeStep
// 0x0010 (0x0040 - 0x0030)
class UMoviePipelineCustomTimeStep final : public UEngineCustomTimeStep
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCustomTimeStep">();
	}
	static class UMoviePipelineCustomTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCustomTimeStep>();
	}
};
static_assert(alignof(UMoviePipelineCustomTimeStep) == 0x000008, "Wrong alignment on UMoviePipelineCustomTimeStep");
static_assert(sizeof(UMoviePipelineCustomTimeStep) == 0x000040, "Wrong size on UMoviePipelineCustomTimeStep");

// Class MovieRenderPipelineCore.MoviePipelineAntiAliasingSetting
// 0x0020 (0x0070 - 0x0050)
class UMoviePipelineAntiAliasingSetting final : public UMoviePipelineSetting
{
public:
	int32                                         SpatialSampleCount;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalSampleCount;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAntiAliasing;                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasingMethod                           AntiAliasingMethod;                                // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderWarmUpCount;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraCutForWarmUp;                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EngineWarmUpCount;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderWarmUpFrames;                               // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineAntiAliasingSetting">();
	}
	static class UMoviePipelineAntiAliasingSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineAntiAliasingSetting>();
	}
};
static_assert(alignof(UMoviePipelineAntiAliasingSetting) == 0x000008, "Wrong alignment on UMoviePipelineAntiAliasingSetting");
static_assert(sizeof(UMoviePipelineAntiAliasingSetting) == 0x000070, "Wrong size on UMoviePipelineAntiAliasingSetting");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, SpatialSampleCount) == 0x000050, "Member 'UMoviePipelineAntiAliasingSetting::SpatialSampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, TemporalSampleCount) == 0x000054, "Member 'UMoviePipelineAntiAliasingSetting::TemporalSampleCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bOverrideAntiAliasing) == 0x000058, "Member 'UMoviePipelineAntiAliasingSetting::bOverrideAntiAliasing' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, AntiAliasingMethod) == 0x000059, "Member 'UMoviePipelineAntiAliasingSetting::AntiAliasingMethod' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, RenderWarmUpCount) == 0x00005C, "Member 'UMoviePipelineAntiAliasingSetting::RenderWarmUpCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bUseCameraCutForWarmUp) == 0x000060, "Member 'UMoviePipelineAntiAliasingSetting::bUseCameraCutForWarmUp' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, EngineWarmUpCount) == 0x000064, "Member 'UMoviePipelineAntiAliasingSetting::EngineWarmUpCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineAntiAliasingSetting, bRenderWarmUpFrames) == 0x000068, "Member 'UMoviePipelineAntiAliasingSetting::bRenderWarmUpFrames' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UMoviePipelineBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UMovieSceneSequence* DuplicateSequence(class UObject* Outer_0, class UMovieSceneSequence* InSequence);
	static class UMoviePipelineSetting* FindOrGetDefaultSettingForShot(TSubclassOf<class UMoviePipelineSetting> InSettingType, const class UMoviePipelinePrimaryConfig* InPrimaryConfig, const class UMoviePipelineExecutorShot* InShot);
	static float GetCompletionPercentage(const class UMoviePipeline* InPipeline);
	static float GetCurrentAperture(const class UMoviePipeline* InMoviePipeline);
	static class UMoviePipelineExecutorShot* GetCurrentExecutorShot(const class UMoviePipeline* InMoviePipeline);
	static float GetCurrentFocalLength(const class UMoviePipeline* InMoviePipeline);
	static float GetCurrentFocusDistance(const class UMoviePipeline* InMoviePipeline);
	static void GetCurrentSegmentName(class UMoviePipeline* InMoviePipeline, class FText* OutOuterName, class FText* OutInnerName);
	static EMovieRenderShotState GetCurrentSegmentState(class UMoviePipeline* InMoviePipeline);
	static struct FMoviePipelineSegmentWorkMetrics GetCurrentSegmentWorkMetrics(const class UMoviePipeline* InMoviePipeline);
	static class ULevelSequence* GetCurrentSequence(const class UMoviePipeline* InMoviePipeline);
	static struct FFrameNumber GetCurrentShotFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetCurrentShotTimecode(const class UMoviePipeline* InMoviePipeline);
	static struct FIntPoint GetEffectiveOutputResolution(class UMoviePipelinePrimaryConfig* InPrimaryConfig, class UMoviePipelineExecutorShot* InPipelineExecutorShot);
	static bool GetEstimatedTimeRemaining(const class UMoviePipeline* InPipeline, struct FTimespan* OutEstimate);
	static class FText GetJobAuthor(class UMoviePipeline* InMoviePipeline);
	static struct FDateTime GetJobInitializationTime(const class UMoviePipeline* InMoviePipeline);
	static class FText GetJobName(class UMoviePipeline* InMoviePipeline);
	static class FString GetMapPackageName(class UMoviePipelineExecutorJob* InJob);
	static struct FFrameNumber GetMasterFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetMasterTimecode(const class UMoviePipeline* InMoviePipeline);
	static class FText GetMoviePipelineEngineChangelistLabel(const class UMoviePipeline* InMoviePipeline);
	static void GetOverallOutputFrames(const class UMoviePipeline* InMoviePipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static void GetOverallSegmentCounts(const class UMoviePipeline* InMoviePipeline, int32* OutCurrentIndex, int32* OutTotalCount);
	static EMovieRenderPipelineState GetPipelineState(const class UMoviePipeline* InPipeline);
	static struct FFrameNumber GetRootFrameNumber(const class UMoviePipeline* InMoviePipeline);
	static struct FTimecode GetRootTimecode(const class UMoviePipeline* InMoviePipeline);
	static class UMoviePipelineQueue* LoadManifestFileFromString(const class FString& InManifestFilePath);
	static void ResolveFilenameFormatArguments(const class FString& InFormatString, const struct FMoviePipelineFilenameResolveParams& InParams, class FString* OutFinalPath, struct FMoviePipelineFormatArgs* OutMergedFormatArgs);
	static int32 ResolveVersionNumber(const struct FMoviePipelineFilenameResolveParams& InParams, bool bGetNextVersion);
	static void UpdateJobShotListFromSequence(class ULevelSequence* InSequence, class UMoviePipelineExecutorJob* InJob, bool* bShotsChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBlueprintLibrary">();
	}
	static class UMoviePipelineBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBlueprintLibrary>();
	}
};
static_assert(alignof(UMoviePipelineBlueprintLibrary) == 0x000008, "Wrong alignment on UMoviePipelineBlueprintLibrary");
static_assert(sizeof(UMoviePipelineBlueprintLibrary) == 0x000030, "Wrong size on UMoviePipelineBlueprintLibrary");

// Class MovieRenderPipelineCore.MoviePipelineColorSetting
// 0x00A8 (0x00F8 - 0x0050)
class UMoviePipelineColorSetting final : public UMoviePipelineSetting
{
public:
	struct FOpenColorIODisplayConfiguration       OCIOConfiguration;                                 // 0x0050(0x00A0)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bDisableToneCurve;                                 // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinalColorLDR;                                    // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineColorSetting">();
	}
	static class UMoviePipelineColorSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineColorSetting>();
	}
};
static_assert(alignof(UMoviePipelineColorSetting) == 0x000008, "Wrong alignment on UMoviePipelineColorSetting");
static_assert(sizeof(UMoviePipelineColorSetting) == 0x0000F8, "Wrong size on UMoviePipelineColorSetting");
static_assert(offsetof(UMoviePipelineColorSetting, OCIOConfiguration) == 0x000050, "Member 'UMoviePipelineColorSetting::OCIOConfiguration' has a wrong offset!");
static_assert(offsetof(UMoviePipelineColorSetting, bDisableToneCurve) == 0x0000F0, "Member 'UMoviePipelineColorSetting::bDisableToneCurve' has a wrong offset!");
static_assert(offsetof(UMoviePipelineColorSetting, bFinalColorLDR) == 0x0000F1, "Member 'UMoviePipelineColorSetting::bFinalColorLDR' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCommandLineEncoder
// 0x0040 (0x0090 - 0x0050)
class UMoviePipelineCommandLineEncoder final : public UMoviePipelineSetting
{
public:
	class FString                                 FileNameFormatOverride;                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePipelineEncodeQuality                   Quality;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalCommandLineArgs;                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteSourceFiles;                                // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEncodeOnRenderCanceled;                       // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteEachFrameDuration;                           // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x15];                                      // 0x007B(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCommandLineEncoder">();
	}
	static class UMoviePipelineCommandLineEncoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCommandLineEncoder>();
	}
};
static_assert(alignof(UMoviePipelineCommandLineEncoder) == 0x000008, "Wrong alignment on UMoviePipelineCommandLineEncoder");
static_assert(sizeof(UMoviePipelineCommandLineEncoder) == 0x000090, "Wrong size on UMoviePipelineCommandLineEncoder");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, FileNameFormatOverride) == 0x000050, "Member 'UMoviePipelineCommandLineEncoder::FileNameFormatOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, Quality) == 0x000060, "Member 'UMoviePipelineCommandLineEncoder::Quality' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, AdditionalCommandLineArgs) == 0x000068, "Member 'UMoviePipelineCommandLineEncoder::AdditionalCommandLineArgs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bDeleteSourceFiles) == 0x000078, "Member 'UMoviePipelineCommandLineEncoder::bDeleteSourceFiles' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bSkipEncodeOnRenderCanceled) == 0x000079, "Member 'UMoviePipelineCommandLineEncoder::bSkipEncodeOnRenderCanceled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoder, bWriteEachFrameDuration) == 0x00007A, "Member 'UMoviePipelineCommandLineEncoder::bWriteEachFrameDuration' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineCommandLineEncoderSettings
// 0x00C8 (0x0110 - 0x0048)
class UMoviePipelineCommandLineEncoderSettings final : public UDeveloperSettings
{
public:
	class FString                                 ExecutablePath;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CodecHelpText;                                     // 0x0058(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FString                                 VideoCodec;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioCodec;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFileExtension;                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineFormat;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoInputStringFormat;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioInputStringFormat;                            // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Low;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Med;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_High;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeSettings_Epic;                               // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineCommandLineEncoderSettings">();
	}
	static class UMoviePipelineCommandLineEncoderSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineCommandLineEncoderSettings>();
	}
};
static_assert(alignof(UMoviePipelineCommandLineEncoderSettings) == 0x000008, "Wrong alignment on UMoviePipelineCommandLineEncoderSettings");
static_assert(sizeof(UMoviePipelineCommandLineEncoderSettings) == 0x000110, "Wrong size on UMoviePipelineCommandLineEncoderSettings");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, ExecutablePath) == 0x000048, "Member 'UMoviePipelineCommandLineEncoderSettings::ExecutablePath' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, CodecHelpText) == 0x000058, "Member 'UMoviePipelineCommandLineEncoderSettings::CodecHelpText' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, VideoCodec) == 0x000070, "Member 'UMoviePipelineCommandLineEncoderSettings::VideoCodec' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, AudioCodec) == 0x000080, "Member 'UMoviePipelineCommandLineEncoderSettings::AudioCodec' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, OutputFileExtension) == 0x000090, "Member 'UMoviePipelineCommandLineEncoderSettings::OutputFileExtension' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, CommandLineFormat) == 0x0000A0, "Member 'UMoviePipelineCommandLineEncoderSettings::CommandLineFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, VideoInputStringFormat) == 0x0000B0, "Member 'UMoviePipelineCommandLineEncoderSettings::VideoInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, AudioInputStringFormat) == 0x0000C0, "Member 'UMoviePipelineCommandLineEncoderSettings::AudioInputStringFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Low) == 0x0000D0, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Low' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Med) == 0x0000E0, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Med' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_High) == 0x0000F0, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_High' has a wrong offset!");
static_assert(offsetof(UMoviePipelineCommandLineEncoderSettings, EncodeSettings_Epic) == 0x000100, "Member 'UMoviePipelineCommandLineEncoderSettings::EncodeSettings_Epic' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineConfigBase
// 0x0058 (0x0088 - 0x0030)
class UMoviePipelineConfigBase : public UObject
{
public:
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMoviePipelineSetting*>          Settings;                                          // 0x0040(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMoviePipelineConfigBase> ConfigOrigin;                                      // 0x0050(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyFrom(class UMoviePipelineConfigBase* InConfig);
	class UMoviePipelineSetting* FindOrAddSettingByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch);
	void RemoveSetting(class UMoviePipelineSetting* InSetting);
	void SetConfigOrigin(class UMoviePipelineConfigBase* InConfig);

	class UMoviePipelineSetting* FindSettingByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch) const;
	TArray<class UMoviePipelineSetting*> FindSettingsByClass(TSubclassOf<class UMoviePipelineSetting> InClass, const bool bIncludeDisabledSettings, const bool bExactMatch) const;
	class UMoviePipelineConfigBase* GetConfigOrigin() const;
	TArray<class UMoviePipelineSetting*> GetUserSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineConfigBase">();
	}
	static class UMoviePipelineConfigBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineConfigBase>();
	}
};
static_assert(alignof(UMoviePipelineConfigBase) == 0x000008, "Wrong alignment on UMoviePipelineConfigBase");
static_assert(sizeof(UMoviePipelineConfigBase) == 0x000088, "Wrong size on UMoviePipelineConfigBase");
static_assert(offsetof(UMoviePipelineConfigBase, DisplayName) == 0x000030, "Member 'UMoviePipelineConfigBase::DisplayName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConfigBase, Settings) == 0x000040, "Member 'UMoviePipelineConfigBase::Settings' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConfigBase, ConfigOrigin) == 0x000050, "Member 'UMoviePipelineConfigBase::ConfigOrigin' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineDebugSettings
// 0x0010 (0x0060 - 0x0050)
class UMoviePipelineDebugSettings final : public UMoviePipelineSetting
{
public:
	bool                                          bWriteAllSamples;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureFramesWithRenderDoc;                       // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CaptureFrame;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureUnrealInsightsTrace;                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineDebugSettings">();
	}
	static class UMoviePipelineDebugSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineDebugSettings>();
	}
};
static_assert(alignof(UMoviePipelineDebugSettings) == 0x000008, "Wrong alignment on UMoviePipelineDebugSettings");
static_assert(sizeof(UMoviePipelineDebugSettings) == 0x000060, "Wrong size on UMoviePipelineDebugSettings");
static_assert(offsetof(UMoviePipelineDebugSettings, bWriteAllSamples) == 0x000050, "Member 'UMoviePipelineDebugSettings::bWriteAllSamples' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, bCaptureFramesWithRenderDoc) == 0x000051, "Member 'UMoviePipelineDebugSettings::bCaptureFramesWithRenderDoc' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, CaptureFrame) == 0x000054, "Member 'UMoviePipelineDebugSettings::CaptureFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineDebugSettings, bCaptureUnrealInsightsTrace) == 0x000058, "Member 'UMoviePipelineDebugSettings::bCaptureUnrealInsightsTrace' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorBase
// 0x00F0 (0x0120 - 0x0030)
class UMoviePipelineExecutorBase : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnExecutorFinishedDelegate;                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnExecutorErroredDelegate;                         // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x20];                                      // 0x0068(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SocketMessageRecievedDelegate;                     // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             HTTPResponseRecievedDelegate;                      // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMovieRenderDebugWidget>    DebugWidgetClass;                                  // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserData;                                          // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMoviePipeline>             TargetPipelineClass;                               // 0x00D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x48];                                      // 0x00D8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelAllJobs();
	void CancelCurrentJob();
	bool ConnectSocket(const class FString& InHostName, const int32 InPort);
	void DisconnectSocket();
	void Execute(class UMoviePipelineQueue* InPipelineQueue);
	void OnBeginFrame();
	void OnExecutorErroredImpl(class UMoviePipeline* ErroredPipeline, bool bFatal, const class FText& ErrorReason);
	void OnExecutorFinishedImpl();
	int32 SendHTTPRequest(const class FString& InURL, const class FString& InVerb, const class FString& InMessage, const TMap<class FString, class FString>& InHeaders);
	bool SendSocketMessage(const class FString& InMessage);
	void SetMoviePipelineClass(class UClass* InPipelineClass);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsRendering() const;
	bool IsSocketConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorBase">();
	}
	static class UMoviePipelineExecutorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorBase>();
	}
};
static_assert(alignof(UMoviePipelineExecutorBase) == 0x000008, "Wrong alignment on UMoviePipelineExecutorBase");
static_assert(sizeof(UMoviePipelineExecutorBase) == 0x000120, "Wrong size on UMoviePipelineExecutorBase");
static_assert(offsetof(UMoviePipelineExecutorBase, OnExecutorFinishedDelegate) == 0x000030, "Member 'UMoviePipelineExecutorBase::OnExecutorFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, OnExecutorErroredDelegate) == 0x000058, "Member 'UMoviePipelineExecutorBase::OnExecutorErroredDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, SocketMessageRecievedDelegate) == 0x000088, "Member 'UMoviePipelineExecutorBase::SocketMessageRecievedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, HTTPResponseRecievedDelegate) == 0x000098, "Member 'UMoviePipelineExecutorBase::HTTPResponseRecievedDelegate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, DebugWidgetClass) == 0x0000A8, "Member 'UMoviePipelineExecutorBase::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, UserData) == 0x0000C0, "Member 'UMoviePipelineExecutorBase::UserData' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorBase, TargetPipelineClass) == 0x0000D0, "Member 'UMoviePipelineExecutorBase::TargetPipelineClass' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineFCPXMLExporter
// 0x0038 (0x0088 - 0x0050)
class UMoviePipelineFCPXMLExporter final : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileNameFormatOverride;                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFCPXMLExportDataSource                       DataSource;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x1F];                                      // 0x0069(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineFCPXMLExporter">();
	}
	static class UMoviePipelineFCPXMLExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineFCPXMLExporter>();
	}
};
static_assert(alignof(UMoviePipelineFCPXMLExporter) == 0x000008, "Wrong alignment on UMoviePipelineFCPXMLExporter");
static_assert(sizeof(UMoviePipelineFCPXMLExporter) == 0x000088, "Wrong size on UMoviePipelineFCPXMLExporter");
static_assert(offsetof(UMoviePipelineFCPXMLExporter, FileNameFormatOverride) == 0x000058, "Member 'UMoviePipelineFCPXMLExporter::FileNameFormatOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineFCPXMLExporter, DataSource) == 0x000068, "Member 'UMoviePipelineFCPXMLExporter::DataSource' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineGameOverrideSetting
// 0x00E8 (0x0138 - 0x0050)
class UMoviePipelineGameOverrideSetting final : public UMoviePipelineSetting
{
public:
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQualitySettings;                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapturingReplayWorld;                             // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePipelineTextureStreamingMethod          TextureStreaming;                                  // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLODZero;                                       // 0x005B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableHLODs;                                     // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighQualityShadows;                            // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowDistanceScale;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowRadiusThreshold;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideViewDistanceScale;                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ViewDistanceScale;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushGrassStreaming;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushStreamingManagers;                           // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVirtualTextureFeedbackFactor;             // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualTextureFeedbackFactor;                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0xC0];                                      // 0x0078(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineGameOverrideSetting">();
	}
	static class UMoviePipelineGameOverrideSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineGameOverrideSetting>();
	}
};
static_assert(alignof(UMoviePipelineGameOverrideSetting) == 0x000008, "Wrong alignment on UMoviePipelineGameOverrideSetting");
static_assert(sizeof(UMoviePipelineGameOverrideSetting) == 0x000138, "Wrong size on UMoviePipelineGameOverrideSetting");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, GameModeOverride) == 0x000050, "Member 'UMoviePipelineGameOverrideSetting::GameModeOverride' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bCinematicQualitySettings) == 0x000058, "Member 'UMoviePipelineGameOverrideSetting::bCinematicQualitySettings' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bCapturingReplayWorld) == 0x000059, "Member 'UMoviePipelineGameOverrideSetting::bCapturingReplayWorld' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, TextureStreaming) == 0x00005A, "Member 'UMoviePipelineGameOverrideSetting::TextureStreaming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bUseLODZero) == 0x00005B, "Member 'UMoviePipelineGameOverrideSetting::bUseLODZero' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bDisableHLODs) == 0x00005C, "Member 'UMoviePipelineGameOverrideSetting::bDisableHLODs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bUseHighQualityShadows) == 0x00005D, "Member 'UMoviePipelineGameOverrideSetting::bUseHighQualityShadows' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ShadowDistanceScale) == 0x000060, "Member 'UMoviePipelineGameOverrideSetting::ShadowDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ShadowRadiusThreshold) == 0x000064, "Member 'UMoviePipelineGameOverrideSetting::ShadowRadiusThreshold' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bOverrideViewDistanceScale) == 0x000068, "Member 'UMoviePipelineGameOverrideSetting::bOverrideViewDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, ViewDistanceScale) == 0x00006C, "Member 'UMoviePipelineGameOverrideSetting::ViewDistanceScale' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bFlushGrassStreaming) == 0x000070, "Member 'UMoviePipelineGameOverrideSetting::bFlushGrassStreaming' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bFlushStreamingManagers) == 0x000071, "Member 'UMoviePipelineGameOverrideSetting::bFlushStreamingManagers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, bOverrideVirtualTextureFeedbackFactor) == 0x000072, "Member 'UMoviePipelineGameOverrideSetting::bOverrideVirtualTextureFeedbackFactor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineGameOverrideSetting, VirtualTextureFeedbackFactor) == 0x000074, "Member 'UMoviePipelineGameOverrideSetting::VirtualTextureFeedbackFactor' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineLinearExecutorBase
// 0x0028 (0x0148 - 0x0120)
class UMoviePipelineLinearExecutorBase : public UMoviePipelineExecutorBase
{
public:
	class UMoviePipelineQueue*                    Queue;                                             // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineBase*                     ActiveMoviePipeline;                               // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineLinearExecutorBase">();
	}
	static class UMoviePipelineLinearExecutorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineLinearExecutorBase>();
	}
};
static_assert(alignof(UMoviePipelineLinearExecutorBase) == 0x000008, "Wrong alignment on UMoviePipelineLinearExecutorBase");
static_assert(sizeof(UMoviePipelineLinearExecutorBase) == 0x000148, "Wrong size on UMoviePipelineLinearExecutorBase");
static_assert(offsetof(UMoviePipelineLinearExecutorBase, Queue) == 0x000120, "Member 'UMoviePipelineLinearExecutorBase::Queue' has a wrong offset!");
static_assert(offsetof(UMoviePipelineLinearExecutorBase, ActiveMoviePipeline) == 0x000128, "Member 'UMoviePipelineLinearExecutorBase::ActiveMoviePipeline' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineInProcessExecutor
// 0x0050 (0x0198 - 0x0148)
class UMoviePipelineInProcessExecutor final : public UMoviePipelineLinearExecutorBase
{
public:
	bool                                          bUseCurrentLevel;                                  // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x4F];                                     // 0x0149(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineInProcessExecutor">();
	}
	static class UMoviePipelineInProcessExecutor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineInProcessExecutor>();
	}
};
static_assert(alignof(UMoviePipelineInProcessExecutor) == 0x000008, "Wrong alignment on UMoviePipelineInProcessExecutor");
static_assert(sizeof(UMoviePipelineInProcessExecutor) == 0x000198, "Wrong size on UMoviePipelineInProcessExecutor");
static_assert(offsetof(UMoviePipelineInProcessExecutor, bUseCurrentLevel) == 0x000148, "Member 'UMoviePipelineInProcessExecutor::bUseCurrentLevel' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineOutputSetting
// 0x0068 (0x00B8 - 0x0050)
class UMoviePipelineOutputSetting final : public UMoviePipelineSetting
{
public:
	struct FDirectoryPath                         OutputDirectory;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilenameFormat;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              OutputResolution;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomFrameRate;                               // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             OutputFrameRate;                                   // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOverrideExistingOutput;                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandleFrameCount;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputFrameStep;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomPlaybackRange;                           // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomStartFrame;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomEndFrame;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VersionNumber;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoVersion;                                      // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZeroPadFrameNumbers;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameNumberOffset;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushDiskWritesPerShot;                           // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineOutputSetting">();
	}
	static class UMoviePipelineOutputSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineOutputSetting>();
	}
};
static_assert(alignof(UMoviePipelineOutputSetting) == 0x000008, "Wrong alignment on UMoviePipelineOutputSetting");
static_assert(sizeof(UMoviePipelineOutputSetting) == 0x0000B8, "Wrong size on UMoviePipelineOutputSetting");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputDirectory) == 0x000050, "Member 'UMoviePipelineOutputSetting::OutputDirectory' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, FilenameFormat) == 0x000060, "Member 'UMoviePipelineOutputSetting::FilenameFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputResolution) == 0x000070, "Member 'UMoviePipelineOutputSetting::OutputResolution' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bUseCustomFrameRate) == 0x000078, "Member 'UMoviePipelineOutputSetting::bUseCustomFrameRate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputFrameRate) == 0x00007C, "Member 'UMoviePipelineOutputSetting::OutputFrameRate' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bOverrideExistingOutput) == 0x000088, "Member 'UMoviePipelineOutputSetting::bOverrideExistingOutput' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, HandleFrameCount) == 0x00008C, "Member 'UMoviePipelineOutputSetting::HandleFrameCount' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, OutputFrameStep) == 0x000090, "Member 'UMoviePipelineOutputSetting::OutputFrameStep' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bUseCustomPlaybackRange) == 0x000094, "Member 'UMoviePipelineOutputSetting::bUseCustomPlaybackRange' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, CustomStartFrame) == 0x000098, "Member 'UMoviePipelineOutputSetting::CustomStartFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, CustomEndFrame) == 0x00009C, "Member 'UMoviePipelineOutputSetting::CustomEndFrame' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, VersionNumber) == 0x0000A0, "Member 'UMoviePipelineOutputSetting::VersionNumber' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bAutoVersion) == 0x0000A4, "Member 'UMoviePipelineOutputSetting::bAutoVersion' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, ZeroPadFrameNumbers) == 0x0000A8, "Member 'UMoviePipelineOutputSetting::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, FrameNumberOffset) == 0x0000AC, "Member 'UMoviePipelineOutputSetting::FrameNumberOffset' has a wrong offset!");
static_assert(offsetof(UMoviePipelineOutputSetting, bFlushDiskWritesPerShot) == 0x0000B0, "Member 'UMoviePipelineOutputSetting::bFlushDiskWritesPerShot' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelinePrimaryConfig
// 0x0068 (0x00F0 - 0x0088)
class UMoviePipelinePrimaryConfig final : public UMoviePipelineConfigBase
{
public:
	TMap<class FString, class UMoviePipelineShotConfig*> PerShotConfigMapping;                              // 0x0088(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMoviePipelineOutputSetting*            OutputSetting;                                     // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoviePipelineSetting*>          TransientSettings;                                 // 0x00E0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void InitializeTransientSettings();

	TArray<class UMoviePipelineSetting*> GetAllSettings(const bool bIncludeDisabledSettings, const bool bIncludeTransientSettings) const;
	struct FFrameRate GetEffectiveFrameRate(const class ULevelSequence* InSequence) const;
	TArray<class UMoviePipelineSetting*> GetTransientSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelinePrimaryConfig">();
	}
	static class UMoviePipelinePrimaryConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelinePrimaryConfig>();
	}
};
static_assert(alignof(UMoviePipelinePrimaryConfig) == 0x000008, "Wrong alignment on UMoviePipelinePrimaryConfig");
static_assert(sizeof(UMoviePipelinePrimaryConfig) == 0x0000F0, "Wrong size on UMoviePipelinePrimaryConfig");
static_assert(offsetof(UMoviePipelinePrimaryConfig, PerShotConfigMapping) == 0x000088, "Member 'UMoviePipelinePrimaryConfig::PerShotConfigMapping' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePrimaryConfig, OutputSetting) == 0x0000D8, "Member 'UMoviePipelinePrimaryConfig::OutputSetting' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePrimaryConfig, TransientSettings) == 0x0000E0, "Member 'UMoviePipelinePrimaryConfig::TransientSettings' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelinePythonHostExecutor
// 0x0018 (0x0138 - 0x0120)
class UMoviePipelinePythonHostExecutor final : public UMoviePipelineExecutorBase
{
public:
	TSubclassOf<class UMoviePipelinePythonHostExecutor> ExecutorClass;                                     // 0x0120(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelineQueue*                    PipelineQueue;                                     // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 LastLoadedWorld;                                   // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ExecuteDelayed(class UMoviePipelineQueue* InPipelineQueue);
	void OnMapLoad(class UWorld* InWorld);

	class UWorld* GetLastLoadedWorld() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelinePythonHostExecutor">();
	}
	static class UMoviePipelinePythonHostExecutor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelinePythonHostExecutor>();
	}
};
static_assert(alignof(UMoviePipelinePythonHostExecutor) == 0x000008, "Wrong alignment on UMoviePipelinePythonHostExecutor");
static_assert(sizeof(UMoviePipelinePythonHostExecutor) == 0x000138, "Wrong size on UMoviePipelinePythonHostExecutor");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, ExecutorClass) == 0x000120, "Member 'UMoviePipelinePythonHostExecutor::ExecutorClass' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, PipelineQueue) == 0x000128, "Member 'UMoviePipelinePythonHostExecutor::PipelineQueue' has a wrong offset!");
static_assert(offsetof(UMoviePipelinePythonHostExecutor, LastLoadedWorld) == 0x000130, "Member 'UMoviePipelinePythonHostExecutor::LastLoadedWorld' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorShot
// 0x0178 (0x01A8 - 0x0030)
class UMoviePipelineExecutorShot final : public UObject
{
public:
	bool                                          bEnabled;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OuterName;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InnerName;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMoviePipelineSidecarCamera>    SidecarCameras;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMovieJobVariableAssignmentContainer*   VariableAssignments;                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0xB0];                                      // 0x0070(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0120(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusMessage;                                     // 0x0128(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoviePipelineShotConfig*               ShotOverrideConfig;                                // 0x0138(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelineShotConfig> ShotOverridePresetOrigin;                          // 0x0140(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieGraphConfig*                      GraphConfig;                                       // 0x0170(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0178(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMoviePipelineShotConfig* AllocateNewShotOverrideConfig(TSubclassOf<class UMoviePipelineShotConfig> InConfigType);
	void SetGraphConfig(class UMovieGraphConfig* InGraphConfig);
	void SetGraphPreset(const class UMovieGraphConfig* InGraphPreset);
	void SetShotOverrideConfiguration(class UMoviePipelineShotConfig* InPreset);
	void SetShotOverridePresetOrigin(class UMoviePipelineShotConfig* InPreset);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class FString GetCameraName(int32 InCameraIndex) const;
	class UMovieGraphConfig* GetGraphConfig() const;
	class UMovieGraphConfig* GetGraphPreset() const;
	class UMoviePipelineShotConfig* GetShotOverrideConfiguration() const;
	class UMoviePipelineShotConfig* GetShotOverridePresetOrigin() const;
	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsUsingGraphConfiguration() const;
	bool ShouldRender() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorShot">();
	}
	static class UMoviePipelineExecutorShot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorShot>();
	}
};
static_assert(alignof(UMoviePipelineExecutorShot) == 0x000008, "Wrong alignment on UMoviePipelineExecutorShot");
static_assert(sizeof(UMoviePipelineExecutorShot) == 0x0001A8, "Wrong size on UMoviePipelineExecutorShot");
static_assert(offsetof(UMoviePipelineExecutorShot, bEnabled) == 0x000030, "Member 'UMoviePipelineExecutorShot::bEnabled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, OuterName) == 0x000038, "Member 'UMoviePipelineExecutorShot::OuterName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, InnerName) == 0x000048, "Member 'UMoviePipelineExecutorShot::InnerName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, SidecarCameras) == 0x000058, "Member 'UMoviePipelineExecutorShot::SidecarCameras' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, VariableAssignments) == 0x000068, "Member 'UMoviePipelineExecutorShot::VariableAssignments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, Progress) == 0x000120, "Member 'UMoviePipelineExecutorShot::Progress' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, StatusMessage) == 0x000128, "Member 'UMoviePipelineExecutorShot::StatusMessage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, ShotOverrideConfig) == 0x000138, "Member 'UMoviePipelineExecutorShot::ShotOverrideConfig' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, ShotOverridePresetOrigin) == 0x000140, "Member 'UMoviePipelineExecutorShot::ShotOverridePresetOrigin' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, GraphConfig) == 0x000170, "Member 'UMoviePipelineExecutorShot::GraphConfig' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorShot, GraphPreset) == 0x000178, "Member 'UMoviePipelineExecutorShot::GraphPreset' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineExecutorJob
// 0x0138 (0x0168 - 0x0030)
class UMoviePipelineExecutorJob final : public UObject
{
public:
	class FString                                 JobName;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Sequence;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Map;                                               // 0x0068(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author;                                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMoviePipelineExecutorShot*>     ShotInfo;                                          // 0x00B0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieJobVariableAssignmentContainer*   VariableAssignments;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatusMessage;                                     // 0x00D8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StatusProgress;                                    // 0x00E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsConsumed;                                       // 0x00EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoviePipelinePrimaryConfig*            Configuration;                                     // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelinePrimaryConfig> PresetOrigin;                                      // 0x00F8(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieGraphConfig*                      GraphConfig;                                       // 0x0130(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMovieGraphConfig>       GraphPreset;                                       // 0x0138(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDuplicated();
	void SetConfiguration(class UMoviePipelinePrimaryConfig* InPreset);
	void SetConsumed(const bool bInConsumed);
	void SetGraphConfig(class UMovieGraphConfig* InGraphConfig);
	void SetGraphPreset(const class UMovieGraphConfig* InGraphPreset);
	void SetIsEnabled(const bool bInEnabled);
	void SetPresetOrigin(class UMoviePipelinePrimaryConfig* InPreset);
	void SetSequence(const struct FSoftObjectPath& InSequence);
	void SetStatusMessage(const class FString& InStatus);
	void SetStatusProgress(const float InProgress);

	class UMoviePipelinePrimaryConfig* GetConfiguration() const;
	class UMovieGraphConfig* GetGraphConfig() const;
	class UMovieGraphConfig* GetGraphPreset() const;
	class UMoviePipelinePrimaryConfig* GetPresetOrigin() const;
	class FString GetStatusMessage() const;
	float GetStatusProgress() const;
	bool IsConsumed() const;
	bool IsEnabled() const;
	bool IsUsingGraphConfiguration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineExecutorJob">();
	}
	static class UMoviePipelineExecutorJob* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineExecutorJob>();
	}
};
static_assert(alignof(UMoviePipelineExecutorJob) == 0x000008, "Wrong alignment on UMoviePipelineExecutorJob");
static_assert(sizeof(UMoviePipelineExecutorJob) == 0x000168, "Wrong size on UMoviePipelineExecutorJob");
static_assert(offsetof(UMoviePipelineExecutorJob, JobName) == 0x000030, "Member 'UMoviePipelineExecutorJob::JobName' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Sequence) == 0x000040, "Member 'UMoviePipelineExecutorJob::Sequence' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Map) == 0x000068, "Member 'UMoviePipelineExecutorJob::Map' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Author) == 0x000090, "Member 'UMoviePipelineExecutorJob::Author' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Comment) == 0x0000A0, "Member 'UMoviePipelineExecutorJob::Comment' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, ShotInfo) == 0x0000B0, "Member 'UMoviePipelineExecutorJob::ShotInfo' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, UserData) == 0x0000C0, "Member 'UMoviePipelineExecutorJob::UserData' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, VariableAssignments) == 0x0000D0, "Member 'UMoviePipelineExecutorJob::VariableAssignments' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, StatusMessage) == 0x0000D8, "Member 'UMoviePipelineExecutorJob::StatusMessage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, StatusProgress) == 0x0000E8, "Member 'UMoviePipelineExecutorJob::StatusProgress' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, bIsConsumed) == 0x0000EC, "Member 'UMoviePipelineExecutorJob::bIsConsumed' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, Configuration) == 0x0000F0, "Member 'UMoviePipelineExecutorJob::Configuration' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, PresetOrigin) == 0x0000F8, "Member 'UMoviePipelineExecutorJob::PresetOrigin' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, bEnabled) == 0x000128, "Member 'UMoviePipelineExecutorJob::bEnabled' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, GraphConfig) == 0x000130, "Member 'UMoviePipelineExecutorJob::GraphConfig' has a wrong offset!");
static_assert(offsetof(UMoviePipelineExecutorJob, GraphPreset) == 0x000138, "Member 'UMoviePipelineExecutorJob::GraphPreset' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineQueue
// 0x0048 (0x0078 - 0x0030)
class UMoviePipelineQueue final : public UObject
{
public:
	TArray<class UMoviePipelineExecutorJob*>      Jobs;                                              // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMoviePipelineQueue>     QueueOrigin;                                       // 0x0040(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMoviePipelineExecutorJob* AllocateNewJob(TSubclassOf<class UMoviePipelineExecutorJob> InJobType);
	void CopyFrom(class UMoviePipelineQueue* InQueue);
	void DeleteAllJobs();
	void DeleteJob(class UMoviePipelineExecutorJob* InJob);
	class UMoviePipelineExecutorJob* DuplicateJob(class UMoviePipelineExecutorJob* InJob);
	void SetJobIndex(class UMoviePipelineExecutorJob* InJob, int32 Index_0);
	void SetQueueOrigin(class UMoviePipelineQueue* InConfig);

	TArray<class UMoviePipelineExecutorJob*> GetJobs() const;
	class UMoviePipelineQueue* GetQueueOrigin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineQueue">();
	}
	static class UMoviePipelineQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineQueue>();
	}
};
static_assert(alignof(UMoviePipelineQueue) == 0x000008, "Wrong alignment on UMoviePipelineQueue");
static_assert(sizeof(UMoviePipelineQueue) == 0x000078, "Wrong size on UMoviePipelineQueue");
static_assert(offsetof(UMoviePipelineQueue, Jobs) == 0x000030, "Member 'UMoviePipelineQueue::Jobs' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueue, QueueOrigin) == 0x000040, "Member 'UMoviePipelineQueue::QueueOrigin' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem
// 0x0060 (0x0098 - 0x0038)
class UMoviePipelineQueueEngineSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnRenderFinished;                                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMoviePipelineExecutorBase*             ActiveExecutor;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoviePipelineQueue*                    CurrentQueue;                                      // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x40];                                      // 0x0058(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMoviePipelineExecutorJob* AllocateJob(class ULevelSequence* InSequence);
	void RenderJob(class UMoviePipelineExecutorJob* InJob);
	class UMoviePipelineExecutorBase* RenderQueueWithExecutor(TSubclassOf<class UMoviePipelineExecutorBase> InExecutorType);
	void RenderQueueWithExecutorInstance(class UMoviePipelineExecutorBase* InExecutor);
	void SetConfiguration(TSubclassOf<class UMovieRenderDebugWidget> InProgressWidgetClass, const bool bRenderPlayerViewport);

	class UMoviePipelineExecutorBase* GetActiveExecutor() const;
	class UMoviePipelineQueue* GetQueue() const;
	bool IsRendering() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineQueueEngineSubsystem">();
	}
	static class UMoviePipelineQueueEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineQueueEngineSubsystem>();
	}
};
static_assert(alignof(UMoviePipelineQueueEngineSubsystem) == 0x000008, "Wrong alignment on UMoviePipelineQueueEngineSubsystem");
static_assert(sizeof(UMoviePipelineQueueEngineSubsystem) == 0x000098, "Wrong size on UMoviePipelineQueueEngineSubsystem");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, OnRenderFinished) == 0x000038, "Member 'UMoviePipelineQueueEngineSubsystem::OnRenderFinished' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, ActiveExecutor) == 0x000048, "Member 'UMoviePipelineQueueEngineSubsystem::ActiveExecutor' has a wrong offset!");
static_assert(offsetof(UMoviePipelineQueueEngineSubsystem, CurrentQueue) == 0x000050, "Member 'UMoviePipelineQueueEngineSubsystem::CurrentQueue' has a wrong offset!");

// Class MovieRenderPipelineCore.MoviePipelineRenderPass
// 0x0000 (0x0050 - 0x0050)
class UMoviePipelineRenderPass : public UMoviePipelineSetting
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineRenderPass">();
	}
	static class UMoviePipelineRenderPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineRenderPass>();
	}
};
static_assert(alignof(UMoviePipelineRenderPass) == 0x000008, "Wrong alignment on UMoviePipelineRenderPass");
static_assert(sizeof(UMoviePipelineRenderPass) == 0x000050, "Wrong size on UMoviePipelineRenderPass");

// Class MovieRenderPipelineCore.MoviePipelineShotConfig
// 0x0000 (0x0088 - 0x0088)
class UMoviePipelineShotConfig final : public UMoviePipelineConfigBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineShotConfig">();
	}
	static class UMoviePipelineShotConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineShotConfig>();
	}
};
static_assert(alignof(UMoviePipelineShotConfig) == 0x000008, "Wrong alignment on UMoviePipelineShotConfig");
static_assert(sizeof(UMoviePipelineShotConfig) == 0x000088, "Wrong size on UMoviePipelineShotConfig");

// Class MovieRenderPipelineCore.MoviePipelineVideoOutputBase
// 0x0048 (0x0098 - 0x0050)
class UMoviePipelineVideoOutputBase final : public UMoviePipelineOutputBase
{
public:
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineVideoOutputBase">();
	}
	static class UMoviePipelineVideoOutputBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineVideoOutputBase>();
	}
};
static_assert(alignof(UMoviePipelineVideoOutputBase) == 0x000008, "Wrong alignment on UMoviePipelineVideoOutputBase");
static_assert(sizeof(UMoviePipelineVideoOutputBase) == 0x000098, "Wrong size on UMoviePipelineVideoOutputBase");

}

