#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1011

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Hero_1011_structs.hpp"


namespace SDK::Params
{

// Function Hero_1011.Cue_Weapon_Loop_101111.OnOwnedTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Cue_Weapon_Loop_101111_OnOwnedTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Weapon_Loop_101111_OnOwnedTagUpdate) == 0x000004, "Wrong alignment on Cue_Weapon_Loop_101111_OnOwnedTagUpdate");
static_assert(sizeof(Cue_Weapon_Loop_101111_OnOwnedTagUpdate) == 0x000010, "Wrong size on Cue_Weapon_Loop_101111_OnOwnedTagUpdate");
static_assert(offsetof(Cue_Weapon_Loop_101111_OnOwnedTagUpdate, TagUpdated) == 0x000000, "Member 'Cue_Weapon_Loop_101111_OnOwnedTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(Cue_Weapon_Loop_101111_OnOwnedTagUpdate, bTagExists) == 0x00000C, "Member 'Cue_Weapon_Loop_101111_OnOwnedTagUpdate::bTagExists' has a wrong offset!");

// Function Hero_1011.Ability_101171.CalcSmashLocation
// 0x0028 (0x0028 - 0x0000)
struct Ability_101171_CalcSmashLocation final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OutHulk;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101171_CalcSmashLocation) == 0x000008, "Wrong alignment on Ability_101171_CalcSmashLocation");
static_assert(sizeof(Ability_101171_CalcSmashLocation) == 0x000028, "Wrong size on Ability_101171_CalcSmashLocation");
static_assert(offsetof(Ability_101171_CalcSmashLocation, TargetActor) == 0x000000, "Member 'Ability_101171_CalcSmashLocation::TargetActor' has a wrong offset!");
static_assert(offsetof(Ability_101171_CalcSmashLocation, OutHulk) == 0x000008, "Member 'Ability_101171_CalcSmashLocation::OutHulk' has a wrong offset!");
static_assert(offsetof(Ability_101171_CalcSmashLocation, ReturnValue) == 0x000010, "Member 'Ability_101171_CalcSmashLocation::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101171.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct Ability_101171_GetTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101171_GetTarget) == 0x000008, "Wrong alignment on Ability_101171_GetTarget");
static_assert(sizeof(Ability_101171_GetTarget) == 0x000008, "Wrong size on Ability_101171_GetTarget");
static_assert(offsetof(Ability_101171_GetTarget, ReturnValue) == 0x000000, "Member 'Ability_101171_GetTarget::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101191.OnServerReceiveLaunchVelocity
// 0x0168 (0x0168 - 0x0000)
struct Ability_101191_OnServerReceiveLaunchVelocity final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101191_OnServerReceiveLaunchVelocity) == 0x000008, "Wrong alignment on Ability_101191_OnServerReceiveLaunchVelocity");
static_assert(sizeof(Ability_101191_OnServerReceiveLaunchVelocity) == 0x000168, "Wrong size on Ability_101191_OnServerReceiveLaunchVelocity");
static_assert(offsetof(Ability_101191_OnServerReceiveLaunchVelocity, Data) == 0x000000, "Member 'Ability_101191_OnServerReceiveLaunchVelocity::Data' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119101.GetOwnerAbility
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_10119101_GetOwnerAbility final
{
public:
	class UMarvelGameplayAbility*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119101_GetOwnerAbility) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10119101_GetOwnerAbility");
static_assert(sizeof(Cue_Ability_Loop_10119101_GetOwnerAbility) == 0x000008, "Wrong size on Cue_Ability_Loop_10119101_GetOwnerAbility");
static_assert(offsetof(Cue_Ability_Loop_10119101_GetOwnerAbility, ReturnValue) == 0x000000, "Member 'Cue_Ability_Loop_10119101_GetOwnerAbility::ReturnValue' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119101.GetOwnerChar
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_10119101_GetOwnerChar final
{
public:
	class AHulkBannerCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119101_GetOwnerChar) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10119101_GetOwnerChar");
static_assert(sizeof(Cue_Ability_Loop_10119101_GetOwnerChar) == 0x000008, "Wrong size on Cue_Ability_Loop_10119101_GetOwnerChar");
static_assert(offsetof(Cue_Ability_Loop_10119101_GetOwnerChar, ReturnValue) == 0x000000, "Member 'Cue_Ability_Loop_10119101_GetOwnerChar::ReturnValue' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119101.SetAudio
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10119101_SetAudio final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119101_SetAudio) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10119101_SetAudio");
static_assert(sizeof(Cue_Ability_Loop_10119101_SetAudio) == 0x000001, "Wrong size on Cue_Ability_Loop_10119101_SetAudio");
static_assert(offsetof(Cue_Ability_Loop_10119101_SetAudio, bReset) == 0x000000, "Member 'Cue_Ability_Loop_10119101_SetAudio::bReset' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119101.SetJumpLineVisible
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10119101_SetJumpLineVisible final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119101_SetJumpLineVisible) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10119101_SetJumpLineVisible");
static_assert(sizeof(Cue_Ability_Loop_10119101_SetJumpLineVisible) == 0x000001, "Wrong size on Cue_Ability_Loop_10119101_SetJumpLineVisible");
static_assert(offsetof(Cue_Ability_Loop_10119101_SetJumpLineVisible, bIsVisible) == 0x000000, "Member 'Cue_Ability_Loop_10119101_SetJumpLineVisible::bIsVisible' has a wrong offset!");

// Function Hero_1011.UIController_101191.CanGetAbility
// 0x0001 (0x0001 - 0x0000)
struct UIController_101191_CanGetAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101191_CanGetAbility) == 0x000001, "Wrong alignment on UIController_101191_CanGetAbility");
static_assert(sizeof(UIController_101191_CanGetAbility) == 0x000001, "Wrong size on UIController_101191_CanGetAbility");
static_assert(offsetof(UIController_101191_CanGetAbility, ReturnValue) == 0x000000, "Member 'UIController_101191_CanGetAbility::ReturnValue' has a wrong offset!");

// Function Hero_1011.UIController_101191.IsAbilityCharging
// 0x0001 (0x0001 - 0x0000)
struct UIController_101191_IsAbilityCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101191_IsAbilityCharging) == 0x000001, "Wrong alignment on UIController_101191_IsAbilityCharging");
static_assert(sizeof(UIController_101191_IsAbilityCharging) == 0x000001, "Wrong size on UIController_101191_IsAbilityCharging");
static_assert(offsetof(UIController_101191_IsAbilityCharging, ReturnValue) == 0x000000, "Member 'UIController_101191_IsAbilityCharging::ReturnValue' has a wrong offset!");

// Function Hero_1011.UIController_101191.PyInitChargeParam
// 0x0002 (0x0002 - 0x0000)
struct UIController_101191_PyInitChargeParam final
{
public:
	bool                                          bIsHulk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101191_PyInitChargeParam) == 0x000001, "Wrong alignment on UIController_101191_PyInitChargeParam");
static_assert(sizeof(UIController_101191_PyInitChargeParam) == 0x000002, "Wrong size on UIController_101191_PyInitChargeParam");
static_assert(offsetof(UIController_101191_PyInitChargeParam, bIsHulk) == 0x000000, "Member 'UIController_101191_PyInitChargeParam::bIsHulk' has a wrong offset!");
static_assert(offsetof(UIController_101191_PyInitChargeParam, ReturnValue) == 0x000001, "Member 'UIController_101191_PyInitChargeParam::ReturnValue' has a wrong offset!");

// Function Hero_1011.UIController_101191.TryInitChargeParam
// 0x0002 (0x0002 - 0x0000)
struct UIController_101191_TryInitChargeParam final
{
public:
	bool                                          bIsHulk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101191_TryInitChargeParam) == 0x000001, "Wrong alignment on UIController_101191_TryInitChargeParam");
static_assert(sizeof(UIController_101191_TryInitChargeParam) == 0x000002, "Wrong size on UIController_101191_TryInitChargeParam");
static_assert(offsetof(UIController_101191_TryInitChargeParam, bIsHulk) == 0x000000, "Member 'UIController_101191_TryInitChargeParam::bIsHulk' has a wrong offset!");
static_assert(offsetof(UIController_101191_TryInitChargeParam, ReturnValue) == 0x000001, "Member 'UIController_101191_TryInitChargeParam::ReturnValue' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119103.OnPressRelease
// 0x0004 (0x0004 - 0x0000)
struct Cue_Ability_Loop_10119103_OnPressRelease final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119103_OnPressRelease) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10119103_OnPressRelease");
static_assert(sizeof(Cue_Ability_Loop_10119103_OnPressRelease) == 0x000004, "Wrong size on Cue_Ability_Loop_10119103_OnPressRelease");
static_assert(offsetof(Cue_Ability_Loop_10119103_OnPressRelease, TimeWaited) == 0x000000, "Member 'Cue_Ability_Loop_10119103_OnPressRelease::TimeWaited' has a wrong offset!");

// Function Hero_1011.Cue_Ability_Loop_10119103.OnPressTimeMin
// 0x0004 (0x0004 - 0x0000)
struct Cue_Ability_Loop_10119103_OnPressTimeMin final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10119103_OnPressTimeMin) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10119103_OnPressTimeMin");
static_assert(sizeof(Cue_Ability_Loop_10119103_OnPressTimeMin) == 0x000004, "Wrong size on Cue_Ability_Loop_10119103_OnPressTimeMin");
static_assert(offsetof(Cue_Ability_Loop_10119103_OnPressTimeMin, TimeWaited) == 0x000000, "Member 'Cue_Ability_Loop_10119103_OnPressTimeMin::TimeWaited' has a wrong offset!");

// Function Hero_1011.Ability_101192.CanActivateClimb
// 0x0001 (0x0001 - 0x0000)
struct Ability_101192_CanActivateClimb final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_CanActivateClimb) == 0x000001, "Wrong alignment on Ability_101192_CanActivateClimb");
static_assert(sizeof(Ability_101192_CanActivateClimb) == 0x000001, "Wrong size on Ability_101192_CanActivateClimb");
static_assert(offsetof(Ability_101192_CanActivateClimb, ReturnValue) == 0x000000, "Member 'Ability_101192_CanActivateClimb::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101192.GetClimbConfig
// 0x0008 (0x0008 - 0x0000)
struct Ability_101192_GetClimbConfig final
{
public:
	class UConfigHulkClimb*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_GetClimbConfig) == 0x000008, "Wrong alignment on Ability_101192_GetClimbConfig");
static_assert(sizeof(Ability_101192_GetClimbConfig) == 0x000008, "Wrong size on Ability_101192_GetClimbConfig");
static_assert(offsetof(Ability_101192_GetClimbConfig, ReturnValue) == 0x000000, "Member 'Ability_101192_GetClimbConfig::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101192.GetMoveComponent
// 0x0008 (0x0008 - 0x0000)
struct Ability_101192_GetMoveComponent final
{
public:
	class UHulkBannerMoveLogicBaseComponent*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_GetMoveComponent) == 0x000008, "Wrong alignment on Ability_101192_GetMoveComponent");
static_assert(sizeof(Ability_101192_GetMoveComponent) == 0x000008, "Wrong size on Ability_101192_GetMoveComponent");
static_assert(offsetof(Ability_101192_GetMoveComponent, ReturnValue) == 0x000000, "Member 'Ability_101192_GetMoveComponent::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101192.GetOwnerChar
// 0x0008 (0x0008 - 0x0000)
struct Ability_101192_GetOwnerChar final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_GetOwnerChar) == 0x000008, "Wrong alignment on Ability_101192_GetOwnerChar");
static_assert(sizeof(Ability_101192_GetOwnerChar) == 0x000008, "Wrong size on Ability_101192_GetOwnerChar");
static_assert(offsetof(Ability_101192_GetOwnerChar, ReturnValue) == 0x000000, "Member 'Ability_101192_GetOwnerChar::ReturnValue' has a wrong offset!");

// Function Hero_1011.Ability_101192.OnClimbKeyPress
// 0x0004 (0x0004 - 0x0000)
struct Ability_101192_OnClimbKeyPress final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_OnClimbKeyPress) == 0x000004, "Wrong alignment on Ability_101192_OnClimbKeyPress");
static_assert(sizeof(Ability_101192_OnClimbKeyPress) == 0x000004, "Wrong size on Ability_101192_OnClimbKeyPress");
static_assert(offsetof(Ability_101192_OnClimbKeyPress, Time) == 0x000000, "Member 'Ability_101192_OnClimbKeyPress::Time' has a wrong offset!");

// Function Hero_1011.Ability_101192.OnClimbKeyRelease
// 0x0004 (0x0004 - 0x0000)
struct Ability_101192_OnClimbKeyRelease final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101192_OnClimbKeyRelease) == 0x000004, "Wrong alignment on Ability_101192_OnClimbKeyRelease");
static_assert(sizeof(Ability_101192_OnClimbKeyRelease) == 0x000004, "Wrong size on Ability_101192_OnClimbKeyRelease");
static_assert(offsetof(Ability_101192_OnClimbKeyRelease, Time) == 0x000000, "Member 'Ability_101192_OnClimbKeyRelease::Time' has a wrong offset!");

// Function Hero_1011.Ability_101198.SwitchTimelineTask
// 0x000C (0x000C - 0x0000)
struct Ability_101198_SwitchTimelineTask final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101198_SwitchTimelineTask) == 0x000004, "Wrong alignment on Ability_101198_SwitchTimelineTask");
static_assert(sizeof(Ability_101198_SwitchTimelineTask) == 0x00000C, "Wrong size on Ability_101198_SwitchTimelineTask");
static_assert(offsetof(Ability_101198_SwitchTimelineTask, SectionName) == 0x000000, "Member 'Ability_101198_SwitchTimelineTask::SectionName' has a wrong offset!");

// Function Hero_1011.EpicMomentAction_1011.OnActorAbilityCancel
// 0x0028 (0x0028 - 0x0000)
struct EpicMomentAction_1011_OnActorAbilityCancel final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1011_OnActorAbilityCancel) == 0x000008, "Wrong alignment on EpicMomentAction_1011_OnActorAbilityCancel");
static_assert(sizeof(EpicMomentAction_1011_OnActorAbilityCancel) == 0x000028, "Wrong size on EpicMomentAction_1011_OnActorAbilityCancel");
static_assert(offsetof(EpicMomentAction_1011_OnActorAbilityCancel, Source) == 0x000000, "Member 'EpicMomentAction_1011_OnActorAbilityCancel::Source' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorAbilityCancel, AbilityID) == 0x000008, "Member 'EpicMomentAction_1011_OnActorAbilityCancel::AbilityID' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorAbilityCancel, SessionID) == 0x000010, "Member 'EpicMomentAction_1011_OnActorAbilityCancel::SessionID' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorAbilityCancel, SourceAbility) == 0x000020, "Member 'EpicMomentAction_1011_OnActorAbilityCancel::SourceAbility' has a wrong offset!");

// Function Hero_1011.EpicMomentAction_1011.OnActorTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct EpicMomentAction_1011_OnActorTakeDamage final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicMomentAction_1011_OnActorTakeDamage) == 0x000008, "Wrong alignment on EpicMomentAction_1011_OnActorTakeDamage");
static_assert(sizeof(EpicMomentAction_1011_OnActorTakeDamage) == 0x000030, "Wrong size on EpicMomentAction_1011_OnActorTakeDamage");
static_assert(offsetof(EpicMomentAction_1011_OnActorTakeDamage, Instigator) == 0x000000, "Member 'EpicMomentAction_1011_OnActorTakeDamage::Instigator' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorTakeDamage, Target) == 0x000008, "Member 'EpicMomentAction_1011_OnActorTakeDamage::Target' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'EpicMomentAction_1011_OnActorTakeDamage::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnActorTakeDamage, ExtraData) == 0x000028, "Member 'EpicMomentAction_1011_OnActorTakeDamage::ExtraData' has a wrong offset!");

// Function Hero_1011.EpicMomentAction_1011.OnEffectImmunityOrInhibitedCallback
// 0x0768 (0x0768 - 0x0000)
struct EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpec                    BlockedSpec;                                       // 0x0008(0x0760)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback) == 0x000008, "Wrong alignment on EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback");
static_assert(sizeof(EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback) == 0x000768, "Wrong size on EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback");
static_assert(offsetof(EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback, Source) == 0x000000, "Member 'EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback::Source' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback, BlockedSpec) == 0x000008, "Member 'EpicMomentAction_1011_OnEffectImmunityOrInhibitedCallback::BlockedSpec' has a wrong offset!");

// Function Hero_1011.EpicMomentAction_1011.OnGameplayEffectAppliedToTarget
// 0x0018 (0x0018 - 0x0000)
struct EpicMomentAction_1011_OnGameplayEffectAppliedToTarget final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecStackHandle         GameplayEffectSpecHandle;                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveGameplayEffectHandle;                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1011_OnGameplayEffectAppliedToTarget) == 0x000008, "Wrong alignment on EpicMomentAction_1011_OnGameplayEffectAppliedToTarget");
static_assert(sizeof(EpicMomentAction_1011_OnGameplayEffectAppliedToTarget) == 0x000018, "Wrong size on EpicMomentAction_1011_OnGameplayEffectAppliedToTarget");
static_assert(offsetof(EpicMomentAction_1011_OnGameplayEffectAppliedToTarget, ASC) == 0x000000, "Member 'EpicMomentAction_1011_OnGameplayEffectAppliedToTarget::ASC' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnGameplayEffectAppliedToTarget, GameplayEffectSpecHandle) == 0x000008, "Member 'EpicMomentAction_1011_OnGameplayEffectAppliedToTarget::GameplayEffectSpecHandle' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1011_OnGameplayEffectAppliedToTarget, ActiveGameplayEffectHandle) == 0x000010, "Member 'EpicMomentAction_1011_OnGameplayEffectAppliedToTarget::ActiveGameplayEffectHandle' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance.EnterFury
// 0x0001 (0x0001 - 0x0000)
struct HulkAnimInstance_EnterFury final
{
public:
	bool                                          bOp;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkAnimInstance_EnterFury) == 0x000001, "Wrong alignment on HulkAnimInstance_EnterFury");
static_assert(sizeof(HulkAnimInstance_EnterFury) == 0x000001, "Wrong size on HulkAnimInstance_EnterFury");
static_assert(offsetof(HulkAnimInstance_EnterFury, bOp) == 0x000000, "Member 'HulkAnimInstance_EnterFury::bOp' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance.GetSynergyRideAnimation
// 0x0010 (0x0010 - 0x0000)
struct HulkAnimInstance_GetSynergyRideAnimation final
{
public:
	struct FAnimUpdateContext                     PoseContext;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkAnimInstance_GetSynergyRideAnimation) == 0x000008, "Wrong alignment on HulkAnimInstance_GetSynergyRideAnimation");
static_assert(sizeof(HulkAnimInstance_GetSynergyRideAnimation) == 0x000010, "Wrong size on HulkAnimInstance_GetSynergyRideAnimation");
static_assert(offsetof(HulkAnimInstance_GetSynergyRideAnimation, PoseContext) == 0x000000, "Member 'HulkAnimInstance_GetSynergyRideAnimation::PoseContext' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance.GetSynergyRideStartAnimation
// 0x0010 (0x0010 - 0x0000)
struct HulkAnimInstance_GetSynergyRideStartAnimation final
{
public:
	struct FAnimUpdateContext                     PoseContext;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkAnimInstance_GetSynergyRideStartAnimation) == 0x000008, "Wrong alignment on HulkAnimInstance_GetSynergyRideStartAnimation");
static_assert(sizeof(HulkAnimInstance_GetSynergyRideStartAnimation) == 0x000010, "Wrong size on HulkAnimInstance_GetSynergyRideStartAnimation");
static_assert(offsetof(HulkAnimInstance_GetSynergyRideStartAnimation, PoseContext) == 0x000000, "Member 'HulkAnimInstance_GetSynergyRideStartAnimation::PoseContext' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance.OnTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct HulkAnimInstance_OnTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HulkAnimInstance_OnTagUpdated) == 0x000004, "Wrong alignment on HulkAnimInstance_OnTagUpdated");
static_assert(sizeof(HulkAnimInstance_OnTagUpdated) == 0x000010, "Wrong size on HulkAnimInstance_OnTagUpdated");
static_assert(offsetof(HulkAnimInstance_OnTagUpdated, TagUpdated) == 0x000000, "Member 'HulkAnimInstance_OnTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(HulkAnimInstance_OnTagUpdated, TagExists) == 0x00000C, "Member 'HulkAnimInstance_OnTagUpdated::TagExists' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance.UpdateSynergyRideStartNode
// 0x0020 (0x0020 - 0x0000)
struct HulkAnimInstance_UpdateSynergyRideStartNode final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkAnimInstance_UpdateSynergyRideStartNode) == 0x000008, "Wrong alignment on HulkAnimInstance_UpdateSynergyRideStartNode");
static_assert(sizeof(HulkAnimInstance_UpdateSynergyRideStartNode) == 0x000020, "Wrong size on HulkAnimInstance_UpdateSynergyRideStartNode");
static_assert(offsetof(HulkAnimInstance_UpdateSynergyRideStartNode, Context) == 0x000000, "Member 'HulkAnimInstance_UpdateSynergyRideStartNode::Context' has a wrong offset!");
static_assert(offsetof(HulkAnimInstance_UpdateSynergyRideStartNode, Node) == 0x000010, "Member 'HulkAnimInstance_UpdateSynergyRideStartNode::Node' has a wrong offset!");

// Function Hero_1011.HulkAnimInstance_101197.OnReleantSynergyRideNode
// 0x0020 (0x0020 - 0x0000)
struct HulkAnimInstance_101197_OnReleantSynergyRideNode final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkAnimInstance_101197_OnReleantSynergyRideNode) == 0x000008, "Wrong alignment on HulkAnimInstance_101197_OnReleantSynergyRideNode");
static_assert(sizeof(HulkAnimInstance_101197_OnReleantSynergyRideNode) == 0x000020, "Wrong size on HulkAnimInstance_101197_OnReleantSynergyRideNode");
static_assert(offsetof(HulkAnimInstance_101197_OnReleantSynergyRideNode, Context) == 0x000000, "Member 'HulkAnimInstance_101197_OnReleantSynergyRideNode::Context' has a wrong offset!");
static_assert(offsetof(HulkAnimInstance_101197_OnReleantSynergyRideNode, Node) == 0x000010, "Member 'HulkAnimInstance_101197_OnReleantSynergyRideNode::Node' has a wrong offset!");

// Function Hero_1011.HulkBannerAnimInstance.DetermineGroundMotionAnim_Implementation
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation) == 0x000004, "Wrong alignment on HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation");
static_assert(sizeof(HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation) == 0x000004, "Wrong size on HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation");
static_assert(offsetof(HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation, AnimIndex) == 0x000000, "Member 'HulkBannerAnimInstance_DetermineGroundMotionAnim_Implementation::AnimIndex' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.GetServerStartSmashTime
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_GetServerStartSmashTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_GetServerStartSmashTime) == 0x000004, "Wrong alignment on HulkBannerCharacter_GetServerStartSmashTime");
static_assert(sizeof(HulkBannerCharacter_GetServerStartSmashTime) == 0x000004, "Wrong size on HulkBannerCharacter_GetServerStartSmashTime");
static_assert(offsetof(HulkBannerCharacter_GetServerStartSmashTime, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_GetServerStartSmashTime::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.IsRecoverBuffApplyFailed
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_IsRecoverBuffApplyFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_IsRecoverBuffApplyFailed) == 0x000001, "Wrong alignment on HulkBannerCharacter_IsRecoverBuffApplyFailed");
static_assert(sizeof(HulkBannerCharacter_IsRecoverBuffApplyFailed) == 0x000001, "Wrong size on HulkBannerCharacter_IsRecoverBuffApplyFailed");
static_assert(offsetof(HulkBannerCharacter_IsRecoverBuffApplyFailed, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_IsRecoverBuffApplyFailed::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.IsShiftJump
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_IsShiftJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_IsShiftJump) == 0x000001, "Wrong alignment on HulkBannerCharacter_IsShiftJump");
static_assert(sizeof(HulkBannerCharacter_IsShiftJump) == 0x000001, "Wrong size on HulkBannerCharacter_IsShiftJump");
static_assert(offsetof(HulkBannerCharacter_IsShiftJump, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_IsShiftJump::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.OnSculptChanged
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_OnSculptChanged final
{
public:
	int32                                         SculptID;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_OnSculptChanged) == 0x000004, "Wrong alignment on HulkBannerCharacter_OnSculptChanged");
static_assert(sizeof(HulkBannerCharacter_OnSculptChanged) == 0x000004, "Wrong size on HulkBannerCharacter_OnSculptChanged");
static_assert(offsetof(HulkBannerCharacter_OnSculptChanged, SculptID) == 0x000000, "Member 'HulkBannerCharacter_OnSculptChanged::SculptID' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.OnSingleAbilityInitialized
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_OnSingleAbilityInitialized final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_OnSingleAbilityInitialized) == 0x000004, "Wrong alignment on HulkBannerCharacter_OnSingleAbilityInitialized");
static_assert(sizeof(HulkBannerCharacter_OnSingleAbilityInitialized) == 0x000004, "Wrong size on HulkBannerCharacter_OnSingleAbilityInitialized");
static_assert(offsetof(HulkBannerCharacter_OnSingleAbilityInitialized, AbilityID) == 0x000000, "Member 'HulkBannerCharacter_OnSingleAbilityInitialized::AbilityID' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.RecoverHealthFromMonster
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_RecoverHealthFromMonster final
{
public:
	float                                         InHealth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_RecoverHealthFromMonster) == 0x000004, "Wrong alignment on HulkBannerCharacter_RecoverHealthFromMonster");
static_assert(sizeof(HulkBannerCharacter_RecoverHealthFromMonster) == 0x000004, "Wrong size on HulkBannerCharacter_RecoverHealthFromMonster");
static_assert(offsetof(HulkBannerCharacter_RecoverHealthFromMonster, InHealth) == 0x000000, "Member 'HulkBannerCharacter_RecoverHealthFromMonster::InHealth' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.SetHeroHulkCachedEnergy
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_SetHeroHulkCachedEnergy final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_SetHeroHulkCachedEnergy) == 0x000004, "Wrong alignment on HulkBannerCharacter_SetHeroHulkCachedEnergy");
static_assert(sizeof(HulkBannerCharacter_SetHeroHulkCachedEnergy) == 0x000004, "Wrong size on HulkBannerCharacter_SetHeroHulkCachedEnergy");
static_assert(offsetof(HulkBannerCharacter_SetHeroHulkCachedEnergy, InValue) == 0x000000, "Member 'HulkBannerCharacter_SetHeroHulkCachedEnergy::InValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.SetIsRecoverBuffApplyFailed
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_SetIsRecoverBuffApplyFailed final
{
public:
	bool                                          InFailed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_SetIsRecoverBuffApplyFailed) == 0x000001, "Wrong alignment on HulkBannerCharacter_SetIsRecoverBuffApplyFailed");
static_assert(sizeof(HulkBannerCharacter_SetIsRecoverBuffApplyFailed) == 0x000001, "Wrong size on HulkBannerCharacter_SetIsRecoverBuffApplyFailed");
static_assert(offsetof(HulkBannerCharacter_SetIsRecoverBuffApplyFailed, InFailed) == 0x000000, "Member 'HulkBannerCharacter_SetIsRecoverBuffApplyFailed::InFailed' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.SetServerStartSmashTime
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_SetServerStartSmashTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_SetServerStartSmashTime) == 0x000004, "Wrong alignment on HulkBannerCharacter_SetServerStartSmashTime");
static_assert(sizeof(HulkBannerCharacter_SetServerStartSmashTime) == 0x000004, "Wrong size on HulkBannerCharacter_SetServerStartSmashTime");
static_assert(offsetof(HulkBannerCharacter_SetServerStartSmashTime, InTime) == 0x000000, "Member 'HulkBannerCharacter_SetServerStartSmashTime::InTime' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.SetSynergyExtraCapsuleComponentEnabled
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled) == 0x000001, "Wrong alignment on HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled");
static_assert(sizeof(HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled) == 0x000001, "Wrong size on HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled");
static_assert(offsetof(HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled, bEnabled) == 0x000000, "Member 'HulkBannerCharacter_SetSynergyExtraCapsuleComponentEnabled::bEnabled' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.TryCancelAbility
// 0x0010 (0x0010 - 0x0000)
struct HulkBannerCharacter_TryCancelAbility final
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_TryCancelAbility) == 0x000008, "Wrong alignment on HulkBannerCharacter_TryCancelAbility");
static_assert(sizeof(HulkBannerCharacter_TryCancelAbility) == 0x000010, "Wrong size on HulkBannerCharacter_TryCancelAbility");
static_assert(offsetof(HulkBannerCharacter_TryCancelAbility, AbilityIDs) == 0x000000, "Member 'HulkBannerCharacter_TryCancelAbility::AbilityIDs' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.TryToClimbWhenHit
// 0x01A0 (0x01A0 - 0x0000)
struct HulkBannerCharacter_TryToClimbWhenHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_TryToClimbWhenHit) == 0x000008, "Wrong alignment on HulkBannerCharacter_TryToClimbWhenHit");
static_assert(sizeof(HulkBannerCharacter_TryToClimbWhenHit) == 0x0001A0, "Wrong size on HulkBannerCharacter_TryToClimbWhenHit");
static_assert(offsetof(HulkBannerCharacter_TryToClimbWhenHit, HitComponent) == 0x000000, "Member 'HulkBannerCharacter_TryToClimbWhenHit::HitComponent' has a wrong offset!");
static_assert(offsetof(HulkBannerCharacter_TryToClimbWhenHit, OtherActor) == 0x000008, "Member 'HulkBannerCharacter_TryToClimbWhenHit::OtherActor' has a wrong offset!");
static_assert(offsetof(HulkBannerCharacter_TryToClimbWhenHit, OtherComp) == 0x000010, "Member 'HulkBannerCharacter_TryToClimbWhenHit::OtherComp' has a wrong offset!");
static_assert(offsetof(HulkBannerCharacter_TryToClimbWhenHit, NormalImpulse) == 0x000018, "Member 'HulkBannerCharacter_TryToClimbWhenHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(HulkBannerCharacter_TryToClimbWhenHit, Hit) == 0x000030, "Member 'HulkBannerCharacter_TryToClimbWhenHit::Hit' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.GetHeroHulkCachedEnergy
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerCharacter_GetHeroHulkCachedEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_GetHeroHulkCachedEnergy) == 0x000004, "Wrong alignment on HulkBannerCharacter_GetHeroHulkCachedEnergy");
static_assert(sizeof(HulkBannerCharacter_GetHeroHulkCachedEnergy) == 0x000004, "Wrong size on HulkBannerCharacter_GetHeroHulkCachedEnergy");
static_assert(offsetof(HulkBannerCharacter_GetHeroHulkCachedEnergy, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_GetHeroHulkCachedEnergy::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.IsBanner
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_IsBanner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_IsBanner) == 0x000001, "Wrong alignment on HulkBannerCharacter_IsBanner");
static_assert(sizeof(HulkBannerCharacter_IsBanner) == 0x000001, "Wrong size on HulkBannerCharacter_IsBanner");
static_assert(offsetof(HulkBannerCharacter_IsBanner, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_IsBanner::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.IsHeroHulk
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_IsHeroHulk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_IsHeroHulk) == 0x000001, "Wrong alignment on HulkBannerCharacter_IsHeroHulk");
static_assert(sizeof(HulkBannerCharacter_IsHeroHulk) == 0x000001, "Wrong size on HulkBannerCharacter_IsHeroHulk");
static_assert(offsetof(HulkBannerCharacter_IsHeroHulk, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_IsHeroHulk::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerCharacter.IsMonsterHulk
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerCharacter_IsMonsterHulk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerCharacter_IsMonsterHulk) == 0x000001, "Wrong alignment on HulkBannerCharacter_IsMonsterHulk");
static_assert(sizeof(HulkBannerCharacter_IsMonsterHulk) == 0x000001, "Wrong size on HulkBannerCharacter_IsMonsterHulk");
static_assert(offsetof(HulkBannerCharacter_IsMonsterHulk, ReturnValue) == 0x000000, "Member 'HulkBannerCharacter_IsMonsterHulk::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.CheckClimbedWallValid
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid, ReturnValue) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_CheckClimbedWallValid::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ClientEnterClimb
// 0x0040 (0x0040 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ClientEnterClimb final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ClientEnterClimb) == 0x000010, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ClientEnterClimb");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ClientEnterClimb) == 0x000040, "Wrong size on HulkBannerMoveLogicBaseComponent_ClientEnterClimb");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ClientEnterClimb, Location) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ClientEnterClimb::Location' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ClientEnterClimb, Rotation) == 0x000020, "Member 'HulkBannerMoveLogicBaseComponent_ClientEnterClimb::Rotation' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ClientLeaveClimb
// 0x0018 (0x0018 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ClientLeaveClimb final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ClientLeaveClimb) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ClientLeaveClimb");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ClientLeaveClimb) == 0x000018, "Wrong size on HulkBannerMoveLogicBaseComponent_ClientLeaveClimb");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ClientLeaveClimb, Location) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ClientLeaveClimb::Location' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ClientOnLanded
// 0x0178 (0x0178 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ClientOnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsServerShiftJumpCancelled;                        // 0x0170(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ClientOnLanded) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ClientOnLanded");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ClientOnLanded) == 0x000178, "Wrong size on HulkBannerMoveLogicBaseComponent_ClientOnLanded");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ClientOnLanded, Hit) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ClientOnLanded::Hit' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ClientOnLanded, IsServerShiftJumpCancelled) == 0x000170, "Member 'HulkBannerMoveLogicBaseComponent_ClientOnLanded::IsServerShiftJumpCancelled' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.IgnorePawnCollision
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_IgnorePawnCollision final
{
public:
	bool                                          bIgnoreCollision;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_IgnorePawnCollision) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_IgnorePawnCollision");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_IgnorePawnCollision) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_IgnorePawnCollision");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_IgnorePawnCollision, bIgnoreCollision) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_IgnorePawnCollision::bIgnoreCollision' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.IsShiftJumping
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_IsShiftJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_IsShiftJumping) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_IsShiftJumping");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_IsShiftJumping) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_IsShiftJumping");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_IsShiftJumping, ReturnValue) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_IsShiftJumping::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.MulticastActivateShiftJump
// 0x0014 (0x0014 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump final
{
public:
	float                                         JumpUpSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownSeconds;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpUpHeight;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownHeight;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOnWall;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump) == 0x000014, "Wrong size on HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump, JumpUpSeconds) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump::JumpUpSeconds' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump, JumpDownSeconds) == 0x000004, "Member 'HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump::JumpDownSeconds' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump, JumpUpHeight) == 0x000008, "Member 'HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump::JumpUpHeight' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump, JumpDownHeight) == 0x00000C, "Member 'HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump::JumpDownHeight' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump, bInOnWall) == 0x000010, "Member 'HulkBannerMoveLogicBaseComponent_MulticastActivateShiftJump::bInOnWall' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.OnFallingBlockedCallback
// 0x0170 (0x0170 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback) == 0x000170, "Wrong size on HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback, Hit) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_OnFallingBlockedCallback::Hit' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.OnLandedCallback
// 0x0170 (0x0170 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_OnLandedCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_OnLandedCallback) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_OnLandedCallback");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_OnLandedCallback) == 0x000170, "Wrong size on HulkBannerMoveLogicBaseComponent_OnLandedCallback");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_OnLandedCallback, Hit) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_OnLandedCallback::Hit' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.OnTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_OnTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_OnTagUpdated) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_OnTagUpdated");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_OnTagUpdated) == 0x000010, "Wrong size on HulkBannerMoveLogicBaseComponent_OnTagUpdated");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_OnTagUpdated, TagUpdated) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_OnTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_OnTagUpdated, TagExists) == 0x00000C, "Member 'HulkBannerMoveLogicBaseComponent_OnTagUpdated::TagExists' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.PredictShiftJumpDataWhenPressed
// 0x0038 (0x0038 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed final
{
public:
	struct FVector                                PredictVelocity;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromWall;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PredictionPath;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxFallSeconds;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpHeightDown;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed) == 0x000038, "Wrong size on HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed, PredictVelocity) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed::PredictVelocity' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed, bFromWall) == 0x000018, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed::bFromWall' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed, PredictionPath) == 0x000020, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed::PredictionPath' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed, MaxFallSeconds) == 0x000030, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed::MaxFallSeconds' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed, MaxJumpHeightDown) == 0x000034, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpDataWhenPressed::MaxJumpHeightDown' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.PredictShiftJumpVelocity
// 0x0038 (0x0038 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity final
{
public:
	float                                         PredictSpeed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoteRole;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InRotator;                                         // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity) == 0x000038, "Wrong size on HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity, PredictSpeed) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity::PredictSpeed' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity, bRemoteRole) == 0x000004, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity::bRemoteRole' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity, InRotator) == 0x000008, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity::InRotator' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity, ReturnValue) == 0x000020, "Member 'HulkBannerMoveLogicBaseComponent_PredictShiftJumpVelocity::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ServerSetClimbDirection
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection) == 0x000004, "Wrong size on HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection, Yaw) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ServerSetClimbDirection::Yaw' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ServerSetClimbState
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ServerSetClimbState final
{
public:
	ECLIMBSTATE                                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ServerSetClimbState) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ServerSetClimbState");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ServerSetClimbState) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_ServerSetClimbState");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ServerSetClimbState, State) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ServerSetClimbState::State' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.SetClimbParam
// 0x0010 (0x0010 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_SetClimbParam final
{
public:
	struct FHulkClimbParam                        InClimbParam;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_SetClimbParam) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_SetClimbParam");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_SetClimbParam) == 0x000010, "Wrong size on HulkBannerMoveLogicBaseComponent_SetClimbParam");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_SetClimbParam, InClimbParam) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_SetClimbParam::InClimbParam' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.SetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_SetGravityScale final
{
public:
	float                                         InGravityScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_SetGravityScale) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_SetGravityScale");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_SetGravityScale) == 0x000004, "Wrong size on HulkBannerMoveLogicBaseComponent_SetGravityScale");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_SetGravityScale, InGravityScale) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_SetGravityScale::InGravityScale' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.SetHulkJumpParam
// 0x0078 (0x0078 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_SetHulkJumpParam final
{
public:
	struct FHulkJumpParam                         InJumpParam;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_SetHulkJumpParam) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_SetHulkJumpParam");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_SetHulkJumpParam) == 0x000078, "Wrong size on HulkBannerMoveLogicBaseComponent_SetHulkJumpParam");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_SetHulkJumpParam, InJumpParam) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_SetHulkJumpParam::InJumpParam' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ShiftJump
// 0x0008 (0x0008 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ShiftJump final
{
public:
	bool                                          bInOnWall;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnCollisionIgnoreDuration;                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ShiftJump) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ShiftJump");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ShiftJump) == 0x000008, "Wrong size on HulkBannerMoveLogicBaseComponent_ShiftJump");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ShiftJump, bInOnWall) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ShiftJump::bInOnWall' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ShiftJump, PawnCollisionIgnoreDuration) == 0x000004, "Member 'HulkBannerMoveLogicBaseComponent_ShiftJump::PawnCollisionIgnoreDuration' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.ShiftJumpWithCustomSpeed
// 0x000C (0x000C - 0x0000)
struct HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed final
{
public:
	float                                         InitSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnWall;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnCollisionIgnoreDuration;                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed) == 0x00000C, "Wrong size on HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed, InitSpeed) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed::InitSpeed' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed, bIsOnWall) == 0x000004, "Member 'HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed::bIsOnWall' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed, PawnCollisionIgnoreDuration) == 0x000008, "Member 'HulkBannerMoveLogicBaseComponent_ShiftJumpWithCustomSpeed::PawnCollisionIgnoreDuration' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.StopShiftJump
// 0x0002 (0x0002 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_StopShiftJump final
{
public:
	bool                                          bCancelNormalJump;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetCacheParam;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_StopShiftJump) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_StopShiftJump");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_StopShiftJump) == 0x000002, "Wrong size on HulkBannerMoveLogicBaseComponent_StopShiftJump");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_StopShiftJump, bCancelNormalJump) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_StopShiftJump::bCancelNormalJump' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_StopShiftJump, bResetCacheParam) == 0x000001, "Member 'HulkBannerMoveLogicBaseComponent_StopShiftJump::bResetCacheParam' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.UpdateClimbCustomMove
// 0x0004 (0x0004 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove) == 0x000004, "Wrong alignment on HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove) == 0x000004, "Wrong size on HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove, DeltaTime) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_UpdateClimbCustomMove::DeltaTime' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.UpdateShiftJumpUpState
// 0x0038 (0x0038 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldLocation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState) == 0x000008, "Wrong alignment on HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState) == 0x000038, "Wrong size on HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState, DeltaSeconds) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState, OldLocation) == 0x000008, "Member 'HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState::OldLocation' has a wrong offset!");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState, OldVelocity) == 0x000020, "Member 'HulkBannerMoveLogicBaseComponent_UpdateShiftJumpUpState::OldVelocity' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.IsClimbing
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_IsClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_IsClimbing) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_IsClimbing");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_IsClimbing) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_IsClimbing");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_IsClimbing, ReturnValue) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_IsClimbing::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.IsClimbingWithAbilityStateCheck
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck, ReturnValue) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_IsClimbingWithAbilityStateCheck::ReturnValue' has a wrong offset!");

// Function Hero_1011.HulkBannerMoveLogicBaseComponent.IsHanging
// 0x0001 (0x0001 - 0x0000)
struct HulkBannerMoveLogicBaseComponent_IsHanging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HulkBannerMoveLogicBaseComponent_IsHanging) == 0x000001, "Wrong alignment on HulkBannerMoveLogicBaseComponent_IsHanging");
static_assert(sizeof(HulkBannerMoveLogicBaseComponent_IsHanging) == 0x000001, "Wrong size on HulkBannerMoveLogicBaseComponent_IsHanging");
static_assert(offsetof(HulkBannerMoveLogicBaseComponent_IsHanging, ReturnValue) == 0x000000, "Member 'HulkBannerMoveLogicBaseComponent_IsHanging::ReturnValue' has a wrong offset!");

// Function Hero_1011.TabData_1011.AddTabDataValue
// 0x0018 (0x0018 - 0x0000)
struct TabData_1011_AddTabDataValue final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1011_AddTabDataValue) == 0x000008, "Wrong alignment on TabData_1011_AddTabDataValue");
static_assert(sizeof(TabData_1011_AddTabDataValue) == 0x000018, "Wrong size on TabData_1011_AddTabDataValue");
static_assert(offsetof(TabData_1011_AddTabDataValue, InSource) == 0x000000, "Member 'TabData_1011_AddTabDataValue::InSource' has a wrong offset!");
static_assert(offsetof(TabData_1011_AddTabDataValue, InTarget) == 0x000008, "Member 'TabData_1011_AddTabDataValue::InTarget' has a wrong offset!");
static_assert(offsetof(TabData_1011_AddTabDataValue, BuffID) == 0x000010, "Member 'TabData_1011_AddTabDataValue::BuffID' has a wrong offset!");

// Function Hero_1011.TabData_1011.OnActorDeath
// 0x0030 (0x0030 - 0x0000)
struct TabData_1011_OnActorDeath final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1011_OnActorDeath) == 0x000008, "Wrong alignment on TabData_1011_OnActorDeath");
static_assert(sizeof(TabData_1011_OnActorDeath) == 0x000030, "Wrong size on TabData_1011_OnActorDeath");
static_assert(offsetof(TabData_1011_OnActorDeath, Killer) == 0x000000, "Member 'TabData_1011_OnActorDeath::Killer' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnActorDeath, Target) == 0x000008, "Member 'TabData_1011_OnActorDeath::Target' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnActorDeath, ModifierParameterHandle) == 0x000010, "Member 'TabData_1011_OnActorDeath::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnActorDeath, ExtraData) == 0x000028, "Member 'TabData_1011_OnActorDeath::ExtraData' has a wrong offset!");

// Function Hero_1011.TabData_1011.OnBuffApplied
// 0x0020 (0x0020 - 0x0000)
struct TabData_1011_OnBuffApplied final
{
public:
	class UAbilitySystemComponent*                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecStackHandle         EffectSpecStackHandle;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabData_1011_OnBuffApplied) == 0x000008, "Wrong alignment on TabData_1011_OnBuffApplied");
static_assert(sizeof(TabData_1011_OnBuffApplied) == 0x000020, "Wrong size on TabData_1011_OnBuffApplied");
static_assert(offsetof(TabData_1011_OnBuffApplied, Source) == 0x000000, "Member 'TabData_1011_OnBuffApplied::Source' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnBuffApplied, Target) == 0x000008, "Member 'TabData_1011_OnBuffApplied::Target' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnBuffApplied, EffectSpecStackHandle) == 0x000010, "Member 'TabData_1011_OnBuffApplied::EffectSpecStackHandle' has a wrong offset!");
static_assert(offsetof(TabData_1011_OnBuffApplied, EffectHandle) == 0x000018, "Member 'TabData_1011_OnBuffApplied::EffectHandle' has a wrong offset!");

}

