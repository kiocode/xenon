#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_ThrowBall

#include "Basic.hpp"

#include "Marvel_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// PythonClass PyAbility_ThrowBall.PyCue_Summoned_Loop_Ball
// 0x0108 (0x0F98 - 0x0E90)
class APyCue_Summoned_Loop_Ball final : public AMarvelCueNotify_Summoned
{
public:
	class UNiagaraSystem*                         HitCharacterFX;                                    // 0x0E90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         HitSceneFX;                                        // 0x0E98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeight;                                      // 0x0EA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0EA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFXActiveSpeed;                               // 0x0EA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFXAngle_L;                                   // 0x0EAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFXAngle_R;                                   // 0x0EB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldingBallLerpSpeed;                              // 0x0EB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HoldingBallRotSpeed;                               // 0x0EB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 StopLerpAbilities;                                 // 0x0ED0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         StopLerpSpeed;                                     // 0x0EE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WidgetColor_Enemy;                                 // 0x0EE4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WidgetColor_Ally;                                  // 0x0EF4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F04[0x4];                                      // 0x0F04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         HitAirWallEffect;                                  // 0x0F08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          BallRollingAudioEvent;                             // 0x0F10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallRollingAudioActiveSpeed;                       // 0x0F18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1C[0x4];                                      // 0x0F1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BallSpeedRTPC;                                     // 0x0F20(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallRollingCheckTime;                              // 0x0F30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F34[0x4];                                      // 0x0F34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          BallHitAudioEvent;                                 // 0x0F38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BallHitRTPC;                                       // 0x0F40(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BallMassRTPC;                                      // 0x0F50(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          BallFlyAudioEvent;                                 // 0x0F60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BallFlyHeightDeter;                                // 0x0F68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BallFlyAudioFadeInTime;                            // 0x0F6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BallFlyAudioFadeOutTime;                           // 0x0F70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F74[0x4];                                      // 0x0F74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BallFlySpeedRTPC;                                  // 0x0F78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AllyGotBallAudioEvent;                             // 0x0F88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          EnemyGotBallAudioEvent;                            // 0x0F90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void ReceiveTick(float DeltaSeconds);
	void OnThrowStateChanged(bool ThrowState);
	void OnHoldingStateChanged(bool HoldingState);
	void OnHolderChanged(class AMarvelBaseCharacter* NewHolder);
	void OnCollision(const struct FHitResult& InHitResult, bool bIsThrowing, const struct FVector& Impulse);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Summoned_Loop_Ball">();
	}
	static class APyCue_Summoned_Loop_Ball* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Summoned_Loop_Ball>();
	}
};
static_assert(alignof(APyCue_Summoned_Loop_Ball) == 0x000008, "Wrong alignment on APyCue_Summoned_Loop_Ball");
static_assert(sizeof(APyCue_Summoned_Loop_Ball) == 0x000F98, "Wrong size on APyCue_Summoned_Loop_Ball");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, HitCharacterFX) == 0x000E90, "Member 'APyCue_Summoned_Loop_Ball::HitCharacterFX' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, HitSceneFX) == 0x000E98, "Member 'APyCue_Summoned_Loop_Ball::HitSceneFX' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, GroundHeight) == 0x000EA0, "Member 'APyCue_Summoned_Loop_Ball::GroundHeight' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, SphereRadius) == 0x000EA4, "Member 'APyCue_Summoned_Loop_Ball::SphereRadius' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, GroundFXActiveSpeed) == 0x000EA8, "Member 'APyCue_Summoned_Loop_Ball::GroundFXActiveSpeed' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, GroundFXAngle_L) == 0x000EAC, "Member 'APyCue_Summoned_Loop_Ball::GroundFXAngle_L' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, GroundFXAngle_R) == 0x000EB0, "Member 'APyCue_Summoned_Loop_Ball::GroundFXAngle_R' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, HoldingBallLerpSpeed) == 0x000EB4, "Member 'APyCue_Summoned_Loop_Ball::HoldingBallLerpSpeed' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, HoldingBallRotSpeed) == 0x000EB8, "Member 'APyCue_Summoned_Loop_Ball::HoldingBallRotSpeed' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, StopLerpAbilities) == 0x000ED0, "Member 'APyCue_Summoned_Loop_Ball::StopLerpAbilities' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, StopLerpSpeed) == 0x000EE0, "Member 'APyCue_Summoned_Loop_Ball::StopLerpSpeed' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, WidgetColor_Enemy) == 0x000EE4, "Member 'APyCue_Summoned_Loop_Ball::WidgetColor_Enemy' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, WidgetColor_Ally) == 0x000EF4, "Member 'APyCue_Summoned_Loop_Ball::WidgetColor_Ally' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, HitAirWallEffect) == 0x000F08, "Member 'APyCue_Summoned_Loop_Ball::HitAirWallEffect' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallRollingAudioEvent) == 0x000F10, "Member 'APyCue_Summoned_Loop_Ball::BallRollingAudioEvent' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallRollingAudioActiveSpeed) == 0x000F18, "Member 'APyCue_Summoned_Loop_Ball::BallRollingAudioActiveSpeed' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallSpeedRTPC) == 0x000F20, "Member 'APyCue_Summoned_Loop_Ball::BallSpeedRTPC' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallRollingCheckTime) == 0x000F30, "Member 'APyCue_Summoned_Loop_Ball::BallRollingCheckTime' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallHitAudioEvent) == 0x000F38, "Member 'APyCue_Summoned_Loop_Ball::BallHitAudioEvent' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallHitRTPC) == 0x000F40, "Member 'APyCue_Summoned_Loop_Ball::BallHitRTPC' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallMassRTPC) == 0x000F50, "Member 'APyCue_Summoned_Loop_Ball::BallMassRTPC' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallFlyAudioEvent) == 0x000F60, "Member 'APyCue_Summoned_Loop_Ball::BallFlyAudioEvent' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallFlyHeightDeter) == 0x000F68, "Member 'APyCue_Summoned_Loop_Ball::BallFlyHeightDeter' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallFlyAudioFadeInTime) == 0x000F6C, "Member 'APyCue_Summoned_Loop_Ball::BallFlyAudioFadeInTime' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallFlyAudioFadeOutTime) == 0x000F70, "Member 'APyCue_Summoned_Loop_Ball::BallFlyAudioFadeOutTime' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, BallFlySpeedRTPC) == 0x000F78, "Member 'APyCue_Summoned_Loop_Ball::BallFlySpeedRTPC' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, AllyGotBallAudioEvent) == 0x000F88, "Member 'APyCue_Summoned_Loop_Ball::AllyGotBallAudioEvent' has a wrong offset!");
static_assert(offsetof(APyCue_Summoned_Loop_Ball, EnemyGotBallAudioEvent) == 0x000F90, "Member 'APyCue_Summoned_Loop_Ball::EnemyGotBallAudioEvent' has a wrong offset!");

// PythonClass PyAbility_ThrowBall.PySummonedComp_Ball
// 0x00D0 (0x0D70 - 0x0CA0)
class UPySummonedComp_Ball final : public UMarvelSummonedComponent
{
public:
	int32                                         Status;                                            // 0x0CA0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA4[0x4];                                      // 0x0CA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   Holder;                                            // 0x0CA8(0x0008)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrowTeamID;                                       // 0x0CB0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB4[0x4];                                      // 0x0CB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeBias;                                      // 0x0CB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HoldingBallTag;                                    // 0x0CD0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldingBallBuffID;                                 // 0x0CDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForbidHoldBallBuffID;                              // 0x0CE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrowForbidHoldBallBuffID;                         // 0x0CE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CancelHoldingBuffIDs;                              // 0x0CE8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         ThrowForbidHoldTime;                               // 0x0CF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForbidHoldTime;                                    // 0x0CFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ThrowVelocityCurve;                                // 0x0D00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            NewThrowVelocityCurve;                             // 0x0D08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnThrowStateChanged;                               // 0x0D10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHoldingStateChanged;                             // 0x0D20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCollision;                                       // 0x0D30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnThrowed;                                         // 0x0D40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHolderChanged;                                   // 0x0D50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTackleOccurred;                                  // 0x0D60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();
	void OnMapLoaded();
	void OnRep_ActorStatus();
	void OnRep_ThrowTeamID();
	void OnThrowStateChanged__DelegateSignature(bool ThrowState);
	void OnHoldingStateChanged__DelegateSignature(bool HoldingState);
	void OnCollision__DelegateSignature(const struct FHitResult& OutHitResult, bool bIsThrowing, const struct FVector& Impulse);
	void OnThrowed__DelegateSignature(class AMarvelBaseCharacter* LastHolder, bool bIsLongPass);
	void OnHolderChanged__DelegateSignature(class AMarvelBaseCharacter* NewHolder);
	void OnTackleOccurred__DelegateSignature(class AMarvelBaseCharacter* Tackler, class AMarvelBaseCharacter* SourceCharacter, int32 AbilityID_0);
	void OnRep_Holder();
	void OnComponentHit(class UPrimitiveComponent* Comp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& Impulse, const struct FHitResult& Result);
	void MulticastOnComponentHit(const struct FHitResult& Result, bool bIsThrowing, const struct FVector& Impulse);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PySummonedComp_Ball">();
	}
	static class UPySummonedComp_Ball* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPySummonedComp_Ball>();
	}
};
static_assert(alignof(UPySummonedComp_Ball) == 0x000010, "Wrong alignment on UPySummonedComp_Ball");
static_assert(sizeof(UPySummonedComp_Ball) == 0x000D70, "Wrong size on UPySummonedComp_Ball");
static_assert(offsetof(UPySummonedComp_Ball, Status) == 0x000CA0, "Member 'UPySummonedComp_Ball::Status' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, Holder) == 0x000CA8, "Member 'UPySummonedComp_Ball::Holder' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ThrowTeamID) == 0x000CB0, "Member 'UPySummonedComp_Ball::ThrowTeamID' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, RelativeBias) == 0x000CB8, "Member 'UPySummonedComp_Ball::RelativeBias' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, HoldingBallTag) == 0x000CD0, "Member 'UPySummonedComp_Ball::HoldingBallTag' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, HoldingBallBuffID) == 0x000CDC, "Member 'UPySummonedComp_Ball::HoldingBallBuffID' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ForbidHoldBallBuffID) == 0x000CE0, "Member 'UPySummonedComp_Ball::ForbidHoldBallBuffID' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ThrowForbidHoldBallBuffID) == 0x000CE4, "Member 'UPySummonedComp_Ball::ThrowForbidHoldBallBuffID' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, CancelHoldingBuffIDs) == 0x000CE8, "Member 'UPySummonedComp_Ball::CancelHoldingBuffIDs' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ThrowForbidHoldTime) == 0x000CF8, "Member 'UPySummonedComp_Ball::ThrowForbidHoldTime' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ForbidHoldTime) == 0x000CFC, "Member 'UPySummonedComp_Ball::ForbidHoldTime' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, ThrowVelocityCurve) == 0x000D00, "Member 'UPySummonedComp_Ball::ThrowVelocityCurve' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, NewThrowVelocityCurve) == 0x000D08, "Member 'UPySummonedComp_Ball::NewThrowVelocityCurve' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnThrowStateChanged) == 0x000D10, "Member 'UPySummonedComp_Ball::OnThrowStateChanged' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnHoldingStateChanged) == 0x000D20, "Member 'UPySummonedComp_Ball::OnHoldingStateChanged' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnCollision) == 0x000D30, "Member 'UPySummonedComp_Ball::OnCollision' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnThrowed) == 0x000D40, "Member 'UPySummonedComp_Ball::OnThrowed' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnHolderChanged) == 0x000D50, "Member 'UPySummonedComp_Ball::OnHolderChanged' has a wrong offset!");
static_assert(offsetof(UPySummonedComp_Ball, OnTackleOccurred) == 0x000D60, "Member 'UPySummonedComp_Ball::OnTackleOccurred' has a wrong offset!");

// PythonClass PyAbility_ThrowBall.PyUIController_ThrowBall
// 0x0008 (0x0C68 - 0x0C60)
class UPyUIController_ThrowBall final : public UUIC_Ability
{
public:
	float                                         MaxDuration;                                       // 0x0C60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnInit();
	void ReceiveTick(float DeltaTime);
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_ThrowBall">();
	}
	static class UPyUIController_ThrowBall* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_ThrowBall>();
	}
};
static_assert(alignof(UPyUIController_ThrowBall) == 0x000008, "Wrong alignment on UPyUIController_ThrowBall");
static_assert(sizeof(UPyUIController_ThrowBall) == 0x000C68, "Wrong size on UPyUIController_ThrowBall");
static_assert(offsetof(UPyUIController_ThrowBall, MaxDuration) == 0x000C60, "Member 'UPyUIController_ThrowBall::MaxDuration' has a wrong offset!");

// PythonClass PyAbility_ThrowBall.PyOverlapHandlerComponent_Ball
// 0x0000 (0x0C30 - 0x0C30)
class UPyOverlapHandlerComponent_Ball final : public UOverlapHandlerComponent
{
public:
	void ReceiveBeginPlay();
	void ApplyEffectOnActorOverlap(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyOverlapHandlerComponent_Ball">();
	}
	static class UPyOverlapHandlerComponent_Ball* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyOverlapHandlerComponent_Ball>();
	}
};
static_assert(alignof(UPyOverlapHandlerComponent_Ball) == 0x000008, "Wrong alignment on UPyOverlapHandlerComponent_Ball");
static_assert(sizeof(UPyOverlapHandlerComponent_Ball) == 0x000C30, "Wrong size on UPyOverlapHandlerComponent_Ball");

// PythonClass PyAbility_ThrowBall.PyCue_Buff_20050101
// 0x0060 (0x1098 - 0x1038)
class APyCue_Buff_20050101 final : public AMarvelCueNotify_Buff
{
public:
	class FString                                 OpenParemName;                                     // 0x1038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorParamName;                                    // 0x1048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FractionParamName;                                 // 0x1058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FresnelColor;                                      // 0x1068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FresnelParam;                                      // 0x1080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Buff_20050101">();
	}
	static class APyCue_Buff_20050101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Buff_20050101>();
	}
};
static_assert(alignof(APyCue_Buff_20050101) == 0x000008, "Wrong alignment on APyCue_Buff_20050101");
static_assert(sizeof(APyCue_Buff_20050101) == 0x001098, "Wrong size on APyCue_Buff_20050101");
static_assert(offsetof(APyCue_Buff_20050101, OpenParemName) == 0x001038, "Member 'APyCue_Buff_20050101::OpenParemName' has a wrong offset!");
static_assert(offsetof(APyCue_Buff_20050101, ColorParamName) == 0x001048, "Member 'APyCue_Buff_20050101::ColorParamName' has a wrong offset!");
static_assert(offsetof(APyCue_Buff_20050101, FractionParamName) == 0x001058, "Member 'APyCue_Buff_20050101::FractionParamName' has a wrong offset!");
static_assert(offsetof(APyCue_Buff_20050101, FresnelColor) == 0x001068, "Member 'APyCue_Buff_20050101::FresnelColor' has a wrong offset!");
static_assert(offsetof(APyCue_Buff_20050101, FresnelParam) == 0x001080, "Member 'APyCue_Buff_20050101::FresnelParam' has a wrong offset!");

// PythonClass PyAbility_ThrowBall.PyConfig_ThrowBall
// 0x0008 (0x00D8 - 0x00D0)
class UPyConfig_ThrowBall final : public UMarvelAbilityConfig_LongPressTrigger
{
public:
	bool                                          bIsLongPass;                                       // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_ThrowBall">();
	}
	static class UPyConfig_ThrowBall* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_ThrowBall>();
	}
};
static_assert(alignof(UPyConfig_ThrowBall) == 0x000008, "Wrong alignment on UPyConfig_ThrowBall");
static_assert(sizeof(UPyConfig_ThrowBall) == 0x0000D8, "Wrong size on UPyConfig_ThrowBall");
static_assert(offsetof(UPyConfig_ThrowBall, bIsLongPass) == 0x0000D0, "Member 'UPyConfig_ThrowBall::bIsLongPass' has a wrong offset!");

// PythonClass PyAbility_ThrowBall.PyAbility_ThrowBall
// 0x0000 (0x2598 - 0x2598)
class UPyAbility_ThrowBall : public UMarvelAbility_LongPressTrigger
{
public:
	void BeginPlay();
	void NativeOnMontageCompleted(const class FString& Tag);
	void NativeOnMontageBlendOut(const class FString& Tag);
	void NativeOnMontageInterrupted(const class FString& Tag);
	void NativeOnMontageCancelled(const class FString& Tag);
	void K2_ActivateGameplay();
	void K2_TriggerGameplay(float HoldTime);
	void MissileEventNotify();
	void ServerThrowEndPoint(const struct FVector& TargetPoint, float HoldTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_ThrowBall">();
	}
	static class UPyAbility_ThrowBall* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_ThrowBall>();
	}
};
static_assert(alignof(UPyAbility_ThrowBall) == 0x000008, "Wrong alignment on UPyAbility_ThrowBall");
static_assert(sizeof(UPyAbility_ThrowBall) == 0x002598, "Wrong size on UPyAbility_ThrowBall");

}

