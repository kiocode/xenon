#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1026

#include "Basic.hpp"

#include "Hero_1026_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Hero_1026.Cue_Ability_Loop_10260101.OnDeath
// 0x0028 (0x0028 - 0x0000)
struct Cue_Ability_Loop_10260101_OnDeath final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InSourceAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10260101_OnDeath) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10260101_OnDeath");
static_assert(sizeof(Cue_Ability_Loop_10260101_OnDeath) == 0x000028, "Wrong size on Cue_Ability_Loop_10260101_OnDeath");
static_assert(offsetof(Cue_Ability_Loop_10260101_OnDeath, InSource) == 0x000000, "Member 'Cue_Ability_Loop_10260101_OnDeath::InSource' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10260101_OnDeath, InSourceAvatar) == 0x000008, "Member 'Cue_Ability_Loop_10260101_OnDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10260101_OnDeath, ModifierParameterHandle) == 0x000010, "Member 'Cue_Ability_Loop_10260101_OnDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1026.Cue_Ability_Loop_10260101.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Cue_Ability_Loop_10260101_OnTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10260101_OnTagUpdate) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10260101_OnTagUpdate");
static_assert(sizeof(Cue_Ability_Loop_10260101_OnTagUpdate) == 0x000010, "Wrong size on Cue_Ability_Loop_10260101_OnTagUpdate");
static_assert(offsetof(Cue_Ability_Loop_10260101_OnTagUpdate, TagUpdated) == 0x000000, "Member 'Cue_Ability_Loop_10260101_OnTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10260101_OnTagUpdate, bTagExists) == 0x00000C, "Member 'Cue_Ability_Loop_10260101_OnTagUpdate::bTagExists' has a wrong offset!");

// Function Hero_1026.Cue_Ability_Loop_10260101.UpdateMaterials
// 0x0004 (0x0004 - 0x0000)
struct Cue_Ability_Loop_10260101_UpdateMaterials final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10260101_UpdateMaterials) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10260101_UpdateMaterials");
static_assert(sizeof(Cue_Ability_Loop_10260101_UpdateMaterials) == 0x000004, "Wrong size on Cue_Ability_Loop_10260101_UpdateMaterials");
static_assert(offsetof(Cue_Ability_Loop_10260101_UpdateMaterials, CurrentValue) == 0x000000, "Member 'Cue_Ability_Loop_10260101_UpdateMaterials::CurrentValue' has a wrong offset!");

// Function Hero_1026.TraceComponent_10261101.OnTraceResult
// 0x0018 (0x0018 - 0x0000)
struct TraceComponent_10261101_OnTraceResult final
{
public:
	class UObject*                                TraceSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceComponent_10261101_OnTraceResult) == 0x000008, "Wrong alignment on TraceComponent_10261101_OnTraceResult");
static_assert(sizeof(TraceComponent_10261101_OnTraceResult) == 0x000018, "Wrong size on TraceComponent_10261101_OnTraceResult");
static_assert(offsetof(TraceComponent_10261101_OnTraceResult, TraceSource) == 0x000000, "Member 'TraceComponent_10261101_OnTraceResult::TraceSource' has a wrong offset!");
static_assert(offsetof(TraceComponent_10261101_OnTraceResult, HitResults) == 0x000008, "Member 'TraceComponent_10261101_OnTraceResult::HitResults' has a wrong offset!");

// Function Hero_1026.Ability_102611.SetHitNormal
// 0x0018 (0x0018 - 0x0000)
struct Ability_102611_SetHitNormal final
{
public:
	struct FVector                                InNormal;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102611_SetHitNormal) == 0x000008, "Wrong alignment on Ability_102611_SetHitNormal");
static_assert(sizeof(Ability_102611_SetHitNormal) == 0x000018, "Wrong size on Ability_102611_SetHitNormal");
static_assert(offsetof(Ability_102611_SetHitNormal, InNormal) == 0x000000, "Member 'Ability_102611_SetHitNormal::InNormal' has a wrong offset!");

// Function Hero_1026.Ability_102611.GetIsValidActivated
// 0x0001 (0x0001 - 0x0000)
struct Ability_102611_GetIsValidActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102611_GetIsValidActivated) == 0x000001, "Wrong alignment on Ability_102611_GetIsValidActivated");
static_assert(sizeof(Ability_102611_GetIsValidActivated) == 0x000001, "Wrong size on Ability_102611_GetIsValidActivated");
static_assert(offsetof(Ability_102611_GetIsValidActivated, ReturnValue) == 0x000000, "Member 'Ability_102611_GetIsValidActivated::ReturnValue' has a wrong offset!");

// Function Hero_1026.Ability_102641.OnAbilityHit
// 0x0030 (0x0030 - 0x0000)
struct Ability_102641_OnAbilityHit final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityHitParams                HitParams;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102641_OnAbilityHit) == 0x000008, "Wrong alignment on Ability_102641_OnAbilityHit");
static_assert(sizeof(Ability_102641_OnAbilityHit) == 0x000030, "Wrong size on Ability_102641_OnAbilityHit");
static_assert(offsetof(Ability_102641_OnAbilityHit, InAbility) == 0x000000, "Member 'Ability_102641_OnAbilityHit::InAbility' has a wrong offset!");
static_assert(offsetof(Ability_102641_OnAbilityHit, HitParams) == 0x000008, "Member 'Ability_102641_OnAbilityHit::HitParams' has a wrong offset!");
static_assert(offsetof(Ability_102641_OnAbilityHit, HitResults) == 0x000020, "Member 'Ability_102641_OnAbilityHit::HitResults' has a wrong offset!");

// Function Hero_1026.Ability_102641.OnDashTaskFinished
// 0x0001 (0x0001 - 0x0000)
struct Ability_102641_OnDashTaskFinished final
{
public:
	EDashStopReason                               Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102641_OnDashTaskFinished) == 0x000001, "Wrong alignment on Ability_102641_OnDashTaskFinished");
static_assert(sizeof(Ability_102641_OnDashTaskFinished) == 0x000001, "Wrong size on Ability_102641_OnDashTaskFinished");
static_assert(offsetof(Ability_102641_OnDashTaskFinished, Reason) == 0x000000, "Member 'Ability_102641_OnDashTaskFinished::Reason' has a wrong offset!");

// Function Hero_1026.Ability_102641.OnTranslatedByPortal
// 0x0008 (0x0008 - 0x0000)
struct Ability_102641_OnTranslatedByPortal final
{
public:
	class APortalViewActor*                       Portal;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102641_OnTranslatedByPortal) == 0x000008, "Wrong alignment on Ability_102641_OnTranslatedByPortal");
static_assert(sizeof(Ability_102641_OnTranslatedByPortal) == 0x000008, "Wrong size on Ability_102641_OnTranslatedByPortal");
static_assert(offsetof(Ability_102641_OnTranslatedByPortal, Portal) == 0x000000, "Member 'Ability_102641_OnTranslatedByPortal::Portal' has a wrong offset!");

// Function Hero_1026.Ability_102641.StartLimitCameraTask
// 0x0020 (0x0020 - 0x0000)
struct Ability_102641_StartLimitCameraTask final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotator;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102641_StartLimitCameraTask) == 0x000008, "Wrong alignment on Ability_102641_StartLimitCameraTask");
static_assert(sizeof(Ability_102641_StartLimitCameraTask) == 0x000020, "Wrong size on Ability_102641_StartLimitCameraTask");
static_assert(offsetof(Ability_102641_StartLimitCameraTask, TimeSeconds) == 0x000000, "Member 'Ability_102641_StartLimitCameraTask::TimeSeconds' has a wrong offset!");
static_assert(offsetof(Ability_102641_StartLimitCameraTask, TargetRotator) == 0x000008, "Member 'Ability_102641_StartLimitCameraTask::TargetRotator' has a wrong offset!");

// Function Hero_1026.Ability_102641.TickUpdateCameraLimitation
// 0x0004 (0x0004 - 0x0000)
struct Ability_102641_TickUpdateCameraLimitation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102641_TickUpdateCameraLimitation) == 0x000004, "Wrong alignment on Ability_102641_TickUpdateCameraLimitation");
static_assert(sizeof(Ability_102641_TickUpdateCameraLimitation) == 0x000004, "Wrong size on Ability_102641_TickUpdateCameraLimitation");
static_assert(offsetof(Ability_102641_TickUpdateCameraLimitation, DeltaTime) == 0x000000, "Member 'Ability_102641_TickUpdateCameraLimitation::DeltaTime' has a wrong offset!");

// Function Hero_1026.Ability_102661.GetCurrentStart
// 0x0001 (0x0001 - 0x0000)
struct Ability_102661_GetCurrentStart final
{
public:
	ERush_State_102661                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102661_GetCurrentStart) == 0x000001, "Wrong alignment on Ability_102661_GetCurrentStart");
static_assert(sizeof(Ability_102661_GetCurrentStart) == 0x000001, "Wrong size on Ability_102661_GetCurrentStart");
static_assert(offsetof(Ability_102661_GetCurrentStart, ReturnValue) == 0x000000, "Member 'Ability_102661_GetCurrentStart::ReturnValue' has a wrong offset!");

// Function Hero_1026.Ability_102661.SetCurrentStat
// 0x0001 (0x0001 - 0x0000)
struct Ability_102661_SetCurrentStat final
{
public:
	ERush_State_102661                            NewStat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102661_SetCurrentStat) == 0x000001, "Wrong alignment on Ability_102661_SetCurrentStat");
static_assert(sizeof(Ability_102661_SetCurrentStat) == 0x000001, "Wrong size on Ability_102661_SetCurrentStat");
static_assert(offsetof(Ability_102661_SetCurrentStat, NewStat) == 0x000000, "Member 'Ability_102661_SetCurrentStat::NewStat' has a wrong offset!");

// Function Hero_1026.BlackPantherAnimInstance.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BlackPantherAnimInstance_OnStateChanged final
{
public:
	ERush_State_102661                            CurrentStat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackPantherAnimInstance_OnStateChanged) == 0x000001, "Wrong alignment on BlackPantherAnimInstance_OnStateChanged");
static_assert(sizeof(BlackPantherAnimInstance_OnStateChanged) == 0x000001, "Wrong size on BlackPantherAnimInstance_OnStateChanged");
static_assert(offsetof(BlackPantherAnimInstance_OnStateChanged, CurrentStat) == 0x000000, "Member 'BlackPantherAnimInstance_OnStateChanged::CurrentStat' has a wrong offset!");

// Function Hero_1026.BlackPantherAnimInstance.OnTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct BlackPantherAnimInstance_OnTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlackPantherAnimInstance_OnTagUpdated) == 0x000004, "Wrong alignment on BlackPantherAnimInstance_OnTagUpdated");
static_assert(sizeof(BlackPantherAnimInstance_OnTagUpdated) == 0x000010, "Wrong size on BlackPantherAnimInstance_OnTagUpdated");
static_assert(offsetof(BlackPantherAnimInstance_OnTagUpdated, TagUpdated) == 0x000000, "Member 'BlackPantherAnimInstance_OnTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(BlackPantherAnimInstance_OnTagUpdated, TagExists) == 0x00000C, "Member 'BlackPantherAnimInstance_OnTagUpdated::TagExists' has a wrong offset!");

// Function Hero_1026.TabData_1026.OnAbilityInitialize
// 0x0004 (0x0004 - 0x0000)
struct TabData_1026_OnAbilityInitialize final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabData_1026_OnAbilityInitialize) == 0x000004, "Wrong alignment on TabData_1026_OnAbilityInitialize");
static_assert(sizeof(TabData_1026_OnAbilityInitialize) == 0x000004, "Wrong size on TabData_1026_OnAbilityInitialize");
static_assert(offsetof(TabData_1026_OnAbilityInitialize, AbilityID) == 0x000000, "Member 'TabData_1026_OnAbilityInitialize::AbilityID' has a wrong offset!");

// Function Hero_1026.TabData_1026.OnActorDeath
// 0x0030 (0x0030 - 0x0000)
struct TabData_1026_OnActorDeath final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1026_OnActorDeath) == 0x000008, "Wrong alignment on TabData_1026_OnActorDeath");
static_assert(sizeof(TabData_1026_OnActorDeath) == 0x000030, "Wrong size on TabData_1026_OnActorDeath");
static_assert(offsetof(TabData_1026_OnActorDeath, Killer) == 0x000000, "Member 'TabData_1026_OnActorDeath::Killer' has a wrong offset!");
static_assert(offsetof(TabData_1026_OnActorDeath, Target) == 0x000008, "Member 'TabData_1026_OnActorDeath::Target' has a wrong offset!");
static_assert(offsetof(TabData_1026_OnActorDeath, ModifierParameterHandle) == 0x000010, "Member 'TabData_1026_OnActorDeath::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(TabData_1026_OnActorDeath, ExtraData) == 0x000028, "Member 'TabData_1026_OnActorDeath::ExtraData' has a wrong offset!");

// Function Hero_1026.TabData_1026.OnShieldAdded
// 0x0004 (0x0004 - 0x0000)
struct TabData_1026_OnShieldAdded final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabData_1026_OnShieldAdded) == 0x000004, "Wrong alignment on TabData_1026_OnShieldAdded");
static_assert(sizeof(TabData_1026_OnShieldAdded) == 0x000004, "Wrong size on TabData_1026_OnShieldAdded");
static_assert(offsetof(TabData_1026_OnShieldAdded, Value) == 0x000000, "Member 'TabData_1026_OnShieldAdded::Value' has a wrong offset!");

}

