#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_PyFindCircleLandPoint

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PyBTNodeBase_classes.hpp"


namespace SDK
{

// PythonClass BTT_PyFindCircleLandPoint.BTT_PyFindCircleLandPoint
// 0x0098 (0x0158 - 0x00C0)
class UBTT_PyFindCircleLandPoint : public UBTTask_PyBase
{
public:
	struct FBlackboardKeySelector                 InCenterPoint;                                     // 0x00C0(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 OutSelectedPoint;                                  // 0x00F0(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlusAngle;                                         // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryExtent;                                       // 0x0128(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryOffset;                                       // 0x0140(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTT_PyFindCircleLandPoint">();
	}
	static class UBTT_PyFindCircleLandPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_PyFindCircleLandPoint>();
	}
};
////static_assert(alignof(UBTT_PyFindCircleLandPoint) == 0x000008, "Wrong alignment on UBTT_PyFindCircleLandPoint");
////static_assert(sizeof(UBTT_PyFindCircleLandPoint) == 0x000158, "Wrong size on UBTT_PyFindCircleLandPoint");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, InCenterPoint) == 0x0000C0, "Member 'UBTT_PyFindCircleLandPoint::InCenterPoint' has a wrong offset!");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, OutSelectedPoint) == 0x0000F0, "Member 'UBTT_PyFindCircleLandPoint::OutSelectedPoint' has a wrong offset!");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, Radius) == 0x000120, "Member 'UBTT_PyFindCircleLandPoint::Radius' has a wrong offset!");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, PlusAngle) == 0x000124, "Member 'UBTT_PyFindCircleLandPoint::PlusAngle' has a wrong offset!");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, QueryExtent) == 0x000128, "Member 'UBTT_PyFindCircleLandPoint::QueryExtent' has a wrong offset!");
////static_assert(offsetof(UBTT_PyFindCircleLandPoint, QueryOffset) == 0x000140, "Member 'UBTT_PyFindCircleLandPoint::QueryOffset' has a wrong offset!");

}

