#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1048

#include "Basic.hpp"

#include "Marvel_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Hero_1048_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class Hero_1048.Config_104831
// 0x0040 (0x00D8 - 0x0098)
class UConfig_104831 : public UMarvelAbilityConfig
{
public:
	int32                                         LaunchShurikenID;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShurikenSpawnInfo>             ShurikenSpawnInfo;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                AnchorOffset;                                      // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecallShurikenID;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHomingDist;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHomingThroughCharacter;                           // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawHomingPosition;                          // 0x00D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104831">();
	}
	static class UConfig_104831* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104831>();
	}
};
static_assert(alignof(UConfig_104831) == 0x000008, "Wrong alignment on UConfig_104831");
static_assert(sizeof(UConfig_104831) == 0x0000D8, "Wrong size on UConfig_104831");
static_assert(offsetof(UConfig_104831, LaunchShurikenID) == 0x000098, "Member 'UConfig_104831::LaunchShurikenID' has a wrong offset!");
static_assert(offsetof(UConfig_104831, ShurikenSpawnInfo) == 0x0000A0, "Member 'UConfig_104831::ShurikenSpawnInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104831, AnchorOffset) == 0x0000B0, "Member 'UConfig_104831::AnchorOffset' has a wrong offset!");
static_assert(offsetof(UConfig_104831, RecallShurikenID) == 0x0000C8, "Member 'UConfig_104831::RecallShurikenID' has a wrong offset!");
static_assert(offsetof(UConfig_104831, MaxHomingDist) == 0x0000CC, "Member 'UConfig_104831::MaxHomingDist' has a wrong offset!");
static_assert(offsetof(UConfig_104831, bHomingThroughCharacter) == 0x0000D0, "Member 'UConfig_104831::bHomingThroughCharacter' has a wrong offset!");
static_assert(offsetof(UConfig_104831, bDebugDrawHomingPosition) == 0x0000D1, "Member 'UConfig_104831::bDebugDrawHomingPosition' has a wrong offset!");

// Class Hero_1048.Ability_104831
// 0x0040 (0x25C0 - 0x2580)
class UAbility_104831 : public UMarvelGameplayAbility
{
public:
	EStage_104831                                 CurrentStage;                                      // 0x2580(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2581[0x7];                                     // 0x2581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AProjectile_10483101>> LaunchProjectiles;                                 // 0x2588(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AProjectile_10483102>> RecallProjectiles;                                 // 0x2598(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UConfig_104831*                         Config;                                            // 0x25A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25B0[0x10];                                    // 0x25B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FVector> GetFirstHomingLocations(const EShurikenRecallType& RecallType);
	void OnProjectileSpawnSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void RemoveAllShuriken(bool bLaunch, bool bRecall);
	void SetCurrentStageLocal(EStage_104831 NewStage);
	void SpawnLaunchShuriken();
	void SpawnRecallShuriken(const EShurikenRecallType& RecallType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104831">();
	}
	static class UAbility_104831* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104831>();
	}
};
static_assert(alignof(UAbility_104831) == 0x000008, "Wrong alignment on UAbility_104831");
static_assert(sizeof(UAbility_104831) == 0x0025C0, "Wrong size on UAbility_104831");
static_assert(offsetof(UAbility_104831, CurrentStage) == 0x002580, "Member 'UAbility_104831::CurrentStage' has a wrong offset!");
static_assert(offsetof(UAbility_104831, LaunchProjectiles) == 0x002588, "Member 'UAbility_104831::LaunchProjectiles' has a wrong offset!");
static_assert(offsetof(UAbility_104831, RecallProjectiles) == 0x002598, "Member 'UAbility_104831::RecallProjectiles' has a wrong offset!");
static_assert(offsetof(UAbility_104831, Config) == 0x0025A8, "Member 'UAbility_104831::Config' has a wrong offset!");

// Class Hero_1048.Projectile_10483101
// 0x0050 (0x30A0 - 0x3050)
class AProjectile_10483101 : public AMarvelAbilityTargetActor_Projectile
{
public:
	EShurikenState                                ShurikenState;                                     // 0x3050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3051[0x7];                                     // 0x3051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnShurikenStateChangeDispatcher;                   // 0x3058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                 ValidHitTarget;                                    // 0x3068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3070[0x30];                                    // 0x3070(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachToTarget(const struct FHitResult& Hit);
	void ClearProjectileVelocity();
	void DetachFromActorWithReason(const class FString& Reason);
	void OnAttachActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnAttachAgentEndTask(class AActor* Actor);
	void OnAttachCharacterDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ParamHandle);
	void OnComponentFracture();
	void SetShurikenStateLocal(EShurikenState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10483101">();
	}
	static class AProjectile_10483101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10483101>();
	}
};
static_assert(alignof(AProjectile_10483101) == 0x000010, "Wrong alignment on AProjectile_10483101");
static_assert(sizeof(AProjectile_10483101) == 0x0030A0, "Wrong size on AProjectile_10483101");
static_assert(offsetof(AProjectile_10483101, ShurikenState) == 0x003050, "Member 'AProjectile_10483101::ShurikenState' has a wrong offset!");
static_assert(offsetof(AProjectile_10483101, OnShurikenStateChangeDispatcher) == 0x003058, "Member 'AProjectile_10483101::OnShurikenStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(AProjectile_10483101, ValidHitTarget) == 0x003068, "Member 'AProjectile_10483101::ValidHitTarget' has a wrong offset!");

// Class Hero_1048.Projectile_10483102
// 0x0050 (0x30A0 - 0x3050)
class AProjectile_10483102 : public AMarvelAbilityTargetActor_Projectile
{
public:
	int32                                         ProjIndex;                                         // 0x3050(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3054[0x4];                                     // 0x3054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HomingLocation;                                    // 0x3058(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LaunchValidHitTarget;                              // 0x3070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShurikenRecallType                           RecallType;                                        // 0x3078(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3079[0x7];                                     // 0x3079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectileHomingComponent*             HomingComponent;                                   // 0x3080(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3088[0x18];                                    // 0x3088(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEndHomingSelf();
	void OnModifyMoveDelta(struct FVector* MoveDelta);
	void TryHomingInstigator(bool bNeedFixProjInfo);

	float K2_GetFirstSpeed() const;
	float K2_GetSecondSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10483102">();
	}
	static class AProjectile_10483102* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10483102>();
	}
};
static_assert(alignof(AProjectile_10483102) == 0x000010, "Wrong alignment on AProjectile_10483102");
static_assert(sizeof(AProjectile_10483102) == 0x0030A0, "Wrong size on AProjectile_10483102");
static_assert(offsetof(AProjectile_10483102, ProjIndex) == 0x003050, "Member 'AProjectile_10483102::ProjIndex' has a wrong offset!");
static_assert(offsetof(AProjectile_10483102, HomingLocation) == 0x003058, "Member 'AProjectile_10483102::HomingLocation' has a wrong offset!");
static_assert(offsetof(AProjectile_10483102, LaunchValidHitTarget) == 0x003070, "Member 'AProjectile_10483102::LaunchValidHitTarget' has a wrong offset!");
static_assert(offsetof(AProjectile_10483102, RecallType) == 0x003078, "Member 'AProjectile_10483102::RecallType' has a wrong offset!");
static_assert(offsetof(AProjectile_10483102, HomingComponent) == 0x003080, "Member 'AProjectile_10483102::HomingComponent' has a wrong offset!");

// Class Hero_1048.PsylockeAnimInstance
// 0x0090 (0x09A0 - 0x0910)
class UPsylockeAnimInstance final : public UMarvelAnimInstance
{
public:
	EAbilityState_104861                          AbilityStage_104861;                               // 0x0910(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackIndex_104861;                                // 0x0914(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DashingPitch_104861;                               // 0x0918(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLocation;                                   // 0x0920(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentRotation;                                   // 0x0938(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldModifyRoot;                                 // 0x0950(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_951[0x3];                                      // 0x0951(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityStage_104861                   AbilityStage_104861_UnSafe;                        // 0x0954(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	float                                         DashPitch_104861_UnSafe;                           // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                CurLocation_UnSafe;                                // 0x0960(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               CurRotation_UnSafe;                                // 0x0978(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          ModifiedRootActive_UnSafe;                         // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_991[0xF];                                      // 0x0991(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PsylockeAnimInstance">();
	}
	static class UPsylockeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPsylockeAnimInstance>();
	}
};
static_assert(alignof(UPsylockeAnimInstance) == 0x000010, "Wrong alignment on UPsylockeAnimInstance");
static_assert(sizeof(UPsylockeAnimInstance) == 0x0009A0, "Wrong size on UPsylockeAnimInstance");
static_assert(offsetof(UPsylockeAnimInstance, AbilityStage_104861) == 0x000910, "Member 'UPsylockeAnimInstance::AbilityStage_104861' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, AttackIndex_104861) == 0x000914, "Member 'UPsylockeAnimInstance::AttackIndex_104861' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, DashingPitch_104861) == 0x000918, "Member 'UPsylockeAnimInstance::DashingPitch_104861' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, CurrentLocation) == 0x000920, "Member 'UPsylockeAnimInstance::CurrentLocation' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, CurrentRotation) == 0x000938, "Member 'UPsylockeAnimInstance::CurrentRotation' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, bShouldModifyRoot) == 0x000950, "Member 'UPsylockeAnimInstance::bShouldModifyRoot' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, AbilityStage_104861_UnSafe) == 0x000954, "Member 'UPsylockeAnimInstance::AbilityStage_104861_UnSafe' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, DashPitch_104861_UnSafe) == 0x00095C, "Member 'UPsylockeAnimInstance::DashPitch_104861_UnSafe' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, CurLocation_UnSafe) == 0x000960, "Member 'UPsylockeAnimInstance::CurLocation_UnSafe' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, CurRotation_UnSafe) == 0x000978, "Member 'UPsylockeAnimInstance::CurRotation_UnSafe' has a wrong offset!");
static_assert(offsetof(UPsylockeAnimInstance, ModifiedRootActive_UnSafe) == 0x000990, "Member 'UPsylockeAnimInstance::ModifiedRootActive_UnSafe' has a wrong offset!");

// Class Hero_1048.PsylockeCharacter
// 0x0020 (0x1830 - 0x1810)
class APsylockeCharacter : public AMarvelBaseCharacter
{
public:
	EPsylockeState                                CurrentState;                                      // 0x1810(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPsylockeStateChangeDispatcher;                   // 0x1818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPsylockeMoveLogicBaseComponent*        PsylockeMoveLogic;                                 // 0x1828(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRep_CurrentState();
	void SetCharacterState(EPsylockeState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PsylockeCharacter">();
	}
	static class APsylockeCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<APsylockeCharacter>();
	}
};
static_assert(alignof(APsylockeCharacter) == 0x000010, "Wrong alignment on APsylockeCharacter");
static_assert(sizeof(APsylockeCharacter) == 0x001830, "Wrong size on APsylockeCharacter");
static_assert(offsetof(APsylockeCharacter, CurrentState) == 0x001810, "Member 'APsylockeCharacter::CurrentState' has a wrong offset!");
static_assert(offsetof(APsylockeCharacter, OnPsylockeStateChangeDispatcher) == 0x001818, "Member 'APsylockeCharacter::OnPsylockeStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(APsylockeCharacter, PsylockeMoveLogic) == 0x001828, "Member 'APsylockeCharacter::PsylockeMoveLogic' has a wrong offset!");

// Class Hero_1048.PsylockeMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UPsylockeMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PsylockeMoveLogicBaseComponent">();
	}
	static class UPsylockeMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPsylockeMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UPsylockeMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UPsylockeMoveLogicBaseComponent");
static_assert(sizeof(UPsylockeMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UPsylockeMoveLogicBaseComponent");

// Class Hero_1048.PsylockeMovementComponent
// 0x0000 (0x1B60 - 0x1B60)
class UPsylockeMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PsylockeMovementComponent">();
	}
	static class UPsylockeMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPsylockeMovementComponent>();
	}
};
static_assert(alignof(UPsylockeMovementComponent) == 0x000010, "Wrong alignment on UPsylockeMovementComponent");
static_assert(sizeof(UPsylockeMovementComponent) == 0x001B60, "Wrong size on UPsylockeMovementComponent");

// Class Hero_1048.Summoned_104892
// 0x0060 (0x1890 - 0x1830)
class ASummoned_104892 final : public APsylockeCharacter
{
public:
	uint8                                         Pad_1830[0x10];                                    // 0x1830(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelSummonedComponent*               SummonedComponent;                                 // 0x1840(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PhantomCueTag;                                     // 0x1848(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1854[0x4];                                     // 0x1854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AAIController>              SummonedControllerClass;                           // 0x1858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAccumulativeDamage;                             // 0x1860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1864[0xC];                                     // 0x1864(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x1870(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 QuoteSource;                                       // 0x1878(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1880[0x10];                                    // 0x1880(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilitySystemDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

	class UMarvelSummonedComponent* GetSummonedComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_104892">();
	}
	static class ASummoned_104892* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_104892>();
	}
};
static_assert(alignof(ASummoned_104892) == 0x000010, "Wrong alignment on ASummoned_104892");
static_assert(sizeof(ASummoned_104892) == 0x001890, "Wrong size on ASummoned_104892");
static_assert(offsetof(ASummoned_104892, SummonedComponent) == 0x001840, "Member 'ASummoned_104892::SummonedComponent' has a wrong offset!");
static_assert(offsetof(ASummoned_104892, PhantomCueTag) == 0x001848, "Member 'ASummoned_104892::PhantomCueTag' has a wrong offset!");
static_assert(offsetof(ASummoned_104892, SummonedControllerClass) == 0x001858, "Member 'ASummoned_104892::SummonedControllerClass' has a wrong offset!");
static_assert(offsetof(ASummoned_104892, MaxAccumulativeDamage) == 0x001860, "Member 'ASummoned_104892::MaxAccumulativeDamage' has a wrong offset!");
static_assert(offsetof(ASummoned_104892, SourceActor) == 0x001870, "Member 'ASummoned_104892::SourceActor' has a wrong offset!");
static_assert(offsetof(ASummoned_104892, QuoteSource) == 0x001878, "Member 'ASummoned_104892::QuoteSource' has a wrong offset!");

}

