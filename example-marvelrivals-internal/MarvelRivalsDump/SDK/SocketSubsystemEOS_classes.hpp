#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SocketSubsystemEOS

#include "Basic.hpp"

#include "OnlineSubsystemUtils_classes.hpp"


namespace SDK
{

// Class SocketSubsystemEOS.NetConnectionEOS
// 0x0010 (0x2270 - 0x2260)
class UNetConnectionEOS final : public UIpConnection
{
public:
	uint8                                         Pad_2260[0x10];                                    // 0x2260(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetConnectionEOS">();
	}
	static class UNetConnectionEOS* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetConnectionEOS>();
	}
};
//static_assert(alignof(UNetConnectionEOS) == 0x000008, "Wrong alignment on UNetConnectionEOS");
//static_assert(sizeof(UNetConnectionEOS) == 0x002270, "Wrong size on UNetConnectionEOS");

// Class SocketSubsystemEOS.NetDriverEOSBase
// 0x0010 (0x0BB0 - 0x0BA0)
class UNetDriverEOSBase : public UIpNetDriver
{
public:
	bool                                          bIsPassthrough;                                    // 0x0BA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingP2PSockets;                                // 0x0BA1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA2[0xE];                                      // 0x0BA2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetDriverEOSBase">();
	}
	static class UNetDriverEOSBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetDriverEOSBase>();
	}
};
//static_assert(alignof(UNetDriverEOSBase) == 0x000010, "Wrong alignment on UNetDriverEOSBase");
//static_assert(sizeof(UNetDriverEOSBase) == 0x000BB0, "Wrong size on UNetDriverEOSBase");
//static_assert(offsetof(UNetDriverEOSBase, bIsPassthrough) == 0x000BA0, "Member 'UNetDriverEOSBase::bIsPassthrough' has a wrong offset!");
//static_assert(offsetof(UNetDriverEOSBase, bIsUsingP2PSockets) == 0x000BA1, "Member 'UNetDriverEOSBase::bIsUsingP2PSockets' has a wrong offset!");

}

