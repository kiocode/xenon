#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RemoteControl

#include "Basic.hpp"

#include "RemoteControl_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function RemoteControl.RCVirtualPropertyBase.SetValueBool
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_SetValueBool final
{
public:
	bool                                          InBoolValue;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueBool) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_SetValueBool");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueBool) == 0x000002, "Wrong size on RCVirtualPropertyBase_SetValueBool");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueBool, InBoolValue) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueBool::InBoolValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueBool, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_SetValueBool::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueByte
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_SetValueByte final
{
public:
	uint8                                         InByte;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueByte) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_SetValueByte");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueByte) == 0x000002, "Wrong size on RCVirtualPropertyBase_SetValueByte");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueByte, InByte) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueByte::InByte' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueByte, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_SetValueByte::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueColor
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_SetValueColor final
{
public:
	struct FColor                                 InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueColor) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_SetValueColor");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueColor) == 0x000008, "Wrong size on RCVirtualPropertyBase_SetValueColor");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueColor, InColor) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueColor::InColor' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueColor, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_SetValueColor::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueDouble
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_SetValueDouble final
{
public:
	double                                        InDouble;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueDouble) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueDouble");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueDouble) == 0x000010, "Wrong size on RCVirtualPropertyBase_SetValueDouble");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueDouble, InDouble) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueDouble::InDouble' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueDouble, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_SetValueDouble::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_SetValueFloat final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueFloat) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_SetValueFloat");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueFloat) == 0x000008, "Wrong size on RCVirtualPropertyBase_SetValueFloat");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueFloat, InFloat) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueFloat::InFloat' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueFloat, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_SetValueFloat::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueInt16
// 0x0004 (0x0004 - 0x0000)
struct RCVirtualPropertyBase_SetValueInt16 final
{
public:
	int16                                         InInt16;                                           // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueInt16) == 0x000002, "Wrong alignment on RCVirtualPropertyBase_SetValueInt16");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueInt16) == 0x000004, "Wrong size on RCVirtualPropertyBase_SetValueInt16");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt16, InInt16) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueInt16::InInt16' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt16, ReturnValue) == 0x000002, "Member 'RCVirtualPropertyBase_SetValueInt16::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueInt32
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_SetValueInt32 final
{
public:
	int32                                         InInt32;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueInt32) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_SetValueInt32");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueInt32) == 0x000008, "Wrong size on RCVirtualPropertyBase_SetValueInt32");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt32, InInt32) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueInt32::InInt32' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt32, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_SetValueInt32::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueInt64
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_SetValueInt64 final
{
public:
	int64                                         InInt64;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueInt64) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueInt64");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueInt64) == 0x000010, "Wrong size on RCVirtualPropertyBase_SetValueInt64");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt64, InInt64) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueInt64::InInt64' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt64, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_SetValueInt64::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueInt8
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_SetValueInt8 final
{
public:
	int8                                          InInt8;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueInt8) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_SetValueInt8");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueInt8) == 0x000002, "Wrong size on RCVirtualPropertyBase_SetValueInt8");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt8, InInt8) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueInt8::InInt8' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueInt8, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_SetValueInt8::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueName
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_SetValueName final
{
public:
	class FName                                   InNameValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueName) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_SetValueName");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueName) == 0x000010, "Wrong size on RCVirtualPropertyBase_SetValueName");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueName, InNameValue) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueName::InNameValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueName, ReturnValue) == 0x00000C, "Member 'RCVirtualPropertyBase_SetValueName::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueNumericInteger
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_SetValueNumericInteger final
{
public:
	int64                                         InInt64Value;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueNumericInteger) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueNumericInteger");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueNumericInteger) == 0x000010, "Wrong size on RCVirtualPropertyBase_SetValueNumericInteger");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueNumericInteger, InInt64Value) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueNumericInteger::InInt64Value' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueNumericInteger, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_SetValueNumericInteger::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueRotator
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_SetValueRotator final
{
public:
	struct FRotator                               InRotator;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueRotator) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueRotator");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueRotator) == 0x000020, "Wrong size on RCVirtualPropertyBase_SetValueRotator");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueRotator, InRotator) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueRotator::InRotator' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueRotator, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_SetValueRotator::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueString
// 0x0018 (0x0018 - 0x0000)
struct RCVirtualPropertyBase_SetValueString final
{
public:
	class FString                                 InStringValue;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueString) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueString");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueString) == 0x000018, "Wrong size on RCVirtualPropertyBase_SetValueString");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueString, InStringValue) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueString::InStringValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueString, ReturnValue) == 0x000010, "Member 'RCVirtualPropertyBase_SetValueString::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueText
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_SetValueText final
{
public:
	class FText                                   InTextValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueText) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueText");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueText) == 0x000020, "Wrong size on RCVirtualPropertyBase_SetValueText");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueText, InTextValue) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueText::InTextValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueText, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_SetValueText::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueUint16
// 0x0004 (0x0004 - 0x0000)
struct RCVirtualPropertyBase_SetValueUint16 final
{
public:
	uint16                                        InUInt16;                                          // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueUint16) == 0x000002, "Wrong alignment on RCVirtualPropertyBase_SetValueUint16");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueUint16) == 0x000004, "Wrong size on RCVirtualPropertyBase_SetValueUint16");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUint16, InUInt16) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueUint16::InUInt16' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUint16, ReturnValue) == 0x000002, "Member 'RCVirtualPropertyBase_SetValueUint16::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueUInt32
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_SetValueUInt32 final
{
public:
	uint32                                        InUInt32;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueUInt32) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_SetValueUInt32");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueUInt32) == 0x000008, "Wrong size on RCVirtualPropertyBase_SetValueUInt32");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUInt32, InUInt32) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueUInt32::InUInt32' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUInt32, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_SetValueUInt32::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueUint64
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_SetValueUint64 final
{
public:
	uint64                                        InUInt64;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueUint64) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueUint64");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueUint64) == 0x000010, "Wrong size on RCVirtualPropertyBase_SetValueUint64");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUint64, InUInt64) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueUint64::InUInt64' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueUint64, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_SetValueUint64::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.SetValueVector
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_SetValueVector final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_SetValueVector) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_SetValueVector");
//static_assert(sizeof(RCVirtualPropertyBase_SetValueVector) == 0x000020, "Wrong size on RCVirtualPropertyBase_SetValueVector");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueVector, InVector) == 0x000000, "Member 'RCVirtualPropertyBase_SetValueVector::InVector' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_SetValueVector, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_SetValueVector::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetDisplayValueAsString
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetDisplayValueAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetDisplayValueAsString) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetDisplayValueAsString");
//static_assert(sizeof(RCVirtualPropertyBase_GetDisplayValueAsString) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetDisplayValueAsString");
//static_assert(offsetof(RCVirtualPropertyBase_GetDisplayValueAsString, ReturnValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetDisplayValueAsString::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetPropertyName
// 0x000C (0x000C - 0x0000)
struct RCVirtualPropertyBase_GetPropertyName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetPropertyName) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetPropertyName");
//static_assert(sizeof(RCVirtualPropertyBase_GetPropertyName) == 0x00000C, "Wrong size on RCVirtualPropertyBase_GetPropertyName");
//static_assert(offsetof(RCVirtualPropertyBase_GetPropertyName, ReturnValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetPropertyName::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueBool
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_GetValueBool final
{
public:
	bool                                          OutBoolValue;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueBool) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_GetValueBool");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueBool) == 0x000002, "Wrong size on RCVirtualPropertyBase_GetValueBool");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueBool, OutBoolValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueBool::OutBoolValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueBool, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_GetValueBool::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueByte
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_GetValueByte final
{
public:
	uint8                                         OutByte;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueByte) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_GetValueByte");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueByte) == 0x000002, "Wrong size on RCVirtualPropertyBase_GetValueByte");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueByte, OutByte) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueByte::OutByte' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueByte, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_GetValueByte::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueColor
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_GetValueColor final
{
public:
	struct FColor                                 OutColor;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueColor) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetValueColor");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueColor) == 0x000008, "Wrong size on RCVirtualPropertyBase_GetValueColor");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueColor, OutColor) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueColor::OutColor' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueColor, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_GetValueColor::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueDouble
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetValueDouble final
{
public:
	double                                        OutDouble;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueDouble) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueDouble");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueDouble) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetValueDouble");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueDouble, OutDouble) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueDouble::OutDouble' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueDouble, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_GetValueDouble::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_GetValueFloat final
{
public:
	float                                         OutFloat;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueFloat) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetValueFloat");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueFloat) == 0x000008, "Wrong size on RCVirtualPropertyBase_GetValueFloat");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueFloat, OutFloat) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueFloat::OutFloat' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueFloat, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_GetValueFloat::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueInt16
// 0x0004 (0x0004 - 0x0000)
struct RCVirtualPropertyBase_GetValueInt16 final
{
public:
	int16                                         OutInt16;                                          // 0x0000(0x0002)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueInt16) == 0x000002, "Wrong alignment on RCVirtualPropertyBase_GetValueInt16");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueInt16) == 0x000004, "Wrong size on RCVirtualPropertyBase_GetValueInt16");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt16, OutInt16) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueInt16::OutInt16' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt16, ReturnValue) == 0x000002, "Member 'RCVirtualPropertyBase_GetValueInt16::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueInt32
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_GetValueInt32 final
{
public:
	int32                                         OutInt32;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueInt32) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetValueInt32");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueInt32) == 0x000008, "Wrong size on RCVirtualPropertyBase_GetValueInt32");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt32, OutInt32) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueInt32::OutInt32' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt32, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_GetValueInt32::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueInt64
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetValueInt64 final
{
public:
	int64                                         OuyInt64;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueInt64) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueInt64");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueInt64) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetValueInt64");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt64, OuyInt64) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueInt64::OuyInt64' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt64, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_GetValueInt64::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueInt8
// 0x0002 (0x0002 - 0x0000)
struct RCVirtualPropertyBase_GetValueInt8 final
{
public:
	int8                                          OutInt8;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueInt8) == 0x000001, "Wrong alignment on RCVirtualPropertyBase_GetValueInt8");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueInt8) == 0x000002, "Wrong size on RCVirtualPropertyBase_GetValueInt8");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt8, OutInt8) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueInt8::OutInt8' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueInt8, ReturnValue) == 0x000001, "Member 'RCVirtualPropertyBase_GetValueInt8::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueName
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetValueName final
{
public:
	class FName                                   OutNameValue;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueName) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetValueName");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueName) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetValueName");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueName, OutNameValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueName::OutNameValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueName, ReturnValue) == 0x00000C, "Member 'RCVirtualPropertyBase_GetValueName::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueNumericInteger
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetValueNumericInteger final
{
public:
	int64                                         OutInt64Value;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueNumericInteger) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueNumericInteger");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueNumericInteger) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetValueNumericInteger");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueNumericInteger, OutInt64Value) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueNumericInteger::OutInt64Value' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueNumericInteger, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_GetValueNumericInteger::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueObject
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_GetValueObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueObject) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueObject");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueObject) == 0x000008, "Wrong size on RCVirtualPropertyBase_GetValueObject");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueObject, ReturnValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueObject::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueRotator
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_GetValueRotator final
{
public:
	struct FRotator                               OutRotator;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueRotator) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueRotator");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueRotator) == 0x000020, "Wrong size on RCVirtualPropertyBase_GetValueRotator");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueRotator, OutRotator) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueRotator::OutRotator' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueRotator, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_GetValueRotator::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueString
// 0x0018 (0x0018 - 0x0000)
struct RCVirtualPropertyBase_GetValueString final
{
public:
	class FString                                 OutStringValue;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueString) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueString");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueString) == 0x000018, "Wrong size on RCVirtualPropertyBase_GetValueString");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueString, OutStringValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueString::OutStringValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueString, ReturnValue) == 0x000010, "Member 'RCVirtualPropertyBase_GetValueString::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueText
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_GetValueText final
{
public:
	class FText                                   OutTextValue;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueText) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueText");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueText) == 0x000020, "Wrong size on RCVirtualPropertyBase_GetValueText");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueText, OutTextValue) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueText::OutTextValue' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueText, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_GetValueText::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueUint16
// 0x0004 (0x0004 - 0x0000)
struct RCVirtualPropertyBase_GetValueUint16 final
{
public:
	uint16                                        OutUInt16;                                         // 0x0000(0x0002)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueUint16) == 0x000002, "Wrong alignment on RCVirtualPropertyBase_GetValueUint16");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueUint16) == 0x000004, "Wrong size on RCVirtualPropertyBase_GetValueUint16");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUint16, OutUInt16) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueUint16::OutUInt16' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUint16, ReturnValue) == 0x000002, "Member 'RCVirtualPropertyBase_GetValueUint16::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueUInt32
// 0x0008 (0x0008 - 0x0000)
struct RCVirtualPropertyBase_GetValueUInt32 final
{
public:
	uint32                                        OutUInt32;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueUInt32) == 0x000004, "Wrong alignment on RCVirtualPropertyBase_GetValueUInt32");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueUInt32) == 0x000008, "Wrong size on RCVirtualPropertyBase_GetValueUInt32");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUInt32, OutUInt32) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueUInt32::OutUInt32' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUInt32, ReturnValue) == 0x000004, "Member 'RCVirtualPropertyBase_GetValueUInt32::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueUint64
// 0x0010 (0x0010 - 0x0000)
struct RCVirtualPropertyBase_GetValueUint64 final
{
public:
	uint64                                        OuyUInt64;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueUint64) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueUint64");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueUint64) == 0x000010, "Wrong size on RCVirtualPropertyBase_GetValueUint64");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUint64, OuyUInt64) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueUint64::OuyUInt64' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueUint64, ReturnValue) == 0x000008, "Member 'RCVirtualPropertyBase_GetValueUint64::ReturnValue' has a wrong offset!");

// Function RemoteControl.RCVirtualPropertyBase.GetValueVector
// 0x0020 (0x0020 - 0x0000)
struct RCVirtualPropertyBase_GetValueVector final
{
public:
	struct FVector                                OutVector;                                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RCVirtualPropertyBase_GetValueVector) == 0x000008, "Wrong alignment on RCVirtualPropertyBase_GetValueVector");
//static_assert(sizeof(RCVirtualPropertyBase_GetValueVector) == 0x000020, "Wrong size on RCVirtualPropertyBase_GetValueVector");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueVector, OutVector) == 0x000000, "Member 'RCVirtualPropertyBase_GetValueVector::OutVector' has a wrong offset!");
//static_assert(offsetof(RCVirtualPropertyBase_GetValueVector, ReturnValue) == 0x000018, "Member 'RCVirtualPropertyBase_GetValueVector::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlDeltaAPITestObject.GetInt32WithSetterValue
// 0x0004 (0x0004 - 0x0000)
struct RemoteControlDeltaAPITestObject_GetInt32WithSetterValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RemoteControlDeltaAPITestObject_GetInt32WithSetterValue) == 0x000004, "Wrong alignment on RemoteControlDeltaAPITestObject_GetInt32WithSetterValue");
//static_assert(sizeof(RemoteControlDeltaAPITestObject_GetInt32WithSetterValue) == 0x000004, "Wrong size on RemoteControlDeltaAPITestObject_GetInt32WithSetterValue");
//static_assert(offsetof(RemoteControlDeltaAPITestObject_GetInt32WithSetterValue, ReturnValue) == 0x000000, "Member 'RemoteControlDeltaAPITestObject_GetInt32WithSetterValue::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlDeltaAPITestObject.SetInt32WithSetterValue
// 0x0004 (0x0004 - 0x0000)
struct RemoteControlDeltaAPITestObject_SetInt32WithSetterValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RemoteControlDeltaAPITestObject_SetInt32WithSetterValue) == 0x000004, "Wrong alignment on RemoteControlDeltaAPITestObject_SetInt32WithSetterValue");
//static_assert(sizeof(RemoteControlDeltaAPITestObject_SetInt32WithSetterValue) == 0x000004, "Wrong size on RemoteControlDeltaAPITestObject_SetInt32WithSetterValue");
//static_assert(offsetof(RemoteControlDeltaAPITestObject_SetInt32WithSetterValue, NewValue) == 0x000000, "Member 'RemoteControlDeltaAPITestObject_SetInt32WithSetterValue::NewValue' has a wrong offset!");

// Function RemoteControl.RemoteControlFunctionLibrary.ApplyColorGradingWheelDelta
// 0x0068 (0x0068 - 0x0000)
struct RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta final
{
public:
	class UObject*                                TargetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorGradingWheelColor                DeltaValue;                                        // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColorGradingWheelColor                ReferenceColor;                                    // 0x0038(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInteractive;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta) == 0x000008, "Wrong alignment on RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta");
//static_assert(sizeof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta) == 0x000068, "Wrong size on RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, TargetObject) == 0x000000, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::TargetObject' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, PropertyName) == 0x000008, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::PropertyName' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, DeltaValue) == 0x000018, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::DeltaValue' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, ReferenceColor) == 0x000038, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::ReferenceColor' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, bIsInteractive) == 0x000058, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::bIsInteractive' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, MinValue) == 0x00005C, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::MinValue' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, MaxValue) == 0x000060, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::MaxValue' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta, ReturnValue) == 0x000064, "Member 'RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlFunctionLibrary.ApplyColorWheelDelta
// 0x0060 (0x0060 - 0x0000)
struct RemoteControlFunctionLibrary_ApplyColorWheelDelta final
{
public:
	class UObject*                                TargetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorWheelColor                       DeltaValue;                                        // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColorWheelColor                       ReferenceColor;                                    // 0x0038(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInteractive;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RemoteControlFunctionLibrary_ApplyColorWheelDelta) == 0x000008, "Wrong alignment on RemoteControlFunctionLibrary_ApplyColorWheelDelta");
//static_assert(sizeof(RemoteControlFunctionLibrary_ApplyColorWheelDelta) == 0x000060, "Wrong size on RemoteControlFunctionLibrary_ApplyColorWheelDelta");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, TargetObject) == 0x000000, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::TargetObject' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, PropertyName) == 0x000008, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::PropertyName' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, DeltaValue) == 0x000018, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::DeltaValue' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, ReferenceColor) == 0x000038, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::ReferenceColor' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, bIsInteractive) == 0x000058, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::bIsInteractive' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ApplyColorWheelDelta, ReturnValue) == 0x000059, "Member 'RemoteControlFunctionLibrary_ApplyColorWheelDelta::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlFunctionLibrary.ExposeActor
// 0x0038 (0x0038 - 0x0000)
struct RemoteControlFunctionLibrary_ExposeActor final
{
public:
	class URemoteControlPreset*                   Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRemoteControlOptionalExposeArgs       Args;                                              // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RemoteControlFunctionLibrary_ExposeActor) == 0x000008, "Wrong alignment on RemoteControlFunctionLibrary_ExposeActor");
//static_assert(sizeof(RemoteControlFunctionLibrary_ExposeActor) == 0x000038, "Wrong size on RemoteControlFunctionLibrary_ExposeActor");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeActor, Preset) == 0x000000, "Member 'RemoteControlFunctionLibrary_ExposeActor::Preset' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeActor, Actor) == 0x000008, "Member 'RemoteControlFunctionLibrary_ExposeActor::Actor' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeActor, Args) == 0x000010, "Member 'RemoteControlFunctionLibrary_ExposeActor::Args' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeActor, ReturnValue) == 0x000030, "Member 'RemoteControlFunctionLibrary_ExposeActor::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlFunctionLibrary.ExposeFunction
// 0x0048 (0x0048 - 0x0000)
struct RemoteControlFunctionLibrary_ExposeFunction final
{
public:
	class URemoteControlPreset*                   Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Function;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRemoteControlOptionalExposeArgs       Args;                                              // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RemoteControlFunctionLibrary_ExposeFunction) == 0x000008, "Wrong alignment on RemoteControlFunctionLibrary_ExposeFunction");
//static_assert(sizeof(RemoteControlFunctionLibrary_ExposeFunction) == 0x000048, "Wrong size on RemoteControlFunctionLibrary_ExposeFunction");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeFunction, Preset) == 0x000000, "Member 'RemoteControlFunctionLibrary_ExposeFunction::Preset' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeFunction, SourceObject) == 0x000008, "Member 'RemoteControlFunctionLibrary_ExposeFunction::SourceObject' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeFunction, Function) == 0x000010, "Member 'RemoteControlFunctionLibrary_ExposeFunction::Function' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeFunction, Args) == 0x000020, "Member 'RemoteControlFunctionLibrary_ExposeFunction::Args' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeFunction, ReturnValue) == 0x000040, "Member 'RemoteControlFunctionLibrary_ExposeFunction::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlFunctionLibrary.ExposeProperty
// 0x0048 (0x0048 - 0x0000)
struct RemoteControlFunctionLibrary_ExposeProperty final
{
public:
	class URemoteControlPreset*                   Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Property;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRemoteControlOptionalExposeArgs       Args;                                              // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(RemoteControlFunctionLibrary_ExposeProperty) == 0x000008, "Wrong alignment on RemoteControlFunctionLibrary_ExposeProperty");
//static_assert(sizeof(RemoteControlFunctionLibrary_ExposeProperty) == 0x000048, "Wrong size on RemoteControlFunctionLibrary_ExposeProperty");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeProperty, Preset) == 0x000000, "Member 'RemoteControlFunctionLibrary_ExposeProperty::Preset' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeProperty, SourceObject) == 0x000008, "Member 'RemoteControlFunctionLibrary_ExposeProperty::SourceObject' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeProperty, Property) == 0x000010, "Member 'RemoteControlFunctionLibrary_ExposeProperty::Property' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeProperty, Args) == 0x000020, "Member 'RemoteControlFunctionLibrary_ExposeProperty::Args' has a wrong offset!");
//static_assert(offsetof(RemoteControlFunctionLibrary_ExposeProperty, ReturnValue) == 0x000040, "Member 'RemoteControlFunctionLibrary_ExposeProperty::ReturnValue' has a wrong offset!");

// Function RemoteControl.RemoteControlInterceptionTestObject.TestFunction
// 0x0058 (0x0058 - 0x0000)
struct RemoteControlInterceptionTestObject_TestFunction final
{
public:
	struct FRemoteControlInterceptionFunctionParamStruct InStruct;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InTestFactor;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRemoteControlInterceptionFunctionParamStruct ReturnValue;                                       // 0x0030(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(RemoteControlInterceptionTestObject_TestFunction) == 0x000008, "Wrong alignment on RemoteControlInterceptionTestObject_TestFunction");
//static_assert(sizeof(RemoteControlInterceptionTestObject_TestFunction) == 0x000058, "Wrong size on RemoteControlInterceptionTestObject_TestFunction");
//static_assert(offsetof(RemoteControlInterceptionTestObject_TestFunction, InStruct) == 0x000000, "Member 'RemoteControlInterceptionTestObject_TestFunction::InStruct' has a wrong offset!");
//static_assert(offsetof(RemoteControlInterceptionTestObject_TestFunction, InTestFactor) == 0x000028, "Member 'RemoteControlInterceptionTestObject_TestFunction::InTestFactor' has a wrong offset!");
//static_assert(offsetof(RemoteControlInterceptionTestObject_TestFunction, ReturnValue) == 0x000030, "Member 'RemoteControlInterceptionTestObject_TestFunction::ReturnValue' has a wrong offset!");

}

