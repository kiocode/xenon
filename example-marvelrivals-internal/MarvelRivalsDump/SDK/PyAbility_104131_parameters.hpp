#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_104131

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Marvel_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyAbility_104131.PyEffectiveComponent_10413101.K2_OnPreApplyContainer
// 0x0020 (0x0020 - 0x0000)
struct PyEffectiveComponent_10413101_K2_OnPreApplyContainer final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(PyEffectiveComponent_10413101_K2_OnPreApplyContainer) == 0x000008, "Wrong alignment on PyEffectiveComponent_10413101_K2_OnPreApplyContainer");
static_assert(sizeof(PyEffectiveComponent_10413101_K2_OnPreApplyContainer) == 0x000020, "Wrong size on PyEffectiveComponent_10413101_K2_OnPreApplyContainer");
static_assert(offsetof(PyEffectiveComponent_10413101_K2_OnPreApplyContainer, HitResults) == 0x000000, "Member 'PyEffectiveComponent_10413101_K2_OnPreApplyContainer::HitResults' has a wrong offset!");
static_assert(offsetof(PyEffectiveComponent_10413101_K2_OnPreApplyContainer, ReturnValue) == 0x000010, "Member 'PyEffectiveComponent_10413101_K2_OnPreApplyContainer::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_104131.PyCue_Projectile_Loop_10413102.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Projectile_Loop_10413102_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Projectile_Loop_10413102_WhileActive) == 0x000008, "Wrong alignment on PyCue_Projectile_Loop_10413102_WhileActive");
static_assert(sizeof(PyCue_Projectile_Loop_10413102_WhileActive) == 0x0001C8, "Wrong size on PyCue_Projectile_Loop_10413102_WhileActive");
static_assert(offsetof(PyCue_Projectile_Loop_10413102_WhileActive, MyTarget) == 0x000000, "Member 'PyCue_Projectile_Loop_10413102_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_Loop_10413102_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Projectile_Loop_10413102_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_Loop_10413102_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Projectile_Loop_10413102_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_104131.PyProjectile_10413101.K2_OnProcessHit
// 0x0170 (0x0170 - 0x0000)
struct PyProjectile_10413101_K2_OnProcessHit final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyProjectile_10413101_K2_OnProcessHit) == 0x000008, "Wrong alignment on PyProjectile_10413101_K2_OnProcessHit");
static_assert(sizeof(PyProjectile_10413101_K2_OnProcessHit) == 0x000170, "Wrong size on PyProjectile_10413101_K2_OnProcessHit");
static_assert(offsetof(PyProjectile_10413101_K2_OnProcessHit, ImpactResult) == 0x000000, "Member 'PyProjectile_10413101_K2_OnProcessHit::ImpactResult' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.CanActivate
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_104131_CanActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_CanActivate) == 0x000001, "Wrong alignment on PyAbility_104131_CanActivate");
static_assert(sizeof(PyAbility_104131_CanActivate) == 0x000001, "Wrong size on PyAbility_104131_CanActivate");
static_assert(offsetof(PyAbility_104131_CanActivate, ReturnValue) == 0x000000, "Member 'PyAbility_104131_CanActivate::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.OnPressCancle
// 0x0004 (0x0004 - 0x0000)
struct PyAbility_104131_OnPressCancle final
{
public:
	float                                         Useless;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_OnPressCancle) == 0x000004, "Wrong alignment on PyAbility_104131_OnPressCancle");
static_assert(sizeof(PyAbility_104131_OnPressCancle) == 0x000004, "Wrong size on PyAbility_104131_OnPressCancle");
static_assert(offsetof(PyAbility_104131_OnPressCancle, Useless) == 0x000000, "Member 'PyAbility_104131_OnPressCancle::Useless' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.K2_TriggerGameplay
// 0x0004 (0x0004 - 0x0000)
struct PyAbility_104131_K2_TriggerGameplay final
{
public:
	float                                         HoldTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_K2_TriggerGameplay) == 0x000004, "Wrong alignment on PyAbility_104131_K2_TriggerGameplay");
static_assert(sizeof(PyAbility_104131_K2_TriggerGameplay) == 0x000004, "Wrong size on PyAbility_104131_K2_TriggerGameplay");
static_assert(offsetof(PyAbility_104131_K2_TriggerGameplay, HoldTime) == 0x000000, "Member 'PyAbility_104131_K2_TriggerGameplay::HoldTime' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.K2_MaxHoldTimeGameplay
// 0x0004 (0x0004 - 0x0000)
struct PyAbility_104131_K2_MaxHoldTimeGameplay final
{
public:
	float                                         HoldTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_K2_MaxHoldTimeGameplay) == 0x000004, "Wrong alignment on PyAbility_104131_K2_MaxHoldTimeGameplay");
static_assert(sizeof(PyAbility_104131_K2_MaxHoldTimeGameplay) == 0x000004, "Wrong size on PyAbility_104131_K2_MaxHoldTimeGameplay");
static_assert(offsetof(PyAbility_104131_K2_MaxHoldTimeGameplay, HoldTime) == 0x000000, "Member 'PyAbility_104131_K2_MaxHoldTimeGameplay::HoldTime' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.HandleAnimSocketInfo
// 0x00B0 (0x00B0 - 0x0000)
struct PyAbility_104131_HandleAnimSocketInfo final
{
public:
	int32                                         SocketId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilitySocketInfo               SocketInfo;                                        // 0x0010(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(PyAbility_104131_HandleAnimSocketInfo) == 0x000010, "Wrong alignment on PyAbility_104131_HandleAnimSocketInfo");
static_assert(sizeof(PyAbility_104131_HandleAnimSocketInfo) == 0x0000B0, "Wrong size on PyAbility_104131_HandleAnimSocketInfo");
static_assert(offsetof(PyAbility_104131_HandleAnimSocketInfo, SocketId) == 0x000000, "Member 'PyAbility_104131_HandleAnimSocketInfo::SocketId' has a wrong offset!");
static_assert(offsetof(PyAbility_104131_HandleAnimSocketInfo, SocketInfo) == 0x000010, "Member 'PyAbility_104131_HandleAnimSocketInfo::SocketInfo' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_104131_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_K2_OnEndAbility) == 0x000001, "Wrong alignment on PyAbility_104131_K2_OnEndAbility");
static_assert(sizeof(PyAbility_104131_K2_OnEndAbility) == 0x000001, "Wrong size on PyAbility_104131_K2_OnEndAbility");
static_assert(offsetof(PyAbility_104131_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'PyAbility_104131_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.OnNetSync
// 0x0168 (0x0168 - 0x0000)
struct PyAbility_104131_OnNetSync final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0168)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyAbility_104131_OnNetSync) == 0x000008, "Wrong alignment on PyAbility_104131_OnNetSync");
static_assert(sizeof(PyAbility_104131_OnNetSync) == 0x000168, "Wrong size on PyAbility_104131_OnNetSync");
static_assert(offsetof(PyAbility_104131_OnNetSync, Data) == 0x000000, "Member 'PyAbility_104131_OnNetSync::Data' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.OnProjectileTaskSuccess
// 0x0170 (0x0170 - 0x0000)
struct PyAbility_104131_OnProjectileTaskSuccess final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyAbility_104131_OnProjectileTaskSuccess) == 0x000008, "Wrong alignment on PyAbility_104131_OnProjectileTaskSuccess");
static_assert(sizeof(PyAbility_104131_OnProjectileTaskSuccess) == 0x000170, "Wrong size on PyAbility_104131_OnProjectileTaskSuccess");
static_assert(offsetof(PyAbility_104131_OnProjectileTaskSuccess, SpawnActor) == 0x000000, "Member 'PyAbility_104131_OnProjectileTaskSuccess::SpawnActor' has a wrong offset!");
static_assert(offsetof(PyAbility_104131_OnProjectileTaskSuccess, Data) == 0x000008, "Member 'PyAbility_104131_OnProjectileTaskSuccess::Data' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.BackwardProjectileSuccess
// 0x0170 (0x0170 - 0x0000)
struct PyAbility_104131_BackwardProjectileSuccess final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyAbility_104131_BackwardProjectileSuccess) == 0x000008, "Wrong alignment on PyAbility_104131_BackwardProjectileSuccess");
static_assert(sizeof(PyAbility_104131_BackwardProjectileSuccess) == 0x000170, "Wrong size on PyAbility_104131_BackwardProjectileSuccess");
static_assert(offsetof(PyAbility_104131_BackwardProjectileSuccess, SpawnActor) == 0x000000, "Member 'PyAbility_104131_BackwardProjectileSuccess::SpawnActor' has a wrong offset!");
static_assert(offsetof(PyAbility_104131_BackwardProjectileSuccess, Data) == 0x000008, "Member 'PyAbility_104131_BackwardProjectileSuccess::Data' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.OnBackProjectileEndTask
// 0x0008 (0x0008 - 0x0000)
struct PyAbility_104131_OnBackProjectileEndTask final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_OnBackProjectileEndTask) == 0x000008, "Wrong alignment on PyAbility_104131_OnBackProjectileEndTask");
static_assert(sizeof(PyAbility_104131_OnBackProjectileEndTask) == 0x000008, "Wrong size on PyAbility_104131_OnBackProjectileEndTask");
static_assert(offsetof(PyAbility_104131_OnBackProjectileEndTask, Projectile) == 0x000000, "Member 'PyAbility_104131_OnBackProjectileEndTask::Projectile' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.NativeOnMontageCompleted
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_104131_NativeOnMontageCompleted final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_NativeOnMontageCompleted) == 0x000008, "Wrong alignment on PyAbility_104131_NativeOnMontageCompleted");
static_assert(sizeof(PyAbility_104131_NativeOnMontageCompleted) == 0x000010, "Wrong size on PyAbility_104131_NativeOnMontageCompleted");
static_assert(offsetof(PyAbility_104131_NativeOnMontageCompleted, Tag) == 0x000000, "Member 'PyAbility_104131_NativeOnMontageCompleted::Tag' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.NativeOnMontageBlendOut
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_104131_NativeOnMontageBlendOut final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_NativeOnMontageBlendOut) == 0x000008, "Wrong alignment on PyAbility_104131_NativeOnMontageBlendOut");
static_assert(sizeof(PyAbility_104131_NativeOnMontageBlendOut) == 0x000010, "Wrong size on PyAbility_104131_NativeOnMontageBlendOut");
static_assert(offsetof(PyAbility_104131_NativeOnMontageBlendOut, Tag) == 0x000000, "Member 'PyAbility_104131_NativeOnMontageBlendOut::Tag' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.NativeOnMontageInterrupted
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_104131_NativeOnMontageInterrupted final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_NativeOnMontageInterrupted) == 0x000008, "Wrong alignment on PyAbility_104131_NativeOnMontageInterrupted");
static_assert(sizeof(PyAbility_104131_NativeOnMontageInterrupted) == 0x000010, "Wrong size on PyAbility_104131_NativeOnMontageInterrupted");
static_assert(offsetof(PyAbility_104131_NativeOnMontageInterrupted, Tag) == 0x000000, "Member 'PyAbility_104131_NativeOnMontageInterrupted::Tag' has a wrong offset!");

// PythonFunction PyAbility_104131.PyAbility_104131.NativeOnMontageCancelled
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_104131_NativeOnMontageCancelled final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_104131_NativeOnMontageCancelled) == 0x000008, "Wrong alignment on PyAbility_104131_NativeOnMontageCancelled");
static_assert(sizeof(PyAbility_104131_NativeOnMontageCancelled) == 0x000010, "Wrong size on PyAbility_104131_NativeOnMontageCancelled");
static_assert(offsetof(PyAbility_104131_NativeOnMontageCancelled, Tag) == 0x000000, "Member 'PyAbility_104131_NativeOnMontageCancelled::Tag' has a wrong offset!");

// PythonFunction PyAbility_104131.PyUIController_104131.SetAbility
// 0x0010 (0x0010 - 0x0000)
struct PyUIController_104131_SetAbility final
{
public:
	int32                                         InAbilityId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       InAbility;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyUIController_104131_SetAbility) == 0x000008, "Wrong alignment on PyUIController_104131_SetAbility");
static_assert(sizeof(PyUIController_104131_SetAbility) == 0x000010, "Wrong size on PyUIController_104131_SetAbility");
static_assert(offsetof(PyUIController_104131_SetAbility, InAbilityId) == 0x000000, "Member 'PyUIController_104131_SetAbility::InAbilityId' has a wrong offset!");
static_assert(offsetof(PyUIController_104131_SetAbility, InAbility) == 0x000008, "Member 'PyUIController_104131_SetAbility::InAbility' has a wrong offset!");

}

