#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_101191

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_10119101.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_10119101_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10119101_WhileActive) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10119101_WhileActive");
static_assert(sizeof(PyCue_Ability_Loop_10119101_WhileActive) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_10119101_WhileActive");
static_assert(offsetof(PyCue_Ability_Loop_10119101_WhileActive, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10119101_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119101_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10119101_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119101_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_10119101_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_10119101.OnGrabEnemyInAir
// 0x0020 (0x0020 - 0x0000)
struct PyCue_Ability_Loop_10119101_OnGrabEnemyInAir final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarvelBaseCharacter*                   TargetActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10119101_OnGrabEnemyInAir) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10119101_OnGrabEnemyInAir");
static_assert(sizeof(PyCue_Ability_Loop_10119101_OnGrabEnemyInAir) == 0x000020, "Wrong size on PyCue_Ability_Loop_10119101_OnGrabEnemyInAir");
static_assert(offsetof(PyCue_Ability_Loop_10119101_OnGrabEnemyInAir, ImpactPoint) == 0x000000, "Member 'PyCue_Ability_Loop_10119101_OnGrabEnemyInAir::ImpactPoint' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119101_OnGrabEnemyInAir, TargetActor) == 0x000018, "Member 'PyCue_Ability_Loop_10119101_OnGrabEnemyInAir::TargetActor' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_10119101.OnRemove
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_10119101_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10119101_OnRemove) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10119101_OnRemove");
static_assert(sizeof(PyCue_Ability_Loop_10119101_OnRemove) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_10119101_OnRemove");
static_assert(offsetof(PyCue_Ability_Loop_10119101_OnRemove, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10119101_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119101_OnRemove, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10119101_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119101_OnRemove, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_10119101_OnRemove::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyUIController_101191.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct PyUIController_101191_OnTagUpdate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Exist;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyUIController_101191_OnTagUpdate) == 0x000004, "Wrong alignment on PyUIController_101191_OnTagUpdate");
static_assert(sizeof(PyUIController_101191_OnTagUpdate) == 0x000010, "Wrong size on PyUIController_101191_OnTagUpdate");
static_assert(offsetof(PyUIController_101191_OnTagUpdate, Tag) == 0x000000, "Member 'PyUIController_101191_OnTagUpdate::Tag' has a wrong offset!");
static_assert(offsetof(PyUIController_101191_OnTagUpdate, Exist) == 0x00000C, "Member 'PyUIController_101191_OnTagUpdate::Exist' has a wrong offset!");

// PythonFunction PyAbility_101191.PyUIController_101191.PyInitChargeParam
// 0x0002 (0x0002 - 0x0000)
struct PyUIController_101191_PyInitChargeParam final
{
public:
	bool                                          bIsHulk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyUIController_101191_PyInitChargeParam) == 0x000001, "Wrong alignment on PyUIController_101191_PyInitChargeParam");
static_assert(sizeof(PyUIController_101191_PyInitChargeParam) == 0x000002, "Wrong size on PyUIController_101191_PyInitChargeParam");
static_assert(offsetof(PyUIController_101191_PyInitChargeParam, bIsHulk) == 0x000000, "Member 'PyUIController_101191_PyInitChargeParam::bIsHulk' has a wrong offset!");
static_assert(offsetof(PyUIController_101191_PyInitChargeParam, ReturnValue) == 0x000001, "Member 'PyUIController_101191_PyInitChargeParam::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Scope_HitImpact_10119101.ComputeDecalRotation
// 0x0198 (0x0198 - 0x0000)
struct PyCue_Scope_HitImpact_10119101_ComputeDecalRotation final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InCauser;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FRotator                               ReturnValue;                                       // 0x0180(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation) == 0x000008, "Wrong alignment on PyCue_Scope_HitImpact_10119101_ComputeDecalRotation");
static_assert(sizeof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation) == 0x000198, "Wrong size on PyCue_Scope_HitImpact_10119101_ComputeDecalRotation");
static_assert(offsetof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation, InInstigator) == 0x000000, "Member 'PyCue_Scope_HitImpact_10119101_ComputeDecalRotation::InInstigator' has a wrong offset!");
static_assert(offsetof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation, InCauser) == 0x000008, "Member 'PyCue_Scope_HitImpact_10119101_ComputeDecalRotation::InCauser' has a wrong offset!");
static_assert(offsetof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation, HitResult) == 0x000010, "Member 'PyCue_Scope_HitImpact_10119101_ComputeDecalRotation::HitResult' has a wrong offset!");
static_assert(offsetof(PyCue_Scope_HitImpact_10119101_ComputeDecalRotation, ReturnValue) == 0x000180, "Member 'PyCue_Scope_HitImpact_10119101_ComputeDecalRotation::ReturnValue' has a wrong offset!");

// DelegateFunction PyAbility_101191.PyAbility_101191.DelegateGrabEnemyInAir__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarvelBaseCharacter*                   Target_actor;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature) == 0x000008, "Wrong alignment on PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature");
static_assert(sizeof(PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature) == 0x000020, "Wrong size on PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature");
static_assert(offsetof(PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature, ImpactPoint) == 0x000000, "Member 'PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature::ImpactPoint' has a wrong offset!");
static_assert(offsetof(PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature, Target_actor) == 0x000018, "Member 'PyAbility_101191_DelegateGrabEnemyInAir__DelegateSignature::Target_actor' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.CanActivate
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_101191_CanActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_CanActivate) == 0x000001, "Wrong alignment on PyAbility_101191_CanActivate");
static_assert(sizeof(PyAbility_101191_CanActivate) == 0x000001, "Wrong size on PyAbility_101191_CanActivate");
static_assert(offsetof(PyAbility_101191_CanActivate, ReturnValue) == 0x000000, "Member 'PyAbility_101191_CanActivate::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.OnTriggerGrabScope
// 0x0170 (0x0170 - 0x0000)
struct PyAbility_101191_OnTriggerGrabScope final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyAbility_101191_OnTriggerGrabScope) == 0x000008, "Wrong alignment on PyAbility_101191_OnTriggerGrabScope");
static_assert(sizeof(PyAbility_101191_OnTriggerGrabScope) == 0x000170, "Wrong size on PyAbility_101191_OnTriggerGrabScope");
static_assert(offsetof(PyAbility_101191_OnTriggerGrabScope, SpawnActor) == 0x000000, "Member 'PyAbility_101191_OnTriggerGrabScope::SpawnActor' has a wrong offset!");
static_assert(offsetof(PyAbility_101191_OnTriggerGrabScope, Data) == 0x000008, "Member 'PyAbility_101191_OnTriggerGrabScope::Data' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.GetCollideKnockDownDamage
// 0x0004 (0x0004 - 0x0000)
struct PyAbility_101191_GetCollideKnockDownDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_GetCollideKnockDownDamage) == 0x000004, "Wrong alignment on PyAbility_101191_GetCollideKnockDownDamage");
static_assert(sizeof(PyAbility_101191_GetCollideKnockDownDamage) == 0x000004, "Wrong size on PyAbility_101191_GetCollideKnockDownDamage");
static_assert(offsetof(PyAbility_101191_GetCollideKnockDownDamage, ReturnValue) == 0x000000, "Member 'PyAbility_101191_GetCollideKnockDownDamage::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.K2_TriggerGameplay
// 0x0004 (0x0004 - 0x0000)
struct PyAbility_101191_K2_TriggerGameplay final
{
public:
	float                                         HoldTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_K2_TriggerGameplay) == 0x000004, "Wrong alignment on PyAbility_101191_K2_TriggerGameplay");
static_assert(sizeof(PyAbility_101191_K2_TriggerGameplay) == 0x000004, "Wrong size on PyAbility_101191_K2_TriggerGameplay");
static_assert(offsetof(PyAbility_101191_K2_TriggerGameplay, HoldTime) == 0x000000, "Member 'PyAbility_101191_K2_TriggerGameplay::HoldTime' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.OnGrabScopeSpawned
// 0x0170 (0x0170 - 0x0000)
struct PyAbility_101191_OnGrabScopeSpawned final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyAbility_101191_OnGrabScopeSpawned) == 0x000008, "Wrong alignment on PyAbility_101191_OnGrabScopeSpawned");
static_assert(sizeof(PyAbility_101191_OnGrabScopeSpawned) == 0x000170, "Wrong size on PyAbility_101191_OnGrabScopeSpawned");
static_assert(offsetof(PyAbility_101191_OnGrabScopeSpawned, SpawnActor) == 0x000000, "Member 'PyAbility_101191_OnGrabScopeSpawned::SpawnActor' has a wrong offset!");
static_assert(offsetof(PyAbility_101191_OnGrabScopeSpawned, Data) == 0x000008, "Member 'PyAbility_101191_OnGrabScopeSpawned::Data' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_101191_K2_OnEndAbility final
{
public:
	bool                                          Cancel;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_K2_OnEndAbility) == 0x000001, "Wrong alignment on PyAbility_101191_K2_OnEndAbility");
static_assert(sizeof(PyAbility_101191_K2_OnEndAbility) == 0x000001, "Wrong size on PyAbility_101191_K2_OnEndAbility");
static_assert(offsetof(PyAbility_101191_K2_OnEndAbility, Cancel) == 0x000000, "Member 'PyAbility_101191_K2_OnEndAbility::Cancel' has a wrong offset!");

// PythonFunction PyAbility_101191.PyAbility_101191.NativeOnMontageCompleted
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_101191_NativeOnMontageCompleted final
{
public:
	class FString                                 EventTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101191_NativeOnMontageCompleted) == 0x000008, "Wrong alignment on PyAbility_101191_NativeOnMontageCompleted");
static_assert(sizeof(PyAbility_101191_NativeOnMontageCompleted) == 0x000010, "Wrong size on PyAbility_101191_NativeOnMontageCompleted");
static_assert(offsetof(PyAbility_101191_NativeOnMontageCompleted, EventTag) == 0x000000, "Member 'PyAbility_101191_NativeOnMontageCompleted::EventTag' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_101191_AirGrab.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_101191_AirGrab_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_101191_AirGrab_WhileActive) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_101191_AirGrab_WhileActive");
static_assert(sizeof(PyCue_Ability_Loop_101191_AirGrab_WhileActive) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_101191_AirGrab_WhileActive");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_WhileActive, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_101191_AirGrab_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_101191_AirGrab_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_101191_AirGrab_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_101191_AirGrab.OnRemove
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_101191_AirGrab_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_101191_AirGrab_OnRemove) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_101191_AirGrab_OnRemove");
static_assert(sizeof(PyCue_Ability_Loop_101191_AirGrab_OnRemove) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_101191_AirGrab_OnRemove");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_OnRemove, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_101191_AirGrab_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_OnRemove, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_101191_AirGrab_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_101191_AirGrab_OnRemove, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_101191_AirGrab_OnRemove::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101191.PyWidget_AbilityEnergy_101191.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct PyWidget_AbilityEnergy_101191_SetVisible final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyWidget_AbilityEnergy_101191_SetVisible) == 0x000001, "Wrong alignment on PyWidget_AbilityEnergy_101191_SetVisible");
static_assert(sizeof(PyWidget_AbilityEnergy_101191_SetVisible) == 0x000001, "Wrong size on PyWidget_AbilityEnergy_101191_SetVisible");
static_assert(offsetof(PyWidget_AbilityEnergy_101191_SetVisible, bInVisible) == 0x000000, "Member 'PyWidget_AbilityEnergy_101191_SetVisible::bInVisible' has a wrong offset!");

// PythonFunction PyAbility_101191.PyWidget_AbilityEnergy_101191.SetVisibleImmediately
// 0x0001 (0x0001 - 0x0000)
struct PyWidget_AbilityEnergy_101191_SetVisibleImmediately final
{
public:
	bool                                          Invisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyWidget_AbilityEnergy_101191_SetVisibleImmediately) == 0x000001, "Wrong alignment on PyWidget_AbilityEnergy_101191_SetVisibleImmediately");
static_assert(sizeof(PyWidget_AbilityEnergy_101191_SetVisibleImmediately) == 0x000001, "Wrong size on PyWidget_AbilityEnergy_101191_SetVisibleImmediately");
static_assert(offsetof(PyWidget_AbilityEnergy_101191_SetVisibleImmediately, Invisible) == 0x000000, "Member 'PyWidget_AbilityEnergy_101191_SetVisibleImmediately::Invisible' has a wrong offset!");

// PythonFunction PyAbility_101191.PyWidget_AbilityEnergy_101191.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct PyWidget_AbilityEnergy_101191_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyWidget_AbilityEnergy_101191_SetPercent) == 0x000004, "Wrong alignment on PyWidget_AbilityEnergy_101191_SetPercent");
static_assert(sizeof(PyWidget_AbilityEnergy_101191_SetPercent) == 0x000004, "Wrong size on PyWidget_AbilityEnergy_101191_SetPercent");
static_assert(offsetof(PyWidget_AbilityEnergy_101191_SetPercent, InPercent) == 0x000000, "Member 'PyWidget_AbilityEnergy_101191_SetPercent::InPercent' has a wrong offset!");

// PythonFunction PyAbility_101191.PyCue_Ability_Loop_10119103.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_10119103_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10119103_WhileActive) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10119103_WhileActive");
static_assert(sizeof(PyCue_Ability_Loop_10119103_WhileActive) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_10119103_WhileActive");
static_assert(offsetof(PyCue_Ability_Loop_10119103_WhileActive, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10119103_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119103_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10119103_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10119103_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_10119103_WhileActive::ReturnValue' has a wrong offset!");

}

