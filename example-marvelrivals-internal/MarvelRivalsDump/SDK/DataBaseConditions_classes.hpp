#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataBaseConditions

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// PythonClass DataBaseConditions.PyDataBaseConditionObject
// 0x0000 (0x0030 - 0x0030)
class UPyDataBaseConditionObject : public UDataBaseConditionObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyDataBaseConditionObject">();
	}
	static class UPyDataBaseConditionObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyDataBaseConditionObject>();
	}
};
static_assert(alignof(UPyDataBaseConditionObject) == 0x000008, "Wrong alignment on UPyDataBaseConditionObject");
static_assert(sizeof(UPyDataBaseConditionObject) == 0x000030, "Wrong size on UPyDataBaseConditionObject");

// PythonClass DataBaseConditions.FromSpecialProjectile
// 0x0010 (0x0040 - 0x0030)
class UFromSpecialProjectile final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 ScopeIDs;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FromSpecialProjectile">();
	}
	static class UFromSpecialProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFromSpecialProjectile>();
	}
};
static_assert(alignof(UFromSpecialProjectile) == 0x000008, "Wrong alignment on UFromSpecialProjectile");
static_assert(sizeof(UFromSpecialProjectile) == 0x000040, "Wrong size on UFromSpecialProjectile");
static_assert(offsetof(UFromSpecialProjectile, ScopeIDs) == 0x000030, "Member 'UFromSpecialProjectile::ScopeIDs' has a wrong offset!");

// PythonClass DataBaseConditions.FromSpecialBuff
// 0x0010 (0x0040 - 0x0030)
class UFromSpecialBuff final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 BuffIds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FromSpecialBuff">();
	}
	static class UFromSpecialBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFromSpecialBuff>();
	}
};
static_assert(alignof(UFromSpecialBuff) == 0x000008, "Wrong alignment on UFromSpecialBuff");
static_assert(sizeof(UFromSpecialBuff) == 0x000040, "Wrong size on UFromSpecialBuff");
static_assert(offsetof(UFromSpecialBuff, BuffIds) == 0x000030, "Member 'UFromSpecialBuff::BuffIds' has a wrong offset!");

// PythonClass DataBaseConditions.AttributeCondition
// 0x0058 (0x0088 - 0x0030)
class UAttributeCondition final : public UPyDataBaseConditionObject
{
public:
	int32                                         LimitTarget;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0038(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributePercent;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeValue;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGreaterThan;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLessThan;                                        // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEqual;                                           // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttributeCondition">();
	}
	static class UAttributeCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttributeCondition>();
	}
};
static_assert(alignof(UAttributeCondition) == 0x000008, "Wrong alignment on UAttributeCondition");
static_assert(sizeof(UAttributeCondition) == 0x000088, "Wrong size on UAttributeCondition");
static_assert(offsetof(UAttributeCondition, LimitTarget) == 0x000030, "Member 'UAttributeCondition::LimitTarget' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, Attribute) == 0x000038, "Member 'UAttributeCondition::Attribute' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, AttributePercent) == 0x000078, "Member 'UAttributeCondition::AttributePercent' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, AttributeValue) == 0x00007C, "Member 'UAttributeCondition::AttributeValue' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, IsGreaterThan) == 0x000080, "Member 'UAttributeCondition::IsGreaterThan' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, IsLessThan) == 0x000081, "Member 'UAttributeCondition::IsLessThan' has a wrong offset!");
static_assert(offsetof(UAttributeCondition, IsEqual) == 0x000082, "Member 'UAttributeCondition::IsEqual' has a wrong offset!");

// PythonClass DataBaseConditions.BeAfterSpecialBuff
// 0x0018 (0x0048 - 0x0030)
class UBeAfterSpecialBuff final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 BuffIds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTime;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetConditionHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeAfterSpecialBuff">();
	}
	static class UBeAfterSpecialBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeAfterSpecialBuff>();
	}
};
static_assert(alignof(UBeAfterSpecialBuff) == 0x000008, "Wrong alignment on UBeAfterSpecialBuff");
static_assert(sizeof(UBeAfterSpecialBuff) == 0x000048, "Wrong size on UBeAfterSpecialBuff");
static_assert(offsetof(UBeAfterSpecialBuff, BuffIds) == 0x000030, "Member 'UBeAfterSpecialBuff::BuffIds' has a wrong offset!");
static_assert(offsetof(UBeAfterSpecialBuff, LimitTarget) == 0x000040, "Member 'UBeAfterSpecialBuff::LimitTarget' has a wrong offset!");
static_assert(offsetof(UBeAfterSpecialBuff, LastTime) == 0x000044, "Member 'UBeAfterSpecialBuff::LastTime' has a wrong offset!");

// PythonClass DataBaseConditions.FromSpecialSkill
// 0x0010 (0x0040 - 0x0030)
class UFromSpecialSkill final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 SkillIds;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FromSpecialSkill">();
	}
	static class UFromSpecialSkill* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFromSpecialSkill>();
	}
};
static_assert(alignof(UFromSpecialSkill) == 0x000008, "Wrong alignment on UFromSpecialSkill");
static_assert(sizeof(UFromSpecialSkill) == 0x000040, "Wrong size on UFromSpecialSkill");
static_assert(offsetof(UFromSpecialSkill, SkillIds) == 0x000030, "Member 'UFromSpecialSkill::SkillIds' has a wrong offset!");

// PythonClass DataBaseConditions.FromSpecialScope
// 0x0010 (0x0040 - 0x0030)
class UFromSpecialScope final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 ScopeIDs;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FromSpecialScope">();
	}
	static class UFromSpecialScope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFromSpecialScope>();
	}
};
static_assert(alignof(UFromSpecialScope) == 0x000008, "Wrong alignment on UFromSpecialScope");
static_assert(sizeof(UFromSpecialScope) == 0x000040, "Wrong size on UFromSpecialScope");
static_assert(offsetof(UFromSpecialScope, ScopeIDs) == 0x000030, "Member 'UFromSpecialScope::ScopeIDs' has a wrong offset!");

// PythonClass DataBaseConditions.BeInSpecialBuff
// 0x0008 (0x0038 - 0x0030)
class UBeInSpecialBuff final : public UPyDataBaseConditionObject
{
public:
	int32                                         BuffID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetConditionHeroIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeInSpecialBuff">();
	}
	static class UBeInSpecialBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeInSpecialBuff>();
	}
};
static_assert(alignof(UBeInSpecialBuff) == 0x000008, "Wrong alignment on UBeInSpecialBuff");
static_assert(sizeof(UBeInSpecialBuff) == 0x000038, "Wrong size on UBeInSpecialBuff");
static_assert(offsetof(UBeInSpecialBuff, BuffID) == 0x000030, "Member 'UBeInSpecialBuff::BuffID' has a wrong offset!");
static_assert(offsetof(UBeInSpecialBuff, LimitTarget) == 0x000034, "Member 'UBeInSpecialBuff::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.CheckBeInChange
// 0x0010 (0x0040 - 0x0030)
class UCheckBeInChange final : public UPyDataBaseConditionObject
{
public:
	int32                                         HeroID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToHeroID;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetConditionHeroIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckBeInChange">();
	}
	static class UCheckBeInChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckBeInChange>();
	}
};
static_assert(alignof(UCheckBeInChange) == 0x000008, "Wrong alignment on UCheckBeInChange");
static_assert(sizeof(UCheckBeInChange) == 0x000040, "Wrong size on UCheckBeInChange");
static_assert(offsetof(UCheckBeInChange, HeroID) == 0x000030, "Member 'UCheckBeInChange::HeroID' has a wrong offset!");
static_assert(offsetof(UCheckBeInChange, ToHeroID) == 0x000034, "Member 'UCheckBeInChange::ToHeroID' has a wrong offset!");
static_assert(offsetof(UCheckBeInChange, LimitTarget) == 0x000038, "Member 'UCheckBeInChange::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.BeInSpecialTag
// 0x0010 (0x0040 - 0x0030)
class UBeInSpecialTag final : public UPyDataBaseConditionObject
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0030(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeInSpecialTag">();
	}
	static class UBeInSpecialTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeInSpecialTag>();
	}
};
static_assert(alignof(UBeInSpecialTag) == 0x000008, "Wrong alignment on UBeInSpecialTag");
static_assert(sizeof(UBeInSpecialTag) == 0x000040, "Wrong size on UBeInSpecialTag");
static_assert(offsetof(UBeInSpecialTag, Tag) == 0x000030, "Member 'UBeInSpecialTag::Tag' has a wrong offset!");
static_assert(offsetof(UBeInSpecialTag, LimitTarget) == 0x00003C, "Member 'UBeInSpecialTag::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.BeSpecialSculpt
// 0x0018 (0x0048 - 0x0030)
class UBeSpecialSculpt final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 SculptIDs;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeSpecialSculpt">();
	}
	static class UBeSpecialSculpt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeSpecialSculpt>();
	}
};
static_assert(alignof(UBeSpecialSculpt) == 0x000008, "Wrong alignment on UBeSpecialSculpt");
static_assert(sizeof(UBeSpecialSculpt) == 0x000048, "Wrong size on UBeSpecialSculpt");
static_assert(offsetof(UBeSpecialSculpt, SculptIDs) == 0x000030, "Member 'UBeSpecialSculpt::SculptIDs' has a wrong offset!");
static_assert(offsetof(UBeSpecialSculpt, LimitTarget) == 0x000040, "Member 'UBeSpecialSculpt::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.InSpecialAbility
// 0x0010 (0x0040 - 0x0030)
class UInSpecialAbility final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InSpecialAbility">();
	}
	static class UInSpecialAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInSpecialAbility>();
	}
};
static_assert(alignof(UInSpecialAbility) == 0x000008, "Wrong alignment on UInSpecialAbility");
static_assert(sizeof(UInSpecialAbility) == 0x000040, "Wrong size on UInSpecialAbility");
static_assert(offsetof(UInSpecialAbility, AbilityIDs) == 0x000030, "Member 'UInSpecialAbility::AbilityIDs' has a wrong offset!");

// PythonClass DataBaseConditions.AfterSpecialAbility
// 0x0018 (0x0048 - 0x0030)
class UAfterSpecialAbility final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LastTime;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnd;                                             // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AfterSpecialAbility">();
	}
	static class UAfterSpecialAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAfterSpecialAbility>();
	}
};
static_assert(alignof(UAfterSpecialAbility) == 0x000008, "Wrong alignment on UAfterSpecialAbility");
static_assert(sizeof(UAfterSpecialAbility) == 0x000048, "Wrong size on UAfterSpecialAbility");
static_assert(offsetof(UAfterSpecialAbility, AbilityIDs) == 0x000030, "Member 'UAfterSpecialAbility::AbilityIDs' has a wrong offset!");
static_assert(offsetof(UAfterSpecialAbility, LastTime) == 0x000040, "Member 'UAfterSpecialAbility::LastTime' has a wrong offset!");
static_assert(offsetof(UAfterSpecialAbility, IsEnd) == 0x000044, "Member 'UAfterSpecialAbility::IsEnd' has a wrong offset!");

// PythonClass DataBaseConditions.BeWithOtherHero
// 0x0008 (0x0038 - 0x0030)
class UBeWithOtherHero final : public UPyDataBaseConditionObject
{
public:
	int32                                         HeroID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     FamilyID;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetConditionHeroIDsAll();
	TSet<class FString> GetConditionHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeWithOtherHero">();
	}
	static class UBeWithOtherHero* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeWithOtherHero>();
	}
};
static_assert(alignof(UBeWithOtherHero) == 0x000008, "Wrong alignment on UBeWithOtherHero");
static_assert(sizeof(UBeWithOtherHero) == 0x000038, "Wrong size on UBeWithOtherHero");
static_assert(offsetof(UBeWithOtherHero, HeroID) == 0x000030, "Member 'UBeWithOtherHero::HeroID' has a wrong offset!");
static_assert(offsetof(UBeWithOtherHero, FamilyID) == 0x000034, "Member 'UBeWithOtherHero::FamilyID' has a wrong offset!");

// PythonClass DataBaseConditions.SpecialLevelCondition
// 0x0010 (0x0040 - 0x0030)
class USpecialLevelCondition final : public UPyDataBaseConditionObject
{
public:
	TArray<EMatchState>                           LevelSpecials;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialLevelCondition">();
	}
	static class USpecialLevelCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialLevelCondition>();
	}
};
static_assert(alignof(USpecialLevelCondition) == 0x000008, "Wrong alignment on USpecialLevelCondition");
static_assert(sizeof(USpecialLevelCondition) == 0x000040, "Wrong size on USpecialLevelCondition");
static_assert(offsetof(USpecialLevelCondition, LevelSpecials) == 0x000030, "Member 'USpecialLevelCondition::LevelSpecials' has a wrong offset!");

// PythonClass DataBaseConditions.MapCondition
// 0x0010 (0x0040 - 0x0030)
class UMapCondition final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 MapID;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetConditionMapIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MapCondition">();
	}
	static class UMapCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapCondition>();
	}
};
static_assert(alignof(UMapCondition) == 0x000008, "Wrong alignment on UMapCondition");
static_assert(sizeof(UMapCondition) == 0x000040, "Wrong size on UMapCondition");
static_assert(offsetof(UMapCondition, MapID) == 0x000030, "Member 'UMapCondition::MapID' has a wrong offset!");

// PythonClass DataBaseConditions.ModeCondition
// 0x0010 (0x0040 - 0x0030)
class UModeCondition final : public UPyDataBaseConditionObject
{
public:
	TArray<int32>                                 ModeID;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModeCondition">();
	}
	static class UModeCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModeCondition>();
	}
};
static_assert(alignof(UModeCondition) == 0x000008, "Wrong alignment on UModeCondition");
static_assert(sizeof(UModeCondition) == 0x000040, "Wrong size on UModeCondition");
static_assert(offsetof(UModeCondition, ModeID) == 0x000030, "Member 'UModeCondition::ModeID' has a wrong offset!");

// PythonClass DataBaseConditions.IsAITargetCondition
// 0x0008 (0x0038 - 0x0030)
class UIsAITargetCondition final : public UPyDataBaseConditionObject
{
public:
	int32                                         LimitTarget;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsAITargetCondition">();
	}
	static class UIsAITargetCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsAITargetCondition>();
	}
};
static_assert(alignof(UIsAITargetCondition) == 0x000008, "Wrong alignment on UIsAITargetCondition");
static_assert(sizeof(UIsAITargetCondition) == 0x000038, "Wrong size on UIsAITargetCondition");
static_assert(offsetof(UIsAITargetCondition, LimitTarget) == 0x000030, "Member 'UIsAITargetCondition::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.SideCondition
// 0x0018 (0x0048 - 0x0030)
class USideCondition final : public UPyDataBaseConditionObject
{
public:
	TArray<EBattleSide>                           BattleSides;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SideCondition">();
	}
	static class USideCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USideCondition>();
	}
};
static_assert(alignof(USideCondition) == 0x000008, "Wrong alignment on USideCondition");
static_assert(sizeof(USideCondition) == 0x000048, "Wrong size on USideCondition");
static_assert(offsetof(USideCondition, BattleSides) == 0x000030, "Member 'USideCondition::BattleSides' has a wrong offset!");
static_assert(offsetof(USideCondition, LimitTarget) == 0x000040, "Member 'USideCondition::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.DeathIndex
// 0x0008 (0x0038 - 0x0030)
class UDeathIndex final : public UPyDataBaseConditionObject
{
public:
	int32                                         NumFirst;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeathIndex">();
	}
	static class UDeathIndex* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeathIndex>();
	}
};
static_assert(alignof(UDeathIndex) == 0x000008, "Wrong alignment on UDeathIndex");
static_assert(sizeof(UDeathIndex) == 0x000038, "Wrong size on UDeathIndex");
static_assert(offsetof(UDeathIndex, NumFirst) == 0x000030, "Member 'UDeathIndex::NumFirst' has a wrong offset!");
static_assert(offsetof(UDeathIndex, LimitTarget) == 0x000034, "Member 'UDeathIndex::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.InsideArea
// 0x0018 (0x0048 - 0x0030)
class UInsideArea final : public UPyDataBaseConditionObject
{
public:
	TArray<class FString>                         Tags;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InsideArea">();
	}
	static class UInsideArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInsideArea>();
	}
};
static_assert(alignof(UInsideArea) == 0x000008, "Wrong alignment on UInsideArea");
static_assert(sizeof(UInsideArea) == 0x000048, "Wrong size on UInsideArea");
static_assert(offsetof(UInsideArea, Tags) == 0x000030, "Member 'UInsideArea::Tags' has a wrong offset!");
static_assert(offsetof(UInsideArea, LimitTarget) == 0x000040, "Member 'UInsideArea::LimitTarget' has a wrong offset!");

// PythonClass DataBaseConditions.CustomCondition
// 0x0010 (0x0040 - 0x0030)
class UCustomCondition final : public UPyDataBaseConditionObject
{
public:
	class FString                                 EvalStr;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomCondition">();
	}
	static class UCustomCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomCondition>();
	}
};
static_assert(alignof(UCustomCondition) == 0x000008, "Wrong alignment on UCustomCondition");
static_assert(sizeof(UCustomCondition) == 0x000040, "Wrong size on UCustomCondition");
static_assert(offsetof(UCustomCondition, EvalStr) == 0x000030, "Member 'UCustomCondition::EvalStr' has a wrong offset!");

}

