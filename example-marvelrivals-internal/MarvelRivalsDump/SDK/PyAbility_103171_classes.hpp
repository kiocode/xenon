#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_103171

#include "Basic.hpp"

#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// PythonClass PyAbility_103171.PyWidget_Switch_AbilityStatus_103171
// 0x0000 (0x05A8 - 0x05A8)
class UPyWidget_Switch_AbilityStatus_103171 : public UMarvelUserWidget
{
public:
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_Switch_AbilityStatus_103171">();
	}
	static class UPyWidget_Switch_AbilityStatus_103171* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_Switch_AbilityStatus_103171>();
	}
};
static_assert(alignof(UPyWidget_Switch_AbilityStatus_103171) == 0x000008, "Wrong alignment on UPyWidget_Switch_AbilityStatus_103171");
static_assert(sizeof(UPyWidget_Switch_AbilityStatus_103171) == 0x0005A8, "Wrong size on UPyWidget_Switch_AbilityStatus_103171");

// PythonClass PyAbility_103171.PyConfig_103171
// 0x0018 (0x00B0 - 0x0098)
class UPyConfig_103171 final : public UMarvelAbilityConfig
{
public:
	float                                         Interval;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScopeTreat;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScopeDamage;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           SwitchAction;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_103171">();
	}
	static class UPyConfig_103171* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_103171>();
	}
};
static_assert(alignof(UPyConfig_103171) == 0x000008, "Wrong alignment on UPyConfig_103171");
static_assert(sizeof(UPyConfig_103171) == 0x0000B0, "Wrong size on UPyConfig_103171");
static_assert(offsetof(UPyConfig_103171, Interval) == 0x000098, "Member 'UPyConfig_103171::Interval' has a wrong offset!");
static_assert(offsetof(UPyConfig_103171, ScopeTreat) == 0x00009C, "Member 'UPyConfig_103171::ScopeTreat' has a wrong offset!");
static_assert(offsetof(UPyConfig_103171, ScopeDamage) == 0x0000A0, "Member 'UPyConfig_103171::ScopeDamage' has a wrong offset!");
static_assert(offsetof(UPyConfig_103171, SwitchAction) == 0x0000A8, "Member 'UPyConfig_103171::SwitchAction' has a wrong offset!");

// PythonClass PyAbility_103171.PyWidget_103171
// 0x0008 (0x05B0 - 0x05A8)
class UPyWidget_103171 : public UMarvelUserWidget
{
public:
	int32                                         TreatScopeID;                                      // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopPlayDealyTime;                                 // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_103171">();
	}
	static class UPyWidget_103171* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_103171>();
	}
};
static_assert(alignof(UPyWidget_103171) == 0x000008, "Wrong alignment on UPyWidget_103171");
static_assert(sizeof(UPyWidget_103171) == 0x0005B0, "Wrong size on UPyWidget_103171");
static_assert(offsetof(UPyWidget_103171, TreatScopeID) == 0x0005A8, "Member 'UPyWidget_103171::TreatScopeID' has a wrong offset!");
static_assert(offsetof(UPyWidget_103171, LoopPlayDealyTime) == 0x0005AC, "Member 'UPyWidget_103171::LoopPlayDealyTime' has a wrong offset!");

// PythonClass PyAbility_103171.PyAbility_103171
// 0x0038 (0x25C0 - 0x2588)
class UPyAbility_103171 : public UAbility_108
{
public:
	int32                                         ScopeId;                                           // 0x2588(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258C[0x4];                                     // 0x258C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSwitchDelegate;                                  // 0x2590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamKilled;                                      // 0x25A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnScopeChanged;                                    // 0x25B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void BeginPlay();
	bool CanActivate();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void MissileEventNotify();
	void OnSwitchDelegate__DelegateSignature();
	void OnTeamKilled__DelegateSignature();
	void OnActorDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnSwitchScope(float TimeWaited);
	void OnSwitch(float TimeWaited);
	void OnGamepadSwitch(float TimeWaited);
	void ServerOnSwitch(float TimeWaited);
	void OnDurationEnd();
	void OnScopeChanged__DelegateSignature(int32 ScopeId_0);
	void OnRep_ScopeID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_103171">();
	}
	static class UPyAbility_103171* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_103171>();
	}
};
static_assert(alignof(UPyAbility_103171) == 0x000008, "Wrong alignment on UPyAbility_103171");
static_assert(sizeof(UPyAbility_103171) == 0x0025C0, "Wrong size on UPyAbility_103171");
static_assert(offsetof(UPyAbility_103171, ScopeId) == 0x002588, "Member 'UPyAbility_103171::ScopeId' has a wrong offset!");
static_assert(offsetof(UPyAbility_103171, OnSwitchDelegate) == 0x002590, "Member 'UPyAbility_103171::OnSwitchDelegate' has a wrong offset!");
static_assert(offsetof(UPyAbility_103171, OnTeamKilled) == 0x0025A0, "Member 'UPyAbility_103171::OnTeamKilled' has a wrong offset!");
static_assert(offsetof(UPyAbility_103171, OnScopeChanged) == 0x0025B0, "Member 'UPyAbility_103171::OnScopeChanged' has a wrong offset!");

// PythonClass PyAbility_103171.PyCue_Scope_Loop_10317101
// 0x0008 (0x0D78 - 0x0D70)
class APyCue_Scope_Loop_10317101 : public AMarvelCueNotify_Scope
{
public:
	int32                                         ScopeId;                                           // 0x0D70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void UpdateMusic(class AActor* Instigator_0);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Scope_Loop_10317101">();
	}
	static class APyCue_Scope_Loop_10317101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Scope_Loop_10317101>();
	}
};
static_assert(alignof(APyCue_Scope_Loop_10317101) == 0x000008, "Wrong alignment on APyCue_Scope_Loop_10317101");
static_assert(sizeof(APyCue_Scope_Loop_10317101) == 0x000D78, "Wrong size on APyCue_Scope_Loop_10317101");
static_assert(offsetof(APyCue_Scope_Loop_10317101, ScopeId) == 0x000D70, "Member 'APyCue_Scope_Loop_10317101::ScopeId' has a wrong offset!");

// PythonClass PyAbility_103171.PyUIController_103171
// 0x0010 (0x0C70 - 0x0C60)
class UPyUIController_103171 : public UUIC_Ability
{
public:
	struct FGameplayTag                           StatusTag;                                         // 0x0C60(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetAbility(int32 InAbilityId, class UGameplayAbility* InAbility);
	void UpdateWidget(int32 ScopeId);
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_103171">();
	}
	static class UPyUIController_103171* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_103171>();
	}
};
static_assert(alignof(UPyUIController_103171) == 0x000008, "Wrong alignment on UPyUIController_103171");
static_assert(sizeof(UPyUIController_103171) == 0x000C70, "Wrong size on UPyUIController_103171");
static_assert(offsetof(UPyUIController_103171, StatusTag) == 0x000C60, "Member 'UPyUIController_103171::StatusTag' has a wrong offset!");

// PythonClass PyAbility_103171.PyCue_Ability_Loop_10317101
// 0x00F8 (0x0F48 - 0x0E50)
class APyCue_Ability_Loop_10317101 : public AMarvelCueNotify_Ability
{
public:
	int32                                         AbilityID;                                         // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FXParam;                                           // 0x0E54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, float>                            ParamValMap;                                       // 0x0E60(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         ExtraOnceAsset;                                    // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtraOnceFXSocket;                                 // 0x0EB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC4[0x4];                                      // 0x0EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         SwitchOnceFXAsset;                                 // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchOnceFXSocket;                                // 0x0ED0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenChangeLogoParamName;                           // 0x0EDC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeLogoParamName;                               // 0x0EE8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF4[0x4];                                      // 0x0EF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            LogoParamValMap;                                   // 0x0EF8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnScopeChanged(int32 Scope_id);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Ability_Loop_10317101">();
	}
	static class APyCue_Ability_Loop_10317101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Ability_Loop_10317101>();
	}
};
static_assert(alignof(APyCue_Ability_Loop_10317101) == 0x000008, "Wrong alignment on APyCue_Ability_Loop_10317101");
static_assert(sizeof(APyCue_Ability_Loop_10317101) == 0x000F48, "Wrong size on APyCue_Ability_Loop_10317101");
static_assert(offsetof(APyCue_Ability_Loop_10317101, AbilityID) == 0x000E50, "Member 'APyCue_Ability_Loop_10317101::AbilityID' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, FXParam) == 0x000E54, "Member 'APyCue_Ability_Loop_10317101::FXParam' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, ParamValMap) == 0x000E60, "Member 'APyCue_Ability_Loop_10317101::ParamValMap' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, ExtraOnceAsset) == 0x000EB0, "Member 'APyCue_Ability_Loop_10317101::ExtraOnceAsset' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, ExtraOnceFXSocket) == 0x000EB8, "Member 'APyCue_Ability_Loop_10317101::ExtraOnceFXSocket' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, SwitchOnceFXAsset) == 0x000EC8, "Member 'APyCue_Ability_Loop_10317101::SwitchOnceFXAsset' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, SwitchOnceFXSocket) == 0x000ED0, "Member 'APyCue_Ability_Loop_10317101::SwitchOnceFXSocket' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, OpenChangeLogoParamName) == 0x000EDC, "Member 'APyCue_Ability_Loop_10317101::OpenChangeLogoParamName' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, ChangeLogoParamName) == 0x000EE8, "Member 'APyCue_Ability_Loop_10317101::ChangeLogoParamName' has a wrong offset!");
static_assert(offsetof(APyCue_Ability_Loop_10317101, LogoParamValMap) == 0x000EF8, "Member 'APyCue_Ability_Loop_10317101::LogoParamValMap' has a wrong offset!");

}

