#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1050

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Hero_1050_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class Hero_1050.Ability_105001
// 0x0008 (0x2588 - 0x2580)
class UAbility_105001 final : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x8];                                     // 0x2580(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSkillEnergyAttrRegen(float NewValue, float OldValue);

	void SetTargetInBattleState(class AActor* InTarget, bool bIsBattling) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_105001">();
	}
	static class UAbility_105001* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_105001>();
	}
};
static_assert(alignof(UAbility_105001) == 0x000008, "Wrong alignment on UAbility_105001");
static_assert(sizeof(UAbility_105001) == 0x002588, "Wrong size on UAbility_105001");

// Class Hero_1050.Summoned_1050_Base
// 0x0030 (0x09A0 - 0x0970)
class ASummoned_1050_Base final : public AProtectiveSummoner
{
public:
	int32                                         ImmunityBuffID;                                    // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldRadiusMultiplier;                            // 0x096C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShieldRadiusCurve;                                 // 0x0970(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSummonedHealthChangeDelegate;                    // 0x0978(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         InitialHealth;                                     // 0x0988(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_98C[0x14];                                     // 0x098C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitSummonedHealth(float NewValue);
	void MulticastResetSummonedLifeSpan(float InLifeTime);
	void SetSummonedAttributeValue(const EMarvelAttributeType InAttributeType, float NewValue);

	float GetSummonedSphereRadius() const;
	void SetSummonedSphereRadius(float NewValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_1050_Base">();
	}
	static class ASummoned_1050_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_1050_Base>();
	}
};
static_assert(alignof(ASummoned_1050_Base) == 0x000010, "Wrong alignment on ASummoned_1050_Base");
static_assert(sizeof(ASummoned_1050_Base) == 0x0009A0, "Wrong size on ASummoned_1050_Base");
static_assert(offsetof(ASummoned_1050_Base, ImmunityBuffID) == 0x000968, "Member 'ASummoned_1050_Base::ImmunityBuffID' has a wrong offset!");
static_assert(offsetof(ASummoned_1050_Base, ShieldRadiusMultiplier) == 0x00096C, "Member 'ASummoned_1050_Base::ShieldRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(ASummoned_1050_Base, ShieldRadiusCurve) == 0x000970, "Member 'ASummoned_1050_Base::ShieldRadiusCurve' has a wrong offset!");
static_assert(offsetof(ASummoned_1050_Base, OnSummonedHealthChangeDelegate) == 0x000978, "Member 'ASummoned_1050_Base::OnSummonedHealthChangeDelegate' has a wrong offset!");
static_assert(offsetof(ASummoned_1050_Base, InitialHealth) == 0x000988, "Member 'ASummoned_1050_Base::InitialHealth' has a wrong offset!");

// Class Hero_1050.Config_OffBattleBuffMgr
// 0x0080 (0x0118 - 0x0098)
class UConfig_OffBattleBuffMgr final : public UMarvelAbilityConfig
{
public:
	TArray<int32>                                 ApplyBuffID;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockBuffTags;                                     // 0x00A8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         OffBattleDelay;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_OffBattleBuffMgr">();
	}
	static class UConfig_OffBattleBuffMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_OffBattleBuffMgr>();
	}
};
static_assert(alignof(UConfig_OffBattleBuffMgr) == 0x000008, "Wrong alignment on UConfig_OffBattleBuffMgr");
static_assert(sizeof(UConfig_OffBattleBuffMgr) == 0x000118, "Wrong size on UConfig_OffBattleBuffMgr");
static_assert(offsetof(UConfig_OffBattleBuffMgr, ApplyBuffID) == 0x000098, "Member 'UConfig_OffBattleBuffMgr::ApplyBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_OffBattleBuffMgr, BlockBuffTags) == 0x0000A8, "Member 'UConfig_OffBattleBuffMgr::BlockBuffTags' has a wrong offset!");
static_assert(offsetof(UConfig_OffBattleBuffMgr, OffBattleDelay) == 0x000110, "Member 'UConfig_OffBattleBuffMgr::OffBattleDelay' has a wrong offset!");

// Class Hero_1050.Ability_OffBattleBuffMgr
// 0x0030 (0x25B0 - 0x2580)
class UAbility_OffBattleBuffMgr : public UMarvelGameplayAbility
{
public:
	class UConfig_OffBattleBuffMgr*               Config;                                            // 0x2580(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerChar;                                         // 0x2588(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TryApplyBuffTimer;                                 // 0x2590(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A8[0x8];                                     // 0x25A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TryApplyBuff();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_OffBattleBuffMgr">();
	}
	static class UAbility_OffBattleBuffMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_OffBattleBuffMgr>();
	}
};
static_assert(alignof(UAbility_OffBattleBuffMgr) == 0x000008, "Wrong alignment on UAbility_OffBattleBuffMgr");
static_assert(sizeof(UAbility_OffBattleBuffMgr) == 0x0025B0, "Wrong size on UAbility_OffBattleBuffMgr");
static_assert(offsetof(UAbility_OffBattleBuffMgr, Config) == 0x002580, "Member 'UAbility_OffBattleBuffMgr::Config' has a wrong offset!");
static_assert(offsetof(UAbility_OffBattleBuffMgr, OwnerChar) == 0x002588, "Member 'UAbility_OffBattleBuffMgr::OwnerChar' has a wrong offset!");
static_assert(offsetof(UAbility_OffBattleBuffMgr, TryApplyBuffTimer) == 0x002590, "Member 'UAbility_OffBattleBuffMgr::TryApplyBuffTimer' has a wrong offset!");

// Class Hero_1050.Ability_105021
// 0x0000 (0x2678 - 0x2678)
class UAbility_105021 : public UMarvelAbility_DoubleJump
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_105021">();
	}
	static class UAbility_105021* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_105021>();
	}
};
static_assert(alignof(UAbility_105021) == 0x000008, "Wrong alignment on UAbility_105021");
static_assert(sizeof(UAbility_105021) == 0x002678, "Wrong size on UAbility_105021");

// Class Hero_1050.BuffAbility_1050_ForceOffBattle
// 0x0000 (0x10F8 - 0x10F8)
class UBuffAbility_1050_ForceOffBattle final : public UMarvelEffectGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffAbility_1050_ForceOffBattle">();
	}
	static class UBuffAbility_1050_ForceOffBattle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffAbility_1050_ForceOffBattle>();
	}
};
static_assert(alignof(UBuffAbility_1050_ForceOffBattle) == 0x000008, "Wrong alignment on UBuffAbility_1050_ForceOffBattle");
static_assert(sizeof(UBuffAbility_1050_ForceOffBattle) == 0x0010F8, "Wrong size on UBuffAbility_1050_ForceOffBattle");

// Class Hero_1050.Summoned_10504101
// 0x0000 (0x0910 - 0x0910)
class ASummoned_10504101 final : public AMarvelBarrierBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoned_10504101">();
	}
	static class ASummoned_10504101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoned_10504101>();
	}
};
static_assert(alignof(ASummoned_10504101) == 0x000010, "Wrong alignment on ASummoned_10504101");
static_assert(sizeof(ASummoned_10504101) == 0x000910, "Wrong size on ASummoned_10504101");

// Class Hero_1050.BuffAbility_10505101
// 0x0000 (0x10F8 - 0x10F8)
class UBuffAbility_10505101 final : public UMarvelEffectGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffAbility_10505101">();
	}
	static class UBuffAbility_10505101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffAbility_10505101>();
	}
};
static_assert(alignof(UBuffAbility_10505101) == 0x000008, "Wrong alignment on UBuffAbility_10505101");
static_assert(sizeof(UBuffAbility_10505101) == 0x0010F8, "Wrong size on UBuffAbility_10505101");

// Class Hero_1050.Config_105071
// 0x0058 (0x00F0 - 0x0098)
class UConfig_105071 : public UMarvelAbilityConfig
{
public:
	int32                                         LimpidScopeID;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlowBuffID;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EScopeEnableType_105071, struct FGameplayTagContainer> ModeReleaseRule;                                   // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_105071">();
	}
	static class UConfig_105071* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_105071>();
	}
};
static_assert(alignof(UConfig_105071) == 0x000008, "Wrong alignment on UConfig_105071");
static_assert(sizeof(UConfig_105071) == 0x0000F0, "Wrong size on UConfig_105071");
static_assert(offsetof(UConfig_105071, LimpidScopeID) == 0x000098, "Member 'UConfig_105071::LimpidScopeID' has a wrong offset!");
static_assert(offsetof(UConfig_105071, SlowBuffID) == 0x00009C, "Member 'UConfig_105071::SlowBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_105071, ModeReleaseRule) == 0x0000A0, "Member 'UConfig_105071::ModeReleaseRule' has a wrong offset!");

// Class Hero_1050.Ability_105071
// 0x00A0 (0x2628 - 0x2588)
class UAbility_105071 : public UAbility_108
{
public:
	struct FPredictionKey                         WaitNetSyncKey;                                    // 0x2588(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NetSyncEndAbility();
	void OnSync();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_105071">();
	}
	static class UAbility_105071* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_105071>();
	}
};
static_assert(alignof(UAbility_105071) == 0x000008, "Wrong alignment on UAbility_105071");
static_assert(sizeof(UAbility_105071) == 0x002628, "Wrong size on UAbility_105071");
static_assert(offsetof(UAbility_105071, WaitNetSyncKey) == 0x002588, "Member 'UAbility_105071::WaitNetSyncKey' has a wrong offset!");

// Class Hero_1050.TraceComponent_10507101
// 0x0010 (0x1720 - 0x1710)
class UTraceComponent_10507101 final : public UMarvelAgentTraceComponent
{
public:
	class UConfig_105071*                         Config;                                            // 0x1708(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AMarvelBaseCharacter*>           LastTracedChars;                                   // 0x1710(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10507101">();
	}
	static class UTraceComponent_10507101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10507101>();
	}
};
static_assert(alignof(UTraceComponent_10507101) == 0x000010, "Wrong alignment on UTraceComponent_10507101");
static_assert(sizeof(UTraceComponent_10507101) == 0x001720, "Wrong size on UTraceComponent_10507101");
static_assert(offsetof(UTraceComponent_10507101, Config) == 0x001708, "Member 'UTraceComponent_10507101::Config' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10507101, LastTracedChars) == 0x001710, "Member 'UTraceComponent_10507101::LastTracedChars' has a wrong offset!");

// Class Hero_1050.Cue_Scope_Loop_10507101
// 0x0018 (0x0DA8 - 0x0D90)
class ACue_Scope_Loop_10507101 final : public ACue_Scope_Loop_WithAudioBeforeEnd
{
public:
	class UMaterialParameterCollection*           MPCollection;                                      // 0x0D90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAbilityTargetActor_Scope*        OwnerScope;                                        // 0x0D98(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DA0[0x8];                                      // 0x0DA0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_10507101">();
	}
	static class ACue_Scope_Loop_10507101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_10507101>();
	}
};
static_assert(alignof(ACue_Scope_Loop_10507101) == 0x000008, "Wrong alignment on ACue_Scope_Loop_10507101");
static_assert(sizeof(ACue_Scope_Loop_10507101) == 0x000DA8, "Wrong size on ACue_Scope_Loop_10507101");
static_assert(offsetof(ACue_Scope_Loop_10507101, MPCollection) == 0x000D90, "Member 'ACue_Scope_Loop_10507101::MPCollection' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10507101, OwnerScope) == 0x000D98, "Member 'ACue_Scope_Loop_10507101::OwnerScope' has a wrong offset!");

// Class Hero_1050.NotTreatShield_NonOverflow
// 0x0030 (0x1208 - 0x11D8)
class UNotTreatShield_NonOverflow : public UMarvelAttributeFallBaseAbility
{
public:
	float                                         GenerationValue;                                   // 0x11D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenerationDuration;                                // 0x11DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenerationPeriod;                                  // 0x11E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E4[0x4];                                     // 0x11E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GenerateTimerHandle;                               // 0x11E8(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1200[0x8];                                     // 0x1200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGenerateAttribute();

	bool ShouldExecuteNotTreatShield(float* OutMagnitude) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NotTreatShield_NonOverflow">();
	}
	static class UNotTreatShield_NonOverflow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNotTreatShield_NonOverflow>();
	}
};
static_assert(alignof(UNotTreatShield_NonOverflow) == 0x000008, "Wrong alignment on UNotTreatShield_NonOverflow");
static_assert(sizeof(UNotTreatShield_NonOverflow) == 0x001208, "Wrong size on UNotTreatShield_NonOverflow");
static_assert(offsetof(UNotTreatShield_NonOverflow, GenerationValue) == 0x0011D8, "Member 'UNotTreatShield_NonOverflow::GenerationValue' has a wrong offset!");
static_assert(offsetof(UNotTreatShield_NonOverflow, GenerationDuration) == 0x0011DC, "Member 'UNotTreatShield_NonOverflow::GenerationDuration' has a wrong offset!");
static_assert(offsetof(UNotTreatShield_NonOverflow, GenerationPeriod) == 0x0011E0, "Member 'UNotTreatShield_NonOverflow::GenerationPeriod' has a wrong offset!");
static_assert(offsetof(UNotTreatShield_NonOverflow, GenerateTimerHandle) == 0x0011E8, "Member 'UNotTreatShield_NonOverflow::GenerateTimerHandle' has a wrong offset!");

// Class Hero_1050.UIUnit_ReceivedBuff_105081
// 0x0000 (0x00A8 - 0x00A8)
class UUIUnit_ReceivedBuff_105081 final : public UUIUnit_ReceivedBuff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIUnit_ReceivedBuff_105081">();
	}
	static class UUIUnit_ReceivedBuff_105081* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIUnit_ReceivedBuff_105081>();
	}
};
static_assert(alignof(UUIUnit_ReceivedBuff_105081) == 0x000008, "Wrong alignment on UUIUnit_ReceivedBuff_105081");
static_assert(sizeof(UUIUnit_ReceivedBuff_105081) == 0x0000A8, "Wrong size on UUIUnit_ReceivedBuff_105081");

// Class Hero_1050.CueNotify_Buff_10507101
// 0x0020 (0x1058 - 0x1038)
class ACueNotify_Buff_10507101 final : public AMarvelCueNotify_Buff
{
public:
	float                                         SilhouetteShowInterval;                            // 0x1038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SilhouetteShowDuration;                            // 0x103C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPoseableMeshComponent*                 SilhouetteMeshComponent;                           // 0x1040(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     SilhouetteMaterial;                                // 0x1048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1050[0x8];                                     // 0x1050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNotify_Buff_10507101">();
	}
	static class ACueNotify_Buff_10507101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACueNotify_Buff_10507101>();
	}
};
static_assert(alignof(ACueNotify_Buff_10507101) == 0x000008, "Wrong alignment on ACueNotify_Buff_10507101");
static_assert(sizeof(ACueNotify_Buff_10507101) == 0x001058, "Wrong size on ACueNotify_Buff_10507101");
static_assert(offsetof(ACueNotify_Buff_10507101, SilhouetteShowInterval) == 0x001038, "Member 'ACueNotify_Buff_10507101::SilhouetteShowInterval' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_10507101, SilhouetteShowDuration) == 0x00103C, "Member 'ACueNotify_Buff_10507101::SilhouetteShowDuration' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_10507101, SilhouetteMeshComponent) == 0x001040, "Member 'ACueNotify_Buff_10507101::SilhouetteMeshComponent' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_10507101, SilhouetteMaterial) == 0x001048, "Member 'ACueNotify_Buff_10507101::SilhouetteMaterial' has a wrong offset!");

// Class Hero_1050.CueNotify_Buff_105002
// 0x0080 (0x1228 - 0x11A8)
class ACueNotify_Buff_105002 final : public ACueNotify_Stealth
{
public:
	class UNiagaraSystem*                         EnemySideBeginNiagara;                             // 0x11A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         EnemySideEndNiagara;                               // 0x11B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FOverlayMaterialSets                   StealthOverlayMaterialSets;                        // 0x11B8(0x0058)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   MateriaParamName;                                  // 0x1210(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121C[0x4];                                     // 0x121C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStencilModifier_EnableCustomDepth     StencilModifier_EnableCustomDepth;                 // 0x1220(0x0008)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnMaterialChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNotify_Buff_105002">();
	}
	static class ACueNotify_Buff_105002* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACueNotify_Buff_105002>();
	}
};
static_assert(alignof(ACueNotify_Buff_105002) == 0x000008, "Wrong alignment on ACueNotify_Buff_105002");
static_assert(sizeof(ACueNotify_Buff_105002) == 0x001228, "Wrong size on ACueNotify_Buff_105002");
static_assert(offsetof(ACueNotify_Buff_105002, EnemySideBeginNiagara) == 0x0011A8, "Member 'ACueNotify_Buff_105002::EnemySideBeginNiagara' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_105002, EnemySideEndNiagara) == 0x0011B0, "Member 'ACueNotify_Buff_105002::EnemySideEndNiagara' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_105002, StealthOverlayMaterialSets) == 0x0011B8, "Member 'ACueNotify_Buff_105002::StealthOverlayMaterialSets' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_105002, MateriaParamName) == 0x001210, "Member 'ACueNotify_Buff_105002::MateriaParamName' has a wrong offset!");
static_assert(offsetof(ACueNotify_Buff_105002, StencilModifier_EnableCustomDepth) == 0x001220, "Member 'ACueNotify_Buff_105002::StencilModifier_EnableCustomDepth' has a wrong offset!");

// Class Hero_1050.EpicMomentAction_1050
// 0x0000 (0x0120 - 0x0120)
class UEpicMomentAction_1050 final : public UEpicMomentBaseAction
{
public:
	void OnScopeBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnScopeEnd(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentAction_1050">();
	}
	static class UEpicMomentAction_1050* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentAction_1050>();
	}
};
static_assert(alignof(UEpicMomentAction_1050) == 0x000008, "Wrong alignment on UEpicMomentAction_1050");
static_assert(sizeof(UEpicMomentAction_1050) == 0x000120, "Wrong size on UEpicMomentAction_1050");

// Class Hero_1050.InvisibleWomanAnimInstance
// 0x0040 (0x0950 - 0x0910)
class UInvisibleWomanAnimInstance final : public UMarvelAnimInstance
{
public:
	bool                                          bTriggerDoubleJump;                                // 0x0910(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsWalking;                                        // 0x0911(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_912[0x6];                                      // 0x0912(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartVelocity;                                     // 0x0918(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_930[0x20];                                     // 0x0930(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvisibleWomanAnimInstance">();
	}
	static class UInvisibleWomanAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInvisibleWomanAnimInstance>();
	}
};
static_assert(alignof(UInvisibleWomanAnimInstance) == 0x000010, "Wrong alignment on UInvisibleWomanAnimInstance");
static_assert(sizeof(UInvisibleWomanAnimInstance) == 0x000950, "Wrong size on UInvisibleWomanAnimInstance");
static_assert(offsetof(UInvisibleWomanAnimInstance, bTriggerDoubleJump) == 0x000910, "Member 'UInvisibleWomanAnimInstance::bTriggerDoubleJump' has a wrong offset!");
static_assert(offsetof(UInvisibleWomanAnimInstance, bIsWalking) == 0x000911, "Member 'UInvisibleWomanAnimInstance::bIsWalking' has a wrong offset!");
static_assert(offsetof(UInvisibleWomanAnimInstance, StartVelocity) == 0x000918, "Member 'UInvisibleWomanAnimInstance::StartVelocity' has a wrong offset!");

// Class Hero_1050.InvisibleWomanCharacter
// 0x0010 (0x1820 - 0x1810)
class AInvisibleWomanCharacter : public AMarvelBaseCharacter
{
public:
	class UInvisibleWomanMoveLogicBaseComponent*  InvisibleWomanMoveLogic;                           // 0x1810(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1818[0x8];                                     // 0x1818(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvisibleWomanCharacter">();
	}
	static class AInvisibleWomanCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInvisibleWomanCharacter>();
	}
};
static_assert(alignof(AInvisibleWomanCharacter) == 0x000010, "Wrong alignment on AInvisibleWomanCharacter");
static_assert(sizeof(AInvisibleWomanCharacter) == 0x001820, "Wrong size on AInvisibleWomanCharacter");
static_assert(offsetof(AInvisibleWomanCharacter, InvisibleWomanMoveLogic) == 0x001810, "Member 'AInvisibleWomanCharacter::InvisibleWomanMoveLogic' has a wrong offset!");

// Class Hero_1050.InvisibleWomanMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UInvisibleWomanMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvisibleWomanMoveLogicBaseComponent">();
	}
	static class UInvisibleWomanMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInvisibleWomanMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UInvisibleWomanMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UInvisibleWomanMoveLogicBaseComponent");
static_assert(sizeof(UInvisibleWomanMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UInvisibleWomanMoveLogicBaseComponent");

// Class Hero_1050.InvisibleWomanMovementComponent
// 0x0000 (0x1B60 - 0x1B60)
class UInvisibleWomanMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvisibleWomanMovementComponent">();
	}
	static class UInvisibleWomanMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInvisibleWomanMovementComponent>();
	}
};
static_assert(alignof(UInvisibleWomanMovementComponent) == 0x000010, "Wrong alignment on UInvisibleWomanMovementComponent");
static_assert(sizeof(UInvisibleWomanMovementComponent) == 0x001B60, "Wrong size on UInvisibleWomanMovementComponent");

// Class Hero_1050.InvisibleWomanChildActor
// 0x0008 (0x0A68 - 0x0A60)
class AInvisibleWomanChildActor final : public AMarvelCharacterChildActor
{
public:
	class UOverlayMaterialManagerComponent*       OverlayMaterialManagerComponent;                   // 0x0A60(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvisibleWomanChildActor">();
	}
	static class AInvisibleWomanChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInvisibleWomanChildActor>();
	}
};
static_assert(alignof(AInvisibleWomanChildActor) == 0x000008, "Wrong alignment on AInvisibleWomanChildActor");
static_assert(sizeof(AInvisibleWomanChildActor) == 0x000A68, "Wrong size on AInvisibleWomanChildActor");
static_assert(offsetof(AInvisibleWomanChildActor, OverlayMaterialManagerComponent) == 0x000A60, "Member 'AInvisibleWomanChildActor::OverlayMaterialManagerComponent' has a wrong offset!");

// Class Hero_1050.OverlayMaterialManagerComponent
// 0x00D8 (0x01C8 - 0x00F0)
class UOverlayMaterialManagerComponent final : public UActorComponent
{
public:
	struct FOverlayMaterialSets                   DefaultOverlayMaterialSets;                        // 0x00F0(0x0058)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOverlayMaterialSets                   OverrideOverlayMaterialSets;                       // 0x0150(0x0058)(Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           SyncTextureParams;                                 // 0x01A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 TargetMeshComponent;                               // 0x01B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OverlayMaterialManagerComponent">();
	}
	static class UOverlayMaterialManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlayMaterialManagerComponent>();
	}
};
static_assert(alignof(UOverlayMaterialManagerComponent) == 0x000008, "Wrong alignment on UOverlayMaterialManagerComponent");
static_assert(sizeof(UOverlayMaterialManagerComponent) == 0x0001C8, "Wrong size on UOverlayMaterialManagerComponent");
static_assert(offsetof(UOverlayMaterialManagerComponent, DefaultOverlayMaterialSets) == 0x0000F0, "Member 'UOverlayMaterialManagerComponent::DefaultOverlayMaterialSets' has a wrong offset!");
static_assert(offsetof(UOverlayMaterialManagerComponent, OverrideOverlayMaterialSets) == 0x000150, "Member 'UOverlayMaterialManagerComponent::OverrideOverlayMaterialSets' has a wrong offset!");
static_assert(offsetof(UOverlayMaterialManagerComponent, SyncTextureParams) == 0x0001A8, "Member 'UOverlayMaterialManagerComponent::SyncTextureParams' has a wrong offset!");
static_assert(offsetof(UOverlayMaterialManagerComponent, TargetMeshComponent) == 0x0001B8, "Member 'UOverlayMaterialManagerComponent::TargetMeshComponent' has a wrong offset!");

// Class Hero_1050.Projectile_10503101
// 0x0030 (0x3080 - 0x3050)
class AProjectile_10503101 : public AMarvelAbilityTargetActor_Projectile
{
public:
	FMulticastInlineDelegateProperty_             OnReturnStateChange;                               // 0x3050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bUseTableDataAsReturnTime;                         // 0x3060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3061[0x3];                                     // 0x3061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnFixedTime;                                   // 0x3064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ReturnSocketName;                                  // 0x3068(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasReturnCompleted;                               // 0x3074(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3075[0xB];                                     // 0x3075(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_HasReturnCompleted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10503101">();
	}
	static class AProjectile_10503101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10503101>();
	}
};
static_assert(alignof(AProjectile_10503101) == 0x000010, "Wrong alignment on AProjectile_10503101");
static_assert(sizeof(AProjectile_10503101) == 0x003080, "Wrong size on AProjectile_10503101");
static_assert(offsetof(AProjectile_10503101, OnReturnStateChange) == 0x003050, "Member 'AProjectile_10503101::OnReturnStateChange' has a wrong offset!");
static_assert(offsetof(AProjectile_10503101, bUseTableDataAsReturnTime) == 0x003060, "Member 'AProjectile_10503101::bUseTableDataAsReturnTime' has a wrong offset!");
static_assert(offsetof(AProjectile_10503101, ReturnFixedTime) == 0x003064, "Member 'AProjectile_10503101::ReturnFixedTime' has a wrong offset!");
static_assert(offsetof(AProjectile_10503101, ReturnSocketName) == 0x003068, "Member 'AProjectile_10503101::ReturnSocketName' has a wrong offset!");
static_assert(offsetof(AProjectile_10503101, bHasReturnCompleted) == 0x003074, "Member 'AProjectile_10503101::bHasReturnCompleted' has a wrong offset!");

// Class Hero_1050.ProjectileMovementComponent_10503101
// 0x0040 (0x2030 - 0x1FF0)
class UProjectileMovementComponent_10503101 final : public UMarvelProjectileComponent
{
public:
	uint8                                         Pad_1FE8[0x20];                                    // 0x1FE8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   ReturnTargetActor;                                 // 0x2008(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2010[0xC];                                     // 0x2010(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnFixedTime;                                   // 0x201C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2020[0x10];                                    // 0x2020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileMovementComponent_10503101">();
	}
	static class UProjectileMovementComponent_10503101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileMovementComponent_10503101>();
	}
};
static_assert(alignof(UProjectileMovementComponent_10503101) == 0x000010, "Wrong alignment on UProjectileMovementComponent_10503101");
static_assert(sizeof(UProjectileMovementComponent_10503101) == 0x002030, "Wrong size on UProjectileMovementComponent_10503101");
static_assert(offsetof(UProjectileMovementComponent_10503101, ReturnTargetActor) == 0x002008, "Member 'UProjectileMovementComponent_10503101::ReturnTargetActor' has a wrong offset!");
static_assert(offsetof(UProjectileMovementComponent_10503101, ReturnFixedTime) == 0x00201C, "Member 'UProjectileMovementComponent_10503101::ReturnFixedTime' has a wrong offset!");

// Class Hero_1050.HiddenRule_105071
// 0x0010 (0x0048 - 0x0038)
class UHiddenRule_105071 final : public UHiddenRuleBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AScope_10507101*                        SourceScope;                                       // 0x0040(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HiddenRule_105071">();
	}
	static class UHiddenRule_105071* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHiddenRule_105071>();
	}
};
static_assert(alignof(UHiddenRule_105071) == 0x000008, "Wrong alignment on UHiddenRule_105071");
static_assert(sizeof(UHiddenRule_105071) == 0x000048, "Wrong size on UHiddenRule_105071");
static_assert(offsetof(UHiddenRule_105071, SourceScope) == 0x000040, "Member 'UHiddenRule_105071::SourceScope' has a wrong offset!");

// Class Hero_1050.Scope_105071_Manager
// 0x0058 (0x0088 - 0x0030)
class UScope_105071_Manager final : public UObject
{
public:
	TSet<TWeakObjectPtr<class AScope_10507101>>   LimpidScopePtrSet;                                 // 0x0030(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	EScopeEnableType_105071                       EnableType;                                        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScope_105071_Manager* Get(class UObject* WorldContextObject);

	bool CheckCanReleaseScope(const class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Scope_105071_Manager">();
	}
	static class UScope_105071_Manager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScope_105071_Manager>();
	}
};
static_assert(alignof(UScope_105071_Manager) == 0x000008, "Wrong alignment on UScope_105071_Manager");
static_assert(sizeof(UScope_105071_Manager) == 0x000088, "Wrong size on UScope_105071_Manager");
static_assert(offsetof(UScope_105071_Manager, LimpidScopePtrSet) == 0x000030, "Member 'UScope_105071_Manager::LimpidScopePtrSet' has a wrong offset!");
static_assert(offsetof(UScope_105071_Manager, EnableType) == 0x000080, "Member 'UScope_105071_Manager::EnableType' has a wrong offset!");

// Class Hero_1050.Scope_10507101
// 0x0060 (0x1760 - 0x1700)
class AScope_10507101 final : public AMarvelAbilityTargetActor_Scope
{
public:
	TArray<class UMarvelSummonedComponent*>       TracedSummonedComponents;                          // 0x1700(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarvelSummonedComponent*>       HiddenSummonedComponents;                          // 0x1710(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHiddenRule_105071*                     HiddenRule;                                        // 0x1720(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUpdateSummonedTickFunction_105071     SummonedUpdateTickFunction;                        // 0x1728(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Scope_10507101">();
	}
	static class AScope_10507101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScope_10507101>();
	}
};
static_assert(alignof(AScope_10507101) == 0x000010, "Wrong alignment on AScope_10507101");
static_assert(sizeof(AScope_10507101) == 0x001760, "Wrong size on AScope_10507101");
static_assert(offsetof(AScope_10507101, TracedSummonedComponents) == 0x001700, "Member 'AScope_10507101::TracedSummonedComponents' has a wrong offset!");
static_assert(offsetof(AScope_10507101, HiddenSummonedComponents) == 0x001710, "Member 'AScope_10507101::HiddenSummonedComponents' has a wrong offset!");
static_assert(offsetof(AScope_10507101, HiddenRule) == 0x001720, "Member 'AScope_10507101::HiddenRule' has a wrong offset!");
static_assert(offsetof(AScope_10507101, SummonedUpdateTickFunction) == 0x001728, "Member 'AScope_10507101::SummonedUpdateTickFunction' has a wrong offset!");

// Class Hero_1050.Stealth_105002
// 0x0010 (0x1328 - 0x1318)
class UStealth_105002 : public UMarvelStealthAbility
{
public:
	class AMarvelBaseCharacter*                   CachedBindBattleStateCharacter;                    // 0x1318(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelfTreatmentBuffID;                               // 0x1320(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1324[0x4];                                     // 0x1324(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityActivateFailed(const class UGameplayAbility* Ability, const struct FGameplayTagContainer& GameplayTags);
	void OnCharacterBattleStateChanged(bool bValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Stealth_105002">();
	}
	static class UStealth_105002* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStealth_105002>();
	}
};
static_assert(alignof(UStealth_105002) == 0x000008, "Wrong alignment on UStealth_105002");
static_assert(sizeof(UStealth_105002) == 0x001328, "Wrong size on UStealth_105002");
static_assert(offsetof(UStealth_105002, CachedBindBattleStateCharacter) == 0x001318, "Member 'UStealth_105002::CachedBindBattleStateCharacter' has a wrong offset!");
static_assert(offsetof(UStealth_105002, SelfTreatmentBuffID) == 0x001320, "Member 'UStealth_105002::SelfTreatmentBuffID' has a wrong offset!");

}

