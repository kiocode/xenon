#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataBaseEvents

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// PythonClass DataBaseEvents.PyDataBaseEvent
// 0x0000 (0x0030 - 0x0030)
class UPyDataBaseEvent : public UDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyDataBaseEvent">();
	}
	static class UPyDataBaseEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyDataBaseEvent>();
	}
};
static_assert(alignof(UPyDataBaseEvent) == 0x000008, "Wrong alignment on UPyDataBaseEvent");
static_assert(sizeof(UPyDataBaseEvent) == 0x000030, "Wrong size on UPyDataBaseEvent");

// PythonClass DataBaseEvents.WinterQKillEvent
// 0x0008 (0x0038 - 0x0030)
class UWinterQKillEvent final : public UPyDataBaseEvent
{
public:
	int32                                         BeatNum;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WinterQKillEvent">();
	}
	static class UWinterQKillEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWinterQKillEvent>();
	}
};
static_assert(alignof(UWinterQKillEvent) == 0x000008, "Wrong alignment on UWinterQKillEvent");
static_assert(sizeof(UWinterQKillEvent) == 0x000038, "Wrong size on UWinterQKillEvent");
static_assert(offsetof(UWinterQKillEvent, BeatNum) == 0x000030, "Member 'UWinterQKillEvent::BeatNum' has a wrong offset!");

// PythonClass DataBaseEvents.HitEvent
// 0x0020 (0x0050 - 0x0030)
class UHitEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EDataBaseBool                                 MainAttack;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroHit;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     FamilyID;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventHeroIDsAll();
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitEvent">();
	}
	static class UHitEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitEvent>();
	}
};
static_assert(alignof(UHitEvent) == 0x000008, "Wrong alignment on UHitEvent");
static_assert(sizeof(UHitEvent) == 0x000050, "Wrong size on UHitEvent");
static_assert(offsetof(UHitEvent, AbilityIDs) == 0x000030, "Member 'UHitEvent::AbilityIDs' has a wrong offset!");
static_assert(offsetof(UHitEvent, MainAttack) == 0x000040, "Member 'UHitEvent::MainAttack' has a wrong offset!");
static_assert(offsetof(UHitEvent, HeroHit) == 0x000044, "Member 'UHitEvent::HeroHit' has a wrong offset!");
static_assert(offsetof(UHitEvent, FamilyID) == 0x000048, "Member 'UHitEvent::FamilyID' has a wrong offset!");

// PythonClass DataBaseEvents.IronSubDamage
// 0x0000 (0x0030 - 0x0030)
class UIronSubDamage final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IronSubDamage">();
	}
	static class UIronSubDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIronSubDamage>();
	}
};
static_assert(alignof(UIronSubDamage) == 0x000008, "Wrong alignment on UIronSubDamage");
static_assert(sizeof(UIronSubDamage) == 0x000030, "Wrong size on UIronSubDamage");

// PythonClass DataBaseEvents.SpecialBuffNumEvent
// 0x0058 (0x0088 - 0x0030)
class USpecialBuffNumEvent final : public UPyDataBaseEvent
{
public:
	int32                                         AbilityID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IncludeSelf;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HitAbilityIDs;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffIds;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScopeIDs;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 AmmoIDs;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 ProjectileIDs;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialBuffNumEvent">();
	}
	static class USpecialBuffNumEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialBuffNumEvent>();
	}
};
static_assert(alignof(USpecialBuffNumEvent) == 0x000008, "Wrong alignment on USpecialBuffNumEvent");
static_assert(sizeof(USpecialBuffNumEvent) == 0x000088, "Wrong size on USpecialBuffNumEvent");
static_assert(offsetof(USpecialBuffNumEvent, AbilityID) == 0x000030, "Member 'USpecialBuffNumEvent::AbilityID' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, IncludeSelf) == 0x000034, "Member 'USpecialBuffNumEvent::IncludeSelf' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, HitAbilityIDs) == 0x000038, "Member 'USpecialBuffNumEvent::HitAbilityIDs' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, BuffIds) == 0x000048, "Member 'USpecialBuffNumEvent::BuffIds' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, ScopeIDs) == 0x000058, "Member 'USpecialBuffNumEvent::ScopeIDs' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, AmmoIDs) == 0x000068, "Member 'USpecialBuffNumEvent::AmmoIDs' has a wrong offset!");
static_assert(offsetof(USpecialBuffNumEvent, ProjectileIDs) == 0x000078, "Member 'USpecialBuffNumEvent::ProjectileIDs' has a wrong offset!");

// PythonClass DataBaseEvents.BuffDamageResistEvent
// 0x0018 (0x0048 - 0x0030)
class UBuffDamageResistEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 BuffIDList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsImmunity;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTreat;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffDamageResistEvent">();
	}
	static class UBuffDamageResistEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffDamageResistEvent>();
	}
};
static_assert(alignof(UBuffDamageResistEvent) == 0x000008, "Wrong alignment on UBuffDamageResistEvent");
static_assert(sizeof(UBuffDamageResistEvent) == 0x000048, "Wrong size on UBuffDamageResistEvent");
static_assert(offsetof(UBuffDamageResistEvent, BuffIDList) == 0x000030, "Member 'UBuffDamageResistEvent::BuffIDList' has a wrong offset!");
static_assert(offsetof(UBuffDamageResistEvent, IsImmunity) == 0x000040, "Member 'UBuffDamageResistEvent::IsImmunity' has a wrong offset!");
static_assert(offsetof(UBuffDamageResistEvent, IsTreat) == 0x000041, "Member 'UBuffDamageResistEvent::IsTreat' has a wrong offset!");

// PythonClass DataBaseEvents.ActivateAbilityEvent
// 0x0028 (0x0058 - 0x0030)
class UActivateAbilityEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EDataBaseBool                                 MainAttack;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 OnlyActivate;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 UseActionLog;                                      // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x0044(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GatherTime;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateAbilityEvent">();
	}
	static class UActivateAbilityEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateAbilityEvent>();
	}
};
static_assert(alignof(UActivateAbilityEvent) == 0x000008, "Wrong alignment on UActivateAbilityEvent");
static_assert(sizeof(UActivateAbilityEvent) == 0x000058, "Wrong size on UActivateAbilityEvent");
static_assert(offsetof(UActivateAbilityEvent, AbilityIDs) == 0x000030, "Member 'UActivateAbilityEvent::AbilityIDs' has a wrong offset!");
static_assert(offsetof(UActivateAbilityEvent, MainAttack) == 0x000040, "Member 'UActivateAbilityEvent::MainAttack' has a wrong offset!");
static_assert(offsetof(UActivateAbilityEvent, OnlyActivate) == 0x000041, "Member 'UActivateAbilityEvent::OnlyActivate' has a wrong offset!");
static_assert(offsetof(UActivateAbilityEvent, UseActionLog) == 0x000042, "Member 'UActivateAbilityEvent::UseActionLog' has a wrong offset!");
static_assert(offsetof(UActivateAbilityEvent, Tag) == 0x000044, "Member 'UActivateAbilityEvent::Tag' has a wrong offset!");
static_assert(offsetof(UActivateAbilityEvent, GatherTime) == 0x000050, "Member 'UActivateAbilityEvent::GatherTime' has a wrong offset!");

// PythonClass DataBaseEvents.HealPackEvent
// 0x0000 (0x0030 - 0x0030)
class UHealPackEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealPackEvent">();
	}
	static class UHealPackEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealPackEvent>();
	}
};
static_assert(alignof(UHealPackEvent) == 0x000008, "Wrong alignment on UHealPackEvent");
static_assert(sizeof(UHealPackEvent) == 0x000030, "Wrong size on UHealPackEvent");

// PythonClass DataBaseEvents.HitRateEvent
// 0x0068 (0x0098 - 0x0030)
class UHitRateEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HitNumOnce;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroHit;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     FamilyID;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HitRate;                                           // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HitRateHero;                                       // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HitRateShield;                                     // 0x004B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HitRateSummon;                                     // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HitRateChaos;                                      // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BuffIds;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScopeIDs;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 AmmoIDs;                                           // 0x0070(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 ProjectileIDs;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IncludeEnemy;                                      // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IncludeAlly;                                       // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IncludeMe;                                         // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventHeroIDsAll();
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitRateEvent">();
	}
	static class UHitRateEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitRateEvent>();
	}
};
static_assert(alignof(UHitRateEvent) == 0x000008, "Wrong alignment on UHitRateEvent");
static_assert(sizeof(UHitRateEvent) == 0x000098, "Wrong size on UHitRateEvent");
static_assert(offsetof(UHitRateEvent, AbilityIDs) == 0x000030, "Member 'UHitRateEvent::AbilityIDs' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitNumOnce) == 0x000040, "Member 'UHitRateEvent::HitNumOnce' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HeroHit) == 0x000044, "Member 'UHitRateEvent::HeroHit' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, FamilyID) == 0x000048, "Member 'UHitRateEvent::FamilyID' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitRate) == 0x000049, "Member 'UHitRateEvent::HitRate' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitRateHero) == 0x00004A, "Member 'UHitRateEvent::HitRateHero' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitRateShield) == 0x00004B, "Member 'UHitRateEvent::HitRateShield' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitRateSummon) == 0x00004C, "Member 'UHitRateEvent::HitRateSummon' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, HitRateChaos) == 0x00004D, "Member 'UHitRateEvent::HitRateChaos' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, BuffIds) == 0x000050, "Member 'UHitRateEvent::BuffIds' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, ScopeIDs) == 0x000060, "Member 'UHitRateEvent::ScopeIDs' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, AmmoIDs) == 0x000070, "Member 'UHitRateEvent::AmmoIDs' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, ProjectileIDs) == 0x000080, "Member 'UHitRateEvent::ProjectileIDs' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, IncludeEnemy) == 0x000090, "Member 'UHitRateEvent::IncludeEnemy' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, IncludeAlly) == 0x000091, "Member 'UHitRateEvent::IncludeAlly' has a wrong offset!");
static_assert(offsetof(UHitRateEvent, IncludeMe) == 0x000092, "Member 'UHitRateEvent::IncludeMe' has a wrong offset!");

// PythonClass DataBaseEvents.CriticalEvent
// 0x0020 (0x0050 - 0x0030)
class UCriticalEvent : public UPyDataBaseEvent
{
public:
	int32                                         HeroHit;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AbilityIDs;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EDataBaseBool                                 EnemyHit;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 AllyHit;                                           // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriticalEvent">();
	}
	static class UCriticalEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriticalEvent>();
	}
};
static_assert(alignof(UCriticalEvent) == 0x000008, "Wrong alignment on UCriticalEvent");
static_assert(sizeof(UCriticalEvent) == 0x000050, "Wrong size on UCriticalEvent");
static_assert(offsetof(UCriticalEvent, HeroHit) == 0x000030, "Member 'UCriticalEvent::HeroHit' has a wrong offset!");
static_assert(offsetof(UCriticalEvent, AbilityIDs) == 0x000038, "Member 'UCriticalEvent::AbilityIDs' has a wrong offset!");
static_assert(offsetof(UCriticalEvent, EnemyHit) == 0x000048, "Member 'UCriticalEvent::EnemyHit' has a wrong offset!");
static_assert(offsetof(UCriticalEvent, AllyHit) == 0x000049, "Member 'UCriticalEvent::AllyHit' has a wrong offset!");

// PythonClass DataBaseEvents.HearVoice
// 0x0020 (0x0050 - 0x0030)
class UHearVoice final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 HeroIDs;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         VoiceIDs;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HearVoice">();
	}
	static class UHearVoice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHearVoice>();
	}
};
static_assert(alignof(UHearVoice) == 0x000008, "Wrong alignment on UHearVoice");
static_assert(sizeof(UHearVoice) == 0x000050, "Wrong size on UHearVoice");
static_assert(offsetof(UHearVoice, HeroIDs) == 0x000030, "Member 'UHearVoice::HeroIDs' has a wrong offset!");
static_assert(offsetof(UHearVoice, VoiceIDs) == 0x000040, "Member 'UHearVoice::VoiceIDs' has a wrong offset!");

// PythonClass DataBaseEvents.CriticalNumEvent
// 0x0000 (0x0050 - 0x0050)
class UCriticalNumEvent final : public UCriticalEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriticalNumEvent">();
	}
	static class UCriticalNumEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriticalNumEvent>();
	}
};
static_assert(alignof(UCriticalNumEvent) == 0x000008, "Wrong alignment on UCriticalNumEvent");
static_assert(sizeof(UCriticalNumEvent) == 0x000050, "Wrong size on UCriticalNumEvent");

// PythonClass DataBaseEvents.TransitionEvent
// 0x0008 (0x0038 - 0x0030)
class UTransitionEvent final : public UPyDataBaseEvent
{
public:
	int32                                         AbilityID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransitionEvent">();
	}
	static class UTransitionEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransitionEvent>();
	}
};
static_assert(alignof(UTransitionEvent) == 0x000008, "Wrong alignment on UTransitionEvent");
static_assert(sizeof(UTransitionEvent) == 0x000038, "Wrong size on UTransitionEvent");
static_assert(offsetof(UTransitionEvent, AbilityID) == 0x000030, "Member 'UTransitionEvent::AbilityID' has a wrong offset!");

// PythonClass DataBaseEvents.SpecialHitNumEvent
// 0x0030 (0x0060 - 0x0030)
class USpecialHitNumEvent final : public UPyDataBaseEvent
{
public:
	int32                                         HeroID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 WithAbility;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 WithAbilityOnce;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 WithSculptID;                                      // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SculptID;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTime;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 WithBuffID;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffID;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatNum;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 WithSummonerID;                                    // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SummonerId;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventHeroIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialHitNumEvent">();
	}
	static class USpecialHitNumEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialHitNumEvent>();
	}
};
static_assert(alignof(USpecialHitNumEvent) == 0x000008, "Wrong alignment on USpecialHitNumEvent");
static_assert(sizeof(USpecialHitNumEvent) == 0x000060, "Wrong size on USpecialHitNumEvent");
static_assert(offsetof(USpecialHitNumEvent, HeroID) == 0x000030, "Member 'USpecialHitNumEvent::HeroID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, WithAbility) == 0x000034, "Member 'USpecialHitNumEvent::WithAbility' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, AbilityID) == 0x000038, "Member 'USpecialHitNumEvent::AbilityID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, WithAbilityOnce) == 0x00003C, "Member 'USpecialHitNumEvent::WithAbilityOnce' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, WithSculptID) == 0x00003D, "Member 'USpecialHitNumEvent::WithSculptID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, SculptID) == 0x000040, "Member 'USpecialHitNumEvent::SculptID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, LastTime) == 0x000044, "Member 'USpecialHitNumEvent::LastTime' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, WithBuffID) == 0x000048, "Member 'USpecialHitNumEvent::WithBuffID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, BuffID) == 0x00004C, "Member 'USpecialHitNumEvent::BuffID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, BeatNum) == 0x000050, "Member 'USpecialHitNumEvent::BeatNum' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, WithSummonerID) == 0x000054, "Member 'USpecialHitNumEvent::WithSummonerID' has a wrong offset!");
static_assert(offsetof(USpecialHitNumEvent, SummonerId) == 0x000058, "Member 'USpecialHitNumEvent::SummonerId' has a wrong offset!");

// PythonClass DataBaseEvents.SpawnSummonerEvent
// 0x0010 (0x0040 - 0x0030)
class USpawnSummonerEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 SummonerIDs;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnSummonerEvent">();
	}
	static class USpawnSummonerEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnSummonerEvent>();
	}
};
static_assert(alignof(USpawnSummonerEvent) == 0x000008, "Wrong alignment on USpawnSummonerEvent");
static_assert(sizeof(USpawnSummonerEvent) == 0x000040, "Wrong size on USpawnSummonerEvent");
static_assert(offsetof(USpawnSummonerEvent, SummonerIDs) == 0x000030, "Member 'USpawnSummonerEvent::SummonerIDs' has a wrong offset!");

// PythonClass DataBaseEvents.HeroUseTime
// 0x0000 (0x0030 - 0x0030)
class UHeroUseTime final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroUseTime">();
	}
	static class UHeroUseTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroUseTime>();
	}
};
static_assert(alignof(UHeroUseTime) == 0x000008, "Wrong alignment on UHeroUseTime");
static_assert(sizeof(UHeroUseTime) == 0x000030, "Wrong size on UHeroUseTime");

// PythonClass DataBaseEvents.AbilityRefresh
// 0x0010 (0x0040 - 0x0030)
class UAbilityRefresh final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 AbilityIDs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityRefresh">();
	}
	static class UAbilityRefresh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityRefresh>();
	}
};
static_assert(alignof(UAbilityRefresh) == 0x000008, "Wrong alignment on UAbilityRefresh");
static_assert(sizeof(UAbilityRefresh) == 0x000040, "Wrong size on UAbilityRefresh");
static_assert(offsetof(UAbilityRefresh, AbilityIDs) == 0x000030, "Member 'UAbilityRefresh::AbilityIDs' has a wrong offset!");

// PythonClass DataBaseEvents.KillEvent
// 0x0028 (0x0058 - 0x0030)
class UKillEvent final : public UPyDataBaseEvent
{
public:
	EDataBaseBool                                 BeforeDeath;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroID;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     FamilyID;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 LokiBackKill;                                      // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AssistHeroID;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     AssistFamilyID;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 LastKill;                                          // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 AssistKill;                                        // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 SoloKill;                                          // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 SurvivalKill;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SurvivalKillNum;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 ContinueKill;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContinueKillNum;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 CriticalKill;                                      // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 AllKill;                                           // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 TerrainKill;                                       // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventHeroIDsAll();
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillEvent">();
	}
	static class UKillEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillEvent>();
	}
};
static_assert(alignof(UKillEvent) == 0x000008, "Wrong alignment on UKillEvent");
static_assert(sizeof(UKillEvent) == 0x000058, "Wrong size on UKillEvent");
static_assert(offsetof(UKillEvent, BeforeDeath) == 0x000030, "Member 'UKillEvent::BeforeDeath' has a wrong offset!");
static_assert(offsetof(UKillEvent, HeroID) == 0x000034, "Member 'UKillEvent::HeroID' has a wrong offset!");
static_assert(offsetof(UKillEvent, FamilyID) == 0x000038, "Member 'UKillEvent::FamilyID' has a wrong offset!");
static_assert(offsetof(UKillEvent, LokiBackKill) == 0x000039, "Member 'UKillEvent::LokiBackKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, AssistHeroID) == 0x00003C, "Member 'UKillEvent::AssistHeroID' has a wrong offset!");
static_assert(offsetof(UKillEvent, AssistFamilyID) == 0x000040, "Member 'UKillEvent::AssistFamilyID' has a wrong offset!");
static_assert(offsetof(UKillEvent, LastKill) == 0x000041, "Member 'UKillEvent::LastKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, AssistKill) == 0x000042, "Member 'UKillEvent::AssistKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, SoloKill) == 0x000043, "Member 'UKillEvent::SoloKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, SurvivalKill) == 0x000044, "Member 'UKillEvent::SurvivalKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, SurvivalKillNum) == 0x000048, "Member 'UKillEvent::SurvivalKillNum' has a wrong offset!");
static_assert(offsetof(UKillEvent, ContinueKill) == 0x00004C, "Member 'UKillEvent::ContinueKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, ContinueKillNum) == 0x000050, "Member 'UKillEvent::ContinueKillNum' has a wrong offset!");
static_assert(offsetof(UKillEvent, CriticalKill) == 0x000054, "Member 'UKillEvent::CriticalKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, AllKill) == 0x000055, "Member 'UKillEvent::AllKill' has a wrong offset!");
static_assert(offsetof(UKillEvent, TerrainKill) == 0x000056, "Member 'UKillEvent::TerrainKill' has a wrong offset!");

// PythonClass DataBaseEvents.AssistEvent
// 0x0010 (0x0040 - 0x0030)
class UAssistEvent final : public UPyDataBaseEvent
{
public:
	EDataBaseBool                                 AttackAssist;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 DefendAssist;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 DetectAssist;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 BondAssist;                                        // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillHeroID;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     KillFamilyID;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroTeam                                     FamilyID;                                          // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 AllKill;                                           // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventHeroIDsAll();
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssistEvent">();
	}
	static class UAssistEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssistEvent>();
	}
};
static_assert(alignof(UAssistEvent) == 0x000008, "Wrong alignment on UAssistEvent");
static_assert(sizeof(UAssistEvent) == 0x000040, "Wrong size on UAssistEvent");
static_assert(offsetof(UAssistEvent, AttackAssist) == 0x000030, "Member 'UAssistEvent::AttackAssist' has a wrong offset!");
static_assert(offsetof(UAssistEvent, DefendAssist) == 0x000031, "Member 'UAssistEvent::DefendAssist' has a wrong offset!");
static_assert(offsetof(UAssistEvent, DetectAssist) == 0x000032, "Member 'UAssistEvent::DetectAssist' has a wrong offset!");
static_assert(offsetof(UAssistEvent, BondAssist) == 0x000033, "Member 'UAssistEvent::BondAssist' has a wrong offset!");
static_assert(offsetof(UAssistEvent, HeroID) == 0x000034, "Member 'UAssistEvent::HeroID' has a wrong offset!");
static_assert(offsetof(UAssistEvent, KillHeroID) == 0x000038, "Member 'UAssistEvent::KillHeroID' has a wrong offset!");
static_assert(offsetof(UAssistEvent, KillFamilyID) == 0x00003C, "Member 'UAssistEvent::KillFamilyID' has a wrong offset!");
static_assert(offsetof(UAssistEvent, FamilyID) == 0x00003D, "Member 'UAssistEvent::FamilyID' has a wrong offset!");
static_assert(offsetof(UAssistEvent, AllKill) == 0x00003E, "Member 'UAssistEvent::AllKill' has a wrong offset!");

// PythonClass DataBaseEvents.DeathEvent
// 0x0000 (0x0030 - 0x0030)
class UDeathEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeathEvent">();
	}
	static class UDeathEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeathEvent>();
	}
};
static_assert(alignof(UDeathEvent) == 0x000008, "Wrong alignment on UDeathEvent");
static_assert(sizeof(UDeathEvent) == 0x000030, "Wrong size on UDeathEvent");

// PythonClass DataBaseEvents.ReviveEvent
// 0x0008 (0x0038 - 0x0030)
class UReviveEvent final : public UPyDataBaseEvent
{
public:
	EHeroTeam                                     FamilyID;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReviveEvent">();
	}
	static class UReviveEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReviveEvent>();
	}
};
static_assert(alignof(UReviveEvent) == 0x000008, "Wrong alignment on UReviveEvent");
static_assert(sizeof(UReviveEvent) == 0x000038, "Wrong size on UReviveEvent");
static_assert(offsetof(UReviveEvent, FamilyID) == 0x000030, "Member 'UReviveEvent::FamilyID' has a wrong offset!");

// PythonClass DataBaseEvents.DamageEvent
// 0x0008 (0x0038 - 0x0030)
class UDamageEvent : public UPyDataBaseEvent
{
public:
	EDataBaseBool                                 HeroDamage;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 SummonerDamage;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 ShieldDamage;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 LokiBackDamage;                                    // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DamageEvent">();
	}
	static class UDamageEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamageEvent>();
	}
};
static_assert(alignof(UDamageEvent) == 0x000008, "Wrong alignment on UDamageEvent");
static_assert(sizeof(UDamageEvent) == 0x000038, "Wrong size on UDamageEvent");
static_assert(offsetof(UDamageEvent, HeroDamage) == 0x000030, "Member 'UDamageEvent::HeroDamage' has a wrong offset!");
static_assert(offsetof(UDamageEvent, SummonerDamage) == 0x000031, "Member 'UDamageEvent::SummonerDamage' has a wrong offset!");
static_assert(offsetof(UDamageEvent, ShieldDamage) == 0x000032, "Member 'UDamageEvent::ShieldDamage' has a wrong offset!");
static_assert(offsetof(UDamageEvent, LokiBackDamage) == 0x000033, "Member 'UDamageEvent::LokiBackDamage' has a wrong offset!");

// PythonClass DataBaseEvents.OccupyCamp
// 0x0028 (0x0058 - 0x0030)
class UOccupyCamp final : public UPyDataBaseEvent
{
public:
	TArray<EBattleSide>                           SpecSides;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class APyCamp>                    CampType;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LevelIDs;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventMapIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OccupyCamp">();
	}
	static class UOccupyCamp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOccupyCamp>();
	}
};
static_assert(alignof(UOccupyCamp) == 0x000008, "Wrong alignment on UOccupyCamp");
static_assert(sizeof(UOccupyCamp) == 0x000058, "Wrong size on UOccupyCamp");
static_assert(offsetof(UOccupyCamp, SpecSides) == 0x000030, "Member 'UOccupyCamp::SpecSides' has a wrong offset!");
static_assert(offsetof(UOccupyCamp, CampType) == 0x000040, "Member 'UOccupyCamp::CampType' has a wrong offset!");
static_assert(offsetof(UOccupyCamp, LevelIDs) == 0x000048, "Member 'UOccupyCamp::LevelIDs' has a wrong offset!");

// PythonClass DataBaseEvents.DamageTakenEvent
// 0x0000 (0x0038 - 0x0038)
class UDamageTakenEvent final : public UDamageEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DamageTakenEvent">();
	}
	static class UDamageTakenEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamageTakenEvent>();
	}
};
static_assert(alignof(UDamageTakenEvent) == 0x000008, "Wrong alignment on UDamageTakenEvent");
static_assert(sizeof(UDamageTakenEvent) == 0x000038, "Wrong size on UDamageTakenEvent");

// PythonClass DataBaseEvents.EmojiEvent
// 0x0008 (0x0038 - 0x0030)
class UEmojiEvent final : public UPyDataBaseEvent
{
public:
	int32                                         EmojiID;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmojiEvent">();
	}
	static class UEmojiEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmojiEvent>();
	}
};
static_assert(alignof(UEmojiEvent) == 0x000008, "Wrong alignment on UEmojiEvent");
static_assert(sizeof(UEmojiEvent) == 0x000038, "Wrong size on UEmojiEvent");
static_assert(offsetof(UEmojiEvent, EmojiID) == 0x000030, "Member 'UEmojiEvent::EmojiID' has a wrong offset!");

// PythonClass DataBaseEvents.HealEvent
// 0x0008 (0x0038 - 0x0030)
class UHealEvent final : public UPyDataBaseEvent
{
public:
	EDataBaseBool                                 SelfHeal;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 HeroHeal;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 SummonerHeal;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealEvent">();
	}
	static class UHealEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealEvent>();
	}
};
static_assert(alignof(UHealEvent) == 0x000008, "Wrong alignment on UHealEvent");
static_assert(sizeof(UHealEvent) == 0x000038, "Wrong size on UHealEvent");
static_assert(offsetof(UHealEvent, SelfHeal) == 0x000030, "Member 'UHealEvent::SelfHeal' has a wrong offset!");
static_assert(offsetof(UHealEvent, HeroHeal) == 0x000031, "Member 'UHealEvent::HeroHeal' has a wrong offset!");
static_assert(offsetof(UHealEvent, SummonerHeal) == 0x000032, "Member 'UHealEvent::SummonerHeal' has a wrong offset!");

// PythonClass DataBaseEvents.CarDistance
// 0x0000 (0x0030 - 0x0030)
class UCarDistance final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CarDistance">();
	}
	static class UCarDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCarDistance>();
	}
};
static_assert(alignof(UCarDistance) == 0x000008, "Wrong alignment on UCarDistance");
static_assert(sizeof(UCarDistance) == 0x000030, "Wrong size on UCarDistance");

// PythonClass DataBaseEvents.AttributeChangeEvent
// 0x0050 (0x0080 - 0x0030)
class UAttributeChangeEvent final : public UPyDataBaseEvent
{
public:
	int32                                         HeroID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     EnergyType;                                        // 0x0038(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IsUp;                                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IsDown;                                            // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IsTarget;                                          // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttributeChangeEvent">();
	}
	static class UAttributeChangeEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttributeChangeEvent>();
	}
};
static_assert(alignof(UAttributeChangeEvent) == 0x000008, "Wrong alignment on UAttributeChangeEvent");
static_assert(sizeof(UAttributeChangeEvent) == 0x000080, "Wrong size on UAttributeChangeEvent");
static_assert(offsetof(UAttributeChangeEvent, HeroID) == 0x000030, "Member 'UAttributeChangeEvent::HeroID' has a wrong offset!");
static_assert(offsetof(UAttributeChangeEvent, EnergyType) == 0x000038, "Member 'UAttributeChangeEvent::EnergyType' has a wrong offset!");
static_assert(offsetof(UAttributeChangeEvent, IsUp) == 0x000078, "Member 'UAttributeChangeEvent::IsUp' has a wrong offset!");
static_assert(offsetof(UAttributeChangeEvent, IsDown) == 0x000079, "Member 'UAttributeChangeEvent::IsDown' has a wrong offset!");
static_assert(offsetof(UAttributeChangeEvent, IsTarget) == 0x00007A, "Member 'UAttributeChangeEvent::IsTarget' has a wrong offset!");

// PythonClass DataBaseEvents.ApplyBuffEvent
// 0x0028 (0x0058 - 0x0030)
class UApplyBuffEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 BuffIds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 ReturnTime;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SameTimeNum;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 ExcludeSelf;                                       // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 ExcludeAlly;                                       // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 IncludeSummon;                                     // 0x004E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SameAbilityNum;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ApplyBuffEvent">();
	}
	static class UApplyBuffEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UApplyBuffEvent>();
	}
};
static_assert(alignof(UApplyBuffEvent) == 0x000008, "Wrong alignment on UApplyBuffEvent");
static_assert(sizeof(UApplyBuffEvent) == 0x000058, "Wrong size on UApplyBuffEvent");
static_assert(offsetof(UApplyBuffEvent, BuffIds) == 0x000030, "Member 'UApplyBuffEvent::BuffIds' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, HeroID) == 0x000040, "Member 'UApplyBuffEvent::HeroID' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, ReturnTime) == 0x000044, "Member 'UApplyBuffEvent::ReturnTime' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, SameTimeNum) == 0x000048, "Member 'UApplyBuffEvent::SameTimeNum' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, ExcludeSelf) == 0x00004C, "Member 'UApplyBuffEvent::ExcludeSelf' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, ExcludeAlly) == 0x00004D, "Member 'UApplyBuffEvent::ExcludeAlly' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, IncludeSummon) == 0x00004E, "Member 'UApplyBuffEvent::IncludeSummon' has a wrong offset!");
static_assert(offsetof(UApplyBuffEvent, SameAbilityNum) == 0x000050, "Member 'UApplyBuffEvent::SameAbilityNum' has a wrong offset!");

// PythonClass DataBaseEvents.FinishBattleEvent
// 0x0008 (0x0038 - 0x0030)
class UFinishBattleEvent final : public UPyDataBaseEvent
{
public:
	bool                                          bWin;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFail;                                             // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeutral;                                          // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishBattleEvent">();
	}
	static class UFinishBattleEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishBattleEvent>();
	}
};
static_assert(alignof(UFinishBattleEvent) == 0x000008, "Wrong alignment on UFinishBattleEvent");
static_assert(sizeof(UFinishBattleEvent) == 0x000038, "Wrong size on UFinishBattleEvent");
static_assert(offsetof(UFinishBattleEvent, bWin) == 0x000030, "Member 'UFinishBattleEvent::bWin' has a wrong offset!");
static_assert(offsetof(UFinishBattleEvent, bFail) == 0x000031, "Member 'UFinishBattleEvent::bFail' has a wrong offset!");
static_assert(offsetof(UFinishBattleEvent, bNeutral) == 0x000032, "Member 'UFinishBattleEvent::bNeutral' has a wrong offset!");

// PythonClass DataBaseEvents.ActivityFinish
// 0x0010 (0x0040 - 0x0030)
class UActivityFinish final : public UPyDataBaseEvent
{
public:
	class FString                                 EvalStr;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivityFinish">();
	}
	static class UActivityFinish* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityFinish>();
	}
};
static_assert(alignof(UActivityFinish) == 0x000008, "Wrong alignment on UActivityFinish");
static_assert(sizeof(UActivityFinish) == 0x000040, "Wrong size on UActivityFinish");
static_assert(offsetof(UActivityFinish, EvalStr) == 0x000030, "Member 'UActivityFinish::EvalStr' has a wrong offset!");

// PythonClass DataBaseEvents.FinishEvent
// 0x0018 (0x0048 - 0x0030)
class UFinishEvent final : public UPyDataBaseEvent
{
public:
	bool                                          bWin;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LevelIDs;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetEventMapIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishEvent">();
	}
	static class UFinishEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishEvent>();
	}
};
static_assert(alignof(UFinishEvent) == 0x000008, "Wrong alignment on UFinishEvent");
static_assert(sizeof(UFinishEvent) == 0x000048, "Wrong size on UFinishEvent");
static_assert(offsetof(UFinishEvent, bWin) == 0x000030, "Member 'UFinishEvent::bWin' has a wrong offset!");
static_assert(offsetof(UFinishEvent, LevelIDs) == 0x000038, "Member 'UFinishEvent::LevelIDs' has a wrong offset!");

// PythonClass DataBaseEvents.SprayPaintEvent
// 0x0000 (0x0030 - 0x0030)
class USprayPaintEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SprayPaintEvent">();
	}
	static class USprayPaintEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USprayPaintEvent>();
	}
};
static_assert(alignof(USprayPaintEvent) == 0x000008, "Wrong alignment on USprayPaintEvent");
static_assert(sizeof(USprayPaintEvent) == 0x000030, "Wrong size on USprayPaintEvent");

// PythonClass DataBaseEvents.QuickSignalEvent
// 0x0008 (0x0038 - 0x0030)
class UQuickSignalEvent final : public UPyDataBaseEvent
{
public:
	int32                                         SignalID;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataBaseBool                                 NeedResponse;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuickSignalEvent">();
	}
	static class UQuickSignalEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuickSignalEvent>();
	}
};
static_assert(alignof(UQuickSignalEvent) == 0x000008, "Wrong alignment on UQuickSignalEvent");
static_assert(sizeof(UQuickSignalEvent) == 0x000038, "Wrong size on UQuickSignalEvent");
static_assert(offsetof(UQuickSignalEvent, SignalID) == 0x000030, "Member 'UQuickSignalEvent::SignalID' has a wrong offset!");
static_assert(offsetof(UQuickSignalEvent, NeedResponse) == 0x000034, "Member 'UQuickSignalEvent::NeedResponse' has a wrong offset!");

// PythonClass DataBaseEvents.AimPointEvent
// 0x0000 (0x0030 - 0x0030)
class UAimPointEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimPointEvent">();
	}
	static class UAimPointEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimPointEvent>();
	}
};
static_assert(alignof(UAimPointEvent) == 0x000008, "Wrong alignment on UAimPointEvent");
static_assert(sizeof(UAimPointEvent) == 0x000030, "Wrong size on UAimPointEvent");

// PythonClass DataBaseEvents.BuffDamageShareEvent
// 0x0000 (0x0030 - 0x0030)
class UBuffDamageShareEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffDamageShareEvent">();
	}
	static class UBuffDamageShareEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffDamageShareEvent>();
	}
};
static_assert(alignof(UBuffDamageShareEvent) == 0x000008, "Wrong alignment on UBuffDamageShareEvent");
static_assert(sizeof(UBuffDamageShareEvent) == 0x000030, "Wrong size on UBuffDamageShareEvent");

// PythonClass DataBaseEvents.BuffExtraDamageEvent
// 0x0010 (0x0040 - 0x0030)
class UBuffExtraDamageEvent final : public UPyDataBaseEvent
{
public:
	TArray<int32>                                 BuffIDList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffExtraDamageEvent">();
	}
	static class UBuffExtraDamageEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffExtraDamageEvent>();
	}
};
static_assert(alignof(UBuffExtraDamageEvent) == 0x000008, "Wrong alignment on UBuffExtraDamageEvent");
static_assert(sizeof(UBuffExtraDamageEvent) == 0x000040, "Wrong size on UBuffExtraDamageEvent");
static_assert(offsetof(UBuffExtraDamageEvent, BuffIDList) == 0x000030, "Member 'UBuffExtraDamageEvent::BuffIDList' has a wrong offset!");

// PythonClass DataBaseEvents.BuffDamageToCurrentEvent
// 0x0000 (0x0030 - 0x0030)
class UBuffDamageToCurrentEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffDamageToCurrentEvent">();
	}
	static class UBuffDamageToCurrentEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffDamageToCurrentEvent>();
	}
};
static_assert(alignof(UBuffDamageToCurrentEvent) == 0x000008, "Wrong alignment on UBuffDamageToCurrentEvent");
static_assert(sizeof(UBuffDamageToCurrentEvent) == 0x000030, "Wrong size on UBuffDamageToCurrentEvent");

// PythonClass DataBaseEvents.PortalTeleportEvent
// 0x0008 (0x0038 - 0x0030)
class UPortalTeleportEvent final : public UPyDataBaseEvent
{
public:
	bool                                          IsLevelPortal;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalTeleportEvent">();
	}
	static class UPortalTeleportEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalTeleportEvent>();
	}
};
static_assert(alignof(UPortalTeleportEvent) == 0x000008, "Wrong alignment on UPortalTeleportEvent");
static_assert(sizeof(UPortalTeleportEvent) == 0x000038, "Wrong size on UPortalTeleportEvent");
static_assert(offsetof(UPortalTeleportEvent, IsLevelPortal) == 0x000030, "Member 'UPortalTeleportEvent::IsLevelPortal' has a wrong offset!");

// PythonClass DataBaseEvents.VenomCorrosionBreakEvent
// 0x0000 (0x0030 - 0x0030)
class UVenomCorrosionBreakEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VenomCorrosionBreakEvent">();
	}
	static class UVenomCorrosionBreakEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVenomCorrosionBreakEvent>();
	}
};
static_assert(alignof(UVenomCorrosionBreakEvent) == 0x000008, "Wrong alignment on UVenomCorrosionBreakEvent");
static_assert(sizeof(UVenomCorrosionBreakEvent) == 0x000030, "Wrong size on UVenomCorrosionBreakEvent");

// PythonClass DataBaseEvents.AnkaEvent
// 0x0000 (0x0030 - 0x0030)
class UAnkaEvent final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnkaEvent">();
	}
	static class UAnkaEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnkaEvent>();
	}
};
static_assert(alignof(UAnkaEvent) == 0x000008, "Wrong alignment on UAnkaEvent");
static_assert(sizeof(UAnkaEvent) == 0x000030, "Wrong size on UAnkaEvent");

// PythonClass DataBaseEvents.InteractionWithNPC
// 0x0018 (0x0048 - 0x0030)
class UInteractionWithNPC final : public UPyDataBaseEvent
{
public:
	bool                                          Is_repeatable;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractionWithNPC">();
	}
	static class UInteractionWithNPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractionWithNPC>();
	}
};
static_assert(alignof(UInteractionWithNPC) == 0x000008, "Wrong alignment on UInteractionWithNPC");
static_assert(sizeof(UInteractionWithNPC) == 0x000048, "Wrong size on UInteractionWithNPC");
static_assert(offsetof(UInteractionWithNPC, Is_repeatable) == 0x000030, "Member 'UInteractionWithNPC::Is_repeatable' has a wrong offset!");
static_assert(offsetof(UInteractionWithNPC, Tags) == 0x000038, "Member 'UInteractionWithNPC::Tags' has a wrong offset!");

// PythonClass DataBaseEvents.ChaosDesCollapse
// 0x0018 (0x0048 - 0x0030)
class UChaosDesCollapse final : public UPyDataBaseEvent
{
public:
	int32                                         Interval;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDesCollapse">();
	}
	static class UChaosDesCollapse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDesCollapse>();
	}
};
static_assert(alignof(UChaosDesCollapse) == 0x000008, "Wrong alignment on UChaosDesCollapse");
static_assert(sizeof(UChaosDesCollapse) == 0x000048, "Wrong size on UChaosDesCollapse");
static_assert(offsetof(UChaosDesCollapse, Interval) == 0x000030, "Member 'UChaosDesCollapse::Interval' has a wrong offset!");
static_assert(offsetof(UChaosDesCollapse, Tags) == 0x000038, "Member 'UChaosDesCollapse::Tags' has a wrong offset!");

// PythonClass DataBaseEvents.WinterFestivalFinishEvent
// 0x0010 (0x0040 - 0x0030)
class UWinterFestivalFinishEvent final : public UPyDataBaseEvent
{
public:
	bool                                          bWin;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Points;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerScore;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WinterFestivalFinishEvent">();
	}
	static class UWinterFestivalFinishEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWinterFestivalFinishEvent>();
	}
};
static_assert(alignof(UWinterFestivalFinishEvent) == 0x000008, "Wrong alignment on UWinterFestivalFinishEvent");
static_assert(sizeof(UWinterFestivalFinishEvent) == 0x000040, "Wrong size on UWinterFestivalFinishEvent");
static_assert(offsetof(UWinterFestivalFinishEvent, bWin) == 0x000030, "Member 'UWinterFestivalFinishEvent::bWin' has a wrong offset!");
static_assert(offsetof(UWinterFestivalFinishEvent, Points) == 0x000034, "Member 'UWinterFestivalFinishEvent::Points' has a wrong offset!");
static_assert(offsetof(UWinterFestivalFinishEvent, PlayerScore) == 0x000038, "Member 'UWinterFestivalFinishEvent::PlayerScore' has a wrong offset!");

// PythonClass DataBaseEvents.SingleDeath
// 0x0000 (0x0030 - 0x0030)
class USingleDeath final : public UPyDataBaseEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SingleDeath">();
	}
	static class USingleDeath* GetDefaultObj()
	{
		return GetDefaultObjImpl<USingleDeath>();
	}
};
static_assert(alignof(USingleDeath) == 0x000008, "Wrong alignment on USingleDeath");
static_assert(sizeof(USingleDeath) == 0x000030, "Wrong size on USingleDeath");

// PythonClass DataBaseEvents.BackTrackCollapseEvent
// 0x0018 (0x0048 - 0x0030)
class UBackTrackCollapseEvent final : public UPyDataBaseEvent
{
public:
	class FString                                 SpecificTag;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitTime;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackTrackCollapseEvent">();
	}
	static class UBackTrackCollapseEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackTrackCollapseEvent>();
	}
};
static_assert(alignof(UBackTrackCollapseEvent) == 0x000008, "Wrong alignment on UBackTrackCollapseEvent");
static_assert(sizeof(UBackTrackCollapseEvent) == 0x000048, "Wrong size on UBackTrackCollapseEvent");
static_assert(offsetof(UBackTrackCollapseEvent, SpecificTag) == 0x000030, "Member 'UBackTrackCollapseEvent::SpecificTag' has a wrong offset!");
static_assert(offsetof(UBackTrackCollapseEvent, LimitTime) == 0x000040, "Member 'UBackTrackCollapseEvent::LimitTime' has a wrong offset!");

}

