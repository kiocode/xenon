#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_PyCheckLocationIsValid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "PyBTNodeBase_classes.hpp"


namespace SDK
{

// PythonClass BTS_PyCheckLocationIsValid.BTS_PyCheckLocationIsValid
// 0x0058 (0x0100 - 0x00A8)
class UBTS_PyCheckLocationIsValid : public UBTService_PyBase
{
public:
	struct FVector                                NavCheckExtent;                                    // 0x00A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavCheckOffsetZ;                                   // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 TryingExitState;                                   // 0x00C8(0x0030)(Edit, NativeAccessSpecifierPublic)
	int32                                         LeaveMeshTolerance;                                // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTS_PyCheckLocationIsValid">();
	}
	static class UBTS_PyCheckLocationIsValid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_PyCheckLocationIsValid>();
	}
};
//static_assert(alignof(UBTS_PyCheckLocationIsValid) == 0x000008, "Wrong alignment on UBTS_PyCheckLocationIsValid");
//static_assert(sizeof(UBTS_PyCheckLocationIsValid) == 0x000100, "Wrong size on UBTS_PyCheckLocationIsValid");
//static_assert(offsetof(UBTS_PyCheckLocationIsValid, NavCheckExtent) == 0x0000A8, "Member 'UBTS_PyCheckLocationIsValid::NavCheckExtent' has a wrong offset!");
//static_assert(offsetof(UBTS_PyCheckLocationIsValid, NavCheckOffsetZ) == 0x0000C0, "Member 'UBTS_PyCheckLocationIsValid::NavCheckOffsetZ' has a wrong offset!");
//static_assert(offsetof(UBTS_PyCheckLocationIsValid, TryingExitState) == 0x0000C8, "Member 'UBTS_PyCheckLocationIsValid::TryingExitState' has a wrong offset!");
//static_assert(offsetof(UBTS_PyCheckLocationIsValid, LeaveMeshTolerance) == 0x0000F8, "Member 'UBTS_PyCheckLocationIsValid::LeaveMeshTolerance' has a wrong offset!");

}

