#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1038

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Marvel_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Hero_1038.TraceComponent_10381101.OnAbilityInit
// 0x0004 (0x0004 - 0x0000)
struct TraceComponent_10381101_OnAbilityInit final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceComponent_10381101_OnAbilityInit) == 0x000004, "Wrong alignment on TraceComponent_10381101_OnAbilityInit");
static_assert(sizeof(TraceComponent_10381101_OnAbilityInit) == 0x000004, "Wrong size on TraceComponent_10381101_OnAbilityInit");
static_assert(offsetof(TraceComponent_10381101_OnAbilityInit, AbilityID) == 0x000000, "Member 'TraceComponent_10381101_OnAbilityInit::AbilityID' has a wrong offset!");

// Function Hero_1038.Cue_Scope_Loop_10381101.OnComponentCollisionChanged
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_10381101_OnComponentCollisionChanged final
{
public:
	class UPrimitiveComponent*                    ChangedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10381101_OnComponentCollisionChanged) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10381101_OnComponentCollisionChanged");
static_assert(sizeof(Cue_Scope_Loop_10381101_OnComponentCollisionChanged) == 0x000008, "Wrong size on Cue_Scope_Loop_10381101_OnComponentCollisionChanged");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnComponentCollisionChanged, ChangedComponent) == 0x000000, "Member 'Cue_Scope_Loop_10381101_OnComponentCollisionChanged::ChangedComponent' has a wrong offset!");

// Function Hero_1038.Cue_Scope_Loop_10381101.OnGetInstigator
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_10381101_OnGetInstigator final
{
public:
	class AActor*                                 InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10381101_OnGetInstigator) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10381101_OnGetInstigator");
static_assert(sizeof(Cue_Scope_Loop_10381101_OnGetInstigator) == 0x000008, "Wrong size on Cue_Scope_Loop_10381101_OnGetInstigator");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnGetInstigator, InstigatorActor) == 0x000000, "Member 'Cue_Scope_Loop_10381101_OnGetInstigator::InstigatorActor' has a wrong offset!");

// Function Hero_1038.Cue_Scope_Loop_10381101.OnTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct Cue_Scope_Loop_10381101_OnTakeDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10381101_OnTakeDamage) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10381101_OnTakeDamage");
static_assert(sizeof(Cue_Scope_Loop_10381101_OnTakeDamage) == 0x000028, "Wrong size on Cue_Scope_Loop_10381101_OnTakeDamage");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnTakeDamage, InSourceAvatar) == 0x000000, "Member 'Cue_Scope_Loop_10381101_OnTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnTakeDamage, InTargetAvatar) == 0x000008, "Member 'Cue_Scope_Loop_10381101_OnTakeDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'Cue_Scope_Loop_10381101_OnTakeDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1038.Cue_Scope_Loop_10381101.OnTraceHitResult
// 0x0018 (0x0018 - 0x0000)
struct Cue_Scope_Loop_10381101_OnTraceHitResult final
{
public:
	class UObject*                                TraceSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10381101_OnTraceHitResult) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10381101_OnTraceHitResult");
static_assert(sizeof(Cue_Scope_Loop_10381101_OnTraceHitResult) == 0x000018, "Wrong size on Cue_Scope_Loop_10381101_OnTraceHitResult");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnTraceHitResult, TraceSource) == 0x000000, "Member 'Cue_Scope_Loop_10381101_OnTraceHitResult::TraceSource' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10381101_OnTraceHitResult, HitResults) == 0x000008, "Member 'Cue_Scope_Loop_10381101_OnTraceHitResult::HitResults' has a wrong offset!");

// Function Hero_1038.UIController_103831.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct UIController_103831_OnTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIController_103831_OnTagUpdate) == 0x000004, "Wrong alignment on UIController_103831_OnTagUpdate");
static_assert(sizeof(UIController_103831_OnTagUpdate) == 0x000010, "Wrong size on UIController_103831_OnTagUpdate");
static_assert(offsetof(UIController_103831_OnTagUpdate, TagUpdated) == 0x000000, "Member 'UIController_103831_OnTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(UIController_103831_OnTagUpdate, TagExists) == 0x00000C, "Member 'UIController_103831_OnTagUpdate::TagExists' has a wrong offset!");

// Function Hero_1038.Cue_Buff_10384101.OnViewingSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Buff_10384101_OnViewingSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Buff_10384101_OnViewingSideChanged) == 0x000001, "Wrong alignment on Cue_Buff_10384101_OnViewingSideChanged");
static_assert(sizeof(Cue_Buff_10384101_OnViewingSideChanged) == 0x000001, "Wrong size on Cue_Buff_10384101_OnViewingSideChanged");
static_assert(offsetof(Cue_Buff_10384101_OnViewingSideChanged, InViewSide) == 0x000000, "Member 'Cue_Buff_10384101_OnViewingSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1038.Cue_Ability_Loop_10385101.OnSelfViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10385101_OnSelfViewSideChanged final
{
public:
	EClientPlayerViewSide                         ViewSide;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10385101_OnSelfViewSideChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10385101_OnSelfViewSideChanged");
static_assert(sizeof(Cue_Ability_Loop_10385101_OnSelfViewSideChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10385101_OnSelfViewSideChanged");
static_assert(offsetof(Cue_Ability_Loop_10385101_OnSelfViewSideChanged, ViewSide) == 0x000000, "Member 'Cue_Ability_Loop_10385101_OnSelfViewSideChanged::ViewSide' has a wrong offset!");

// Function Hero_1038.Cue_Ability_Loop_10386301.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10386301_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10386301_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10386301_OnPlayerViewSideChanged");
static_assert(sizeof(Cue_Ability_Loop_10386301_OnPlayerViewSideChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10386301_OnPlayerViewSideChanged");
static_assert(offsetof(Cue_Ability_Loop_10386301_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'Cue_Ability_Loop_10386301_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1038.UIController_103871.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct UIController_103871_OnTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIController_103871_OnTagUpdate) == 0x000004, "Wrong alignment on UIController_103871_OnTagUpdate");
static_assert(sizeof(UIController_103871_OnTagUpdate) == 0x000010, "Wrong size on UIController_103871_OnTagUpdate");
static_assert(offsetof(UIController_103871_OnTagUpdate, TagUpdated) == 0x000000, "Member 'UIController_103871_OnTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(UIController_103871_OnTagUpdate, TagExists) == 0x00000C, "Member 'UIController_103871_OnTagUpdate::TagExists' has a wrong offset!");

// Function Hero_1038.Cue_Ability_Loop_10387101.OnOwnerTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Cue_Ability_Loop_10387101_OnOwnerTagUpdate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10387101_OnOwnerTagUpdate) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10387101_OnOwnerTagUpdate");
static_assert(sizeof(Cue_Ability_Loop_10387101_OnOwnerTagUpdate) == 0x000010, "Wrong size on Cue_Ability_Loop_10387101_OnOwnerTagUpdate");
static_assert(offsetof(Cue_Ability_Loop_10387101_OnOwnerTagUpdate, Tag) == 0x000000, "Member 'Cue_Ability_Loop_10387101_OnOwnerTagUpdate::Tag' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10387101_OnOwnerTagUpdate, Count) == 0x00000C, "Member 'Cue_Ability_Loop_10387101_OnOwnerTagUpdate::Count' has a wrong offset!");

// Function Hero_1038.ScarletWitchChildActor.OnOwnerDeath
// 0x0028 (0x0028 - 0x0000)
struct ScarletWitchChildActor_OnOwnerDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScarletWitchChildActor_OnOwnerDeath) == 0x000008, "Wrong alignment on ScarletWitchChildActor_OnOwnerDeath");
static_assert(sizeof(ScarletWitchChildActor_OnOwnerDeath) == 0x000028, "Wrong size on ScarletWitchChildActor_OnOwnerDeath");
static_assert(offsetof(ScarletWitchChildActor_OnOwnerDeath, InSourceAvatar) == 0x000000, "Member 'ScarletWitchChildActor_OnOwnerDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(ScarletWitchChildActor_OnOwnerDeath, InTargetAvatar) == 0x000008, "Member 'ScarletWitchChildActor_OnOwnerDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(ScarletWitchChildActor_OnOwnerDeath, ModifierParameterHandle) == 0x000010, "Member 'ScarletWitchChildActor_OnOwnerDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1038.TabData_1038.OnAbilityUse
// 0x0238 (0x0238 - 0x0000)
struct TabData_1038_OnAbilityUse final
{
public:
	struct FActionLogAbilityRecord                Record;                                            // 0x0000(0x0238)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabData_1038_OnAbilityUse) == 0x000008, "Wrong alignment on TabData_1038_OnAbilityUse");
static_assert(sizeof(TabData_1038_OnAbilityUse) == 0x000238, "Wrong size on TabData_1038_OnAbilityUse");
static_assert(offsetof(TabData_1038_OnAbilityUse, Record) == 0x000000, "Member 'TabData_1038_OnAbilityUse::Record' has a wrong offset!");

}

