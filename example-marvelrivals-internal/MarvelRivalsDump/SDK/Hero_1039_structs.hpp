#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1039

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Hero_1039.EThorEnergyStage
// NumValues: 0x0005
enum class EThorEnergyStage : uint8
{
	Active                                   = 0,
	Missile                                  = 1,
	Break                                    = 2,
	End                                      = 3,
	EThorEnergyStage_MAX                     = 4,
};

// Enum Hero_1039.EAbilityState_103961
// NumValues: 0x000B
enum class EAbilityState_103961 : uint8
{
	NotUse                                   = 0,
	Activate                                 = 1,
	Rising                                   = 2,
	PreHover                                 = 3,
	Hover                                    = 4,
	PreDropDash                              = 5,
	Droping                                  = 6,
	PreDropEnd                               = 7,
	DropEnd                                  = 8,
	EndAbility                               = 9,
	EAbilityState_MAX                        = 10,
};

// ScriptStruct Hero_1039.ThorEnergyConfig
// 0x000C (0x000C - 0x0000)
struct FThorEnergyConfig final
{
public:
	EThorEnergyStage                              Stage;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThorEnergyConfig) == 0x000004, "Wrong alignment on FThorEnergyConfig");
static_assert(sizeof(FThorEnergyConfig) == 0x00000C, "Wrong size on FThorEnergyConfig");
static_assert(offsetof(FThorEnergyConfig, Stage) == 0x000000, "Member 'FThorEnergyConfig::Stage' has a wrong offset!");
static_assert(offsetof(FThorEnergyConfig, AbilityID) == 0x000004, "Member 'FThorEnergyConfig::AbilityID' has a wrong offset!");
static_assert(offsetof(FThorEnergyConfig, bForce) == 0x000008, "Member 'FThorEnergyConfig::bForce' has a wrong offset!");

// ScriptStruct Hero_1039.FXConfig_103951
// 0x0020 (0x0020 - 0x0000)
struct FFXConfig_103951 final
{
public:
	TArray<struct FVector>                        RelativePoints;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFXConfig_103951) == 0x000008, "Wrong alignment on FFXConfig_103951");
static_assert(sizeof(FFXConfig_103951) == 0x000020, "Wrong size on FFXConfig_103951");
static_assert(offsetof(FFXConfig_103951, RelativePoints) == 0x000000, "Member 'FFXConfig_103951::RelativePoints' has a wrong offset!");
static_assert(offsetof(FFXConfig_103951, SocketName) == 0x000010, "Member 'FFXConfig_103951::SocketName' has a wrong offset!");

// ScriptStruct Hero_1039.AbilitySection_103961
// 0x0010 (0x0010 - 0x0000)
struct FAbilitySection_103961 final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityState_103961                          AddStage;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityState_103961                          RemoveStage;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilitySection_103961) == 0x000004, "Wrong alignment on FAbilitySection_103961");
static_assert(sizeof(FAbilitySection_103961) == 0x000010, "Wrong size on FAbilitySection_103961");
static_assert(offsetof(FAbilitySection_103961, GameplayCueTag) == 0x000000, "Member 'FAbilitySection_103961::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FAbilitySection_103961, AddStage) == 0x00000C, "Member 'FAbilitySection_103961::AddStage' has a wrong offset!");
static_assert(offsetof(FAbilitySection_103961, RemoveStage) == 0x00000D, "Member 'FAbilitySection_103961::RemoveStage' has a wrong offset!");

// ScriptStruct Hero_1039.PreArrivedInfo
// 0x0008 (0x0008 - 0x0000)
struct FPreArrivedInfo final
{
public:
	float                                         PreArrivedTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreArrviedDis;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPreArrivedInfo) == 0x000004, "Wrong alignment on FPreArrivedInfo");
static_assert(sizeof(FPreArrivedInfo) == 0x000008, "Wrong size on FPreArrivedInfo");
static_assert(offsetof(FPreArrivedInfo, PreArrivedTime) == 0x000000, "Member 'FPreArrivedInfo::PreArrivedTime' has a wrong offset!");
static_assert(offsetof(FPreArrivedInfo, PreArrviedDis) == 0x000004, "Member 'FPreArrivedInfo::PreArrviedDis' has a wrong offset!");

}

