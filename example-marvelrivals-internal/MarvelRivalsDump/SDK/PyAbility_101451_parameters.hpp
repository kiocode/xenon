#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_101451

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hero_1014_structs.hpp"
#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// DelegateFunction PyAbility_101451.PyProjectile_10145101.OnProjectileHit__DelegateSignature
// 0x0170 (0x0170 - 0x0000)
struct PyProjectile_10145101_OnProjectileHit__DelegateSignature final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyProjectile_10145101_OnProjectileHit__DelegateSignature) == 0x000008, "Wrong alignment on PyProjectile_10145101_OnProjectileHit__DelegateSignature");
static_assert(sizeof(PyProjectile_10145101_OnProjectileHit__DelegateSignature) == 0x000170, "Wrong size on PyProjectile_10145101_OnProjectileHit__DelegateSignature");
static_assert(offsetof(PyProjectile_10145101_OnProjectileHit__DelegateSignature, ImpactResult) == 0x000000, "Member 'PyProjectile_10145101_OnProjectileHit__DelegateSignature::ImpactResult' has a wrong offset!");

// PythonFunction PyAbility_101451.PyProjectile_10145101.K2_OnProcessHit
// 0x0170 (0x0170 - 0x0000)
struct PyProjectile_10145101_K2_OnProcessHit final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyProjectile_10145101_K2_OnProcessHit) == 0x000008, "Wrong alignment on PyProjectile_10145101_K2_OnProcessHit");
static_assert(sizeof(PyProjectile_10145101_K2_OnProcessHit) == 0x000170, "Wrong size on PyProjectile_10145101_K2_OnProcessHit");
static_assert(offsetof(PyProjectile_10145101_K2_OnProcessHit, ImpactResult) == 0x000000, "Member 'PyProjectile_10145101_K2_OnProcessHit::ImpactResult' has a wrong offset!");

// PythonFunction PyAbility_101451.PyProjectile_10145101.K2_OnFlyOverMaxDistance
// 0x0170 (0x0170 - 0x0000)
struct PyProjectile_10145101_K2_OnFlyOverMaxDistance final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyProjectile_10145101_K2_OnFlyOverMaxDistance) == 0x000008, "Wrong alignment on PyProjectile_10145101_K2_OnFlyOverMaxDistance");
static_assert(sizeof(PyProjectile_10145101_K2_OnFlyOverMaxDistance) == 0x000170, "Wrong size on PyProjectile_10145101_K2_OnFlyOverMaxDistance");
static_assert(offsetof(PyProjectile_10145101_K2_OnFlyOverMaxDistance, ImpactResult) == 0x000000, "Member 'PyProjectile_10145101_K2_OnFlyOverMaxDistance::ImpactResult' has a wrong offset!");

// DelegateFunction PyAbility_101451.PyAbility_101451.OnCurrentZiplineLaunchEnd__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature final
{
public:
	EZiplineLaunchResult                          LaunchResult;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature) == 0x000001, "Wrong alignment on PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature");
static_assert(sizeof(PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature) == 0x000001, "Wrong size on PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature");
static_assert(offsetof(PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature, LaunchResult) == 0x000000, "Member 'PyAbility_101451_OnCurrentZiplineLaunchEnd__DelegateSignature::LaunchResult' has a wrong offset!");

// PythonFunction PyAbility_101451.PyAbility_101451.CanSpawnZipline
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_101451_CanSpawnZipline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101451_CanSpawnZipline) == 0x000001, "Wrong alignment on PyAbility_101451_CanSpawnZipline");
static_assert(sizeof(PyAbility_101451_CanSpawnZipline) == 0x000001, "Wrong size on PyAbility_101451_CanSpawnZipline");
static_assert(offsetof(PyAbility_101451_CanSpawnZipline, ReturnValue) == 0x000000, "Member 'PyAbility_101451_CanSpawnZipline::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101451.PyAbility_101451.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct PyAbility_101451_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101451_K2_OnEndAbility) == 0x000001, "Wrong alignment on PyAbility_101451_K2_OnEndAbility");
static_assert(sizeof(PyAbility_101451_K2_OnEndAbility) == 0x000001, "Wrong size on PyAbility_101451_K2_OnEndAbility");
static_assert(offsetof(PyAbility_101451_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'PyAbility_101451_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// PythonFunction PyAbility_101451.PyAbility_101451.IsValidToSetupZipline
// 0x0178 (0x0178 - 0x0000)
struct PyAbility_101451_IsValidToSetupZipline final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
	EZiplineLaunchResult                          ReturnValue;                                       // 0x0170(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101451_IsValidToSetupZipline) == 0x000008, "Wrong alignment on PyAbility_101451_IsValidToSetupZipline");
static_assert(sizeof(PyAbility_101451_IsValidToSetupZipline) == 0x000178, "Wrong size on PyAbility_101451_IsValidToSetupZipline");
static_assert(offsetof(PyAbility_101451_IsValidToSetupZipline, Hit) == 0x000000, "Member 'PyAbility_101451_IsValidToSetupZipline::Hit' has a wrong offset!");
static_assert(offsetof(PyAbility_101451_IsValidToSetupZipline, ReturnValue) == 0x000170, "Member 'PyAbility_101451_IsValidToSetupZipline::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101451.PyAbility_101451.NativeOnMontageCompleted
// 0x0010 (0x0010 - 0x0000)
struct PyAbility_101451_NativeOnMontageCompleted final
{
public:
	class FString                                 EventTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyAbility_101451_NativeOnMontageCompleted) == 0x000008, "Wrong alignment on PyAbility_101451_NativeOnMontageCompleted");
static_assert(sizeof(PyAbility_101451_NativeOnMontageCompleted) == 0x000010, "Wrong size on PyAbility_101451_NativeOnMontageCompleted");
static_assert(offsetof(PyAbility_101451_NativeOnMontageCompleted, EventTag) == 0x000000, "Member 'PyAbility_101451_NativeOnMontageCompleted::EventTag' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.SetLaunchState
// 0x0001 (0x0001 - 0x0000)
struct PySummoned_10145101_SetLaunchState final
{
public:
	EZiplineLaunchState                           LaunchState_0;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_10145101_SetLaunchState) == 0x000001, "Wrong alignment on PySummoned_10145101_SetLaunchState");
static_assert(sizeof(PySummoned_10145101_SetLaunchState) == 0x000001, "Wrong size on PySummoned_10145101_SetLaunchState");
static_assert(offsetof(PySummoned_10145101_SetLaunchState, LaunchState_0) == 0x000000, "Member 'PySummoned_10145101_SetLaunchState::LaunchState_0' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.SetSlideState
// 0x0001 (0x0001 - 0x0000)
struct PySummoned_10145101_SetSlideState final
{
public:
	EZiplineSlideState                            SlideState_0;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_10145101_SetSlideState) == 0x000001, "Wrong alignment on PySummoned_10145101_SetSlideState");
static_assert(sizeof(PySummoned_10145101_SetSlideState) == 0x000001, "Wrong size on PySummoned_10145101_SetSlideState");
static_assert(offsetof(PySummoned_10145101_SetSlideState, SlideState_0) == 0x000000, "Member 'PySummoned_10145101_SetSlideState::SlideState_0' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.AuthorityOnClawHit
// 0x0170 (0x0170 - 0x0000)
struct PySummoned_10145101_AuthorityOnClawHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PySummoned_10145101_AuthorityOnClawHit) == 0x000008, "Wrong alignment on PySummoned_10145101_AuthorityOnClawHit");
static_assert(sizeof(PySummoned_10145101_AuthorityOnClawHit) == 0x000170, "Wrong size on PySummoned_10145101_AuthorityOnClawHit");
static_assert(offsetof(PySummoned_10145101_AuthorityOnClawHit, Hit) == 0x000000, "Member 'PySummoned_10145101_AuthorityOnClawHit::Hit' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.MulticastHookClaw
// 0x0080 (0x0080 - 0x0000)
struct PySummoned_10145101_MulticastHookClaw final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPortalSegments                        PortalSegments;                                    // 0x0030(0x0050)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PySummoned_10145101_MulticastHookClaw) == 0x000008, "Wrong alignment on PySummoned_10145101_MulticastHookClaw");
static_assert(sizeof(PySummoned_10145101_MulticastHookClaw) == 0x000080, "Wrong size on PySummoned_10145101_MulticastHookClaw");
static_assert(offsetof(PySummoned_10145101_MulticastHookClaw, StartLocation) == 0x000000, "Member 'PySummoned_10145101_MulticastHookClaw::StartLocation' has a wrong offset!");
static_assert(offsetof(PySummoned_10145101_MulticastHookClaw, EndLocation) == 0x000018, "Member 'PySummoned_10145101_MulticastHookClaw::EndLocation' has a wrong offset!");
static_assert(offsetof(PySummoned_10145101_MulticastHookClaw, PortalSegments) == 0x000030, "Member 'PySummoned_10145101_MulticastHookClaw::PortalSegments' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.OnZiplineEndTask
// 0x0008 (0x0008 - 0x0000)
struct PySummoned_10145101_OnZiplineEndTask final
{
public:
	class AActor*                                 Portal;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_10145101_OnZiplineEndTask) == 0x000008, "Wrong alignment on PySummoned_10145101_OnZiplineEndTask");
static_assert(sizeof(PySummoned_10145101_OnZiplineEndTask) == 0x000008, "Wrong size on PySummoned_10145101_OnZiplineEndTask");
static_assert(offsetof(PySummoned_10145101_OnZiplineEndTask, Portal) == 0x000000, "Member 'PySummoned_10145101_OnZiplineEndTask::Portal' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.MulticastLaunchEnd
// 0x0001 (0x0001 - 0x0000)
struct PySummoned_10145101_MulticastLaunchEnd final
{
public:
	EZiplineLaunchResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_10145101_MulticastLaunchEnd) == 0x000001, "Wrong alignment on PySummoned_10145101_MulticastLaunchEnd");
static_assert(sizeof(PySummoned_10145101_MulticastLaunchEnd) == 0x000001, "Wrong size on PySummoned_10145101_MulticastLaunchEnd");
static_assert(offsetof(PySummoned_10145101_MulticastLaunchEnd, Result) == 0x000000, "Member 'PySummoned_10145101_MulticastLaunchEnd::Result' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_10145101.LaunchEnd
// 0x0001 (0x0001 - 0x0000)
struct PySummoned_10145101_LaunchEnd final
{
public:
	EZiplineLaunchResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_10145101_LaunchEnd) == 0x000001, "Wrong alignment on PySummoned_10145101_LaunchEnd");
static_assert(sizeof(PySummoned_10145101_LaunchEnd) == 0x000001, "Wrong size on PySummoned_10145101_LaunchEnd");
static_assert(offsetof(PySummoned_10145101_LaunchEnd, Result) == 0x000000, "Member 'PySummoned_10145101_LaunchEnd::Result' has a wrong offset!");

// PythonFunction PyAbility_101451.PyCue_Ability_Loop_10145101.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_10145101_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10145101_WhileActive) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10145101_WhileActive");
static_assert(sizeof(PyCue_Ability_Loop_10145101_WhileActive) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_10145101_WhileActive");
static_assert(offsetof(PyCue_Ability_Loop_10145101_WhileActive, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10145101_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10145101_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10145101_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10145101_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_10145101_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101451.PyCue_Ability_Loop_10145101.OnRemove
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Ability_Loop_10145101_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Ability_Loop_10145101_OnRemove) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10145101_OnRemove");
static_assert(sizeof(PyCue_Ability_Loop_10145101_OnRemove) == 0x0001C8, "Wrong size on PyCue_Ability_Loop_10145101_OnRemove");
static_assert(offsetof(PyCue_Ability_Loop_10145101_OnRemove, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10145101_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10145101_OnRemove, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10145101_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10145101_OnRemove, ReturnValue) == 0x0001C0, "Member 'PyCue_Ability_Loop_10145101_OnRemove::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101451.PyCue_Projectile_HitImpact_10145101.OnExecute
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Projectile_HitImpact_10145101_OnExecute final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Projectile_HitImpact_10145101_OnExecute) == 0x000008, "Wrong alignment on PyCue_Projectile_HitImpact_10145101_OnExecute");
static_assert(sizeof(PyCue_Projectile_HitImpact_10145101_OnExecute) == 0x0001C8, "Wrong size on PyCue_Projectile_HitImpact_10145101_OnExecute");
static_assert(offsetof(PyCue_Projectile_HitImpact_10145101_OnExecute, MyTarget) == 0x000000, "Member 'PyCue_Projectile_HitImpact_10145101_OnExecute::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_HitImpact_10145101_OnExecute, Parameters) == 0x000008, "Member 'PyCue_Projectile_HitImpact_10145101_OnExecute::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_HitImpact_10145101_OnExecute, ReturnValue) == 0x0001C0, "Member 'PyCue_Projectile_HitImpact_10145101_OnExecute::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_Cue_10145101_Loop.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PySummoned_Cue_10145101_Loop_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_Cue_10145101_Loop_ReceiveTick) == 0x000004, "Wrong alignment on PySummoned_Cue_10145101_Loop_ReceiveTick");
static_assert(sizeof(PySummoned_Cue_10145101_Loop_ReceiveTick) == 0x000004, "Wrong size on PySummoned_Cue_10145101_Loop_ReceiveTick");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PySummoned_Cue_10145101_Loop_ReceiveTick::DeltaSeconds' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_Cue_10145101_Loop.WhileActiveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PySummoned_Cue_10145101_Loop_WhileActiveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PySummoned_Cue_10145101_Loop_WhileActiveFX) == 0x000008, "Wrong alignment on PySummoned_Cue_10145101_Loop_WhileActiveFX");
static_assert(sizeof(PySummoned_Cue_10145101_Loop_WhileActiveFX) == 0x0001C0, "Wrong size on PySummoned_Cue_10145101_Loop_WhileActiveFX");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_WhileActiveFX, MyTarget) == 0x000000, "Member 'PySummoned_Cue_10145101_Loop_WhileActiveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_WhileActiveFX, Parameters) == 0x000008, "Member 'PySummoned_Cue_10145101_Loop_WhileActiveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_Cue_10145101_Loop.OnRemoveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PySummoned_Cue_10145101_Loop_OnRemoveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PySummoned_Cue_10145101_Loop_OnRemoveFX) == 0x000008, "Wrong alignment on PySummoned_Cue_10145101_Loop_OnRemoveFX");
static_assert(sizeof(PySummoned_Cue_10145101_Loop_OnRemoveFX) == 0x0001C0, "Wrong size on PySummoned_Cue_10145101_Loop_OnRemoveFX");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_OnRemoveFX, MyTarget) == 0x000000, "Member 'PySummoned_Cue_10145101_Loop_OnRemoveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_OnRemoveFX, Parameters) == 0x000008, "Member 'PySummoned_Cue_10145101_Loop_OnRemoveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_Cue_10145101_Loop.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct PySummoned_Cue_10145101_Loop_SetTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_Cue_10145101_Loop_SetTargetActor) == 0x000008, "Wrong alignment on PySummoned_Cue_10145101_Loop_SetTargetActor");
static_assert(sizeof(PySummoned_Cue_10145101_Loop_SetTargetActor) == 0x000008, "Wrong size on PySummoned_Cue_10145101_Loop_SetTargetActor");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_SetTargetActor, TargetActor) == 0x000000, "Member 'PySummoned_Cue_10145101_Loop_SetTargetActor::TargetActor' has a wrong offset!");

// PythonFunction PyAbility_101451.PySummoned_Cue_10145101_Loop.SetCableVisibility
// 0x0001 (0x0001 - 0x0000)
struct PySummoned_Cue_10145101_Loop_SetCableVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PySummoned_Cue_10145101_Loop_SetCableVisibility) == 0x000001, "Wrong alignment on PySummoned_Cue_10145101_Loop_SetCableVisibility");
static_assert(sizeof(PySummoned_Cue_10145101_Loop_SetCableVisibility) == 0x000001, "Wrong size on PySummoned_Cue_10145101_Loop_SetCableVisibility");
static_assert(offsetof(PySummoned_Cue_10145101_Loop_SetCableVisibility, Visible) == 0x000000, "Member 'PySummoned_Cue_10145101_Loop_SetCableVisibility::Visible' has a wrong offset!");

// PythonFunction PyAbility_101451.PyUIController_101451.SetAbility
// 0x0010 (0x0010 - 0x0000)
struct PyUIController_101451_SetAbility final
{
public:
	int32                                         InAbilityId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       InAbility;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyUIController_101451_SetAbility) == 0x000008, "Wrong alignment on PyUIController_101451_SetAbility");
static_assert(sizeof(PyUIController_101451_SetAbility) == 0x000010, "Wrong size on PyUIController_101451_SetAbility");
static_assert(offsetof(PyUIController_101451_SetAbility, InAbilityId) == 0x000000, "Member 'PyUIController_101451_SetAbility::InAbilityId' has a wrong offset!");
static_assert(offsetof(PyUIController_101451_SetAbility, InAbility) == 0x000008, "Member 'PyUIController_101451_SetAbility::InAbility' has a wrong offset!");

}

