#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelWidgets

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// Class MarvelWidgets.MarvelListView
// 0x0080 (0x0DD0 - 0x0D50)
class UMarvelListView final : public UListView
{
public:
	bool                                          bNeedCommonHoverTip;                               // 0x0D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D51[0x7];                                      // 0x0D51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TypeTags;                                          // 0x0D58(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC0[0x10];                                     // 0x0DC0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SimulateClickItemByIndex(int32 Index_0);

	class UUserWidget* GetEntryWidgetAt(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelListView">();
	}
	static class UMarvelListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelListView>();
	}
};
static_assert(alignof(UMarvelListView) == 0x000010, "Wrong alignment on UMarvelListView");
static_assert(sizeof(UMarvelListView) == 0x000DD0, "Wrong size on UMarvelListView");
static_assert(offsetof(UMarvelListView, bNeedCommonHoverTip) == 0x000D50, "Member 'UMarvelListView::bNeedCommonHoverTip' has a wrong offset!");
static_assert(offsetof(UMarvelListView, TypeTags) == 0x000D58, "Member 'UMarvelListView::TypeTags' has a wrong offset!");

// Class MarvelWidgets.MarvelScrollBox
// 0x0010 (0x0D80 - 0x0D70)
class UMarvelScrollBox final : public UScrollBox
{
public:
	bool                                          bNeedCommonHoverTip;                               // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0xF];                                      // 0x0D71(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelScrollBox">();
	}
	static class UMarvelScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelScrollBox>();
	}
};
static_assert(alignof(UMarvelScrollBox) == 0x000010, "Wrong alignment on UMarvelScrollBox");
static_assert(sizeof(UMarvelScrollBox) == 0x000D80, "Wrong size on UMarvelScrollBox");
static_assert(offsetof(UMarvelScrollBox, bNeedCommonHoverTip) == 0x000D70, "Member 'UMarvelScrollBox::bNeedCommonHoverTip' has a wrong offset!");

// Class MarvelWidgets.MarvelTileView
// 0x0070 (0x0DF0 - 0x0D80)
class UMarvelTileView final : public UTileView
{
public:
	bool                                          bNeedCommonHoverTip;                               // 0x0D78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D79[0x7];                                      // 0x0D79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TypeTags;                                          // 0x0D80(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE8[0x8];                                      // 0x0DE8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SimulateClickItemByIndex(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTileView">();
	}
	static class UMarvelTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTileView>();
	}
};
static_assert(alignof(UMarvelTileView) == 0x000010, "Wrong alignment on UMarvelTileView");
static_assert(sizeof(UMarvelTileView) == 0x000DF0, "Wrong size on UMarvelTileView");
static_assert(offsetof(UMarvelTileView, bNeedCommonHoverTip) == 0x000D78, "Member 'UMarvelTileView::bNeedCommonHoverTip' has a wrong offset!");
static_assert(offsetof(UMarvelTileView, TypeTags) == 0x000D80, "Member 'UMarvelTileView::TypeTags' has a wrong offset!");

// Class MarvelWidgets.MaskImage
// 0x0040 (0x04A0 - 0x0460)
class UMaskImage : public UCommonLazyImage
{
public:
	class UTexture2D*                             Texture_Main;                                      // 0x0458(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             Texture_Mask;                                      // 0x0460(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MaterialMaskTextureParamName;                      // 0x0468(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TextureScale;                                      // 0x0474(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              TextureUVOffset;                                   // 0x0478(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Downscale_Main;                                    // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Downscale_Mask;                                    // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseMask;                                           // 0x0498(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetDynamicMaterial();
	void SetMainTexture(class UTexture2D* InTexture_Main);
	void SetMaskTexture(class UTexture2D* InTexture_Mask);
	void SetMaskUsable(bool Usable);
	void SetScalarParameterValueOnMaterials(const class FName& ParameterName, const float ParameterValue);
	void SetTextureOffsetUV(const struct FVector2D& InOffsetUV);
	void SetTextureScale(const float InScale);
	void SetVectorParameterValueOnMaterials(const class FName& ParameterName, const struct FLinearColor& ParameterValue);
	void UpdateMaskParameters();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaskImage">();
	}
	static class UMaskImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaskImage>();
	}
};
static_assert(alignof(UMaskImage) == 0x000010, "Wrong alignment on UMaskImage");
static_assert(sizeof(UMaskImage) == 0x0004A0, "Wrong size on UMaskImage");
static_assert(offsetof(UMaskImage, Texture_Main) == 0x000458, "Member 'UMaskImage::Texture_Main' has a wrong offset!");
static_assert(offsetof(UMaskImage, Texture_Mask) == 0x000460, "Member 'UMaskImage::Texture_Mask' has a wrong offset!");
static_assert(offsetof(UMaskImage, MaterialMaskTextureParamName) == 0x000468, "Member 'UMaskImage::MaterialMaskTextureParamName' has a wrong offset!");
static_assert(offsetof(UMaskImage, TextureScale) == 0x000474, "Member 'UMaskImage::TextureScale' has a wrong offset!");
static_assert(offsetof(UMaskImage, TextureUVOffset) == 0x000478, "Member 'UMaskImage::TextureUVOffset' has a wrong offset!");
static_assert(offsetof(UMaskImage, Downscale_Main) == 0x000488, "Member 'UMaskImage::Downscale_Main' has a wrong offset!");
static_assert(offsetof(UMaskImage, Downscale_Mask) == 0x00048C, "Member 'UMaskImage::Downscale_Mask' has a wrong offset!");
static_assert(offsetof(UMaskImage, DefaultMaterial) == 0x000490, "Member 'UMaskImage::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(UMaskImage, UseMask) == 0x000498, "Member 'UMaskImage::UseMask' has a wrong offset!");

// Class MarvelWidgets.PaintContextUtils
// 0x0000 (0x0030 - 0x0030)
class UPaintContextUtils final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D GetAllotedLocation(const struct FPaintContext& InContext);
	static struct FVector2D GetAllotedSize(const struct FPaintContext& InContext);
	static struct FLinearColor GetColorAndOpacityTint(const struct FPaintContext& InContext);
	static struct FVector2f GetLocalLocation(const struct FPaintContext& InContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaintContextUtils">();
	}
	static class UPaintContextUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaintContextUtils>();
	}
};
static_assert(alignof(UPaintContextUtils) == 0x000008, "Wrong alignment on UPaintContextUtils");
static_assert(sizeof(UPaintContextUtils) == 0x000030, "Wrong size on UPaintContextUtils");

// Class MarvelWidgets.UIDebugSubsystem
// 0x0008 (0x0040 - 0x0038)
class UUIDebugSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUserWidget* GetSelectedUserWidget();
	static TArray<class UUserWidget*> GetSelectedUserWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIDebugSubsystem">();
	}
	static class UUIDebugSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIDebugSubsystem>();
	}
};
static_assert(alignof(UUIDebugSubsystem) == 0x000008, "Wrong alignment on UUIDebugSubsystem");
static_assert(sizeof(UUIDebugSubsystem) == 0x000040, "Wrong size on UUIDebugSubsystem");

}

