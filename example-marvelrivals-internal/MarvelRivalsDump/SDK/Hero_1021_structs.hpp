#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1021

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Hero_1021.EHawkeyeArrowType
// NumValues: 0x0003
enum class EHawkeyeArrowType : uint8
{
	Thump                                    = 0,
	Burst                                    = 1,
	EHawkeyeArrowType_MAX                    = 2,
};

// ScriptStruct Hero_1021.AfterImageSpec
// 0x0060 (0x0078 - 0x0018)
struct FAfterImageSpec final : public FFastArraySerializerItem
{
public:
	float                                         SpawnServerTime;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotator;                                      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CompIndex;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PelvisLocation;                                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAfterImageComponent*                   AfterImageComponent;                               // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAfterImageSpec) == 0x000008, "Wrong alignment on FAfterImageSpec");
static_assert(sizeof(FAfterImageSpec) == 0x000078, "Wrong size on FAfterImageSpec");
static_assert(offsetof(FAfterImageSpec, SpawnServerTime) == 0x000018, "Member 'FAfterImageSpec::SpawnServerTime' has a wrong offset!");
static_assert(offsetof(FAfterImageSpec, SpawnLocation) == 0x000020, "Member 'FAfterImageSpec::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FAfterImageSpec, SpawnRotator) == 0x000038, "Member 'FAfterImageSpec::SpawnRotator' has a wrong offset!");
static_assert(offsetof(FAfterImageSpec, CompIndex) == 0x000050, "Member 'FAfterImageSpec::CompIndex' has a wrong offset!");
static_assert(offsetof(FAfterImageSpec, PelvisLocation) == 0x000058, "Member 'FAfterImageSpec::PelvisLocation' has a wrong offset!");
static_assert(offsetof(FAfterImageSpec, AfterImageComponent) == 0x000070, "Member 'FAfterImageSpec::AfterImageComponent' has a wrong offset!");

// ScriptStruct Hero_1021.AfterImageSpecContainer
// 0x0018 (0x0128 - 0x0110)
struct FAfterImageSpecContainer final : public FFastArraySerializer
{
public:
	TArray<struct FAfterImageSpec>                Items;                                             // 0x0110(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASummoned_102181*                       Owner;                                             // 0x0120(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAfterImageSpecContainer) == 0x000008, "Wrong alignment on FAfterImageSpecContainer");
static_assert(sizeof(FAfterImageSpecContainer) == 0x000128, "Wrong size on FAfterImageSpecContainer");
static_assert(offsetof(FAfterImageSpecContainer, Items) == 0x000110, "Member 'FAfterImageSpecContainer::Items' has a wrong offset!");
static_assert(offsetof(FAfterImageSpecContainer, Owner) == 0x000120, "Member 'FAfterImageSpecContainer::Owner' has a wrong offset!");

// ScriptStruct Hero_1021.HawkeyeArrowData
// 0x0058 (0x0058 - 0x0000)
struct FHawkeyeArrowData final
{
public:
	bool                                          bIsTripleArrow;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeTime;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultData;                                       // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageCoefficient_102131;                          // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAdditive_102111;                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinalData;                                         // 0x0040(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHawkeyeArrowData) == 0x000008, "Wrong alignment on FHawkeyeArrowData");
static_assert(sizeof(FHawkeyeArrowData) == 0x000058, "Wrong size on FHawkeyeArrowData");
static_assert(offsetof(FHawkeyeArrowData, bIsTripleArrow) == 0x000000, "Member 'FHawkeyeArrowData::bIsTripleArrow' has a wrong offset!");
static_assert(offsetof(FHawkeyeArrowData, ChargeTime) == 0x000004, "Member 'FHawkeyeArrowData::ChargeTime' has a wrong offset!");
static_assert(offsetof(FHawkeyeArrowData, DefaultData) == 0x000008, "Member 'FHawkeyeArrowData::DefaultData' has a wrong offset!");
static_assert(offsetof(FHawkeyeArrowData, DamageCoefficient_102131) == 0x000020, "Member 'FHawkeyeArrowData::DamageCoefficient_102131' has a wrong offset!");
static_assert(offsetof(FHawkeyeArrowData, DamageAdditive_102111) == 0x000038, "Member 'FHawkeyeArrowData::DamageAdditive_102111' has a wrong offset!");
static_assert(offsetof(FHawkeyeArrowData, FinalData) == 0x000040, "Member 'FHawkeyeArrowData::FinalData' has a wrong offset!");

// ScriptStruct Hero_1021.SpecialMeshSetting
// 0x0010 (0x0010 - 0x0000)
struct FSpecialMeshSetting final
{
public:
	TArray<class FName>                           HiddenBones;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialMeshSetting) == 0x000008, "Wrong alignment on FSpecialMeshSetting");
static_assert(sizeof(FSpecialMeshSetting) == 0x000010, "Wrong size on FSpecialMeshSetting");
static_assert(offsetof(FSpecialMeshSetting, HiddenBones) == 0x000000, "Member 'FSpecialMeshSetting::HiddenBones' has a wrong offset!");

// ScriptStruct Hero_1021.PoseMeshItem
// 0x0010 (0x0010 - 0x0000)
struct FPoseMeshItem final
{
public:
	class UPoseableMeshComponent*                 PoseMesh;                                          // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUse;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseMeshItem) == 0x000008, "Wrong alignment on FPoseMeshItem");
static_assert(sizeof(FPoseMeshItem) == 0x000010, "Wrong size on FPoseMeshItem");
static_assert(offsetof(FPoseMeshItem, PoseMesh) == 0x000000, "Member 'FPoseMeshItem::PoseMesh' has a wrong offset!");
static_assert(offsetof(FPoseMeshItem, bInUse) == 0x000008, "Member 'FPoseMeshItem::bInUse' has a wrong offset!");
static_assert(offsetof(FPoseMeshItem, Duration) == 0x00000C, "Member 'FPoseMeshItem::Duration' has a wrong offset!");

}

