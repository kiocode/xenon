#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyControl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// DelegateFunction PyControl.PyControl.DispatchOccupyProgressChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyControl_DispatchOccupyProgressChanged__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EBattleSide                                   battle_side;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_DispatchOccupyProgressChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_DispatchOccupyProgressChanged__DelegateSignature");
static_assert(sizeof(PyControl_DispatchOccupyProgressChanged__DelegateSignature) == 0x000010, "Wrong size on PyControl_DispatchOccupyProgressChanged__DelegateSignature");
static_assert(offsetof(PyControl_DispatchOccupyProgressChanged__DelegateSignature, Control_base) == 0x000000, "Member 'PyControl_DispatchOccupyProgressChanged__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyControl_DispatchOccupyProgressChanged__DelegateSignature, battle_side) == 0x000008, "Member 'PyControl_DispatchOccupyProgressChanged__DelegateSignature::battle_side' has a wrong offset!");

// DelegateFunction PyControl.PyControl.DispatchControlOwnerChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyControl_DispatchControlOwnerChanged__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                Owner_side;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_DispatchControlOwnerChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_DispatchControlOwnerChanged__DelegateSignature");
static_assert(sizeof(PyControl_DispatchControlOwnerChanged__DelegateSignature) == 0x000010, "Wrong size on PyControl_DispatchControlOwnerChanged__DelegateSignature");
static_assert(offsetof(PyControl_DispatchControlOwnerChanged__DelegateSignature, Control_base) == 0x000000, "Member 'PyControl_DispatchControlOwnerChanged__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyControl_DispatchControlOwnerChanged__DelegateSignature, Owner_side) == 0x000008, "Member 'PyControl_DispatchControlOwnerChanged__DelegateSignature::Owner_side' has a wrong offset!");

// DelegateFunction PyControl.PyControl.VOccupySideDispatcher__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyControl_VOccupySideDispatcher__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                Occupy_side;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_VOccupySideDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_VOccupySideDispatcher__DelegateSignature");
static_assert(sizeof(PyControl_VOccupySideDispatcher__DelegateSignature) == 0x000010, "Wrong size on PyControl_VOccupySideDispatcher__DelegateSignature");
static_assert(offsetof(PyControl_VOccupySideDispatcher__DelegateSignature, Control_base) == 0x000000, "Member 'PyControl_VOccupySideDispatcher__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyControl_VOccupySideDispatcher__DelegateSignature, Occupy_side) == 0x000008, "Member 'PyControl_VOccupySideDispatcher__DelegateSignature::Occupy_side' has a wrong offset!");

// DelegateFunction PyControl.PyControl.DispatchVictoryProgressChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyControl_DispatchVictoryProgressChanged__DelegateSignature final
{
public:
	class AActor*                                 Control;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EBattleSide                                   battle_side;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_DispatchVictoryProgressChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_DispatchVictoryProgressChanged__DelegateSignature");
static_assert(sizeof(PyControl_DispatchVictoryProgressChanged__DelegateSignature) == 0x000010, "Wrong size on PyControl_DispatchVictoryProgressChanged__DelegateSignature");
static_assert(offsetof(PyControl_DispatchVictoryProgressChanged__DelegateSignature, Control) == 0x000000, "Member 'PyControl_DispatchVictoryProgressChanged__DelegateSignature::Control' has a wrong offset!");
static_assert(offsetof(PyControl_DispatchVictoryProgressChanged__DelegateSignature, battle_side) == 0x000008, "Member 'PyControl_DispatchVictoryProgressChanged__DelegateSignature::battle_side' has a wrong offset!");

// DelegateFunction PyControl.PyControl.DispatchChangeControlLocation__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct PyControl_DispatchChangeControlLocation__DelegateSignature final
{
public:
	struct FVector                                New_location;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_DispatchChangeControlLocation__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_DispatchChangeControlLocation__DelegateSignature");
static_assert(sizeof(PyControl_DispatchChangeControlLocation__DelegateSignature) == 0x000018, "Wrong size on PyControl_DispatchChangeControlLocation__DelegateSignature");
static_assert(offsetof(PyControl_DispatchChangeControlLocation__DelegateSignature, New_location) == 0x000000, "Member 'PyControl_DispatchChangeControlLocation__DelegateSignature::New_location' has a wrong offset!");

// DelegateFunction PyControl.PyControl.DispatcherProgressInfoChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyControl_DispatcherProgressInfoChange__DelegateSignature final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_DispatcherProgressInfoChange__DelegateSignature) == 0x000004, "Wrong alignment on PyControl_DispatcherProgressInfoChange__DelegateSignature");
static_assert(sizeof(PyControl_DispatcherProgressInfoChange__DelegateSignature) == 0x000008, "Wrong size on PyControl_DispatcherProgressInfoChange__DelegateSignature");
static_assert(offsetof(PyControl_DispatcherProgressInfoChange__DelegateSignature, Progress) == 0x000000, "Member 'PyControl_DispatcherProgressInfoChange__DelegateSignature::Progress' has a wrong offset!");
static_assert(offsetof(PyControl_DispatcherProgressInfoChange__DelegateSignature, Speed) == 0x000004, "Member 'PyControl_DispatcherProgressInfoChange__DelegateSignature::Speed' has a wrong offset!");

// PythonFunction PyControl.PyControl.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct PyControl_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_ReceiveEndPlay) == 0x000001, "Wrong alignment on PyControl_ReceiveEndPlay");
static_assert(sizeof(PyControl_ReceiveEndPlay) == 0x000001, "Wrong size on PyControl_ReceiveEndPlay");
static_assert(offsetof(PyControl_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'PyControl_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// PythonFunction PyControl.PyControl.S_on_player_exit_camp
// 0x0008 (0x0008 - 0x0000)
struct PyControl_S_on_player_exit_camp final
{
public:
	class AActor*                                 Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_S_on_player_exit_camp) == 0x000008, "Wrong alignment on PyControl_S_on_player_exit_camp");
static_assert(sizeof(PyControl_S_on_player_exit_camp) == 0x000008, "Wrong size on PyControl_S_on_player_exit_camp");
static_assert(offsetof(PyControl_S_on_player_exit_camp, Char) == 0x000000, "Member 'PyControl_S_on_player_exit_camp::Char' has a wrong offset!");

// PythonFunction PyControl.PyControl.BSetOccupySpeed
// 0x0004 (0x0004 - 0x0000)
struct PyControl_BSetOccupySpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_BSetOccupySpeed) == 0x000004, "Wrong alignment on PyControl_BSetOccupySpeed");
static_assert(sizeof(PyControl_BSetOccupySpeed) == 0x000004, "Wrong size on PyControl_BSetOccupySpeed");
static_assert(offsetof(PyControl_BSetOccupySpeed, Speed) == 0x000000, "Member 'PyControl_BSetOccupySpeed::Speed' has a wrong offset!");

// PythonFunction PyControl.PyControl.BroadCastOccupied
// 0x0002 (0x0002 - 0x0000)
struct PyControl_BroadCastOccupied final
{
public:
	EBattleSide                                   BattleSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFirstChange;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_BroadCastOccupied) == 0x000001, "Wrong alignment on PyControl_BroadCastOccupied");
static_assert(sizeof(PyControl_BroadCastOccupied) == 0x000002, "Wrong size on PyControl_BroadCastOccupied");
static_assert(offsetof(PyControl_BroadCastOccupied, BattleSide) == 0x000000, "Member 'PyControl_BroadCastOccupied::BattleSide' has a wrong offset!");
static_assert(offsetof(PyControl_BroadCastOccupied, IsFirstChange) == 0x000001, "Member 'PyControl_BroadCastOccupied::IsFirstChange' has a wrong offset!");

// DelegateFunction PyControl.PyControl.OnBothSideIn__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyControl_OnBothSideIn__DelegateSignature final
{
public:
	class AActor*                                 Control;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_OnBothSideIn__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_OnBothSideIn__DelegateSignature");
static_assert(sizeof(PyControl_OnBothSideIn__DelegateSignature) == 0x000008, "Wrong size on PyControl_OnBothSideIn__DelegateSignature");
static_assert(offsetof(PyControl_OnBothSideIn__DelegateSignature, Control) == 0x000000, "Member 'PyControl_OnBothSideIn__DelegateSignature::Control' has a wrong offset!");

// DelegateFunction PyControl.PyControl.OnBothSideOut__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyControl_OnBothSideOut__DelegateSignature final
{
public:
	class AActor*                                 Control;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_OnBothSideOut__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_OnBothSideOut__DelegateSignature");
static_assert(sizeof(PyControl_OnBothSideOut__DelegateSignature) == 0x000008, "Wrong size on PyControl_OnBothSideOut__DelegateSignature");
static_assert(offsetof(PyControl_OnBothSideOut__DelegateSignature, Control) == 0x000000, "Member 'PyControl_OnBothSideOut__DelegateSignature::Control' has a wrong offset!");

// DelegateFunction PyControl.PyControl.OnlyRedIn__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyControl_OnlyRedIn__DelegateSignature final
{
public:
	class AActor*                                 Control;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_OnlyRedIn__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_OnlyRedIn__DelegateSignature");
static_assert(sizeof(PyControl_OnlyRedIn__DelegateSignature) == 0x000008, "Wrong size on PyControl_OnlyRedIn__DelegateSignature");
static_assert(offsetof(PyControl_OnlyRedIn__DelegateSignature, Control) == 0x000000, "Member 'PyControl_OnlyRedIn__DelegateSignature::Control' has a wrong offset!");

// DelegateFunction PyControl.PyControl.OnlyBlueIn__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyControl_OnlyBlueIn__DelegateSignature final
{
public:
	class AActor*                                 Control;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_OnlyBlueIn__DelegateSignature) == 0x000008, "Wrong alignment on PyControl_OnlyBlueIn__DelegateSignature");
static_assert(sizeof(PyControl_OnlyBlueIn__DelegateSignature) == 0x000008, "Wrong size on PyControl_OnlyBlueIn__DelegateSignature");
static_assert(offsetof(PyControl_OnlyBlueIn__DelegateSignature, Control) == 0x000000, "Member 'PyControl_OnlyBlueIn__DelegateSignature::Control' has a wrong offset!");

// PythonFunction PyControl.PyControl.GetOccupyProgress
// 0x0004 (0x0004 - 0x0000)
struct PyControl_GetOccupyProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_GetOccupyProgress) == 0x000004, "Wrong alignment on PyControl_GetOccupyProgress");
static_assert(sizeof(PyControl_GetOccupyProgress) == 0x000004, "Wrong size on PyControl_GetOccupyProgress");
static_assert(offsetof(PyControl_GetOccupyProgress, ReturnValue) == 0x000000, "Member 'PyControl_GetOccupyProgress::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyControl.GetOwnerSide
// 0x0001 (0x0001 - 0x0000)
struct PyControl_GetOwnerSide final
{
public:
	EOwnershipType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_GetOwnerSide) == 0x000001, "Wrong alignment on PyControl_GetOwnerSide");
static_assert(sizeof(PyControl_GetOwnerSide) == 0x000001, "Wrong size on PyControl_GetOwnerSide");
static_assert(offsetof(PyControl_GetOwnerSide, ReturnValue) == 0x000000, "Member 'PyControl_GetOwnerSide::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyControl.GetVictoryProgress
// 0x0004 (0x0004 - 0x0000)
struct PyControl_GetVictoryProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyControl_GetVictoryProgress) == 0x000004, "Wrong alignment on PyControl_GetVictoryProgress");
static_assert(sizeof(PyControl_GetVictoryProgress) == 0x000004, "Wrong size on PyControl_GetVictoryProgress");
static_assert(offsetof(PyControl_GetVictoryProgress, ReturnValue) == 0x000000, "Member 'PyControl_GetVictoryProgress::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_Base.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Level_Base_WhileActive final
{
public:
	class AActor*                                 ControlActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_Base_WhileActive) == 0x000008, "Wrong alignment on PyCue_Level_Base_WhileActive");
static_assert(sizeof(PyCue_Level_Base_WhileActive) == 0x0001C8, "Wrong size on PyCue_Level_Base_WhileActive");
static_assert(offsetof(PyCue_Level_Base_WhileActive, ControlActor) == 0x000000, "Member 'PyCue_Level_Base_WhileActive::ControlActor' has a wrong offset!");
static_assert(offsetof(PyCue_Level_Base_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Level_Base_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Level_Base_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Level_Base_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_Base.OnRemoveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Level_Base_OnRemoveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Level_Base_OnRemoveFX) == 0x000008, "Wrong alignment on PyCue_Level_Base_OnRemoveFX");
static_assert(sizeof(PyCue_Level_Base_OnRemoveFX) == 0x0001C0, "Wrong size on PyCue_Level_Base_OnRemoveFX");
static_assert(offsetof(PyCue_Level_Base_OnRemoveFX, MyTarget) == 0x000000, "Member 'PyCue_Level_Base_OnRemoveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Level_Base_OnRemoveFX, Parameters) == 0x000008, "Member 'PyCue_Level_Base_OnRemoveFX::Parameters' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_Base.OnControlOwnerChanged
// 0x0010 (0x0010 - 0x0000)
struct PyCue_Level_Base_OnControlOwnerChanged final
{
public:
	class AActor*                                 ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                OwnerSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_Base_OnControlOwnerChanged) == 0x000008, "Wrong alignment on PyCue_Level_Base_OnControlOwnerChanged");
static_assert(sizeof(PyCue_Level_Base_OnControlOwnerChanged) == 0x000010, "Wrong size on PyCue_Level_Base_OnControlOwnerChanged");
static_assert(offsetof(PyCue_Level_Base_OnControlOwnerChanged, ControlPoint) == 0x000000, "Member 'PyCue_Level_Base_OnControlOwnerChanged::ControlPoint' has a wrong offset!");
static_assert(offsetof(PyCue_Level_Base_OnControlOwnerChanged, OwnerSide) == 0x000008, "Member 'PyCue_Level_Base_OnControlOwnerChanged::OwnerSide' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_100001.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Level_100001_WhileActive final
{
public:
	class AActor*                                 ControlActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100001_WhileActive) == 0x000008, "Wrong alignment on PyCue_Level_100001_WhileActive");
static_assert(sizeof(PyCue_Level_100001_WhileActive) == 0x0001C8, "Wrong size on PyCue_Level_100001_WhileActive");
static_assert(offsetof(PyCue_Level_100001_WhileActive, ControlActor) == 0x000000, "Member 'PyCue_Level_100001_WhileActive::ControlActor' has a wrong offset!");
static_assert(offsetof(PyCue_Level_100001_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Level_100001_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Level_100001_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Level_100001_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_100001.OnControlOwnerChanged
// 0x0010 (0x0010 - 0x0000)
struct PyCue_Level_100001_OnControlOwnerChanged final
{
public:
	class AActor*                                 ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                OwnerSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100001_OnControlOwnerChanged) == 0x000008, "Wrong alignment on PyCue_Level_100001_OnControlOwnerChanged");
static_assert(sizeof(PyCue_Level_100001_OnControlOwnerChanged) == 0x000010, "Wrong size on PyCue_Level_100001_OnControlOwnerChanged");
static_assert(offsetof(PyCue_Level_100001_OnControlOwnerChanged, ControlPoint) == 0x000000, "Member 'PyCue_Level_100001_OnControlOwnerChanged::ControlPoint' has a wrong offset!");
static_assert(offsetof(PyCue_Level_100001_OnControlOwnerChanged, OwnerSide) == 0x000008, "Member 'PyCue_Level_100001_OnControlOwnerChanged::OwnerSide' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_ControlPointV2.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PyCue_Level_ControlPointV2_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_ControlPointV2_ReceiveTick) == 0x000004, "Wrong alignment on PyCue_Level_ControlPointV2_ReceiveTick");
static_assert(sizeof(PyCue_Level_ControlPointV2_ReceiveTick) == 0x000004, "Wrong size on PyCue_Level_ControlPointV2_ReceiveTick");
static_assert(offsetof(PyCue_Level_ControlPointV2_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PyCue_Level_ControlPointV2_ReceiveTick::DeltaSeconds' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_ControlPointV2.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Level_ControlPointV2_WhileActive final
{
public:
	class AActor*                                 ControlActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_ControlPointV2_WhileActive) == 0x000008, "Wrong alignment on PyCue_Level_ControlPointV2_WhileActive");
static_assert(sizeof(PyCue_Level_ControlPointV2_WhileActive) == 0x0001C8, "Wrong size on PyCue_Level_ControlPointV2_WhileActive");
static_assert(offsetof(PyCue_Level_ControlPointV2_WhileActive, ControlActor) == 0x000000, "Member 'PyCue_Level_ControlPointV2_WhileActive::ControlActor' has a wrong offset!");
static_assert(offsetof(PyCue_Level_ControlPointV2_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Level_ControlPointV2_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Level_ControlPointV2_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Level_ControlPointV2_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyControl.PyCue_Level_ControlPointV2.OnControlOwnerChanged
// 0x0010 (0x0010 - 0x0000)
struct PyCue_Level_ControlPointV2_OnControlOwnerChanged final
{
public:
	class AActor*                                 ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                OwnerSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_ControlPointV2_OnControlOwnerChanged) == 0x000008, "Wrong alignment on PyCue_Level_ControlPointV2_OnControlOwnerChanged");
static_assert(sizeof(PyCue_Level_ControlPointV2_OnControlOwnerChanged) == 0x000010, "Wrong size on PyCue_Level_ControlPointV2_OnControlOwnerChanged");
static_assert(offsetof(PyCue_Level_ControlPointV2_OnControlOwnerChanged, ControlPoint) == 0x000000, "Member 'PyCue_Level_ControlPointV2_OnControlOwnerChanged::ControlPoint' has a wrong offset!");
static_assert(offsetof(PyCue_Level_ControlPointV2_OnControlOwnerChanged, OwnerSide) == 0x000008, "Member 'PyCue_Level_ControlPointV2_OnControlOwnerChanged::OwnerSide' has a wrong offset!");

}

