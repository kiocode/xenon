#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JarvisReplay

#include "Basic.hpp"


namespace SDK::Params
{

// Function JarvisReplay.JarvisReplaySubsystem.LocalRecordJarvisReplay
// 0x0020 (0x0020 - 0x0000)
struct JarvisReplaySubsystem_LocalRecordJarvisReplay final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendlyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JarvisReplaySubsystem_LocalRecordJarvisReplay) == 0x000008, "Wrong alignment on JarvisReplaySubsystem_LocalRecordJarvisReplay");
static_assert(sizeof(JarvisReplaySubsystem_LocalRecordJarvisReplay) == 0x000020, "Wrong size on JarvisReplaySubsystem_LocalRecordJarvisReplay");
static_assert(offsetof(JarvisReplaySubsystem_LocalRecordJarvisReplay, Name_0) == 0x000000, "Member 'JarvisReplaySubsystem_LocalRecordJarvisReplay::Name_0' has a wrong offset!");
static_assert(offsetof(JarvisReplaySubsystem_LocalRecordJarvisReplay, FriendlyName) == 0x000010, "Member 'JarvisReplaySubsystem_LocalRecordJarvisReplay::FriendlyName' has a wrong offset!");

// Function JarvisReplay.JarvisReplaySubsystem.PlayJarvisReplay
// 0x0018 (0x0018 - 0x0000)
struct JarvisReplaySubsystem_PlayJarvisReplay final
{
public:
	class FString                                 DemoURL;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNetFile;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JarvisReplaySubsystem_PlayJarvisReplay) == 0x000008, "Wrong alignment on JarvisReplaySubsystem_PlayJarvisReplay");
static_assert(sizeof(JarvisReplaySubsystem_PlayJarvisReplay) == 0x000018, "Wrong size on JarvisReplaySubsystem_PlayJarvisReplay");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplay, DemoURL) == 0x000000, "Member 'JarvisReplaySubsystem_PlayJarvisReplay::DemoURL' has a wrong offset!");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplay, bIsNetFile) == 0x000010, "Member 'JarvisReplaySubsystem_PlayJarvisReplay::bIsNetFile' has a wrong offset!");

// Function JarvisReplay.JarvisReplaySubsystem.PlayJarvisReplaySequence
// 0x0020 (0x0020 - 0x0000)
struct JarvisReplaySubsystem_PlayJarvisReplaySequence final
{
public:
	TArray<class FString>                         ReplayIDSequence;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InLoopTimes;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InReplayInterval;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInQuitAppOnEnd;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JarvisReplaySubsystem_PlayJarvisReplaySequence) == 0x000008, "Wrong alignment on JarvisReplaySubsystem_PlayJarvisReplaySequence");
static_assert(sizeof(JarvisReplaySubsystem_PlayJarvisReplaySequence) == 0x000020, "Wrong size on JarvisReplaySubsystem_PlayJarvisReplaySequence");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplaySequence, ReplayIDSequence) == 0x000000, "Member 'JarvisReplaySubsystem_PlayJarvisReplaySequence::ReplayIDSequence' has a wrong offset!");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplaySequence, InLoopTimes) == 0x000010, "Member 'JarvisReplaySubsystem_PlayJarvisReplaySequence::InLoopTimes' has a wrong offset!");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplaySequence, InReplayInterval) == 0x000014, "Member 'JarvisReplaySubsystem_PlayJarvisReplaySequence::InReplayInterval' has a wrong offset!");
static_assert(offsetof(JarvisReplaySubsystem_PlayJarvisReplaySequence, bInQuitAppOnEnd) == 0x000018, "Member 'JarvisReplaySubsystem_PlayJarvisReplaySequence::bInQuitAppOnEnd' has a wrong offset!");

// Function JarvisReplay.JarvisReplaySubsystem.GetRecordingDemoCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct JarvisReplaySubsystem_GetRecordingDemoCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JarvisReplaySubsystem_GetRecordingDemoCurrentTime) == 0x000004, "Wrong alignment on JarvisReplaySubsystem_GetRecordingDemoCurrentTime");
static_assert(sizeof(JarvisReplaySubsystem_GetRecordingDemoCurrentTime) == 0x000004, "Wrong size on JarvisReplaySubsystem_GetRecordingDemoCurrentTime");
static_assert(offsetof(JarvisReplaySubsystem_GetRecordingDemoCurrentTime, ReturnValue) == 0x000000, "Member 'JarvisReplaySubsystem_GetRecordingDemoCurrentTime::ReturnValue' has a wrong offset!");

// Function JarvisReplay.JarvisReplaySubsystem.GetRecordingReplayID
// 0x0010 (0x0010 - 0x0000)
struct JarvisReplaySubsystem_GetRecordingReplayID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JarvisReplaySubsystem_GetRecordingReplayID) == 0x000008, "Wrong alignment on JarvisReplaySubsystem_GetRecordingReplayID");
static_assert(sizeof(JarvisReplaySubsystem_GetRecordingReplayID) == 0x000010, "Wrong size on JarvisReplaySubsystem_GetRecordingReplayID");
static_assert(offsetof(JarvisReplaySubsystem_GetRecordingReplayID, ReturnValue) == 0x000000, "Member 'JarvisReplaySubsystem_GetRecordingReplayID::ReturnValue' has a wrong offset!");

// Function JarvisReplay.JarvisReplaySubsystem.IsJarvisRecording
// 0x0001 (0x0001 - 0x0000)
struct JarvisReplaySubsystem_IsJarvisRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JarvisReplaySubsystem_IsJarvisRecording) == 0x000001, "Wrong alignment on JarvisReplaySubsystem_IsJarvisRecording");
static_assert(sizeof(JarvisReplaySubsystem_IsJarvisRecording) == 0x000001, "Wrong size on JarvisReplaySubsystem_IsJarvisRecording");
static_assert(offsetof(JarvisReplaySubsystem_IsJarvisRecording, ReturnValue) == 0x000000, "Member 'JarvisReplaySubsystem_IsJarvisRecording::ReturnValue' has a wrong offset!");

}

