#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_PyTryExitInvalidLocation

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "PyBTNodeBase_classes.hpp"
#include "BTT_PyMoveToBase_classes.hpp"


namespace SDK
{

// PythonClass BTT_PyTryExitInvalidLocation.BTD_PyCheckShouldTryExit
// 0x0068 (0x0120 - 0x00B8)
class UBTD_PyCheckShouldTryExit final : public UBTDecorator_PyBase
{
public:
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00B8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x00E8(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         IgnoreDistance;                                    // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTD_PyCheckShouldTryExit">();
	}
	static class UBTD_PyCheckShouldTryExit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_PyCheckShouldTryExit>();
	}
};
//static_assert(alignof(UBTD_PyCheckShouldTryExit) == 0x000008, "Wrong alignment on UBTD_PyCheckShouldTryExit");
//static_assert(sizeof(UBTD_PyCheckShouldTryExit) == 0x000120, "Wrong size on UBTD_PyCheckShouldTryExit");
//static_assert(offsetof(UBTD_PyCheckShouldTryExit, EnemyTarget) == 0x0000B8, "Member 'UBTD_PyCheckShouldTryExit::EnemyTarget' has a wrong offset!");
//static_assert(offsetof(UBTD_PyCheckShouldTryExit, TeammateTarget) == 0x0000E8, "Member 'UBTD_PyCheckShouldTryExit::TeammateTarget' has a wrong offset!");
//static_assert(offsetof(UBTD_PyCheckShouldTryExit, IgnoreDistance) == 0x000118, "Member 'UBTD_PyCheckShouldTryExit::IgnoreDistance' has a wrong offset!");

// PythonClass BTT_PyTryExitInvalidLocation.BTT_PyTryExitInvalidLocation
// 0x0068 (0x0128 - 0x00C0)
class UBTT_PyTryExitInvalidLocation : public UBTTask_PyBase
{
public:
	float                                         MaxExitTime;                                       // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00C8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x00F8(0x0030)(Edit, NativeAccessSpecifierPublic)

public:
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTT_PyTryExitInvalidLocation">();
	}
	static class UBTT_PyTryExitInvalidLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_PyTryExitInvalidLocation>();
	}
};
//static_assert(alignof(UBTT_PyTryExitInvalidLocation) == 0x000008, "Wrong alignment on UBTT_PyTryExitInvalidLocation");
//static_assert(sizeof(UBTT_PyTryExitInvalidLocation) == 0x000128, "Wrong size on UBTT_PyTryExitInvalidLocation");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocation, MaxExitTime) == 0x0000C0, "Member 'UBTT_PyTryExitInvalidLocation::MaxExitTime' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocation, EnemyTarget) == 0x0000C8, "Member 'UBTT_PyTryExitInvalidLocation::EnemyTarget' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocation, TeammateTarget) == 0x0000F8, "Member 'UBTT_PyTryExitInvalidLocation::TeammateTarget' has a wrong offset!");

// PythonClass BTT_PyTryExitInvalidLocation.BTT_PyTryExitInvalidLocationMove
// 0x0078 (0x0148 - 0x00D0)
class UBTT_PyTryExitInvalidLocationMove : public UBTT_PyMoveToBase
{
public:
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00D0(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x0100(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         ForwardDis;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDis;                                             // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownDis;                                           // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckRadius;                                       // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveForwardDis;                                    // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeAngle;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveOnTaskFinished(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult Result);
	struct FVector GetMoveTargetLocation(class AAIController* OwnerController, class APawn* ControlledPawn);
	void OnMoveCompleted(const struct FAIRequestID& RequestID, EPathFollowingResult Result);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTT_PyTryExitInvalidLocationMove">();
	}
	static class UBTT_PyTryExitInvalidLocationMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_PyTryExitInvalidLocationMove>();
	}
};
//static_assert(alignof(UBTT_PyTryExitInvalidLocationMove) == 0x000008, "Wrong alignment on UBTT_PyTryExitInvalidLocationMove");
//static_assert(sizeof(UBTT_PyTryExitInvalidLocationMove) == 0x000148, "Wrong size on UBTT_PyTryExitInvalidLocationMove");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, EnemyTarget) == 0x0000D0, "Member 'UBTT_PyTryExitInvalidLocationMove::EnemyTarget' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, TeammateTarget) == 0x000100, "Member 'UBTT_PyTryExitInvalidLocationMove::TeammateTarget' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, ForwardDis) == 0x000130, "Member 'UBTT_PyTryExitInvalidLocationMove::ForwardDis' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, UpDis) == 0x000134, "Member 'UBTT_PyTryExitInvalidLocationMove::UpDis' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, DownDis) == 0x000138, "Member 'UBTT_PyTryExitInvalidLocationMove::DownDis' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, CheckRadius) == 0x00013C, "Member 'UBTT_PyTryExitInvalidLocationMove::CheckRadius' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, MoveForwardDis) == 0x000140, "Member 'UBTT_PyTryExitInvalidLocationMove::MoveForwardDis' has a wrong offset!");
//static_assert(offsetof(UBTT_PyTryExitInvalidLocationMove, MoveChangeAngle) == 0x000144, "Member 'UBTT_PyTryExitInvalidLocationMove::MoveChangeAngle' has a wrong offset!");

}

