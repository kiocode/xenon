#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMarvelPlayerController

#include "Basic.hpp"

#include "Python_enums_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "InputRecord_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyMarvelPlayerController.PyMarvelPlayerController
// 0x0038 (0x11A0 - 0x1168)
class APyMarvelPlayerController : public AMarvelPlayerController
{
public:
	class APyMarvelAIController*                  ClientAIController;                                // 0x1168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   AbilityActionMappingContextBP;                     // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   OneSubmitActionMappingContextBP;                   // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClientReceiveJson;                               // 0x1180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLevelNPCVoice;                                   // 0x1190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();
	void OnCrashKeyPressed(const struct FKey& Key);
	void OnCrashKeyReleased(const struct FKey& Key);
	void OnTriggerCrashKeyPressed(const struct FKey& Key);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void C_ChangeHeroInHeroTest();
	void C_ReportClientInactiveExit();
	void C_NotifyServerMapLoadFinish();
	void C_NotifySelectingResourceLoaded();
	void C_NotifyServerTryEnterSelect();
	void C_ChangeHero(int32 HeroID, int32 SkinID);
	void C_ChangeHeroIgnoreLimit(int32 HeroID);
	void C_ChangeAudioAi(int32 HeroID);
	void C_ThrowIC();
	void C_BuyShopItem(int32 ItemId);
	void C_SellShopItem(int32 ItemId);
	void C_UndoShop();
	void C_ChangeDelegateCmd(int32 Cmd);
	void C_VoteSelection(int32 Idx);
	void ReqServerBuildSettings(const class FString& Client_changelist);
	void RespServerBuildSettings(const class FString& Changelist, const class FString& BuildDate, const class FString& BranchName);
	void ClientFrameTick();
	void C_ReportFrameRate(int32 FrameCount);
	void OnClientReceiveJson__DelegateSignature(const class FString& Key, const class FString& Json_str);
	void OnLevelNPCVoice__DelegateSignature(class AActor* Npc_actor);
	void ClientReceiveJson(const class FString& Key, const class FString& Json_str);
	void S2CFrameRateResponse(int32 FrameCount);
	void OnCheckTag(const TArray<int32>& ServerTagNum, const TArray<int32>& ClientTagNum);
	void ServerDebugInput(const class FString& Cmd);
	void ClientReplyDebugInput(const class FString& Msg);
	void ServerSetDebugIndex(int32 Index_0);
	void S2CPopSelectHeroPanel();
	void ResetDelayRespawnSelf();
	void RequestTrainComputerTrain(int32 Train_no, int32 UID);
	void RequestTrainComputerAssist(int32 Train_no, int32 UID);
	void RequestTrainComputerSpawnTrainHero(int32 Train_no, int32 UID, int32 Hero_id);
	void RequestTrainComputerSpawnCooperateHero(int32 Train_no, int32 UID, int32 Hero_id, const TArray<int32>& Limit_hero_list, bool Clear, bool Reset);
	void Teleport_post_process(class ATrainComputer* Train_computer);
	void Teleport_post_process_delay_finished(class ATrainComputer* Train_computer);
	void Close_enable_cameralag();
	void Recover_enable_cameralag();
	void Activate_interactable_actor(class AActor* Actor, bool Active);
	void On_destruction_post_process(class AActor* Level_check_point);
	void ServerInteractingWithNPC(class AActor* Npc_actor);
	void ServerInteractingWithNPCTags(const TArray<class FString>& Tags_0);
	void ServerHearingLevelVoice(EMarvelVoiceType Voice_type, class AActor* Char, int32 Voice_id, const class FText& Voice_line, class AActor* To_char);
	void On_voice_end(class AActor* Level_check_point, int32 Voice_id);
	void On_controller_rotation_over(class AActor* Level_check_point);
	void Spawn_input_record_ai(const struct FAISpawnParam& Ai_spawn_param, const class FString& Record_name, EInputRecordPath Record_path, bool Discard_location_correction, bool Loop_play);
	void Stop_input_record_ai();
	void Active_common_action_tip_cache_actor(class AActor* Actor);
	void Show_portal_cooldown(class AActor* Portal, int32 Cooldown);
	void ServerWizardChangeTeamLeaderID(int32 UID);
	void ServerPlayerLaunchSurrenderVoted();
	void ServerPlayerSurrenderVoted(bool bAgree);
	void ClientPlayerSurrenderFailed(ESurrenderFailedReason SurrenderFailedReason);
	class FString GetStatsSavePath(int32 DataLength, bool bHistory);
	void ClientPlayerSurrenderSuccess();
	void ClientShowTutorialTips(int32 TipsID);

	void SendMessageToChatPanel(const class FString& Name_0, const class FString& Message, int32 MessageSide, int32 Timestamp, int32 ChannelType, int32 SpecialType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyMarvelPlayerController">();
	}
	static class APyMarvelPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyMarvelPlayerController>();
	}
};
static_assert(alignof(APyMarvelPlayerController) == 0x000008, "Wrong alignment on APyMarvelPlayerController");
static_assert(sizeof(APyMarvelPlayerController) == 0x0011A0, "Wrong size on APyMarvelPlayerController");
static_assert(offsetof(APyMarvelPlayerController, ClientAIController) == 0x001168, "Member 'APyMarvelPlayerController::ClientAIController' has a wrong offset!");
static_assert(offsetof(APyMarvelPlayerController, AbilityActionMappingContextBP) == 0x001170, "Member 'APyMarvelPlayerController::AbilityActionMappingContextBP' has a wrong offset!");
static_assert(offsetof(APyMarvelPlayerController, OneSubmitActionMappingContextBP) == 0x001178, "Member 'APyMarvelPlayerController::OneSubmitActionMappingContextBP' has a wrong offset!");
static_assert(offsetof(APyMarvelPlayerController, OnClientReceiveJson) == 0x001180, "Member 'APyMarvelPlayerController::OnClientReceiveJson' has a wrong offset!");
static_assert(offsetof(APyMarvelPlayerController, OnLevelNPCVoice) == 0x001190, "Member 'APyMarvelPlayerController::OnLevelNPCVoice' has a wrong offset!");

}

