#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1040

#include "Basic.hpp"

#include "DeclarativeUnreal_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1040_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class Hero_1040.Config_104001
// 0x0070 (0x0108 - 0x0098)
class UConfig_104001 : public UMarvelAbilityConfig
{
public:
	TArray<int32>                                 AbilityIDList;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AbilityIDListBeforeBreak;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EMisterFantasticState, struct FOne04001EnergyRegenConfigUnit> EnergyRegenConfig;                                 // 0x00B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104001">();
	}
	static class UConfig_104001* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104001>();
	}
};
static_assert(alignof(UConfig_104001) == 0x000008, "Wrong alignment on UConfig_104001");
static_assert(sizeof(UConfig_104001) == 0x000108, "Wrong size on UConfig_104001");
static_assert(offsetof(UConfig_104001, AbilityIDList) == 0x000098, "Member 'UConfig_104001::AbilityIDList' has a wrong offset!");
static_assert(offsetof(UConfig_104001, AbilityIDListBeforeBreak) == 0x0000A8, "Member 'UConfig_104001::AbilityIDListBeforeBreak' has a wrong offset!");
static_assert(offsetof(UConfig_104001, EnergyRegenConfig) == 0x0000B8, "Member 'UConfig_104001::EnergyRegenConfig' has a wrong offset!");

// Class Hero_1040.Ability_104001_ChangeSculpt
// 0x0000 (0x2838 - 0x2838)
class UAbility_104001_ChangeSculpt : public UAbility_109
{
public:
	bool CanActivateNotOverride();
	void SetEnergyConfigByState(const EMisterFantasticState State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104001_ChangeSculpt">();
	}
	static class UAbility_104001_ChangeSculpt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104001_ChangeSculpt>();
	}
};
static_assert(alignof(UAbility_104001_ChangeSculpt) == 0x000008, "Wrong alignment on UAbility_104001_ChangeSculpt");
static_assert(sizeof(UAbility_104001_ChangeSculpt) == 0x002838, "Wrong size on UAbility_104001_ChangeSculpt");

// Class Hero_1040.Ability_104001
// 0x0010 (0x2590 - 0x2580)
class UAbility_104001 : public UMarvelGameplayAbility
{
public:
	int32                                         WaitingToActivateAbilityID;                        // 0x2580(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStateSwitch;                                // 0x2584(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2585[0xB];                                     // 0x2585(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanChangeSculpt();
	bool GetEnableStateSwitch();
	bool InitEnergyConfigByState(const EMisterFantasticState State);
	bool IsExpandRange(float SkillEnergy);
	bool IsNormalRange(float SkillEnergy);
	void OnDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void SetEnableStateSwitch(bool bEnable);
	void SetWaitingToActivateAbility(int32 AbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104001">();
	}
	static class UAbility_104001* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104001>();
	}
};
static_assert(alignof(UAbility_104001) == 0x000008, "Wrong alignment on UAbility_104001");
static_assert(sizeof(UAbility_104001) == 0x002590, "Wrong size on UAbility_104001");
static_assert(offsetof(UAbility_104001, WaitingToActivateAbilityID) == 0x002580, "Member 'UAbility_104001::WaitingToActivateAbilityID' has a wrong offset!");
static_assert(offsetof(UAbility_104001, bEnableStateSwitch) == 0x002584, "Member 'UAbility_104001::bEnableStateSwitch' has a wrong offset!");

// Class Hero_1040.Config_104011
// 0x0520 (0x05B8 - 0x0098)
class UConfig_104011 : public UMarvelAbilityConfig
{
public:
	float                                         MinDistance;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamageRatio;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageRatio;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyThresh;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElasticEnergyAdded;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleAddEnergy;                                // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTargetFilter             TargetAddElasticEnergy;                            // 0x00B8(0x0500)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104011">();
	}
	static class UConfig_104011* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104011>();
	}
};
static_assert(alignof(UConfig_104011) == 0x000008, "Wrong alignment on UConfig_104011");
static_assert(sizeof(UConfig_104011) == 0x0005B8, "Wrong size on UConfig_104011");
static_assert(offsetof(UConfig_104011, MinDistance) == 0x000098, "Member 'UConfig_104011::MinDistance' has a wrong offset!");
static_assert(offsetof(UConfig_104011, MaxDistance) == 0x00009C, "Member 'UConfig_104011::MaxDistance' has a wrong offset!");
static_assert(offsetof(UConfig_104011, MinDamageRatio) == 0x0000A0, "Member 'UConfig_104011::MinDamageRatio' has a wrong offset!");
static_assert(offsetof(UConfig_104011, MaxDamageRatio) == 0x0000A4, "Member 'UConfig_104011::MaxDamageRatio' has a wrong offset!");
static_assert(offsetof(UConfig_104011, EnergyThresh) == 0x0000A8, "Member 'UConfig_104011::EnergyThresh' has a wrong offset!");
static_assert(offsetof(UConfig_104011, ElasticEnergyAdded) == 0x0000AC, "Member 'UConfig_104011::ElasticEnergyAdded' has a wrong offset!");
static_assert(offsetof(UConfig_104011, bMultipleAddEnergy) == 0x0000B0, "Member 'UConfig_104011::bMultipleAddEnergy' has a wrong offset!");
static_assert(offsetof(UConfig_104011, TargetAddElasticEnergy) == 0x0000B8, "Member 'UConfig_104011::TargetAddElasticEnergy' has a wrong offset!");

// Class Hero_1040.Projectile_10401101
// 0x0000 (0x3050 - 0x3050)
class AProjectile_10401101 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10401101">();
	}
	static class AProjectile_10401101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10401101>();
	}
};
static_assert(alignof(AProjectile_10401101) == 0x000010, "Wrong alignment on AProjectile_10401101");
static_assert(sizeof(AProjectile_10401101) == 0x003050, "Wrong size on AProjectile_10401101");

// Class Hero_1040.Projectile_10401102
// 0x0000 (0x3050 - 0x3050)
class AProjectile_10401102 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10401102">();
	}
	static class AProjectile_10401102* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10401102>();
	}
};
static_assert(alignof(AProjectile_10401102) == 0x000010, "Wrong alignment on AProjectile_10401102");
static_assert(sizeof(AProjectile_10401102) == 0x003050, "Wrong size on AProjectile_10401102");

// Class Hero_1040.EffectiveComponent_10401101
// 0x0000 (0x1C00 - 0x1C00)
class UEffectiveComponent_10401101 final : public UMarvelAgentEffectiveComponent
{
public:
	TArray<struct FHitResult> K2_OnPreApplyContainer(const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectiveComponent_10401101">();
	}
	static class UEffectiveComponent_10401101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectiveComponent_10401101>();
	}
};
static_assert(alignof(UEffectiveComponent_10401101) == 0x000010, "Wrong alignment on UEffectiveComponent_10401101");
static_assert(sizeof(UEffectiveComponent_10401101) == 0x001C00, "Wrong size on UEffectiveComponent_10401101");

// Class Hero_1040.TraceComponent_10401101
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10401101 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10401101">();
	}
	static class UTraceComponent_10401101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10401101>();
	}
};
static_assert(alignof(UTraceComponent_10401101) == 0x000010, "Wrong alignment on UTraceComponent_10401101");
static_assert(sizeof(UTraceComponent_10401101) == 0x001710, "Wrong size on UTraceComponent_10401101");

// Class Hero_1040.Summoner_10405101
// 0x0010 (0x08A0 - 0x0890)
class ASummoner_10405101 : public AMarvelSummonerBase
{
public:
	class UBoxComponent*                          BoxComponent;                                      // 0x0890(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_898[0x8];                                      // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnBeginAgentTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Summoner_10405101">();
	}
	static class ASummoner_10405101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummoner_10405101>();
	}
};
static_assert(alignof(ASummoner_10405101) == 0x000010, "Wrong alignment on ASummoner_10405101");
static_assert(sizeof(ASummoner_10405101) == 0x0008A0, "Wrong size on ASummoner_10405101");
static_assert(offsetof(ASummoner_10405101, BoxComponent) == 0x000890, "Member 'ASummoner_10405101::BoxComponent' has a wrong offset!");

// Class Hero_1040.TraceComponent_10401102
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10401102 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10401102">();
	}
	static class UTraceComponent_10401102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10401102>();
	}
};
static_assert(alignof(UTraceComponent_10401102) == 0x000010, "Wrong alignment on UTraceComponent_10401102");
static_assert(sizeof(UTraceComponent_10401102) == 0x001710, "Wrong size on UTraceComponent_10401102");

// Class Hero_1040.TraceComponent_10401103
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10401103 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10401103">();
	}
	static class UTraceComponent_10401103* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10401103>();
	}
};
static_assert(alignof(UTraceComponent_10401103) == 0x000010, "Wrong alignment on UTraceComponent_10401103");
static_assert(sizeof(UTraceComponent_10401103) == 0x001710, "Wrong size on UTraceComponent_10401103");

// Class Hero_1040.Ability_104011
// 0x0068 (0x25F0 - 0x2588)
class UAbility_104011 : public UAbility_108
{
public:
	class AProjectile_10401101*                   RightArmProjectile;                                // 0x2588(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10401102*                   LeftArmProjectile;                                 // 0x2590(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyDistance;                                       // 0x2598(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259C[0x4];                                     // 0x259C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           HitActors;                                         // 0x25A0(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void OnAbilityHit(class UGameplayAbility* Ability, const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104011">();
	}
	static class UAbility_104011* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104011>();
	}
};
static_assert(alignof(UAbility_104011) == 0x000008, "Wrong alignment on UAbility_104011");
static_assert(sizeof(UAbility_104011) == 0x0025F0, "Wrong size on UAbility_104011");
static_assert(offsetof(UAbility_104011, RightArmProjectile) == 0x002588, "Member 'UAbility_104011::RightArmProjectile' has a wrong offset!");
static_assert(offsetof(UAbility_104011, LeftArmProjectile) == 0x002590, "Member 'UAbility_104011::LeftArmProjectile' has a wrong offset!");
static_assert(offsetof(UAbility_104011, FlyDistance) == 0x002598, "Member 'UAbility_104011::FlyDistance' has a wrong offset!");
static_assert(offsetof(UAbility_104011, HitActors) == 0x0025A0, "Member 'UAbility_104011::HitActors' has a wrong offset!");

// Class Hero_1040.Config_104031
// 0x0098 (0x0130 - 0x0098)
class UConfig_104031 final : public UMarvelAbilityConfig
{
public:
	float                                         MaxRightArmLengh;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElasticEnergyAdded;                                // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleGrab;                                     // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRootImmunity;                                  // 0x00A1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneToGrabOnRight;                                 // 0x00A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToGrabOnLeft;                                  // 0x00B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsToIgnore;                                      // 0x00C0(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DurationToPlayWarningBeforeOvertime;               // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104031">();
	}
	static class UConfig_104031* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104031>();
	}
};
static_assert(alignof(UConfig_104031) == 0x000008, "Wrong alignment on UConfig_104031");
static_assert(sizeof(UConfig_104031) == 0x000130, "Wrong size on UConfig_104031");
static_assert(offsetof(UConfig_104031, MaxRightArmLengh) == 0x000098, "Member 'UConfig_104031::MaxRightArmLengh' has a wrong offset!");
static_assert(offsetof(UConfig_104031, ElasticEnergyAdded) == 0x00009C, "Member 'UConfig_104031::ElasticEnergyAdded' has a wrong offset!");
static_assert(offsetof(UConfig_104031, bMultipleGrab) == 0x0000A0, "Member 'UConfig_104031::bMultipleGrab' has a wrong offset!");
static_assert(offsetof(UConfig_104031, bCanRootImmunity) == 0x0000A1, "Member 'UConfig_104031::bCanRootImmunity' has a wrong offset!");
static_assert(offsetof(UConfig_104031, BoneToGrabOnRight) == 0x0000A4, "Member 'UConfig_104031::BoneToGrabOnRight' has a wrong offset!");
static_assert(offsetof(UConfig_104031, BoneToGrabOnLeft) == 0x0000B0, "Member 'UConfig_104031::BoneToGrabOnLeft' has a wrong offset!");
static_assert(offsetof(UConfig_104031, TagsToIgnore) == 0x0000C0, "Member 'UConfig_104031::TagsToIgnore' has a wrong offset!");
static_assert(offsetof(UConfig_104031, DurationToPlayWarningBeforeOvertime) == 0x000128, "Member 'UConfig_104031::DurationToPlayWarningBeforeOvertime' has a wrong offset!");

// Class Hero_1040.Cue_Ability_Loop_10406101
// 0x0028 (0x0E78 - 0x0E50)
class ACue_Ability_Loop_10406101 final : public AMarvelCueNotify_Ability
{
public:
	class UNiagaraComponent*                      NSIndicator;                                       // 0x0E50(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     NSDeclarationHolder;                               // 0x0E58(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E68[0x10];                                     // 0x0E68(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClientPlayerViewSideChange(EClientPlayerViewSide InViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10406101">();
	}
	static class ACue_Ability_Loop_10406101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10406101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10406101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10406101");
static_assert(sizeof(ACue_Ability_Loop_10406101) == 0x000E78, "Wrong size on ACue_Ability_Loop_10406101");
static_assert(offsetof(ACue_Ability_Loop_10406101, NSIndicator) == 0x000E50, "Member 'ACue_Ability_Loop_10406101::NSIndicator' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10406101, NSDeclarationHolder) == 0x000E58, "Member 'ACue_Ability_Loop_10406101::NSDeclarationHolder' has a wrong offset!");

// Class Hero_1040.Ability_104031
// 0x0138 (0x26B8 - 0x2580)
class UAbility_104031 : public UMarvelGameplayAbility
{
public:
	struct FPredictionKey                         PlayTimelinePredictionKey;                         // 0x2580(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectileID;                                      // 0x2620(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2624[0x4];                                     // 0x2624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   RightTarget;                                       // 0x2628(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   RightTargetNoRep;                                  // 0x2630(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10403101*                   Projectile_10403101;                               // 0x2638(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10403101*                   FakeProjectile_10403101;                           // 0x2640(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* TimelineTask;                                      // 0x2648(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_WaitServerConfirm*   WaitServerTask;                                    // 0x2650(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPrepareEnd;                                    // 0x2658(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2659[0x7];                                     // 0x2659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ProjectileChangedDispatcher;                       // 0x2660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RightTargetChangedDispatcher;                      // 0x2670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2680[0x10];                                    // 0x2680(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_104031*                         Config_104031;                                     // 0x2690(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2698[0x20];                                    // 0x2698(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_PrepareEndAbility();
	void OnCharacterTranslatedByPortal(const struct FVector& LastPos, const struct FVector& NewPos);
	void OnEntangleBuffRemoved(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void OnMyProjectileHit(const struct FHitResult& Hit);
	void OnRep_Projectile();
	void OnRep_RightTarget();
	void OnRepProjectileHit();
	void PrepareEndAbility();
	void UpdateMovementTickPreRequisite();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104031">();
	}
	static class UAbility_104031* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104031>();
	}
};
static_assert(alignof(UAbility_104031) == 0x000008, "Wrong alignment on UAbility_104031");
static_assert(sizeof(UAbility_104031) == 0x0026B8, "Wrong size on UAbility_104031");
static_assert(offsetof(UAbility_104031, PlayTimelinePredictionKey) == 0x002580, "Member 'UAbility_104031::PlayTimelinePredictionKey' has a wrong offset!");
static_assert(offsetof(UAbility_104031, ProjectileID) == 0x002620, "Member 'UAbility_104031::ProjectileID' has a wrong offset!");
static_assert(offsetof(UAbility_104031, RightTarget) == 0x002628, "Member 'UAbility_104031::RightTarget' has a wrong offset!");
static_assert(offsetof(UAbility_104031, RightTargetNoRep) == 0x002630, "Member 'UAbility_104031::RightTargetNoRep' has a wrong offset!");
static_assert(offsetof(UAbility_104031, Projectile_10403101) == 0x002638, "Member 'UAbility_104031::Projectile_10403101' has a wrong offset!");
static_assert(offsetof(UAbility_104031, FakeProjectile_10403101) == 0x002640, "Member 'UAbility_104031::FakeProjectile_10403101' has a wrong offset!");
static_assert(offsetof(UAbility_104031, TimelineTask) == 0x002648, "Member 'UAbility_104031::TimelineTask' has a wrong offset!");
static_assert(offsetof(UAbility_104031, WaitServerTask) == 0x002650, "Member 'UAbility_104031::WaitServerTask' has a wrong offset!");
static_assert(offsetof(UAbility_104031, bHasPrepareEnd) == 0x002658, "Member 'UAbility_104031::bHasPrepareEnd' has a wrong offset!");
static_assert(offsetof(UAbility_104031, ProjectileChangedDispatcher) == 0x002660, "Member 'UAbility_104031::ProjectileChangedDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104031, RightTargetChangedDispatcher) == 0x002670, "Member 'UAbility_104031::RightTargetChangedDispatcher' has a wrong offset!");
static_assert(offsetof(UAbility_104031, Config_104031) == 0x002690, "Member 'UAbility_104031::Config_104031' has a wrong offset!");

// Class Hero_1040.Projectile_10403101
// 0x0000 (0x3050 - 0x3050)
class AProjectile_10403101 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10403101">();
	}
	static class AProjectile_10403101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10403101>();
	}
};
static_assert(alignof(AProjectile_10403101) == 0x000010, "Wrong alignment on AProjectile_10403101");
static_assert(sizeof(AProjectile_10403101) == 0x003050, "Wrong size on AProjectile_10403101");

// Class Hero_1040.TraceComponent_10403101
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10403101 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10403101">();
	}
	static class UTraceComponent_10403101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10403101>();
	}
};
static_assert(alignof(UTraceComponent_10403101) == 0x000010, "Wrong alignment on UTraceComponent_10403101");
static_assert(sizeof(UTraceComponent_10403101) == 0x001710, "Wrong size on UTraceComponent_10403101");

// Class Hero_1040.Cue_Ability_Loop_10403102
// 0x0018 (0x0E68 - 0x0E50)
class ACue_Ability_Loop_10403102 final : public AMarvelCueNotify_Ability
{
public:
	float                                         MaxRTPCValue;                                      // 0x0E50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E54[0x4];                                      // 0x0E54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbility_104031*                        OwnerAbility;                                      // 0x0E58(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AProjectile_10403101*                   TargetProjectile;                                  // 0x0E60(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UAbility_104031* GetOwnerAbility();
	void OnProjectileChanged();
	void OnProjectileEnd(class AActor* InProjectile);
	void OnTargetChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10403102">();
	}
	static class ACue_Ability_Loop_10403102* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10403102>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10403102) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10403102");
static_assert(sizeof(ACue_Ability_Loop_10403102) == 0x000E68, "Wrong size on ACue_Ability_Loop_10403102");
static_assert(offsetof(ACue_Ability_Loop_10403102, MaxRTPCValue) == 0x000E50, "Member 'ACue_Ability_Loop_10403102::MaxRTPCValue' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10403102, OwnerAbility) == 0x000E58, "Member 'ACue_Ability_Loop_10403102::OwnerAbility' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10403102, TargetProjectile) == 0x000E60, "Member 'ACue_Ability_Loop_10403102::TargetProjectile' has a wrong offset!");

// Class Hero_1040.MisterFantasticMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UMisterFantasticMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MisterFantasticMoveLogicBaseComponent">();
	}
	static class UMisterFantasticMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMisterFantasticMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UMisterFantasticMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UMisterFantasticMoveLogicBaseComponent");
static_assert(sizeof(UMisterFantasticMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UMisterFantasticMoveLogicBaseComponent");

// Class Hero_1040.Cue_Buff_Loop_10403402
// 0x0030 (0x1068 - 0x1038)
class ACue_Buff_Loop_10403402 final : public AMarvelCueNotify_Buff
{
public:
	bool                                          bHasCollided;                                      // 0x1038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1039[0x7];                                     // 0x1039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbility_104031*                        Ability_104031;                                    // 0x1040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_104032*                        Ability_104032;                                    // 0x1048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NSTrailing;                                        // 0x1050(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         CollisionFXAsset;                                  // 0x1058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToSpawnCollisionFX;                        // 0x1060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionAudioID;                                  // 0x1064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_Loop_10403402">();
	}
	static class ACue_Buff_Loop_10403402* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_Loop_10403402>();
	}
};
static_assert(alignof(ACue_Buff_Loop_10403402) == 0x000008, "Wrong alignment on ACue_Buff_Loop_10403402");
static_assert(sizeof(ACue_Buff_Loop_10403402) == 0x001068, "Wrong size on ACue_Buff_Loop_10403402");
static_assert(offsetof(ACue_Buff_Loop_10403402, bHasCollided) == 0x001038, "Member 'ACue_Buff_Loop_10403402::bHasCollided' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, Ability_104031) == 0x001040, "Member 'ACue_Buff_Loop_10403402::Ability_104031' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, Ability_104032) == 0x001048, "Member 'ACue_Buff_Loop_10403402::Ability_104032' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, NSTrailing) == 0x001050, "Member 'ACue_Buff_Loop_10403402::NSTrailing' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, CollisionFXAsset) == 0x001058, "Member 'ACue_Buff_Loop_10403402::CollisionFXAsset' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, DistanceToSpawnCollisionFX) == 0x001060, "Member 'ACue_Buff_Loop_10403402::DistanceToSpawnCollisionFX' has a wrong offset!");
static_assert(offsetof(ACue_Buff_Loop_10403402, CollisionAudioID) == 0x001064, "Member 'ACue_Buff_Loop_10403402::CollisionAudioID' has a wrong offset!");

// Class Hero_1040.Config_104032
// 0x1CF8 (0x1D90 - 0x0098)
class UConfig_104032 final : public UMarvelAbilityConfig
{
public:
	float                                         MaxLeftArmLengh;                                   // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistToPlayInPlaceMontage;                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleGrab;                                     // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsToIgnore;                                      // 0x00A8(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0110(0x0BA8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RightTargetDamage;                                 // 0x0CB8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTargetDamage;                                  // 0x0CBC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffToApplyWhenHitTwo;                             // 0x0CC0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffToApplyWhenHitOne;                             // 0x0CD0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SingleTargetDamage;                                // 0x0CE0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE4[0xC];                                      // 0x0CE4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       SelectParam;                                       // 0x0CF0(0x10A0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104032">();
	}
	static class UConfig_104032* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104032>();
	}
};
static_assert(alignof(UConfig_104032) == 0x000010, "Wrong alignment on UConfig_104032");
static_assert(sizeof(UConfig_104032) == 0x001D90, "Wrong size on UConfig_104032");
static_assert(offsetof(UConfig_104032, MaxLeftArmLengh) == 0x000098, "Member 'UConfig_104032::MaxLeftArmLengh' has a wrong offset!");
static_assert(offsetof(UConfig_104032, MaxDistToPlayInPlaceMontage) == 0x00009C, "Member 'UConfig_104032::MaxDistToPlayInPlaceMontage' has a wrong offset!");
static_assert(offsetof(UConfig_104032, bMultipleGrab) == 0x0000A0, "Member 'UConfig_104032::bMultipleGrab' has a wrong offset!");
static_assert(offsetof(UConfig_104032, TagsToIgnore) == 0x0000A8, "Member 'UConfig_104032::TagsToIgnore' has a wrong offset!");
static_assert(offsetof(UConfig_104032, DashInfo) == 0x000110, "Member 'UConfig_104032::DashInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104032, RightTargetDamage) == 0x000CB8, "Member 'UConfig_104032::RightTargetDamage' has a wrong offset!");
static_assert(offsetof(UConfig_104032, LeftTargetDamage) == 0x000CBC, "Member 'UConfig_104032::LeftTargetDamage' has a wrong offset!");
static_assert(offsetof(UConfig_104032, BuffToApplyWhenHitTwo) == 0x000CC0, "Member 'UConfig_104032::BuffToApplyWhenHitTwo' has a wrong offset!");
static_assert(offsetof(UConfig_104032, BuffToApplyWhenHitOne) == 0x000CD0, "Member 'UConfig_104032::BuffToApplyWhenHitOne' has a wrong offset!");
static_assert(offsetof(UConfig_104032, SingleTargetDamage) == 0x000CE0, "Member 'UConfig_104032::SingleTargetDamage' has a wrong offset!");
static_assert(offsetof(UConfig_104032, SelectParam) == 0x000CF0, "Member 'UConfig_104032::SelectParam' has a wrong offset!");

// Class Hero_1040.Ability_104032
// 0x0098 (0x2618 - 0x2580)
class UAbility_104032 : public UMarvelGameplayAbility
{
public:
	class UAbility_104031*                        Ability_104031;                                    // 0x2580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrerequisiteAbilityID;                             // 0x2588(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAbilityID;                                  // 0x258C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectileID;                                      // 0x2590(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2594[0x4];                                     // 0x2594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* TimelineTask;                                      // 0x2598(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   LeftTarget;                                        // 0x25A0(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10403201*                   Projectile_10403201;                               // 0x25A8(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10403201*                   FakeProjectile_10403201;                           // 0x25B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x25B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetSelected;                                    // 0x25C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C8[0x3];                                     // 0x25C8(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         CacheTLIndex;                                      // 0x25CB(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasMissile;                                       // 0x25CC(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25CD[0x3];                                     // 0x25CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_104032*                         Config_104032;                                     // 0x25D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25D8[0x40];                                    // 0x25D8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	uint8 GetCacheTLIndex();
	bool HasLeftArmMissile();
	void OnMyProjectileHit(const struct FHitResult& Hit);
	void RestoreRightHandMontage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104032">();
	}
	static class UAbility_104032* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104032>();
	}
};
static_assert(alignof(UAbility_104032) == 0x000008, "Wrong alignment on UAbility_104032");
static_assert(sizeof(UAbility_104032) == 0x002618, "Wrong size on UAbility_104032");
static_assert(offsetof(UAbility_104032, Ability_104031) == 0x002580, "Member 'UAbility_104032::Ability_104031' has a wrong offset!");
static_assert(offsetof(UAbility_104032, PrerequisiteAbilityID) == 0x002588, "Member 'UAbility_104032::PrerequisiteAbilityID' has a wrong offset!");
static_assert(offsetof(UAbility_104032, CurrentAbilityID) == 0x00258C, "Member 'UAbility_104032::CurrentAbilityID' has a wrong offset!");
static_assert(offsetof(UAbility_104032, ProjectileID) == 0x002590, "Member 'UAbility_104032::ProjectileID' has a wrong offset!");
static_assert(offsetof(UAbility_104032, TimelineTask) == 0x002598, "Member 'UAbility_104032::TimelineTask' has a wrong offset!");
static_assert(offsetof(UAbility_104032, LeftTarget) == 0x0025A0, "Member 'UAbility_104032::LeftTarget' has a wrong offset!");
static_assert(offsetof(UAbility_104032, Projectile_10403201) == 0x0025A8, "Member 'UAbility_104032::Projectile_10403201' has a wrong offset!");
static_assert(offsetof(UAbility_104032, FakeProjectile_10403201) == 0x0025B0, "Member 'UAbility_104032::FakeProjectile_10403201' has a wrong offset!");
static_assert(offsetof(UAbility_104032, SelectTask) == 0x0025B8, "Member 'UAbility_104032::SelectTask' has a wrong offset!");
static_assert(offsetof(UAbility_104032, TargetSelected) == 0x0025C0, "Member 'UAbility_104032::TargetSelected' has a wrong offset!");
static_assert(offsetof(UAbility_104032, CacheTLIndex) == 0x0025CB, "Member 'UAbility_104032::CacheTLIndex' has a wrong offset!");
static_assert(offsetof(UAbility_104032, bHasMissile) == 0x0025CC, "Member 'UAbility_104032::bHasMissile' has a wrong offset!");
static_assert(offsetof(UAbility_104032, Config_104032) == 0x0025D0, "Member 'UAbility_104032::Config_104032' has a wrong offset!");

// Class Hero_1040.MisterFantasticAnimInstance
// 0x0B80 (0x1490 - 0x0910)
class UMisterFantasticAnimInstance final : public UMarvelAnimInstance
{
public:
	float                                         RightArmControl;                                   // 0x0910(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_914[0xC];                                      // 0x0914(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RightHandControlTransform;                         // 0x0920(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftArmControl;                                    // 0x0980(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_984[0xC];                                      // 0x0984(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftHandControlTransform;                          // 0x0990(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F0[0x20];                                     // 0x09F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinArmDistOfAttack;                                // 0x0A10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAimLocAs104011Hand;                            // 0x0A14(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateArmWhenTurnAndMove;                         // 0x0A15(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A16[0x2];                                      // 0x0A16(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpMinSpeed;                                      // 0x0A18(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpMaxSpeed;                                      // 0x0A1C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistToSmooth;                                   // 0x0A20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateRate;                                        // 0x0A24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickTraceRate;                                     // 0x0A28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2C[0x4];                                      // 0x0A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTargetFilter             TraceTargeFilter;                                  // 0x0A30(0x0500)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAimTraceExtraInfo                     TraceExtraInfo;                                    // 0x0F30(0x00C0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLinearLerp;                                    // 0x0FF0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHandOffset_104011;                             // 0x0FF8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandOffset_104011;                            // 0x1010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysStickToSocket;                              // 0x1028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1029[0x7];                                     // 0x1029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RightHandOffset_104031;                            // 0x1030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandOffset_104031;                             // 0x1048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixRightHandLocation;                              // 0x1060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixLeftHandLocation;                               // 0x1061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1062[0x2];                                     // 0x1062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftHandControl104011;                             // 0x1064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandControl104011;                            // 0x1068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandValue;                                     // 0x106C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandValue;                                    // 0x1070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastLeftArmDist104011;                             // 0x1074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRightArmDist104011;                            // 0x1078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmDistChangeThreshole;                            // 0x107C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_104011*                        Ability_104011;                                    // 0x1080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_104041*                        Ability_104041;                                    // 0x1088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_104031*                        Ability_104031;                                    // 0x1090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Projectile_104031;                                 // 0x1098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_104032*                        Ability_104032;                                    // 0x10A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectileLoc_104031;                              // 0x10A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C0[0xA0];                                    // 0x10C0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectileLoc_104032;                              // 0x1160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1178[0x118];                                   // 0x1178(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftHandControlTransform104011;                    // 0x1290(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RightHandControlTransform104011;                   // 0x12F0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1350[0x140];                                   // 0x1350(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetTracedLocation();
	void On104032LeftHandHit(const struct FVector& InHitLocation);
	void Trace104011Arm();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MisterFantasticAnimInstance">();
	}
	static class UMisterFantasticAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMisterFantasticAnimInstance>();
	}
};
static_assert(alignof(UMisterFantasticAnimInstance) == 0x000010, "Wrong alignment on UMisterFantasticAnimInstance");
static_assert(sizeof(UMisterFantasticAnimInstance) == 0x001490, "Wrong size on UMisterFantasticAnimInstance");
static_assert(offsetof(UMisterFantasticAnimInstance, RightArmControl) == 0x000910, "Member 'UMisterFantasticAnimInstance::RightArmControl' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandControlTransform) == 0x000920, "Member 'UMisterFantasticAnimInstance::RightHandControlTransform' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftArmControl) == 0x000980, "Member 'UMisterFantasticAnimInstance::LeftArmControl' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandControlTransform) == 0x000990, "Member 'UMisterFantasticAnimInstance::LeftHandControlTransform' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, MinArmDistOfAttack) == 0x000A10, "Member 'UMisterFantasticAnimInstance::MinArmDistOfAttack' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, bUseAimLocAs104011Hand) == 0x000A14, "Member 'UMisterFantasticAnimInstance::bUseAimLocAs104011Hand' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, bUpdateArmWhenTurnAndMove) == 0x000A15, "Member 'UMisterFantasticAnimInstance::bUpdateArmWhenTurnAndMove' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LerpMinSpeed) == 0x000A18, "Member 'UMisterFantasticAnimInstance::LerpMinSpeed' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LerpMaxSpeed) == 0x000A1C, "Member 'UMisterFantasticAnimInstance::LerpMaxSpeed' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, MaxDistToSmooth) == 0x000A20, "Member 'UMisterFantasticAnimInstance::MaxDistToSmooth' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, UpdateRate) == 0x000A24, "Member 'UMisterFantasticAnimInstance::UpdateRate' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, TickTraceRate) == 0x000A28, "Member 'UMisterFantasticAnimInstance::TickTraceRate' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, TraceTargeFilter) == 0x000A30, "Member 'UMisterFantasticAnimInstance::TraceTargeFilter' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, TraceExtraInfo) == 0x000F30, "Member 'UMisterFantasticAnimInstance::TraceExtraInfo' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, bUseLinearLerp) == 0x000FF0, "Member 'UMisterFantasticAnimInstance::bUseLinearLerp' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandOffset_104011) == 0x000FF8, "Member 'UMisterFantasticAnimInstance::LeftHandOffset_104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandOffset_104011) == 0x001010, "Member 'UMisterFantasticAnimInstance::RightHandOffset_104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, bAlwaysStickToSocket) == 0x001028, "Member 'UMisterFantasticAnimInstance::bAlwaysStickToSocket' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandOffset_104031) == 0x001030, "Member 'UMisterFantasticAnimInstance::RightHandOffset_104031' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandOffset_104031) == 0x001048, "Member 'UMisterFantasticAnimInstance::LeftHandOffset_104031' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, FixRightHandLocation) == 0x001060, "Member 'UMisterFantasticAnimInstance::FixRightHandLocation' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, FixLeftHandLocation) == 0x001061, "Member 'UMisterFantasticAnimInstance::FixLeftHandLocation' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandControl104011) == 0x001064, "Member 'UMisterFantasticAnimInstance::LeftHandControl104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandControl104011) == 0x001068, "Member 'UMisterFantasticAnimInstance::RightHandControl104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandValue) == 0x00106C, "Member 'UMisterFantasticAnimInstance::LeftHandValue' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandValue) == 0x001070, "Member 'UMisterFantasticAnimInstance::RightHandValue' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LastLeftArmDist104011) == 0x001074, "Member 'UMisterFantasticAnimInstance::LastLeftArmDist104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LastRightArmDist104011) == 0x001078, "Member 'UMisterFantasticAnimInstance::LastRightArmDist104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, ArmDistChangeThreshole) == 0x00107C, "Member 'UMisterFantasticAnimInstance::ArmDistChangeThreshole' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, Ability_104011) == 0x001080, "Member 'UMisterFantasticAnimInstance::Ability_104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, Ability_104041) == 0x001088, "Member 'UMisterFantasticAnimInstance::Ability_104041' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, Ability_104031) == 0x001090, "Member 'UMisterFantasticAnimInstance::Ability_104031' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, Projectile_104031) == 0x001098, "Member 'UMisterFantasticAnimInstance::Projectile_104031' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, Ability_104032) == 0x0010A0, "Member 'UMisterFantasticAnimInstance::Ability_104032' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, ProjectileLoc_104031) == 0x0010A8, "Member 'UMisterFantasticAnimInstance::ProjectileLoc_104031' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, ProjectileLoc_104032) == 0x001160, "Member 'UMisterFantasticAnimInstance::ProjectileLoc_104032' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, LeftHandControlTransform104011) == 0x001290, "Member 'UMisterFantasticAnimInstance::LeftHandControlTransform104011' has a wrong offset!");
static_assert(offsetof(UMisterFantasticAnimInstance, RightHandControlTransform104011) == 0x0012F0, "Member 'UMisterFantasticAnimInstance::RightHandControlTransform104011' has a wrong offset!");

// Class Hero_1040.Projectile_10403201
// 0x0020 (0x3070 - 0x3050)
class AProjectile_10403201 : public AMarvelAbilityTargetActor_Projectile
{
public:
	uint8                                         Pad_3050[0x20];                                    // 0x3050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Projectile_10403201">();
	}
	static class AProjectile_10403201* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectile_10403201>();
	}
};
static_assert(alignof(AProjectile_10403201) == 0x000010, "Wrong alignment on AProjectile_10403201");
static_assert(sizeof(AProjectile_10403201) == 0x003070, "Wrong size on AProjectile_10403201");

// Class Hero_1040.KnockUp_104032
// 0x0008 (0x1DA0 - 0x1D98)
class UKnockUp_104032 : public UMarvelKnockUpAbility
{
public:
	bool                                          bReverseDirection;                                 // 0x1D98(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D99[0x7];                                     // 0x1D99(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KnockUp_104032">();
	}
	static class UKnockUp_104032* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKnockUp_104032>();
	}
};
static_assert(alignof(UKnockUp_104032) == 0x000008, "Wrong alignment on UKnockUp_104032");
static_assert(sizeof(UKnockUp_104032) == 0x001DA0, "Wrong size on UKnockUp_104032");
static_assert(offsetof(UKnockUp_104032, bReverseDirection) == 0x001D98, "Member 'UKnockUp_104032::bReverseDirection' has a wrong offset!");

// Class Hero_1040.Config_104041
// 0x1C88 (0x1D20 - 0x0098)
class UConfig_104041 final : public UMarvelAbilityConfig
{
public:
	float                                         ElasticEnergyAdded;                                // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdvanceLengthToPlayAttack;                         // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       SelectParam;                                       // 0x00B0(0x10A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DashHeightCurve;                                   // 0x1150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo;                                          // 0x1158(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   LeftBoneToGrab;                                    // 0x1D00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightBoneToGrab;                                   // 0x1D0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D18[0x8];                                     // 0x1D18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104041">();
	}
	static class UConfig_104041* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104041>();
	}
};
static_assert(alignof(UConfig_104041) == 0x000010, "Wrong alignment on UConfig_104041");
static_assert(sizeof(UConfig_104041) == 0x001D20, "Wrong size on UConfig_104041");
static_assert(offsetof(UConfig_104041, ElasticEnergyAdded) == 0x000098, "Member 'UConfig_104041::ElasticEnergyAdded' has a wrong offset!");
static_assert(offsetof(UConfig_104041, AdvanceLengthToPlayAttack) == 0x00009C, "Member 'UConfig_104041::AdvanceLengthToPlayAttack' has a wrong offset!");
static_assert(offsetof(UConfig_104041, BuffID) == 0x0000A0, "Member 'UConfig_104041::BuffID' has a wrong offset!");
static_assert(offsetof(UConfig_104041, SelectParam) == 0x0000B0, "Member 'UConfig_104041::SelectParam' has a wrong offset!");
static_assert(offsetof(UConfig_104041, DashHeightCurve) == 0x001150, "Member 'UConfig_104041::DashHeightCurve' has a wrong offset!");
static_assert(offsetof(UConfig_104041, DashInfo) == 0x001158, "Member 'UConfig_104041::DashInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104041, LeftBoneToGrab) == 0x001D00, "Member 'UConfig_104041::LeftBoneToGrab' has a wrong offset!");
static_assert(offsetof(UConfig_104041, RightBoneToGrab) == 0x001D0C, "Member 'UConfig_104041::RightBoneToGrab' has a wrong offset!");

// Class Hero_1040.TraceComponent_10404101
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10404101 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10404101">();
	}
	static class UTraceComponent_10404101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10404101>();
	}
};
static_assert(alignof(UTraceComponent_10404101) == 0x000010, "Wrong alignment on UTraceComponent_10404101");
static_assert(sizeof(UTraceComponent_10404101) == 0x001710, "Wrong size on UTraceComponent_10404101");

// Class Hero_1040.Ability_104041
// 0x0248 (0x27C8 - 0x2580)
class UAbility_104041 : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x18];                                    // 0x2580(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReplicatedGrabTarget;                              // 0x2598(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        ReplicatedGrabSegment;                             // 0x25A0(0x0050)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x25F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             SelectResult_Target;                               // 0x25F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        SelectResult_Segment;                              // 0x2600(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FVector                                SelectTargetLocation;                              // 0x2650(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         ChangeToExpandKey;                                 // 0x2668(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         ChangeToNormalKey;                                 // 0x2708(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A8[0x20];                                    // 0x27A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void JumpToAttackSection();
	void OnCharacterDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnDashFinish(EDashStopReason Reason);
	void OnRep_GrabSegment(const struct FPortalSegments& OldSegment);
	void OnTargetDataTimedOut();
	void OnTargetTranslatedByPortal(class AMarvelBaseCharacter* Character, class APortalViewActor* Portal);
	void PlayTimelineBySculpt(int32 SculptID);
	void RotationToTarget(const struct FVector& InTargetLocation);
	void SetSelectTarget(const struct FGameplayAbilityTargetDataHandle& Handle);
	void UpdateSelectResult(bool bMarkDirty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104041">();
	}
	static class UAbility_104041* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104041>();
	}
};
static_assert(alignof(UAbility_104041) == 0x000008, "Wrong alignment on UAbility_104041");
static_assert(sizeof(UAbility_104041) == 0x0027C8, "Wrong size on UAbility_104041");
static_assert(offsetof(UAbility_104041, ReplicatedGrabTarget) == 0x002598, "Member 'UAbility_104041::ReplicatedGrabTarget' has a wrong offset!");
static_assert(offsetof(UAbility_104041, ReplicatedGrabSegment) == 0x0025A0, "Member 'UAbility_104041::ReplicatedGrabSegment' has a wrong offset!");
static_assert(offsetof(UAbility_104041, SelectTask) == 0x0025F0, "Member 'UAbility_104041::SelectTask' has a wrong offset!");
static_assert(offsetof(UAbility_104041, SelectResult_Target) == 0x0025F8, "Member 'UAbility_104041::SelectResult_Target' has a wrong offset!");
static_assert(offsetof(UAbility_104041, SelectResult_Segment) == 0x002600, "Member 'UAbility_104041::SelectResult_Segment' has a wrong offset!");
static_assert(offsetof(UAbility_104041, SelectTargetLocation) == 0x002650, "Member 'UAbility_104041::SelectTargetLocation' has a wrong offset!");
static_assert(offsetof(UAbility_104041, ChangeToExpandKey) == 0x002668, "Member 'UAbility_104041::ChangeToExpandKey' has a wrong offset!");
static_assert(offsetof(UAbility_104041, ChangeToNormalKey) == 0x002708, "Member 'UAbility_104041::ChangeToNormalKey' has a wrong offset!");

// Class Hero_1040.UIC_SelectTarget_104041
// 0x00B0 (0x0208 - 0x0158)
class UUIC_SelectTarget_104041 final : public UUIC_SelectTarget
{
public:
	struct FUIActionData                          UIActionDataTeammate;                              // 0x0158(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUIActionData                          UIActionDataEnemy;                                 // 0x01B0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_SelectTarget_104041">();
	}
	static class UUIC_SelectTarget_104041* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_SelectTarget_104041>();
	}
};
static_assert(alignof(UUIC_SelectTarget_104041) == 0x000008, "Wrong alignment on UUIC_SelectTarget_104041");
static_assert(sizeof(UUIC_SelectTarget_104041) == 0x000208, "Wrong size on UUIC_SelectTarget_104041");
static_assert(offsetof(UUIC_SelectTarget_104041, UIActionDataTeammate) == 0x000158, "Member 'UUIC_SelectTarget_104041::UIActionDataTeammate' has a wrong offset!");
static_assert(offsetof(UUIC_SelectTarget_104041, UIActionDataEnemy) == 0x0001B0, "Member 'UUIC_SelectTarget_104041::UIActionDataEnemy' has a wrong offset!");

// Class Hero_1040.MarvelSummonedComp_10405101
// 0x0010 (0x0CB0 - 0x0CA0)
class UMarvelSummonedComp_10405101 final : public UMarvelSummonedComponent
{
public:
	float                                         AbsorbDamageAmount;                                // 0x0CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA4[0xC];                                      // 0x0CA4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnWallSummonerDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSummonedComp_10405101">();
	}
	static class UMarvelSummonedComp_10405101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSummonedComp_10405101>();
	}
};
static_assert(alignof(UMarvelSummonedComp_10405101) == 0x000010, "Wrong alignment on UMarvelSummonedComp_10405101");
static_assert(sizeof(UMarvelSummonedComp_10405101) == 0x000CB0, "Wrong size on UMarvelSummonedComp_10405101");
static_assert(offsetof(UMarvelSummonedComp_10405101, AbsorbDamageAmount) == 0x000CA0, "Member 'UMarvelSummonedComp_10405101::AbsorbDamageAmount' has a wrong offset!");

// Class Hero_1040.Config_104061
// 0x2798 (0x2830 - 0x0098)
class UConfig_104061 final : public UMarvelAbilityConfig
{
public:
	uint8                                         MaxJumpTimes;                                      // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBounceFall;                                 // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TimesSwitchToBounceJump;                           // 0x009A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallDashAlpha;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundCheckAngle;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpToFallingSection;                             // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitEnemyCheck;                                    // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FirstJumpTimesWithoutHit;                          // 0x00A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       JumpDashInfo;                                      // 0x00A8(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       FallDashInfo;                                      // 0x0C50(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         BounceJumpAirControl;                              // 0x17F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceJumpMaxAcceleration;                         // 0x17FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceJumpMaxWalkSpeed;                            // 0x1800(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceJumpBrakingDeceleration;                     // 0x1804(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceJumpHorizonVelocity;                         // 0x1808(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceJumpVerticalVelocity;                        // 0x180C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpGravityChangeBuffID;                           // 0x1810(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToFall;                                        // 0x1814(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFallTime;                                       // 0x1818(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreArrivedTime;                                    // 0x181C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MoveAbilityTagContainer;                           // 0x1820(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1888[0x8];                                     // 0x1888(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x1890(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ServerMaxWaitingTime;                              // 0x2820(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FallGravityChangeBuffID;                           // 0x2824(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFallingVelocity;                                // 0x2828(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingSpeedThreshold;                             // 0x282C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104061">();
	}
	static class UConfig_104061* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104061>();
	}
};
static_assert(alignof(UConfig_104061) == 0x000010, "Wrong alignment on UConfig_104061");
static_assert(sizeof(UConfig_104061) == 0x002830, "Wrong size on UConfig_104061");
static_assert(offsetof(UConfig_104061, MaxJumpTimes) == 0x000098, "Member 'UConfig_104061::MaxJumpTimes' has a wrong offset!");
static_assert(offsetof(UConfig_104061, bEnableBounceFall) == 0x000099, "Member 'UConfig_104061::bEnableBounceFall' has a wrong offset!");
static_assert(offsetof(UConfig_104061, TimesSwitchToBounceJump) == 0x00009A, "Member 'UConfig_104061::TimesSwitchToBounceJump' has a wrong offset!");
static_assert(offsetof(UConfig_104061, FallDashAlpha) == 0x00009C, "Member 'UConfig_104061::FallDashAlpha' has a wrong offset!");
static_assert(offsetof(UConfig_104061, GroundCheckAngle) == 0x0000A0, "Member 'UConfig_104061::GroundCheckAngle' has a wrong offset!");
static_assert(offsetof(UConfig_104061, bJumpToFallingSection) == 0x0000A4, "Member 'UConfig_104061::bJumpToFallingSection' has a wrong offset!");
static_assert(offsetof(UConfig_104061, bHitEnemyCheck) == 0x0000A5, "Member 'UConfig_104061::bHitEnemyCheck' has a wrong offset!");
static_assert(offsetof(UConfig_104061, FirstJumpTimesWithoutHit) == 0x0000A6, "Member 'UConfig_104061::FirstJumpTimesWithoutHit' has a wrong offset!");
static_assert(offsetof(UConfig_104061, JumpDashInfo) == 0x0000A8, "Member 'UConfig_104061::JumpDashInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104061, FallDashInfo) == 0x000C50, "Member 'UConfig_104061::FallDashInfo' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpAirControl) == 0x0017F8, "Member 'UConfig_104061::BounceJumpAirControl' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpMaxAcceleration) == 0x0017FC, "Member 'UConfig_104061::BounceJumpMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpMaxWalkSpeed) == 0x001800, "Member 'UConfig_104061::BounceJumpMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpBrakingDeceleration) == 0x001804, "Member 'UConfig_104061::BounceJumpBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpHorizonVelocity) == 0x001808, "Member 'UConfig_104061::BounceJumpHorizonVelocity' has a wrong offset!");
static_assert(offsetof(UConfig_104061, BounceJumpVerticalVelocity) == 0x00180C, "Member 'UConfig_104061::BounceJumpVerticalVelocity' has a wrong offset!");
static_assert(offsetof(UConfig_104061, JumpGravityChangeBuffID) == 0x001810, "Member 'UConfig_104061::JumpGravityChangeBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_104061, TimeToFall) == 0x001814, "Member 'UConfig_104061::TimeToFall' has a wrong offset!");
static_assert(offsetof(UConfig_104061, MaxFallTime) == 0x001818, "Member 'UConfig_104061::MaxFallTime' has a wrong offset!");
static_assert(offsetof(UConfig_104061, PreArrivedTime) == 0x00181C, "Member 'UConfig_104061::PreArrivedTime' has a wrong offset!");
static_assert(offsetof(UConfig_104061, MoveAbilityTagContainer) == 0x001820, "Member 'UConfig_104061::MoveAbilityTagContainer' has a wrong offset!");
static_assert(offsetof(UConfig_104061, TraceContext) == 0x001890, "Member 'UConfig_104061::TraceContext' has a wrong offset!");
static_assert(offsetof(UConfig_104061, ServerMaxWaitingTime) == 0x002820, "Member 'UConfig_104061::ServerMaxWaitingTime' has a wrong offset!");
static_assert(offsetof(UConfig_104061, FallGravityChangeBuffID) == 0x002824, "Member 'UConfig_104061::FallGravityChangeBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_104061, MaxFallingVelocity) == 0x002828, "Member 'UConfig_104061::MaxFallingVelocity' has a wrong offset!");
static_assert(offsetof(UConfig_104061, FallingSpeedThreshold) == 0x00282C, "Member 'UConfig_104061::FallingSpeedThreshold' has a wrong offset!");

// Class Hero_1040.Ability_104061
// 0x01A0 (0x2720 - 0x2580)
class UAbility_104061 : public UMarvelGameplayAbility
{
public:
	uint8                                         JumpTimelineIndex;                                 // 0x2580(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2581[0x7];                                     // 0x2581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnJumpAgain;                                       // 0x2588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bIsBounceJumping;                                  // 0x2598(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBounceFalling;                                  // 0x2599(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_259A[0x15E];                                   // 0x259A(0x015E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasPreArrived;                                    // 0x26F8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26F9[0x1F];                                    // 0x26F9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x2718(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ActorPreArrived();
	void ActorStartFalling();
	struct FVector CalcFallDir();
	void CheckVelocity();
	void EndBounceFall();
	void EndBounceJump();
	bool GetIsPlayingJumpTimeline();
	class FName GetJumpTimelineSection();
	void NotifyJumpAgain();
	void PreCheckArrived();
	void StartBounceFall();
	void StartBounceJump();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104061">();
	}
	static class UAbility_104061* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104061>();
	}
};
static_assert(alignof(UAbility_104061) == 0x000008, "Wrong alignment on UAbility_104061");
static_assert(sizeof(UAbility_104061) == 0x002720, "Wrong size on UAbility_104061");
static_assert(offsetof(UAbility_104061, JumpTimelineIndex) == 0x002580, "Member 'UAbility_104061::JumpTimelineIndex' has a wrong offset!");
static_assert(offsetof(UAbility_104061, OnJumpAgain) == 0x002588, "Member 'UAbility_104061::OnJumpAgain' has a wrong offset!");
static_assert(offsetof(UAbility_104061, bIsBounceJumping) == 0x002598, "Member 'UAbility_104061::bIsBounceJumping' has a wrong offset!");
static_assert(offsetof(UAbility_104061, bIsBounceFalling) == 0x002599, "Member 'UAbility_104061::bIsBounceFalling' has a wrong offset!");
static_assert(offsetof(UAbility_104061, bHasPreArrived) == 0x0026F8, "Member 'UAbility_104061::bHasPreArrived' has a wrong offset!");
static_assert(offsetof(UAbility_104061, OwnerCharacter) == 0x002718, "Member 'UAbility_104061::OwnerCharacter' has a wrong offset!");

// Class Hero_1040.MisterFantasticCharacter
// 0x0090 (0x18A0 - 0x1810)
class AMisterFantasticCharacter : public AMarvelBaseCharacter
{
public:
	class UMisterFantasticMoveLogicBaseComponent* MisterFantasticMoveLogic;                          // 0x1810(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1818[0x30];                                    // 0x1818(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasWallStateBack;                                 // 0x1848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMisterFantasticState                         PreState;                                          // 0x1849(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184A[0x2];                                     // 0x184A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NormalTag;                                         // 0x184C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ExpandTag;                                         // 0x1858(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssistantKillCountLogName;                         // 0x1864(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistantKillCountTime;                            // 0x1870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1874[0x4];                                     // 0x1874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMisterFantasticChangeStateDispatcher;            // 0x1878(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             On104032LeftHandHitDispatcher;                     // 0x1888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1898[0x8];                                     // 0x1898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddExpandStateBuff(EMisterFantasticState CurrentState);
	void AddNormalStateBuff(EMisterFantasticState CurrentState);
	void AddSkillEnergy(class UGameplayAbility* InstigateAbility, float Value);
	EMisterFantasticState GetCurrentState();
	void K2_ClearScheduleTimer();
	void K2_ResetSpringArm();
	void OnAbilityActivated(class UGameplayAbility* InAbility);
	void ResetSkillEnergyReduceTiming(const float Timing);
	void TotalAssistantKillCheck();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MisterFantasticCharacter">();
	}
	static class AMisterFantasticCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMisterFantasticCharacter>();
	}
};
static_assert(alignof(AMisterFantasticCharacter) == 0x000010, "Wrong alignment on AMisterFantasticCharacter");
static_assert(sizeof(AMisterFantasticCharacter) == 0x0018A0, "Wrong size on AMisterFantasticCharacter");
static_assert(offsetof(AMisterFantasticCharacter, MisterFantasticMoveLogic) == 0x001810, "Member 'AMisterFantasticCharacter::MisterFantasticMoveLogic' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, bHasWallStateBack) == 0x001848, "Member 'AMisterFantasticCharacter::bHasWallStateBack' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, PreState) == 0x001849, "Member 'AMisterFantasticCharacter::PreState' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, NormalTag) == 0x00184C, "Member 'AMisterFantasticCharacter::NormalTag' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, ExpandTag) == 0x001858, "Member 'AMisterFantasticCharacter::ExpandTag' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, AssistantKillCountLogName) == 0x001864, "Member 'AMisterFantasticCharacter::AssistantKillCountLogName' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, AssistantKillCountTime) == 0x001870, "Member 'AMisterFantasticCharacter::AssistantKillCountTime' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, OnMisterFantasticChangeStateDispatcher) == 0x001878, "Member 'AMisterFantasticCharacter::OnMisterFantasticChangeStateDispatcher' has a wrong offset!");
static_assert(offsetof(AMisterFantasticCharacter, On104032LeftHandHitDispatcher) == 0x001888, "Member 'AMisterFantasticCharacter::On104032LeftHandHitDispatcher' has a wrong offset!");

// Class Hero_1040.MisterFantasticChildActor
// 0x0190 (0x0BF0 - 0x0A60)
class AMisterFantasticChildActor final : public AMarvelCharacterChildActor
{
public:
	struct FGameplayTagContainer                  URODisableTags;                                    // 0x0A60(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FName>        DisableHitShapeTagsMap;                            // 0x0AC8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_B18[0x18];                                     // 0x0B18(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UPrimitiveComponent*>              DynamicCollisionHitShapes;                         // 0x0B30(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  ForceUpdateAnimationTags;                          // 0x0B80(0x0068)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BE8[0x8];                                      // 0x0BE8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterWillDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	bool ShouldEnableURO();
	void UpdateHitShapeCollision();
	void UpdateUROState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MisterFantasticChildActor">();
	}
	static class AMisterFantasticChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMisterFantasticChildActor>();
	}
};
static_assert(alignof(AMisterFantasticChildActor) == 0x000008, "Wrong alignment on AMisterFantasticChildActor");
static_assert(sizeof(AMisterFantasticChildActor) == 0x000BF0, "Wrong size on AMisterFantasticChildActor");
static_assert(offsetof(AMisterFantasticChildActor, URODisableTags) == 0x000A60, "Member 'AMisterFantasticChildActor::URODisableTags' has a wrong offset!");
static_assert(offsetof(AMisterFantasticChildActor, DisableHitShapeTagsMap) == 0x000AC8, "Member 'AMisterFantasticChildActor::DisableHitShapeTagsMap' has a wrong offset!");
static_assert(offsetof(AMisterFantasticChildActor, DynamicCollisionHitShapes) == 0x000B30, "Member 'AMisterFantasticChildActor::DynamicCollisionHitShapes' has a wrong offset!");
static_assert(offsetof(AMisterFantasticChildActor, ForceUpdateAnimationTags) == 0x000B80, "Member 'AMisterFantasticChildActor::ForceUpdateAnimationTags' has a wrong offset!");

// Class Hero_1040.MisterFantasticMovementComponent
// 0x0010 (0x1B70 - 0x1B60)
class UMisterFantasticMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	float                                         OverrideTerminalLimit;                             // 0x1B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B64[0xC];                                     // 0x1B64(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MisterFantasticMovementComponent">();
	}
	static class UMisterFantasticMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMisterFantasticMovementComponent>();
	}
};
static_assert(alignof(UMisterFantasticMovementComponent) == 0x000010, "Wrong alignment on UMisterFantasticMovementComponent");
static_assert(sizeof(UMisterFantasticMovementComponent) == 0x001B70, "Wrong size on UMisterFantasticMovementComponent");
static_assert(offsetof(UMisterFantasticMovementComponent, OverrideTerminalLimit) == 0x001B60, "Member 'UMisterFantasticMovementComponent::OverrideTerminalLimit' has a wrong offset!");

}

