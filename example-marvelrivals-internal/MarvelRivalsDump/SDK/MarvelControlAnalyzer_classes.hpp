#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelControlAnalyzer

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class MarvelControlAnalyzer.ControlAnalyzerSubsystem
// 0x00B0 (0x00E8 - 0x0038)
class UControlAnalyzerSubsystem : public UGameInstanceSubsystem
{
public:
	float                                         GamepadLSThreshold;                                // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadRSThreshold;                                // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLTThreshold;                                // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadRTThreshold;                                // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLogInterval;                                // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScoreWarningCoolDown;                              // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScoreInterval;                                     // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GamepadLogJson;                                    // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VendorId;                                          // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ProductId;                                         // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x78];                                      // 0x0070(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTimerInterval(float NewInterval);
	void K2_OnDeInitialize();
	void K2_OnInitialize();
	void ResetScoreReportConfig(float NewLSThreshold, float NewRSThreshold, float NewLTThreshold, float NewRTThreshold, float NewInterval);
	void SendWarning(const class FString& WarningStr);
	void SetDeviceInfo(int32 VendorId_0, int32 ProductId_0);
	void WriteToLog();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlAnalyzerSubsystem">();
	}
	static class UControlAnalyzerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlAnalyzerSubsystem>();
	}
};
static_assert(alignof(UControlAnalyzerSubsystem) == 0x000008, "Wrong alignment on UControlAnalyzerSubsystem");
static_assert(sizeof(UControlAnalyzerSubsystem) == 0x0000E8, "Wrong size on UControlAnalyzerSubsystem");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadLSThreshold) == 0x000038, "Member 'UControlAnalyzerSubsystem::GamepadLSThreshold' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadRSThreshold) == 0x00003C, "Member 'UControlAnalyzerSubsystem::GamepadRSThreshold' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadLTThreshold) == 0x000040, "Member 'UControlAnalyzerSubsystem::GamepadLTThreshold' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadRTThreshold) == 0x000044, "Member 'UControlAnalyzerSubsystem::GamepadRTThreshold' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadLogInterval) == 0x000048, "Member 'UControlAnalyzerSubsystem::GamepadLogInterval' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, ScoreWarningCoolDown) == 0x00004C, "Member 'UControlAnalyzerSubsystem::ScoreWarningCoolDown' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, ScoreInterval) == 0x000050, "Member 'UControlAnalyzerSubsystem::ScoreInterval' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, GamepadLogJson) == 0x000058, "Member 'UControlAnalyzerSubsystem::GamepadLogJson' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, VendorId) == 0x000068, "Member 'UControlAnalyzerSubsystem::VendorId' has a wrong offset!");
static_assert(offsetof(UControlAnalyzerSubsystem, ProductId) == 0x00006C, "Member 'UControlAnalyzerSubsystem::ProductId' has a wrong offset!");

}

