#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1015

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Hero_1015_structs.hpp"


namespace SDK::Params
{

// Function Hero_1015.Scope_101541.MulticastExecuteHitCue
// 0x0020 (0x0020 - 0x0000)
struct Scope_101541_MulticastExecuteHitCue final
{
public:
	struct FGameplayTag                           InCueTag;                                          // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     InHitResults;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_101541_MulticastExecuteHitCue) == 0x000008, "Wrong alignment on Scope_101541_MulticastExecuteHitCue");
static_assert(sizeof(Scope_101541_MulticastExecuteHitCue) == 0x000020, "Wrong size on Scope_101541_MulticastExecuteHitCue");
static_assert(offsetof(Scope_101541_MulticastExecuteHitCue, InCueTag) == 0x000000, "Member 'Scope_101541_MulticastExecuteHitCue::InCueTag' has a wrong offset!");
static_assert(offsetof(Scope_101541_MulticastExecuteHitCue, InHitResults) == 0x000010, "Member 'Scope_101541_MulticastExecuteHitCue::InHitResults' has a wrong offset!");

// Function Hero_1015.Cue_Ability_Loop_101541.IsAbilitySoundPlaying
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_101541_IsAbilitySoundPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_101541_IsAbilitySoundPlaying) == 0x000001, "Wrong alignment on Cue_Ability_Loop_101541_IsAbilitySoundPlaying");
static_assert(sizeof(Cue_Ability_Loop_101541_IsAbilitySoundPlaying) == 0x000001, "Wrong size on Cue_Ability_Loop_101541_IsAbilitySoundPlaying");
static_assert(offsetof(Cue_Ability_Loop_101541_IsAbilitySoundPlaying, ReturnValue) == 0x000000, "Member 'Cue_Ability_Loop_101541_IsAbilitySoundPlaying::ReturnValue' has a wrong offset!");

// Function Hero_1015.Cue_Ability_Loop_101541.OnCharDeath
// 0x0028 (0x0028 - 0x0000)
struct Cue_Ability_Loop_101541_OnCharDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_101541_OnCharDeath) == 0x000008, "Wrong alignment on Cue_Ability_Loop_101541_OnCharDeath");
static_assert(sizeof(Cue_Ability_Loop_101541_OnCharDeath) == 0x000028, "Wrong size on Cue_Ability_Loop_101541_OnCharDeath");
static_assert(offsetof(Cue_Ability_Loop_101541_OnCharDeath, InSourceAvatar) == 0x000000, "Member 'Cue_Ability_Loop_101541_OnCharDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_101541_OnCharDeath, InTargetAvatar) == 0x000008, "Member 'Cue_Ability_Loop_101541_OnCharDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_101541_OnCharDeath, ModifierParameterHandle) == 0x000010, "Member 'Cue_Ability_Loop_101541_OnCharDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1015.Cue_Ability_Loop_101541.OnSecondResLoaded
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_101541_OnSecondResLoaded final
{
public:
	class AActor*                                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_101541_OnSecondResLoaded) == 0x000008, "Wrong alignment on Cue_Ability_Loop_101541_OnSecondResLoaded");
static_assert(sizeof(Cue_Ability_Loop_101541_OnSecondResLoaded) == 0x000008, "Wrong size on Cue_Ability_Loop_101541_OnSecondResLoaded");
static_assert(offsetof(Cue_Ability_Loop_101541_OnSecondResLoaded, Value) == 0x000000, "Member 'Cue_Ability_Loop_101541_OnSecondResLoaded::Value' has a wrong offset!");

// Function Hero_1015.Cue_Ability_Loop_101541.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Cue_Ability_Loop_101541_OnTagUpdate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExist;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_101541_OnTagUpdate) == 0x000004, "Wrong alignment on Cue_Ability_Loop_101541_OnTagUpdate");
static_assert(sizeof(Cue_Ability_Loop_101541_OnTagUpdate) == 0x000010, "Wrong size on Cue_Ability_Loop_101541_OnTagUpdate");
static_assert(offsetof(Cue_Ability_Loop_101541_OnTagUpdate, Tag) == 0x000000, "Member 'Cue_Ability_Loop_101541_OnTagUpdate::Tag' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_101541_OnTagUpdate, TagExist) == 0x00000C, "Member 'Cue_Ability_Loop_101541_OnTagUpdate::TagExist' has a wrong offset!");

// Function Hero_1015.Cue_Scope_Loop_101541_Common.HandleGroundFXVisibility
// 0x0001 (0x0001 - 0x0000)
struct Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility) == 0x000001, "Wrong alignment on Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility");
static_assert(sizeof(Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility) == 0x000001, "Wrong size on Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility");
static_assert(offsetof(Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility, bVisible) == 0x000000, "Member 'Cue_Scope_Loop_101541_Common_HandleGroundFXVisibility::bVisible' has a wrong offset!");

// Function Hero_1015.Cue_Scope_Loop_101541_Common.OnGetInstigator
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_101541_Common_OnGetInstigator final
{
public:
	class AActor*                                 InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_101541_Common_OnGetInstigator) == 0x000008, "Wrong alignment on Cue_Scope_Loop_101541_Common_OnGetInstigator");
static_assert(sizeof(Cue_Scope_Loop_101541_Common_OnGetInstigator) == 0x000008, "Wrong size on Cue_Scope_Loop_101541_Common_OnGetInstigator");
static_assert(offsetof(Cue_Scope_Loop_101541_Common_OnGetInstigator, InstigatorActor) == 0x000000, "Member 'Cue_Scope_Loop_101541_Common_OnGetInstigator::InstigatorActor' has a wrong offset!");

// Function Hero_1015.Cue_Scope_Loop_101541_Common.OnSelfViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged final
{
public:
	EClientPlayerViewSide                         ViewSide;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged) == 0x000001, "Wrong alignment on Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged");
static_assert(sizeof(Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged) == 0x000001, "Wrong size on Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged");
static_assert(offsetof(Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged, ViewSide) == 0x000000, "Member 'Cue_Scope_Loop_101541_Common_OnSelfViewSideChanged::ViewSide' has a wrong offset!");

// Function Hero_1015.Ability_101541.SetGroupNum
// 0x0008 (0x0008 - 0x0000)
struct Ability_101541_SetGroupNum final
{
public:
	int32                                         NewEnemyNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeamNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101541_SetGroupNum) == 0x000004, "Wrong alignment on Ability_101541_SetGroupNum");
static_assert(sizeof(Ability_101541_SetGroupNum) == 0x000008, "Wrong size on Ability_101541_SetGroupNum");
static_assert(offsetof(Ability_101541_SetGroupNum, NewEnemyNum) == 0x000000, "Member 'Ability_101541_SetGroupNum::NewEnemyNum' has a wrong offset!");
static_assert(offsetof(Ability_101541_SetGroupNum, NewTeamNum) == 0x000004, "Member 'Ability_101541_SetGroupNum::NewTeamNum' has a wrong offset!");

// Function Hero_1015.UIController_101541.CanShow
// 0x0001 (0x0001 - 0x0000)
struct UIController_101541_CanShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101541_CanShow) == 0x000001, "Wrong alignment on UIController_101541_CanShow");
static_assert(sizeof(UIController_101541_CanShow) == 0x000001, "Wrong size on UIController_101541_CanShow");
static_assert(offsetof(UIController_101541_CanShow, ReturnValue) == 0x000000, "Member 'UIController_101541_CanShow::ReturnValue' has a wrong offset!");

// Function Hero_1015.UIController_101541.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct UIController_101541_GetOwningCharacter final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101541_GetOwningCharacter) == 0x000008, "Wrong alignment on UIController_101541_GetOwningCharacter");
static_assert(sizeof(UIController_101541_GetOwningCharacter) == 0x000008, "Wrong size on UIController_101541_GetOwningCharacter");
static_assert(offsetof(UIController_101541_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'UIController_101541_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function Hero_1015.UIController_101541.UpdateExtraWidgetVisible
// 0x0001 (0x0001 - 0x0000)
struct UIController_101541_UpdateExtraWidgetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101541_UpdateExtraWidgetVisible) == 0x000001, "Wrong alignment on UIController_101541_UpdateExtraWidgetVisible");
static_assert(sizeof(UIController_101541_UpdateExtraWidgetVisible) == 0x000001, "Wrong size on UIController_101541_UpdateExtraWidgetVisible");
static_assert(offsetof(UIController_101541_UpdateExtraWidgetVisible, bVisible) == 0x000000, "Member 'UIController_101541_UpdateExtraWidgetVisible::bVisible' has a wrong offset!");

// Function Hero_1015.UIController_101541.UpdateGroupNum
// 0x0008 (0x0008 - 0x0000)
struct UIController_101541_UpdateGroupNum final
{
public:
	int32                                         EnemyNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeammateNum;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101541_UpdateGroupNum) == 0x000004, "Wrong alignment on UIController_101541_UpdateGroupNum");
static_assert(sizeof(UIController_101541_UpdateGroupNum) == 0x000008, "Wrong size on UIController_101541_UpdateGroupNum");
static_assert(offsetof(UIController_101541_UpdateGroupNum, EnemyNum) == 0x000000, "Member 'UIController_101541_UpdateGroupNum::EnemyNum' has a wrong offset!");
static_assert(offsetof(UIController_101541_UpdateGroupNum, TeammateNum) == 0x000004, "Member 'UIController_101541_UpdateGroupNum::TeammateNum' has a wrong offset!");

// Function Hero_1015.Ability_101561.GetAbilityConfig
// 0x0008 (0x0008 - 0x0000)
struct Ability_101561_GetAbilityConfig final
{
public:
	class UConfig_101561*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_GetAbilityConfig) == 0x000008, "Wrong alignment on Ability_101561_GetAbilityConfig");
static_assert(sizeof(Ability_101561_GetAbilityConfig) == 0x000008, "Wrong size on Ability_101561_GetAbilityConfig");
static_assert(offsetof(Ability_101561_GetAbilityConfig, ReturnValue) == 0x000000, "Member 'Ability_101561_GetAbilityConfig::ReturnValue' has a wrong offset!");

// Function Hero_1015.Ability_101561.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct Ability_101561_GetOwnerCharacter final
{
public:
	class AStormCharacter*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_GetOwnerCharacter) == 0x000008, "Wrong alignment on Ability_101561_GetOwnerCharacter");
static_assert(sizeof(Ability_101561_GetOwnerCharacter) == 0x000008, "Wrong size on Ability_101561_GetOwnerCharacter");
static_assert(offsetof(Ability_101561_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'Ability_101561_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function Hero_1015.Ability_101561.HandleSelectionMoveParam
// 0x0024 (0x0024 - 0x0000)
struct Ability_101561_HandleSelectionMoveParam final
{
public:
	struct FStormMoveConfig                       InMoveConfig;                                      // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsWalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCache;                                          // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearSpeed;                                       // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101561_HandleSelectionMoveParam) == 0x000004, "Wrong alignment on Ability_101561_HandleSelectionMoveParam");
static_assert(sizeof(Ability_101561_HandleSelectionMoveParam) == 0x000024, "Wrong size on Ability_101561_HandleSelectionMoveParam");
static_assert(offsetof(Ability_101561_HandleSelectionMoveParam, InMoveConfig) == 0x000000, "Member 'Ability_101561_HandleSelectionMoveParam::InMoveConfig' has a wrong offset!");
static_assert(offsetof(Ability_101561_HandleSelectionMoveParam, bIsWalking) == 0x000020, "Member 'Ability_101561_HandleSelectionMoveParam::bIsWalking' has a wrong offset!");
static_assert(offsetof(Ability_101561_HandleSelectionMoveParam, bIsCache) == 0x000021, "Member 'Ability_101561_HandleSelectionMoveParam::bIsCache' has a wrong offset!");
static_assert(offsetof(Ability_101561_HandleSelectionMoveParam, bClearSpeed) == 0x000022, "Member 'Ability_101561_HandleSelectionMoveParam::bClearSpeed' has a wrong offset!");

// Function Hero_1015.Ability_101561.NetMulticast_ActivateFireHurricane
// 0x0010 (0x0010 - 0x0000)
struct Ability_101561_NetMulticast_ActivateFireHurricane final
{
public:
	TArray<class AActor*>                         InTargets;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_NetMulticast_ActivateFireHurricane) == 0x000008, "Wrong alignment on Ability_101561_NetMulticast_ActivateFireHurricane");
static_assert(sizeof(Ability_101561_NetMulticast_ActivateFireHurricane) == 0x000010, "Wrong size on Ability_101561_NetMulticast_ActivateFireHurricane");
static_assert(offsetof(Ability_101561_NetMulticast_ActivateFireHurricane, InTargets) == 0x000000, "Member 'Ability_101561_NetMulticast_ActivateFireHurricane::InTargets' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnHurricaneFinished
// 0x0003 (0x0003 - 0x0000)
struct Ability_101561_OnHurricaneFinished final
{
public:
	bool                                          bIsDeath;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanceled;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveByTimerOrMT;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnHurricaneFinished) == 0x000001, "Wrong alignment on Ability_101561_OnHurricaneFinished");
static_assert(sizeof(Ability_101561_OnHurricaneFinished) == 0x000003, "Wrong size on Ability_101561_OnHurricaneFinished");
static_assert(offsetof(Ability_101561_OnHurricaneFinished, bIsDeath) == 0x000000, "Member 'Ability_101561_OnHurricaneFinished::bIsDeath' has a wrong offset!");
static_assert(offsetof(Ability_101561_OnHurricaneFinished, bCanceled) == 0x000001, "Member 'Ability_101561_OnHurricaneFinished::bCanceled' has a wrong offset!");
static_assert(offsetof(Ability_101561_OnHurricaneFinished, bActiveByTimerOrMT) == 0x000002, "Member 'Ability_101561_OnHurricaneFinished::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnLocateFinish
// 0x0001 (0x0001 - 0x0000)
struct Ability_101561_OnLocateFinish final
{
public:
	bool                                          bActiveByTimerOrMT;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnLocateFinish) == 0x000001, "Wrong alignment on Ability_101561_OnLocateFinish");
static_assert(sizeof(Ability_101561_OnLocateFinish) == 0x000001, "Wrong size on Ability_101561_OnLocateFinish");
static_assert(offsetof(Ability_101561_OnLocateFinish, bActiveByTimerOrMT) == 0x000000, "Member 'Ability_101561_OnLocateFinish::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct Ability_101561_OnMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101561_OnMovementModeChanged) == 0x000008, "Wrong alignment on Ability_101561_OnMovementModeChanged");
static_assert(sizeof(Ability_101561_OnMovementModeChanged) == 0x000010, "Wrong size on Ability_101561_OnMovementModeChanged");
static_assert(offsetof(Ability_101561_OnMovementModeChanged, Character) == 0x000000, "Member 'Ability_101561_OnMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(Ability_101561_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'Ability_101561_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(Ability_101561_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'Ability_101561_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnNotifyCharacterChange
// 0x0001 (0x0001 - 0x0000)
struct Ability_101561_OnNotifyCharacterChange final
{
public:
	EStormCharState                               NewStormCharState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnNotifyCharacterChange) == 0x000001, "Wrong alignment on Ability_101561_OnNotifyCharacterChange");
static_assert(sizeof(Ability_101561_OnNotifyCharacterChange) == 0x000001, "Wrong size on Ability_101561_OnNotifyCharacterChange");
static_assert(offsetof(Ability_101561_OnNotifyCharacterChange, NewStormCharState) == 0x000000, "Member 'Ability_101561_OnNotifyCharacterChange::NewStormCharState' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnPressActivateHurricaneKey
// 0x0004 (0x0004 - 0x0000)
struct Ability_101561_OnPressActivateHurricaneKey final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnPressActivateHurricaneKey) == 0x000004, "Wrong alignment on Ability_101561_OnPressActivateHurricaneKey");
static_assert(sizeof(Ability_101561_OnPressActivateHurricaneKey) == 0x000004, "Wrong size on Ability_101561_OnPressActivateHurricaneKey");
static_assert(offsetof(Ability_101561_OnPressActivateHurricaneKey, TimeWaited) == 0x000000, "Member 'Ability_101561_OnPressActivateHurricaneKey::TimeWaited' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnPressCameraAnimationKey
// 0x0004 (0x0004 - 0x0000)
struct Ability_101561_OnPressCameraAnimationKey final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnPressCameraAnimationKey) == 0x000004, "Wrong alignment on Ability_101561_OnPressCameraAnimationKey");
static_assert(sizeof(Ability_101561_OnPressCameraAnimationKey) == 0x000004, "Wrong size on Ability_101561_OnPressCameraAnimationKey");
static_assert(offsetof(Ability_101561_OnPressCameraAnimationKey, TimeWaited) == 0x000000, "Member 'Ability_101561_OnPressCameraAnimationKey::TimeWaited' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnReleaseCameraAnimationKey
// 0x0004 (0x0004 - 0x0000)
struct Ability_101561_OnReleaseCameraAnimationKey final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnReleaseCameraAnimationKey) == 0x000004, "Wrong alignment on Ability_101561_OnReleaseCameraAnimationKey");
static_assert(sizeof(Ability_101561_OnReleaseCameraAnimationKey) == 0x000004, "Wrong size on Ability_101561_OnReleaseCameraAnimationKey");
static_assert(offsetof(Ability_101561_OnReleaseCameraAnimationKey, TimeWaited) == 0x000000, "Member 'Ability_101561_OnReleaseCameraAnimationKey::TimeWaited' has a wrong offset!");

// Function Hero_1015.Ability_101561.OnSpawnSuccess
// 0x0170 (0x0170 - 0x0000)
struct Ability_101561_OnSpawnSuccess final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101561_OnSpawnSuccess) == 0x000008, "Wrong alignment on Ability_101561_OnSpawnSuccess");
static_assert(sizeof(Ability_101561_OnSpawnSuccess) == 0x000170, "Wrong size on Ability_101561_OnSpawnSuccess");
static_assert(offsetof(Ability_101561_OnSpawnSuccess, SpawnActor) == 0x000000, "Member 'Ability_101561_OnSpawnSuccess::SpawnActor' has a wrong offset!");
static_assert(offsetof(Ability_101561_OnSpawnSuccess, Data) == 0x000008, "Member 'Ability_101561_OnSpawnSuccess::Data' has a wrong offset!");

// Function Hero_1015.Cue_Ability_Loop_10157102.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10157102_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10157102_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10157102_OnPlayerViewSideChanged");
static_assert(sizeof(Cue_Ability_Loop_10157102_OnPlayerViewSideChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10157102_OnPlayerViewSideChanged");
static_assert(offsetof(Cue_Ability_Loop_10157102_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'Cue_Ability_Loop_10157102_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1015.UIController_101571.ShowThrowActionTips
// 0x0001 (0x0001 - 0x0000)
struct UIController_101571_ShowThrowActionTips final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_101571_ShowThrowActionTips) == 0x000001, "Wrong alignment on UIController_101571_ShowThrowActionTips");
static_assert(sizeof(UIController_101571_ShowThrowActionTips) == 0x000001, "Wrong size on UIController_101571_ShowThrowActionTips");
static_assert(offsetof(UIController_101571_ShowThrowActionTips, bShow) == 0x000000, "Member 'UIController_101571_ShowThrowActionTips::bShow' has a wrong offset!");

// Function Hero_1015.Ability_101581.ClientSpawnSplashScope
// 0x0020 (0x0020 - 0x0000)
struct Ability_101581_ClientSpawnSplashScope final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachTgt;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101581_ClientSpawnSplashScope) == 0x000008, "Wrong alignment on Ability_101581_ClientSpawnSplashScope");
static_assert(sizeof(Ability_101581_ClientSpawnSplashScope) == 0x000020, "Wrong size on Ability_101581_ClientSpawnSplashScope");
static_assert(offsetof(Ability_101581_ClientSpawnSplashScope, Location) == 0x000000, "Member 'Ability_101581_ClientSpawnSplashScope::Location' has a wrong offset!");
static_assert(offsetof(Ability_101581_ClientSpawnSplashScope, AttachTgt) == 0x000018, "Member 'Ability_101581_ClientSpawnSplashScope::AttachTgt' has a wrong offset!");

// Function Hero_1015.Ability_101581.OnSplashScopeInitialized
// 0x0010 (0x0010 - 0x0000)
struct Ability_101581_OnSplashScopeInitialized final
{
public:
	class UMarvelAgentTraceComponent*             TraceComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectComp;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101581_OnSplashScopeInitialized) == 0x000008, "Wrong alignment on Ability_101581_OnSplashScopeInitialized");
static_assert(sizeof(Ability_101581_OnSplashScopeInitialized) == 0x000010, "Wrong size on Ability_101581_OnSplashScopeInitialized");
static_assert(offsetof(Ability_101581_OnSplashScopeInitialized, TraceComp) == 0x000000, "Member 'Ability_101581_OnSplashScopeInitialized::TraceComp' has a wrong offset!");
static_assert(offsetof(Ability_101581_OnSplashScopeInitialized, EffectComp) == 0x000008, "Member 'Ability_101581_OnSplashScopeInitialized::EffectComp' has a wrong offset!");

// Function Hero_1015.Ability_101581.ServerSpawnSplashScope
// 0x0020 (0x0020 - 0x0000)
struct Ability_101581_ServerSpawnSplashScope final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachTgt;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101581_ServerSpawnSplashScope) == 0x000008, "Wrong alignment on Ability_101581_ServerSpawnSplashScope");
static_assert(sizeof(Ability_101581_ServerSpawnSplashScope) == 0x000020, "Wrong size on Ability_101581_ServerSpawnSplashScope");
static_assert(offsetof(Ability_101581_ServerSpawnSplashScope, Location) == 0x000000, "Member 'Ability_101581_ServerSpawnSplashScope::Location' has a wrong offset!");
static_assert(offsetof(Ability_101581_ServerSpawnSplashScope, AttachTgt) == 0x000018, "Member 'Ability_101581_ServerSpawnSplashScope::AttachTgt' has a wrong offset!");

// Function Hero_1015.Ability_101581.IsTargetCharValidToSplash
// 0x0010 (0x0010 - 0x0000)
struct Ability_101581_IsTargetCharValidToSplash final
{
public:
	class AMarvelBaseCharacter*                   TargetChar;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101581_IsTargetCharValidToSplash) == 0x000008, "Wrong alignment on Ability_101581_IsTargetCharValidToSplash");
static_assert(sizeof(Ability_101581_IsTargetCharValidToSplash) == 0x000010, "Wrong size on Ability_101581_IsTargetCharValidToSplash");
static_assert(offsetof(Ability_101581_IsTargetCharValidToSplash, TargetChar) == 0x000000, "Member 'Ability_101581_IsTargetCharValidToSplash::TargetChar' has a wrong offset!");
static_assert(offsetof(Ability_101581_IsTargetCharValidToSplash, ReturnValue) == 0x000008, "Member 'Ability_101581_IsTargetCharValidToSplash::ReturnValue' has a wrong offset!");

// Function Hero_1015.EffectiveComponent_101581_Common.ActorHasSpecialTag
// 0x0018 (0x0018 - 0x0000)
struct EffectiveComponent_101581_Common_ActorHasSpecialTag final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UConfig_101581*                   Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EffectiveComponent_101581_Common_ActorHasSpecialTag) == 0x000008, "Wrong alignment on EffectiveComponent_101581_Common_ActorHasSpecialTag");
static_assert(sizeof(EffectiveComponent_101581_Common_ActorHasSpecialTag) == 0x000018, "Wrong size on EffectiveComponent_101581_Common_ActorHasSpecialTag");
static_assert(offsetof(EffectiveComponent_101581_Common_ActorHasSpecialTag, InActor) == 0x000000, "Member 'EffectiveComponent_101581_Common_ActorHasSpecialTag::InActor' has a wrong offset!");
static_assert(offsetof(EffectiveComponent_101581_Common_ActorHasSpecialTag, Config) == 0x000008, "Member 'EffectiveComponent_101581_Common_ActorHasSpecialTag::Config' has a wrong offset!");
static_assert(offsetof(EffectiveComponent_101581_Common_ActorHasSpecialTag, ReturnValue) == 0x000010, "Member 'EffectiveComponent_101581_Common_ActorHasSpecialTag::ReturnValue' has a wrong offset!");

// Function Hero_1015.SelectRegionCameraActor.OnRep_CurrentCameraState
// 0x0001 (0x0001 - 0x0000)
struct SelectRegionCameraActor_OnRep_CurrentCameraState final
{
public:
	EStormCameraState                             OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectRegionCameraActor_OnRep_CurrentCameraState) == 0x000001, "Wrong alignment on SelectRegionCameraActor_OnRep_CurrentCameraState");
static_assert(sizeof(SelectRegionCameraActor_OnRep_CurrentCameraState) == 0x000001, "Wrong size on SelectRegionCameraActor_OnRep_CurrentCameraState");
static_assert(offsetof(SelectRegionCameraActor_OnRep_CurrentCameraState, OldState) == 0x000000, "Member 'SelectRegionCameraActor_OnRep_CurrentCameraState::OldState' has a wrong offset!");

// Function Hero_1015.SelectionRegionCue_101561.OnCameraStateChange
// 0x0001 (0x0001 - 0x0000)
struct SelectionRegionCue_101561_OnCameraStateChange final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionRegionCue_101561_OnCameraStateChange) == 0x000001, "Wrong alignment on SelectionRegionCue_101561_OnCameraStateChange");
static_assert(sizeof(SelectionRegionCue_101561_OnCameraStateChange) == 0x000001, "Wrong size on SelectionRegionCue_101561_OnCameraStateChange");
static_assert(offsetof(SelectionRegionCue_101561_OnCameraStateChange, bIsActive) == 0x000000, "Member 'SelectionRegionCue_101561_OnCameraStateChange::bIsActive' has a wrong offset!");

// Function Hero_1015.StormChildActor.ApplyHurricaneMeshMaterial
// 0x0020 (0x0020 - 0x0000)
struct StormChildActor_ApplyHurricaneMeshMaterial final
{
public:
	struct FVector                                FxData;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireAlpha;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StormChildActor_ApplyHurricaneMeshMaterial) == 0x000008, "Wrong alignment on StormChildActor_ApplyHurricaneMeshMaterial");
static_assert(sizeof(StormChildActor_ApplyHurricaneMeshMaterial) == 0x000020, "Wrong size on StormChildActor_ApplyHurricaneMeshMaterial");
static_assert(offsetof(StormChildActor_ApplyHurricaneMeshMaterial, FxData) == 0x000000, "Member 'StormChildActor_ApplyHurricaneMeshMaterial::FxData' has a wrong offset!");
static_assert(offsetof(StormChildActor_ApplyHurricaneMeshMaterial, FireAlpha) == 0x000018, "Member 'StormChildActor_ApplyHurricaneMeshMaterial::FireAlpha' has a wrong offset!");

// Function Hero_1015.StormChildActor.GetStormChar
// 0x0008 (0x0008 - 0x0000)
struct StormChildActor_GetStormChar final
{
public:
	class AStormCharacter*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormChildActor_GetStormChar) == 0x000008, "Wrong alignment on StormChildActor_GetStormChar");
static_assert(sizeof(StormChildActor_GetStormChar) == 0x000008, "Wrong size on StormChildActor_GetStormChar");
static_assert(offsetof(StormChildActor_GetStormChar, ReturnValue) == 0x000000, "Member 'StormChildActor_GetStormChar::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormChildActor.OnViewingSideChanged
// 0x0001 (0x0001 - 0x0000)
struct StormChildActor_OnViewingSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormChildActor_OnViewingSideChanged) == 0x000001, "Wrong alignment on StormChildActor_OnViewingSideChanged");
static_assert(sizeof(StormChildActor_OnViewingSideChanged) == 0x000001, "Wrong size on StormChildActor_OnViewingSideChanged");
static_assert(offsetof(StormChildActor_OnViewingSideChanged, InViewSide) == 0x000000, "Member 'StormChildActor_OnViewingSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1015.StormChildActor.UpdatePhysicsOn
// 0x0004 (0x0004 - 0x0000)
struct StormChildActor_UpdatePhysicsOn final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormChildActor_UpdatePhysicsOn) == 0x000004, "Wrong alignment on StormChildActor_UpdatePhysicsOn");
static_assert(sizeof(StormChildActor_UpdatePhysicsOn) == 0x000004, "Wrong size on StormChildActor_UpdatePhysicsOn");
static_assert(offsetof(StormChildActor_UpdatePhysicsOn, DeltaTime) == 0x000000, "Member 'StormChildActor_UpdatePhysicsOn::DeltaTime' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetDisToCeiling
// 0x0004 (0x0004 - 0x0000)
struct StormCharacter_GetDisToCeiling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetDisToCeiling) == 0x000004, "Wrong alignment on StormCharacter_GetDisToCeiling");
static_assert(sizeof(StormCharacter_GetDisToCeiling) == 0x000004, "Wrong size on StormCharacter_GetDisToCeiling");
static_assert(offsetof(StormCharacter_GetDisToCeiling, ReturnValue) == 0x000000, "Member 'StormCharacter_GetDisToCeiling::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.InterpSpringToCustomViewOffset
// 0x0038 (0x0038 - 0x0000)
struct StormCharacter_InterpSpringToCustomViewOffset final
{
public:
	struct FVector                                TargetLocationOffset;                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotationOffset;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StormCharacter_InterpSpringToCustomViewOffset) == 0x000008, "Wrong alignment on StormCharacter_InterpSpringToCustomViewOffset");
static_assert(sizeof(StormCharacter_InterpSpringToCustomViewOffset) == 0x000038, "Wrong size on StormCharacter_InterpSpringToCustomViewOffset");
static_assert(offsetof(StormCharacter_InterpSpringToCustomViewOffset, TargetLocationOffset) == 0x000000, "Member 'StormCharacter_InterpSpringToCustomViewOffset::TargetLocationOffset' has a wrong offset!");
static_assert(offsetof(StormCharacter_InterpSpringToCustomViewOffset, TargetRotationOffset) == 0x000018, "Member 'StormCharacter_InterpSpringToCustomViewOffset::TargetRotationOffset' has a wrong offset!");
static_assert(offsetof(StormCharacter_InterpSpringToCustomViewOffset, InterpSpeed) == 0x000030, "Member 'StormCharacter_InterpSpringToCustomViewOffset::InterpSpeed' has a wrong offset!");

// Function Hero_1015.StormCharacter.OnRep_CameraState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_OnRep_CameraState final
{
public:
	EStormCameraState                             OldCameraState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_OnRep_CameraState) == 0x000001, "Wrong alignment on StormCharacter_OnRep_CameraState");
static_assert(sizeof(StormCharacter_OnRep_CameraState) == 0x000001, "Wrong size on StormCharacter_OnRep_CameraState");
static_assert(offsetof(StormCharacter_OnRep_CameraState, OldCameraState) == 0x000000, "Member 'StormCharacter_OnRep_CameraState::OldCameraState' has a wrong offset!");

// Function Hero_1015.StormCharacter.SafeMove
// 0x0018 (0x0018 - 0x0000)
struct StormCharacter_SafeMove final
{
public:
	struct FVector                                Delta;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_SafeMove) == 0x000008, "Wrong alignment on StormCharacter_SafeMove");
static_assert(sizeof(StormCharacter_SafeMove) == 0x000018, "Wrong size on StormCharacter_SafeMove");
static_assert(offsetof(StormCharacter_SafeMove, Delta) == 0x000000, "Member 'StormCharacter_SafeMove::Delta' has a wrong offset!");

// Function Hero_1015.StormCharacter.SetCameraState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_SetCameraState final
{
public:
	EStormCameraState                             State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_SetCameraState) == 0x000001, "Wrong alignment on StormCharacter_SetCameraState");
static_assert(sizeof(StormCharacter_SetCameraState) == 0x000001, "Wrong size on StormCharacter_SetCameraState");
static_assert(offsetof(StormCharacter_SetCameraState, State) == 0x000000, "Member 'StormCharacter_SetCameraState::State' has a wrong offset!");

// Function Hero_1015.StormCharacter.SetCurrentState
// 0x0002 (0x0002 - 0x0000)
struct StormCharacter_SetCurrentState final
{
public:
	EStormCharState                               State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveByTimerOrMT;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_SetCurrentState) == 0x000001, "Wrong alignment on StormCharacter_SetCurrentState");
static_assert(sizeof(StormCharacter_SetCurrentState) == 0x000002, "Wrong size on StormCharacter_SetCurrentState");
static_assert(offsetof(StormCharacter_SetCurrentState, State) == 0x000000, "Member 'StormCharacter_SetCurrentState::State' has a wrong offset!");
static_assert(offsetof(StormCharacter_SetCurrentState, bActiveByTimerOrMT) == 0x000001, "Member 'StormCharacter_SetCurrentState::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.SetHurricaneFireState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_SetHurricaneFireState final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_SetHurricaneFireState) == 0x000001, "Wrong alignment on StormCharacter_SetHurricaneFireState");
static_assert(sizeof(StormCharacter_SetHurricaneFireState) == 0x000001, "Wrong size on StormCharacter_SetHurricaneFireState");
static_assert(offsetof(StormCharacter_SetHurricaneFireState, InState) == 0x000000, "Member 'StormCharacter_SetHurricaneFireState::InState' has a wrong offset!");

// Function Hero_1015.StormCharacter.SweepQueryWalkingHurricaneLocation
// 0x0020 (0x0020 - 0x0000)
struct StormCharacter_SweepQueryWalkingHurricaneLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsImpact;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StormCharacter_SweepQueryWalkingHurricaneLocation) == 0x000008, "Wrong alignment on StormCharacter_SweepQueryWalkingHurricaneLocation");
static_assert(sizeof(StormCharacter_SweepQueryWalkingHurricaneLocation) == 0x000020, "Wrong size on StormCharacter_SweepQueryWalkingHurricaneLocation");
static_assert(offsetof(StormCharacter_SweepQueryWalkingHurricaneLocation, OutLocation) == 0x000000, "Member 'StormCharacter_SweepQueryWalkingHurricaneLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(StormCharacter_SweepQueryWalkingHurricaneLocation, bIsImpact) == 0x000018, "Member 'StormCharacter_SweepQueryWalkingHurricaneLocation::bIsImpact' has a wrong offset!");
static_assert(offsetof(StormCharacter_SweepQueryWalkingHurricaneLocation, ReturnValue) == 0x000019, "Member 'StormCharacter_SweepQueryWalkingHurricaneLocation::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.SwitchSelectionRegionTopView
// 0x0003 (0x0003 - 0x0000)
struct StormCharacter_SwitchSelectionRegionTopView final
{
public:
	bool                                          bToTopView;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonSwitch;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveByTimerOrMT;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_SwitchSelectionRegionTopView) == 0x000001, "Wrong alignment on StormCharacter_SwitchSelectionRegionTopView");
static_assert(sizeof(StormCharacter_SwitchSelectionRegionTopView) == 0x000003, "Wrong size on StormCharacter_SwitchSelectionRegionTopView");
static_assert(offsetof(StormCharacter_SwitchSelectionRegionTopView, bToTopView) == 0x000000, "Member 'StormCharacter_SwitchSelectionRegionTopView::bToTopView' has a wrong offset!");
static_assert(offsetof(StormCharacter_SwitchSelectionRegionTopView, bButtonSwitch) == 0x000001, "Member 'StormCharacter_SwitchSelectionRegionTopView::bButtonSwitch' has a wrong offset!");
static_assert(offsetof(StormCharacter_SwitchSelectionRegionTopView, bActiveByTimerOrMT) == 0x000002, "Member 'StormCharacter_SwitchSelectionRegionTopView::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.ToCharacterState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_ToCharacterState final
{
public:
	bool                                          bActiveByTimerOrMT;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_ToCharacterState) == 0x000001, "Wrong alignment on StormCharacter_ToCharacterState");
static_assert(sizeof(StormCharacter_ToCharacterState) == 0x000001, "Wrong size on StormCharacter_ToCharacterState");
static_assert(offsetof(StormCharacter_ToCharacterState, bActiveByTimerOrMT) == 0x000000, "Member 'StormCharacter_ToCharacterState::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.ToHurricanState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_ToHurricanState final
{
public:
	bool                                          bActiveByTimerOrMT;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_ToHurricanState) == 0x000001, "Wrong alignment on StormCharacter_ToHurricanState");
static_assert(sizeof(StormCharacter_ToHurricanState) == 0x000001, "Wrong size on StormCharacter_ToHurricanState");
static_assert(offsetof(StormCharacter_ToHurricanState, bActiveByTimerOrMT) == 0x000000, "Member 'StormCharacter_ToHurricanState::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.ToPreHurricanState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_ToPreHurricanState final
{
public:
	bool                                          bActiveByTimerOrMT;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_ToPreHurricanState) == 0x000001, "Wrong alignment on StormCharacter_ToPreHurricanState");
static_assert(sizeof(StormCharacter_ToPreHurricanState) == 0x000001, "Wrong size on StormCharacter_ToPreHurricanState");
static_assert(offsetof(StormCharacter_ToPreHurricanState, bActiveByTimerOrMT) == 0x000000, "Member 'StormCharacter_ToPreHurricanState::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.ToSelectionRegionState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_ToSelectionRegionState final
{
public:
	bool                                          bActiveByTimerOrMT;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_ToSelectionRegionState) == 0x000001, "Wrong alignment on StormCharacter_ToSelectionRegionState");
static_assert(sizeof(StormCharacter_ToSelectionRegionState) == 0x000001, "Wrong size on StormCharacter_ToSelectionRegionState");
static_assert(offsetof(StormCharacter_ToSelectionRegionState, bActiveByTimerOrMT) == 0x000000, "Member 'StormCharacter_ToSelectionRegionState::bActiveByTimerOrMT' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetCameraState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_GetCameraState final
{
public:
	EStormCameraState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetCameraState) == 0x000001, "Wrong alignment on StormCharacter_GetCameraState");
static_assert(sizeof(StormCharacter_GetCameraState) == 0x000001, "Wrong size on StormCharacter_GetCameraState");
static_assert(offsetof(StormCharacter_GetCameraState, ReturnValue) == 0x000000, "Member 'StormCharacter_GetCameraState::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_GetCurrentState final
{
public:
	EStormCharState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetCurrentState) == 0x000001, "Wrong alignment on StormCharacter_GetCurrentState");
static_assert(sizeof(StormCharacter_GetCurrentState) == 0x000001, "Wrong size on StormCharacter_GetCurrentState");
static_assert(offsetof(StormCharacter_GetCurrentState, ReturnValue) == 0x000000, "Member 'StormCharacter_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetCurrentStateDuration
// 0x0004 (0x0004 - 0x0000)
struct StormCharacter_GetCurrentStateDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetCurrentStateDuration) == 0x000004, "Wrong alignment on StormCharacter_GetCurrentStateDuration");
static_assert(sizeof(StormCharacter_GetCurrentStateDuration) == 0x000004, "Wrong size on StormCharacter_GetCurrentStateDuration");
static_assert(offsetof(StormCharacter_GetCurrentStateDuration, ReturnValue) == 0x000000, "Member 'StormCharacter_GetCurrentStateDuration::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetCurrentWeatherType
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_GetCurrentWeatherType final
{
public:
	EStormCharWeatherType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetCurrentWeatherType) == 0x000001, "Wrong alignment on StormCharacter_GetCurrentWeatherType");
static_assert(sizeof(StormCharacter_GetCurrentWeatherType) == 0x000001, "Wrong size on StormCharacter_GetCurrentWeatherType");
static_assert(offsetof(StormCharacter_GetCurrentWeatherType, ReturnValue) == 0x000000, "Member 'StormCharacter_GetCurrentWeatherType::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.GetDefaultEnableCameraLag
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_GetDefaultEnableCameraLag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_GetDefaultEnableCameraLag) == 0x000001, "Wrong alignment on StormCharacter_GetDefaultEnableCameraLag");
static_assert(sizeof(StormCharacter_GetDefaultEnableCameraLag) == 0x000001, "Wrong size on StormCharacter_GetDefaultEnableCameraLag");
static_assert(offsetof(StormCharacter_GetDefaultEnableCameraLag, ReturnValue) == 0x000000, "Member 'StormCharacter_GetDefaultEnableCameraLag::ReturnValue' has a wrong offset!");

// Function Hero_1015.StormCharacter.IsSelectionRegionTopView
// 0x0001 (0x0001 - 0x0000)
struct StormCharacter_IsSelectionRegionTopView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StormCharacter_IsSelectionRegionTopView) == 0x000001, "Wrong alignment on StormCharacter_IsSelectionRegionTopView");
static_assert(sizeof(StormCharacter_IsSelectionRegionTopView) == 0x000001, "Wrong size on StormCharacter_IsSelectionRegionTopView");
static_assert(offsetof(StormCharacter_IsSelectionRegionTopView, ReturnValue) == 0x000000, "Member 'StormCharacter_IsSelectionRegionTopView::ReturnValue' has a wrong offset!");

}

