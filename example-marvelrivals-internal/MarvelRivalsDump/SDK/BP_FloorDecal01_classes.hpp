#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloorDecal01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MarvelLevel_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FloorDecal01.BP_FloorDecal01_C
// 0x0110 (0x05B8 - 0x04A8)
class ABP_FloorDecal01_C final : public AEnvironmentStaticActor
{
public:
	class USplineComponent*                       Spline1;                                           // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Spline_mesh;                                       // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynamic_Material;                                  // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Or;                                                // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UVtiling;                                          // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Mask;                                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ColorTex;                                          // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         BaseTiling;                                        // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ColorAlpha_Mul;                                    // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Color_Mul;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MRO;                                               // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Normal;                                            // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Metallic_Mul;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roughness_Mul;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normal_Mul;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Linear;                                            // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplinePointType                              SplineType;                                        // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_532[0x6];                                      // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineMeshComponent*                   Spline_local;                                      // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              U_Offset;                                          // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_Instance;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              V_Offset;                                          // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumMasks;                                          // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMask;                                       // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Uv_offset;                                         // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartTangent;                                      // 0x0580(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndTangent;                                        // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RenderSort;                                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void OnRep_NumMasks();
	void OnRep_CurrentMask();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloorDecal01_C">();
	}
	static class ABP_FloorDecal01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FloorDecal01_C>();
	}
};
//static_assert(alignof(ABP_FloorDecal01_C) == 0x000008, "Wrong alignment on ABP_FloorDecal01_C");
//static_assert(sizeof(ABP_FloorDecal01_C) == 0x0005B8, "Wrong size on ABP_FloorDecal01_C");
//static_assert(offsetof(ABP_FloorDecal01_C, Spline1) == 0x0004A8, "Member 'ABP_FloorDecal01_C::Spline1' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Spline_mesh) == 0x0004B0, "Member 'ABP_FloorDecal01_C::Spline_mesh' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Dynamic_Material) == 0x0004B8, "Member 'ABP_FloorDecal01_C::Dynamic_Material' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Or) == 0x0004C0, "Member 'ABP_FloorDecal01_C::Or' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, UVtiling) == 0x0004D0, "Member 'ABP_FloorDecal01_C::UVtiling' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Mask) == 0x0004D8, "Member 'ABP_FloorDecal01_C::Mask' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Roughness) == 0x0004E0, "Member 'ABP_FloorDecal01_C::Roughness' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Opacity) == 0x0004E4, "Member 'ABP_FloorDecal01_C::Opacity' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, ColorTex) == 0x0004E8, "Member 'ABP_FloorDecal01_C::ColorTex' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, BaseTiling) == 0x0004F0, "Member 'ABP_FloorDecal01_C::BaseTiling' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, ColorAlpha_Mul) == 0x0004F8, "Member 'ABP_FloorDecal01_C::ColorAlpha_Mul' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Color_Mul) == 0x000500, "Member 'ABP_FloorDecal01_C::Color_Mul' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, MRO) == 0x000508, "Member 'ABP_FloorDecal01_C::MRO' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Normal) == 0x000510, "Member 'ABP_FloorDecal01_C::Normal' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Metallic_Mul) == 0x000518, "Member 'ABP_FloorDecal01_C::Metallic_Mul' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Roughness_Mul) == 0x000520, "Member 'ABP_FloorDecal01_C::Roughness_Mul' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Normal_Mul) == 0x000528, "Member 'ABP_FloorDecal01_C::Normal_Mul' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Linear) == 0x000530, "Member 'ABP_FloorDecal01_C::Linear' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, SplineType) == 0x000531, "Member 'ABP_FloorDecal01_C::SplineType' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Spline_local) == 0x000538, "Member 'ABP_FloorDecal01_C::Spline_local' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, U_Offset) == 0x000540, "Member 'ABP_FloorDecal01_C::U_Offset' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Mat_Instance) == 0x000550, "Member 'ABP_FloorDecal01_C::Mat_Instance' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, V_Offset) == 0x000558, "Member 'ABP_FloorDecal01_C::V_Offset' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, NumMasks) == 0x000568, "Member 'ABP_FloorDecal01_C::NumMasks' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, CurrentMask) == 0x00056C, "Member 'ABP_FloorDecal01_C::CurrentMask' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, Uv_offset) == 0x000570, "Member 'ABP_FloorDecal01_C::Uv_offset' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, StartTangent) == 0x000580, "Member 'ABP_FloorDecal01_C::StartTangent' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, EndTangent) == 0x000598, "Member 'ABP_FloorDecal01_C::EndTangent' has a wrong offset!");
//static_assert(offsetof(ABP_FloorDecal01_C, RenderSort) == 0x0005B0, "Member 'ABP_FloorDecal01_C::RenderSort' has a wrong offset!");

}

