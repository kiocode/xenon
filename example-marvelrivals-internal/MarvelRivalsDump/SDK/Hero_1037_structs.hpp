#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1037

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Hero_1037.EIronRecoverType
// NumValues: 0x0005
enum class EIronRecoverType : uint8
{
	NatualRecover                            = 0,
	ShieldRecover                            = 1,
	PhysicsSummonerRecover                   = 2,
	None                                     = 3,
	EIronRecoverType_MAX                     = 4,
};

// Enum Hero_1037.ESplineCueStatus_103701
// NumValues: 0x0004
enum class ESplineCueStatus_103701 : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	None                                     = 2,
	ESplineCueStatus_MAX                     = 3,
};

// Enum Hero_1037.EManipulateActorType
// NumValues: 0x0006
enum class EManipulateActorType : uint8
{
	None                                     = 0,
	Entity                                   = 1,
	MagicEntity                              = 2,
	MagicNoEntity                            = 3,
	FastFalling                              = 4,
	EManipulateActorType_MAX                 = 5,
};

// Enum Hero_1037.ERingState
// NumValues: 0x0005
enum class ERingState : uint8
{
	StateIdle                                = 0,
	StateOne                                 = 1,
	StateTwo                                 = 2,
	StateFull                                = 3,
	ERingState_MAX                           = 4,
};

// ScriptStruct Hero_1037.IronInfo_103701
// 0x0038 (0x0038 - 0x0000)
struct FIronInfo_103701 final
{
public:
	float                                         StartAngle;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleOffset;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EllipseRotateAngle;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongRadius;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortRadius;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClockwise;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoutineTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIronInfo_103701) == 0x000008, "Wrong alignment on FIronInfo_103701");
static_assert(sizeof(FIronInfo_103701) == 0x000038, "Wrong size on FIronInfo_103701");
static_assert(offsetof(FIronInfo_103701, StartAngle) == 0x000000, "Member 'FIronInfo_103701::StartAngle' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, AngleOffset) == 0x000004, "Member 'FIronInfo_103701::AngleOffset' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, EllipseRotateAngle) == 0x000008, "Member 'FIronInfo_103701::EllipseRotateAngle' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, LongRadius) == 0x00000C, "Member 'FIronInfo_103701::LongRadius' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, ShortRadius) == 0x000010, "Member 'FIronInfo_103701::ShortRadius' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, bClockwise) == 0x000014, "Member 'FIronInfo_103701::bClockwise' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, RoutineTime) == 0x000018, "Member 'FIronInfo_103701::RoutineTime' has a wrong offset!");
static_assert(offsetof(FIronInfo_103701, LocationOffset) == 0x000020, "Member 'FIronInfo_103701::LocationOffset' has a wrong offset!");

// ScriptStruct Hero_1037.SplineData_103701
// 0x0048 (0x0048 - 0x0000)
struct FSplineData_103701 final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAngle;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIronInfo_103701                       IronInfo;                                          // 0x0008(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EIronRecoverType                              RecoverType;                                       // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTracing;                                        // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveTime;                                        // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineData_103701) == 0x000008, "Wrong alignment on FSplineData_103701");
static_assert(sizeof(FSplineData_103701) == 0x000048, "Wrong size on FSplineData_103701");
static_assert(offsetof(FSplineData_103701, bActive) == 0x000000, "Member 'FSplineData_103701::bActive' has a wrong offset!");
static_assert(offsetof(FSplineData_103701, CurrentAngle) == 0x000004, "Member 'FSplineData_103701::CurrentAngle' has a wrong offset!");
static_assert(offsetof(FSplineData_103701, IronInfo) == 0x000008, "Member 'FSplineData_103701::IronInfo' has a wrong offset!");
static_assert(offsetof(FSplineData_103701, RecoverType) == 0x000040, "Member 'FSplineData_103701::RecoverType' has a wrong offset!");
static_assert(offsetof(FSplineData_103701, bIsTracing) == 0x000041, "Member 'FSplineData_103701::bIsTracing' has a wrong offset!");
static_assert(offsetof(FSplineData_103701, ActiveTime) == 0x000044, "Member 'FSplineData_103701::ActiveTime' has a wrong offset!");

// ScriptStruct Hero_1037.ManipulationPhysicsSpec
// 0x0020 (0x0020 - 0x0000)
struct FManipulationPhysicsSpec final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManipulationPhysicsSpec) == 0x000008, "Wrong alignment on FManipulationPhysicsSpec");
static_assert(sizeof(FManipulationPhysicsSpec) == 0x000020, "Wrong size on FManipulationPhysicsSpec");
static_assert(offsetof(FManipulationPhysicsSpec, TypeTag) == 0x000000, "Member 'FManipulationPhysicsSpec::TypeTag' has a wrong offset!");
static_assert(offsetof(FManipulationPhysicsSpec, LinearDamping) == 0x00000C, "Member 'FManipulationPhysicsSpec::LinearDamping' has a wrong offset!");
static_assert(offsetof(FManipulationPhysicsSpec, AngularDamping) == 0x000010, "Member 'FManipulationPhysicsSpec::AngularDamping' has a wrong offset!");
static_assert(offsetof(FManipulationPhysicsSpec, PhysMaterial) == 0x000018, "Member 'FManipulationPhysicsSpec::PhysMaterial' has a wrong offset!");

// ScriptStruct Hero_1037.ManipulationActiveSimulation
// 0x00A8 (0x00A8 - 0x0000)
struct FManipulationActiveSimulation final
{
public:
	class USphereComponent*                       SimCollider;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAbilityTargetActor_Projectile*   ProjectileActor;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjectileName;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     InstantBulletComponent;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         InstantBulletAsset;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarvelCueNotify_Actor*>         ProjectileCueActors;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class USceneComponent>> CapturedSceneComponents;                           // 0x0040(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsIsSimulatingPhysics;                            // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnergyFieldActive;                              // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagicEntity;                                      // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagicEntityBeginDissolve;                         // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualSizeOverride;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualSizeForDefault;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopSimulationDelay;                               // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulatePhysicsDelay;                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyFieldDeactiveDelay;                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     BulletTransforms;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class UFXSystemComponent*>             EnergyFieldComponents;                             // 0x0078(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EManipulateActorType                          ManipulateActorType;                               // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              CachedNiagaraComponents;                           // 0x0090(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHoldInstantAmmo;                                  // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManipulationActiveSimulation) == 0x000008, "Wrong alignment on FManipulationActiveSimulation");
static_assert(sizeof(FManipulationActiveSimulation) == 0x0000A8, "Wrong size on FManipulationActiveSimulation");
static_assert(offsetof(FManipulationActiveSimulation, SimCollider) == 0x000000, "Member 'FManipulationActiveSimulation::SimCollider' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, ProjectileActor) == 0x000008, "Member 'FManipulationActiveSimulation::ProjectileActor' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, ProjectileName) == 0x000010, "Member 'FManipulationActiveSimulation::ProjectileName' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, InstantBulletComponent) == 0x000020, "Member 'FManipulationActiveSimulation::InstantBulletComponent' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, InstantBulletAsset) == 0x000028, "Member 'FManipulationActiveSimulation::InstantBulletAsset' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, ProjectileCueActors) == 0x000030, "Member 'FManipulationActiveSimulation::ProjectileCueActors' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, CapturedSceneComponents) == 0x000040, "Member 'FManipulationActiveSimulation::CapturedSceneComponents' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, bIsIsSimulatingPhysics) == 0x000050, "Member 'FManipulationActiveSimulation::bIsIsSimulatingPhysics' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, bIsEnergyFieldActive) == 0x000051, "Member 'FManipulationActiveSimulation::bIsEnergyFieldActive' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, bMagicEntity) == 0x000052, "Member 'FManipulationActiveSimulation::bMagicEntity' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, bMagicEntityBeginDissolve) == 0x000053, "Member 'FManipulationActiveSimulation::bMagicEntityBeginDissolve' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, VisualSizeOverride) == 0x000054, "Member 'FManipulationActiveSimulation::VisualSizeOverride' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, VisualSizeForDefault) == 0x000058, "Member 'FManipulationActiveSimulation::VisualSizeForDefault' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, StopSimulationDelay) == 0x00005C, "Member 'FManipulationActiveSimulation::StopSimulationDelay' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, SimulatePhysicsDelay) == 0x000060, "Member 'FManipulationActiveSimulation::SimulatePhysicsDelay' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, EnergyFieldDeactiveDelay) == 0x000064, "Member 'FManipulationActiveSimulation::EnergyFieldDeactiveDelay' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, BulletTransforms) == 0x000068, "Member 'FManipulationActiveSimulation::BulletTransforms' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, EnergyFieldComponents) == 0x000078, "Member 'FManipulationActiveSimulation::EnergyFieldComponents' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, ManipulateActorType) == 0x000088, "Member 'FManipulationActiveSimulation::ManipulateActorType' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, CachedNiagaraComponents) == 0x000090, "Member 'FManipulationActiveSimulation::CachedNiagaraComponents' has a wrong offset!");
static_assert(offsetof(FManipulationActiveSimulation, bHoldInstantAmmo) == 0x0000A0, "Member 'FManipulationActiveSimulation::bHoldInstantAmmo' has a wrong offset!");

// ScriptStruct Hero_1037.PreAllowcateInfo
// 0x0078 (0x0078 - 0x0000)
struct FPreAllowcateInfo final
{
public:
	class APhysicsSummoner*                       PhysicsSummoner;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginSpherePosition;                              // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoxTraceShape                         BoxShape;                                          // 0x0050(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPreAllowcateInfo) == 0x000008, "Wrong alignment on FPreAllowcateInfo");
static_assert(sizeof(FPreAllowcateInfo) == 0x000078, "Wrong size on FPreAllowcateInfo");
static_assert(offsetof(FPreAllowcateInfo, PhysicsSummoner) == 0x000000, "Member 'FPreAllowcateInfo::PhysicsSummoner' has a wrong offset!");
static_assert(offsetof(FPreAllowcateInfo, OriginSpherePosition) == 0x000008, "Member 'FPreAllowcateInfo::OriginSpherePosition' has a wrong offset!");
static_assert(offsetof(FPreAllowcateInfo, Position) == 0x000020, "Member 'FPreAllowcateInfo::Position' has a wrong offset!");
static_assert(offsetof(FPreAllowcateInfo, Rotation) == 0x000038, "Member 'FPreAllowcateInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FPreAllowcateInfo, BoxShape) == 0x000050, "Member 'FPreAllowcateInfo::BoxShape' has a wrong offset!");

}

