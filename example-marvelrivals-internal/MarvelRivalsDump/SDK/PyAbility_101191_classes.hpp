#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_101191

#include "Basic.hpp"

#include "Hero_1011_structs.hpp"
#include "Hero_1011_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// PythonClass PyAbility_101191.PyCue_Ability_Loop_10119101
// 0x0000 (0x0EB8 - 0x0EB8)
class APyCue_Ability_Loop_10119101 final : public ACue_Ability_Loop_10119101
{
public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnGrabEnemyInAir(const struct FVector& ImpactPoint, class AMarvelBaseCharacter* TargetActor);
	void OnAttackEnd();
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Ability_Loop_10119101">();
	}
	static class APyCue_Ability_Loop_10119101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Ability_Loop_10119101>();
	}
};
static_assert(alignof(APyCue_Ability_Loop_10119101) == 0x000008, "Wrong alignment on APyCue_Ability_Loop_10119101");
static_assert(sizeof(APyCue_Ability_Loop_10119101) == 0x000EB8, "Wrong size on APyCue_Ability_Loop_10119101");

// PythonClass PyAbility_101191.PyUIController_101191
// 0x0000 (0x0D80 - 0x0D80)
class UPyUIController_101191 final : public UUIController_101191
{
public:
	void OnInit();
	void OnDestruct();
	void OnTagUpdate(const struct FGameplayTag& Tag, bool Exist);
	bool PyInitChargeParam(bool bIsHulk);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_101191">();
	}
	static class UPyUIController_101191* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_101191>();
	}
};
static_assert(alignof(UPyUIController_101191) == 0x000008, "Wrong alignment on UPyUIController_101191");
static_assert(sizeof(UPyUIController_101191) == 0x000D80, "Wrong size on UPyUIController_101191");

// PythonClass PyAbility_101191.PyCue_Scope_HitImpact_10119101
// 0x0000 (0x04D0 - 0x04D0)
class UPyCue_Scope_HitImpact_10119101 final : public UMarvelCueNotify_HitImpact
{
public:
	const struct FRotator ComputeDecalRotation(class AActor* InInstigator, class AActor* InCauser, const struct FHitResult& HitResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Scope_HitImpact_10119101">();
	}
	static class UPyCue_Scope_HitImpact_10119101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyCue_Scope_HitImpact_10119101>();
	}
};
static_assert(alignof(UPyCue_Scope_HitImpact_10119101) == 0x000008, "Wrong alignment on UPyCue_Scope_HitImpact_10119101");
static_assert(sizeof(UPyCue_Scope_HitImpact_10119101) == 0x0004D0, "Wrong size on UPyCue_Scope_HitImpact_10119101");

// PythonClass PyAbility_101191.PyAbility_AirGrab_101191
// 0x0010 (0x1178 - 0x1168)
class UPyAbility_AirGrab_101191 : public UAbility_AirGrab
{
public:
	struct FGameplayTag                           AbilityCueTag;                                     // 0x1168(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnActiveAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_AirGrab_101191">();
	}
	static class UPyAbility_AirGrab_101191* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_AirGrab_101191>();
	}
};
static_assert(alignof(UPyAbility_AirGrab_101191) == 0x000008, "Wrong alignment on UPyAbility_AirGrab_101191");
static_assert(sizeof(UPyAbility_AirGrab_101191) == 0x001178, "Wrong size on UPyAbility_AirGrab_101191");
static_assert(offsetof(UPyAbility_AirGrab_101191, AbilityCueTag) == 0x001168, "Member 'UPyAbility_AirGrab_101191::AbilityCueTag' has a wrong offset!");

// PythonClass PyAbility_101191.PyConfig_101191
// 0x02F8 (0x03C8 - 0x00D0)
class UPyConfig_101191 final : public UMarvelAbilityConfig_LongPressTrigger
{
public:
	float                                         PressedSecondsMax;                                 // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JumpInitSpeedCurve;                                // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpIgnorePawnCollisionDuration;                   // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpStartLockMoveSeconds;                          // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LandAttackScopeID;                                 // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHulkJumpParam                         MoveLogicComponentParam;                           // 0x00EC(0x0078)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelApplyPinnedMotionConfig         PinnedConfig;                                      // 0x0168(0x0230)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         GrabEnableMinHeight;                               // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrabScopeID;                                       // 0x039C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GrabScopeLocOffset;                                // 0x03A0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrabBuffID;                                        // 0x03B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrabBuffID_CollideKonckDown;                       // 0x03BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollideKnockDamage;                                // 0x03C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_101191">();
	}
	static class UPyConfig_101191* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_101191>();
	}
};
static_assert(alignof(UPyConfig_101191) == 0x000008, "Wrong alignment on UPyConfig_101191");
static_assert(sizeof(UPyConfig_101191) == 0x0003C8, "Wrong size on UPyConfig_101191");
static_assert(offsetof(UPyConfig_101191, PressedSecondsMax) == 0x0000D0, "Member 'UPyConfig_101191::PressedSecondsMax' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, JumpInitSpeedCurve) == 0x0000D8, "Member 'UPyConfig_101191::JumpInitSpeedCurve' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, JumpIgnorePawnCollisionDuration) == 0x0000E0, "Member 'UPyConfig_101191::JumpIgnorePawnCollisionDuration' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, JumpStartLockMoveSeconds) == 0x0000E4, "Member 'UPyConfig_101191::JumpStartLockMoveSeconds' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, LandAttackScopeID) == 0x0000E8, "Member 'UPyConfig_101191::LandAttackScopeID' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, MoveLogicComponentParam) == 0x0000EC, "Member 'UPyConfig_101191::MoveLogicComponentParam' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, PinnedConfig) == 0x000168, "Member 'UPyConfig_101191::PinnedConfig' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, GrabEnableMinHeight) == 0x000398, "Member 'UPyConfig_101191::GrabEnableMinHeight' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, GrabScopeID) == 0x00039C, "Member 'UPyConfig_101191::GrabScopeID' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, GrabScopeLocOffset) == 0x0003A0, "Member 'UPyConfig_101191::GrabScopeLocOffset' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, GrabBuffID) == 0x0003B8, "Member 'UPyConfig_101191::GrabBuffID' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, GrabBuffID_CollideKonckDown) == 0x0003BC, "Member 'UPyConfig_101191::GrabBuffID_CollideKonckDown' has a wrong offset!");
static_assert(offsetof(UPyConfig_101191, CollideKnockDamage) == 0x0003C0, "Member 'UPyConfig_101191::CollideKnockDamage' has a wrong offset!");

// PythonClass PyAbility_101191.PyAbility_101191
// 0x0028 (0x2678 - 0x2650)
class UPyAbility_101191 : public UAbility_101191
{
public:
	bool                                          IsAttackEnd;                                       // 0x2650(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2651[0x7];                                     // 0x2651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             DelegateGrabEnemyInAir;                            // 0x2658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DelegateOnAttackEnd;                               // 0x2668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void DelegateGrabEnemyInAir__DelegateSignature(const struct FVector& ImpactPoint, class AMarvelBaseCharacter* Target_actor);
	void DelegateOnAttackEnd__DelegateSignature();
	void OnRep_IsAttackEnd();
	void BeginPlay();
	bool CanActivate();
	void K2_ActivateGameplay();
	void OnAbilityCancel();
	void OnTriggerGrabScope(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	float GetCollideKnockDownDamage();
	void K2_TriggerGameplay(float HoldTime);
	void K2_OnShiftJumpLaunched();
	void OnGrabScopeSpawned(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void OnShiftJumpLanded();
	void OnShiftJumpInterrupted();
	void OnHulkShiftJumpStopped();
	void K2_OnEndAbility(bool Cancel);
	void NativeOnMontageCompleted(const class FString& EventTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_101191">();
	}
	static class UPyAbility_101191* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_101191>();
	}
};
static_assert(alignof(UPyAbility_101191) == 0x000008, "Wrong alignment on UPyAbility_101191");
static_assert(sizeof(UPyAbility_101191) == 0x002678, "Wrong size on UPyAbility_101191");
static_assert(offsetof(UPyAbility_101191, IsAttackEnd) == 0x002650, "Member 'UPyAbility_101191::IsAttackEnd' has a wrong offset!");
static_assert(offsetof(UPyAbility_101191, DelegateGrabEnemyInAir) == 0x002658, "Member 'UPyAbility_101191::DelegateGrabEnemyInAir' has a wrong offset!");
static_assert(offsetof(UPyAbility_101191, DelegateOnAttackEnd) == 0x002668, "Member 'UPyAbility_101191::DelegateOnAttackEnd' has a wrong offset!");

// PythonClass PyAbility_101191.PyCue_Ability_Loop_101191_AirGrab
// 0x0000 (0x0E50 - 0x0E50)
class APyCue_Ability_Loop_101191_AirGrab final : public AMarvelCueNotify_Ability
{
public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Ability_Loop_101191_AirGrab">();
	}
	static class APyCue_Ability_Loop_101191_AirGrab* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Ability_Loop_101191_AirGrab>();
	}
};
static_assert(alignof(APyCue_Ability_Loop_101191_AirGrab) == 0x000008, "Wrong alignment on APyCue_Ability_Loop_101191_AirGrab");
static_assert(sizeof(APyCue_Ability_Loop_101191_AirGrab) == 0x000E50, "Wrong size on APyCue_Ability_Loop_101191_AirGrab");

// PythonClass PyAbility_101191.PyWidget_AbilityEnergy_101191
// 0x0008 (0x05F0 - 0x05E8)
class UPyWidget_AbilityEnergy_101191 final : public UWidget_AbilityEnergy
{
public:
	float                                         MinActiveAbilityPer;                               // 0x05E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetVisible(bool bInVisible);
	void SetVisibleImmediately(bool Invisible);
	void SetPercent(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_AbilityEnergy_101191">();
	}
	static class UPyWidget_AbilityEnergy_101191* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_AbilityEnergy_101191>();
	}
};
static_assert(alignof(UPyWidget_AbilityEnergy_101191) == 0x000008, "Wrong alignment on UPyWidget_AbilityEnergy_101191");
static_assert(sizeof(UPyWidget_AbilityEnergy_101191) == 0x0005F0, "Wrong size on UPyWidget_AbilityEnergy_101191");
static_assert(offsetof(UPyWidget_AbilityEnergy_101191, MinActiveAbilityPer) == 0x0005E8, "Member 'UPyWidget_AbilityEnergy_101191::MinActiveAbilityPer' has a wrong offset!");

// PythonClass PyAbility_101191.PyCue_Ability_Loop_10119103
// 0x0000 (0x0ED8 - 0x0ED8)
class APyCue_Ability_Loop_10119103 final : public ACue_Ability_Loop_10119103
{
public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Ability_Loop_10119103">();
	}
	static class APyCue_Ability_Loop_10119103* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Ability_Loop_10119103>();
	}
};
static_assert(alignof(APyCue_Ability_Loop_10119103) == 0x000008, "Wrong alignment on APyCue_Ability_Loop_10119103");
static_assert(sizeof(APyCue_Ability_Loop_10119103) == 0x000ED8, "Wrong size on APyCue_Ability_Loop_10119103");

}

