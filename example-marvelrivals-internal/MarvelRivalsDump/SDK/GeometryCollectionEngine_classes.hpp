#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionEngine

#include "Basic.hpp"

#include "ChaosSolverEngine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GeometryCollectionEngine_structs.hpp"
#include "Chaos_structs.hpp"


namespace SDK
{

// Class GeometryCollectionEngine.GeometryCollectionExternalRenderInterface
// 0x0000 (0x0030 - 0x0030)
class IGeometryCollectionExternalRenderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionExternalRenderInterface">();
	}
	static class IGeometryCollectionExternalRenderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGeometryCollectionExternalRenderInterface>();
	}
};
static_assert(alignof(IGeometryCollectionExternalRenderInterface) == 0x000008, "Wrong alignment on IGeometryCollectionExternalRenderInterface");
static_assert(sizeof(IGeometryCollectionExternalRenderInterface) == 0x000030, "Wrong size on IGeometryCollectionExternalRenderInterface");

// Class GeometryCollectionEngine.GeometryCollectionISMCLoader
// 0x0050 (0x0080 - 0x0030)
class alignas(0x10) UGeometryCollectionISMCLoader final : public UObject
{
public:
	struct FTimerHandle                           FramingInitializeIMSCTimerHandle;                  // 0x0030(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 SaveWorld;                                         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGeometryCollectionComponent> CurrentGCPtr;                                      // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GeometryCollectionISMCLoadTick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMCLoader">();
	}
	static class UGeometryCollectionISMCLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMCLoader>();
	}
};
static_assert(alignof(UGeometryCollectionISMCLoader) == 0x000010, "Wrong alignment on UGeometryCollectionISMCLoader");
static_assert(sizeof(UGeometryCollectionISMCLoader) == 0x000080, "Wrong size on UGeometryCollectionISMCLoader");
static_assert(offsetof(UGeometryCollectionISMCLoader, FramingInitializeIMSCTimerHandle) == 0x000030, "Member 'UGeometryCollectionISMCLoader::FramingInitializeIMSCTimerHandle' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionISMCLoader, SaveWorld) == 0x000050, "Member 'UGeometryCollectionISMCLoader::SaveWorld' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionISMCLoader, CurrentGCPtr) == 0x000058, "Member 'UGeometryCollectionISMCLoader::CurrentGCPtr' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolSubSystem
// 0x0008 (0x0040 - 0x0038)
class UGeometryCollectionISMPoolSubSystem final : public UWorldSubsystem
{
public:
	class AGeometryCollectionISMPoolActor*        ISMPoolActor;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolSubSystem">();
	}
	static class UGeometryCollectionISMPoolSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMPoolSubSystem>();
	}
};
static_assert(alignof(UGeometryCollectionISMPoolSubSystem) == 0x000008, "Wrong alignment on UGeometryCollectionISMPoolSubSystem");
static_assert(sizeof(UGeometryCollectionISMPoolSubSystem) == 0x000040, "Wrong size on UGeometryCollectionISMPoolSubSystem");
static_assert(offsetof(UGeometryCollectionISMPoolSubSystem, ISMPoolActor) == 0x000038, "Member 'UGeometryCollectionISMPoolSubSystem::ISMPoolActor' has a wrong offset!");

// Class GeometryCollectionEngine.PhysicsObjectLoadHelper
// 0x0058 (0x0088 - 0x0030)
class UPhysicsObjectLoadHelper final : public UObject
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsObjectLoadHelper">();
	}
	static class UPhysicsObjectLoadHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsObjectLoadHelper>();
	}
};
static_assert(alignof(UPhysicsObjectLoadHelper) == 0x000008, "Wrong alignment on UPhysicsObjectLoadHelper");
static_assert(sizeof(UPhysicsObjectLoadHelper) == 0x000088, "Wrong size on UPhysicsObjectLoadHelper");

// Class GeometryCollectionEngine.ChaosDestructionListener
// 0x02B0 (0x0720 - 0x0470)
class UChaosDestructionListener final : public USceneComponent
{
public:
	uint8                                         bIsCollisionEventListeningEnabled : 1;             // 0x0470(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBreakingEventListeningEnabled : 1;              // 0x0470(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsTrailingEventListeningEnabled : 1;              // 0x0470(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRemovalEventListeningEnabled : 1;               // 0x0470(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosCollisionEventRequestSettings    CollisionEventRequestSettings;                     // 0x0474(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosBreakingEventRequestSettings     BreakingEventRequestSettings;                      // 0x048C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosTrailingEventRequestSettings     TrailingEventRequestSettings;                      // 0x04A4(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FChaosRemovalEventRequestSettings      RemovalEventRequestSettings;                       // 0x04BC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AChaosSolverActor*>                ChaosSolverActors;                                 // 0x04D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<class AGeometryCollectionActor*>         GeometryCollectionActors;                          // 0x0520(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCollisionEvents;                                 // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBreakingEvents;                                  // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTrailingEvents;                                  // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRemovalEvents;                                   // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B0[0x170];                                    // 0x05B0(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChaosSolverActor(class AChaosSolverActor* ChaosSolverActor);
	void AddGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor);
	void RemoveChaosSolverActor(class AChaosSolverActor* ChaosSolverActor);
	void RemoveGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor);
	void SetBreakingEventEnabled(bool bIsEnabled);
	void SetBreakingEventRequestSettings(const struct FChaosBreakingEventRequestSettings& InSettings);
	void SetCollisionEventEnabled(bool bIsEnabled);
	void SetCollisionEventRequestSettings(const struct FChaosCollisionEventRequestSettings& InSettings);
	void SetRemovalEventEnabled(bool bIsEnabled);
	void SetRemovalEventRequestSettings(const struct FChaosRemovalEventRequestSettings& InSettings);
	void SetTrailingEventEnabled(bool bIsEnabled);
	void SetTrailingEventRequestSettings(const struct FChaosTrailingEventRequestSettings& InSettings);
	void SortBreakingEvents(TArray<struct FChaosBreakingEventData>& BreakingEvents, EChaosBreakingSortMethod SortMethod);
	void SortCollisionEvents(TArray<struct FChaosCollisionEventData>& CollisionEvents, EChaosCollisionSortMethod SortMethod);
	void SortRemovalEvents(TArray<struct FChaosRemovalEventData>& RemovalEvents, EChaosRemovalSortMethod SortMethod);
	void SortTrailingEvents(TArray<struct FChaosTrailingEventData>& TrailingEvents, EChaosTrailingSortMethod SortMethod);

	bool IsEventListening() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionListener">();
	}
	static class UChaosDestructionListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDestructionListener>();
	}
};
static_assert(alignof(UChaosDestructionListener) == 0x000010, "Wrong alignment on UChaosDestructionListener");
static_assert(sizeof(UChaosDestructionListener) == 0x000720, "Wrong size on UChaosDestructionListener");
static_assert(offsetof(UChaosDestructionListener, CollisionEventRequestSettings) == 0x000474, "Member 'UChaosDestructionListener::CollisionEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, BreakingEventRequestSettings) == 0x00048C, "Member 'UChaosDestructionListener::BreakingEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, TrailingEventRequestSettings) == 0x0004A4, "Member 'UChaosDestructionListener::TrailingEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, RemovalEventRequestSettings) == 0x0004BC, "Member 'UChaosDestructionListener::RemovalEventRequestSettings' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, ChaosSolverActors) == 0x0004D0, "Member 'UChaosDestructionListener::ChaosSolverActors' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, GeometryCollectionActors) == 0x000520, "Member 'UChaosDestructionListener::GeometryCollectionActors' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnCollisionEvents) == 0x000570, "Member 'UChaosDestructionListener::OnCollisionEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnBreakingEvents) == 0x000580, "Member 'UChaosDestructionListener::OnBreakingEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnTrailingEvents) == 0x000590, "Member 'UChaosDestructionListener::OnTrailingEvents' has a wrong offset!");
static_assert(offsetof(UChaosDestructionListener, OnRemovalEvents) == 0x0005A0, "Member 'UChaosDestructionListener::OnRemovalEvents' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionActor
// 0x0100 (0x0590 - 0x0490)
class AGeometryCollectionActor : public AActor
{
public:
	class UGeometryCollectionComponent*           GeometryCollectionComponent;                       // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollectionDebugDrawComponent*  GeometryCollectionDebugDrawComponent;              // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AGeometryCollectionActor*, struct FGCLinkInfo> GCLinkCustom;                                      // 0x04A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class AGeometryCollectionActor*, struct FGCLinkInfo> GCAttachCustom;                                    // 0x04F0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FBox>                      GCPrepareInfo;                                     // 0x0540(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	bool RaycastSingle(const struct FVector& Start, const struct FVector& End, struct FHitResult* OutHit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionActor">();
	}
	static class AGeometryCollectionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionActor>();
	}
};
static_assert(alignof(AGeometryCollectionActor) == 0x000008, "Wrong alignment on AGeometryCollectionActor");
static_assert(sizeof(AGeometryCollectionActor) == 0x000590, "Wrong size on AGeometryCollectionActor");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionComponent) == 0x000490, "Member 'AGeometryCollectionActor::GeometryCollectionComponent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GeometryCollectionDebugDrawComponent) == 0x000498, "Member 'AGeometryCollectionActor::GeometryCollectionDebugDrawComponent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GCLinkCustom) == 0x0004A0, "Member 'AGeometryCollectionActor::GCLinkCustom' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GCAttachCustom) == 0x0004F0, "Member 'AGeometryCollectionActor::GCAttachCustom' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionActor, GCPrepareInfo) == 0x000540, "Member 'AGeometryCollectionActor::GCPrepareInfo' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionCache
// 0x0028 (0x0058 - 0x0030)
class UGeometryCollectionCache final : public UObject
{
public:
	struct FRecordedTransformTrack                RecordedData;                                      // 0x0030(0x0010)(NativeAccessSpecifierPrivate)
	class UGeometryCollection*                    SupportedCollection;                               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  CompatibleCollectionState;                         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionCache">();
	}
	static class UGeometryCollectionCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionCache>();
	}
};
static_assert(alignof(UGeometryCollectionCache) == 0x000008, "Wrong alignment on UGeometryCollectionCache");
static_assert(sizeof(UGeometryCollectionCache) == 0x000058, "Wrong size on UGeometryCollectionCache");
static_assert(offsetof(UGeometryCollectionCache, RecordedData) == 0x000030, "Member 'UGeometryCollectionCache::RecordedData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, SupportedCollection) == 0x000040, "Member 'UGeometryCollectionCache::SupportedCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionCache, CompatibleCollectionState) == 0x000048, "Member 'UGeometryCollectionCache::CompatibleCollectionState' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionComponent
// 0x0C70 (0x1520 - 0x08B0)
class UGeometryCollectionComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosSolverActor*                      ChaosSolverActor;                                  // 0x08B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B8[0xC8];                                     // 0x08B8(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometryCollection*                    RestCollection;                                    // 0x0980(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SimpleCollectionPath;                              // 0x0988(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            GCRemapData;                                       // 0x09B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class AFieldSystemActor*>              InitializationFields;                              // 0x0A00(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          Simulating;                                        // 0x0A10(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A11[0x1];                                      // 0x0A11(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DisableAfterBreakFlag;                             // 0x0A12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectStateTypeEnum                          ObjectType;                                        // 0x0A13(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GravityGroupIndex;                                 // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMotionBlur;                                  // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableClustering;                                  // 0x0A19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1A[0x2];                                      // 0x0A1A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClusterGroupIndex;                                 // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClusterLevel;                                   // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulatedLevel;                                 // 0x0A24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageModelTypeEnum                          DamageModel;                                       // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A29[0x7];                                      // 0x0A29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DamageThreshold;                                   // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSizeSpecificDamageThreshold;                   // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDamagePropagationData DamagePropagationData;                             // 0x0A44(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDamageFromCollision;                        // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemovalOnSleep;                              // 0x0A51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemovalOnBreak;                              // 0x0A52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A53[0x1];                                      // 0x0A53(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmallParticleCreateRatio;                          // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallParticleDisappearRatio;                       // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVolumeSize;                                     // 0x0A5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVolumeSize;                                     // 0x0A60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClusterConnectionTypeEnum                    ClusterConnectionType;                             // 0x0A64(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A65[0x3];                                      // 0x0A65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollisionGroup;                                    // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionSampleFraction;                           // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearEtherDrag;                                   // 0x0A70(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularEtherDrag;                                  // 0x0A74(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChaosPhysicalMaterial*                 PhysicalMaterial;                                  // 0x0A78(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInitialVelocityTypeEnum                      InitialVelocityType;                               // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLinearVelocity;                             // 0x0A88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialAngularVelocity;                            // 0x0AA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterialOverride;                          // 0x0AB8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeomComponentCacheParameters          CacheParameters;                                   // 0x0AC0(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform3f>                   RestTransforms;                                    // 0x0B10(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B20[0x10];                                     // 0x0B20(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bISMOnlyWorkInLumen;                               // 0x0B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseISM;                                           // 0x0B31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeISMUpdate;                                // 0x0B32(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B33[0x15];                                     // 0x0B33(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IgnoreParentNodeList;                              // 0x0B48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                LODDistances;                                      // 0x0B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bGCUpdateISMTransform;                             // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B69[0x7];                                      // 0x0B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             NotifyGeometryCollectionPhysicsStateChange;        // 0x0B70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NotifyGeometryCollectionPhysicsLoadingStateChange; // 0x0B80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B90[0x18];                                     // 0x0B90(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChaosBreakEvent;                                 // 0x0BA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChaosRemovalEvent;                               // 0x0BB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChaosCrumblingEvent;                             // 0x0BC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChaosDamageEvent;                                // 0x0BD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE8[0x40];                                     // 0x0BE8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredCacheTime;                                  // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CachePlayback;                                     // 0x0C2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2D[0x53];                                     // 0x0C2D(0x0053)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChaosPhysicsCollision;                           // 0x0C80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bNotifyBreaks;                                     // 0x0C90(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyCollisions;                                 // 0x0C91(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyTrailing;                                   // 0x0C92(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyRemovals;                                   // 0x0C93(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyCrumblings;                                 // 0x0C94(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyDamage;                                     // 0x0C95(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrumblingEventIncludesChildren;                   // 0x0C96(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyGlobalBreaks;                               // 0x0C97(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyGlobalCollisions;                           // 0x0C98(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyGlobalRemovals;                             // 0x0C99(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyGlobalCrumblings;                           // 0x0C9A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobalCrumblingEventIncludesChildren;             // 0x0C9B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreVelocities;                                  // 0x0C9C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerSimulatePhysics;                            // 0x0C9D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdvancedReplication;                        // 0x0C9E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSyncLerp;                                   // 0x0C9F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA0[0x11];                                     // 0x0CA0(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowBoneColors;                                   // 0x0CB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowCollapseGroupColors;                          // 0x0CB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseRootProxyForNavigation;                        // 0x0CB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateNavigationInTick;                           // 0x0CB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB5[0x3];                                      // 0x0CB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGeometryCollectionISMPoolActor*        ISMPool;                                           // 0x0CB8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoAssignISMPool;                                // 0x0CC0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideCustomRenderer;                           // 0x0CC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC2[0x6];                                      // 0x0CC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    CustomRendererType;                                // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class IGeometryCollectionExternalRenderInterface* CustomRenderer;                                    // 0x0CD0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableReplication;                                // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD9[0x37];                                     // 0x0CD9(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableAbandonAfterLevel;                          // 0x0D10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D11[0x3];                                      // 0x0D11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplicationAbandonAfterLevel;                      // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbandonedCollisionProfileName;                     // 0x0D18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D24[0x54];                                     // 0x0D24(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CollisionProfilePerLevel;                          // 0x0D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D88[0x10];                                     // 0x0D88(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplicationAbandonClusterLevel;                    // 0x0D98(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReplicationMaxPositionAndVelocityCorrectionLevel;  // 0x0D9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGeometryCollectionRepData             InitRepData;                                       // 0x0DA0(0x0068)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E08[0x3C0];                                    // 0x0E08(0x03C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             DummyBodySetup;                                    // 0x11C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChaosGameplayEventDispatcher*          EventDispatcher;                                   // 0x11D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UInstancedStaticMeshComponent*>  EmbeddedGeometryComponents;                        // 0x11D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11E8[0x200];                                   // 0x11E8(0x0200)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMovable;                                          // 0x13E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E9[0x57];                                    // 0x13E9(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckAllParticleBeDisableTime;                     // 0x1440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1444[0x14];                                    // 0x1444(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x1458(0x0038)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1490[0x30];                                    // 0x1490(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionPostUpdateWorkTickFunction PostUpdateWorkTickFunction;                        // 0x14C0(0x0038)(NativeAccessSpecifierPublic)
	bool                                          bGCMoveByAnim;                                     // 0x14F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F9[0x27];                                    // 0x14F9(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool CanPrintVisualLog(const class UObject* WCO);
	static bool IsVisualDebugFocusGC(const class UObject* WCO);

	void ApplyAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity);
	void ApplyAssetDefaults();
	void ApplyBreakingAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity);
	void ApplyBreakingLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity);
	void ApplyExternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain);
	void ApplyInternalBlood(int32 ItemIndex, float Blood);
	void ApplyInternalGravityScale(int32 ItemIndex, float GravityScale);
	void ApplyInternalStandTargetFlag(int32 ItemIndex, int32 StandTargetFlag);
	void ApplyInternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain);
	void ApplyKinematicField(float Radius, const struct FVector& Position);
	void ApplyLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity);
	void ApplyPhysicsField(bool Enabled, EGeometryCollectionPhysicsTypeEnum Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field);
	void CheckMassToLocal();
	void ClearGeometryCollectionLODs();
	void ClientBreakAndSetPos(const TArray<int32>& BreakList, const TMap<int32, struct FVector4f>& PosList);
	void ClientBreakAndSetPosUnlimit(const TArray<int32>& BreakList, const TMap<int32, struct FVector4f>& PosList);
	void ClientSkipFrameTest(const class FString& BreakLoadFile, const class FString& PositionLoadFile);
	void CreateFromStaticMeshLOD(const TArray<class UStaticMesh*>& MeshArray, const TArray<struct FTransform>& MeshRelativeTransforms, int32 LODIndex);
	void CrumbleActiveClusters();
	void CrumbleCluster(int32 ItemIndex);
	void DumpGCInfo();
	bool GetClosestPositionParticle(int32 ItemIndex, const struct FVector& CheckPosition, int32* OutItemIndex, struct FVector* OutPosition);
	class FString GetDebugInfo();
	bool GetIdxInBox(const struct FBox& InBox, float ScaleFactor, TArray<int32>* OutIndexs);
	int32 GetInitialLevel(int32 ItemIndex);
	int32 GetInitialLevelFromTransformIndex(int32 TransformGroupIndex);
	void GetMassAndExtents(int32 ItemIndex, float* OutMass, struct FBox* OutExtents);
	bool GetParticleBoundingBox(int32 Index_0, struct FBox* ParticleBoundingBox);
	void GetPaticlesByRadius(class UObject* WorldObj, const struct FVector& SphereCenter, double SphereRaidus);
	void InitSkipFrameData(const class FString& BreakLoadFile, const class FString& PositionLoadFile);
	void MarkEmbeddedGeometryDirtyForUpdate(bool bDirty);
	void MulticastProcessRepData(float DeltaTime, const struct FGeometryCollectionRepData& FrameRepData);
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(class UGeometryCollectionComponent* FracturedComponent);
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(class UGeometryCollectionComponent* FracturedComponent);
	void OnRep_InitRepData();
	void ReceivePhysicsCollision(const struct FChaosPhysicsCollisionInfo& CollisionInfo);
	void RemoveAllAnchors();
	void SetAbandonedParticleCollisionProfileName(class FName CollisionProfile);
	void SetAnchoredByBox(const struct FBox& WorldSpaceBox, bool bAnchored, int32 MaxLevel);
	void SetAnchoredByIndex(int32 Index_0, bool bAnchored);
	void SetAnchoredByTransformedBox(const struct FBox& Box, const struct FTransform& Transform, bool bAnchored, int32 MaxLevel);
	void SetClusteredParticleKinematicTransform_External(const struct FTransform& NewWorldTransform, int32 TransformGroupIndex);
	void SetDamageThreshold(const TArray<float>& InDamageThreshold);
	void SetDynamicRenderCustomDepth(bool bValue);
	void SetEnableDamageFromCollision(bool bValue);
	void SetLocalRestTransforms(const TArray<struct FTransform>& Transforms, bool bOnlyLeaves);
	void SetNotifyBreaks(bool bNewNotifyBreaks);
	void SetNotifyCrumblings(bool bNewNotifyCrumblings, bool bNewCrumblingEventIncludesChildren);
	void SetNotifyGlobalBreaks(bool bNewNotifyGlobalBreaks);
	void SetNotifyGlobalCollision(bool bNewNotifyGlobalCollisions);
	void SetNotifyGlobalCrumblings(bool bNewNotifyGlobalCrumblings, bool bGlobalNewCrumblingEventIncludesChildren);
	void SetNotifyGlobalRemovals(bool bNewNotifyGlobalRemovals);
	void SetNotifyRemovals(bool bNewNotifyRemovals);
	void SetPerLevelCollisionProfileNames(const TArray<class FName>& ProfileNames);
	void SetPerParticleCollisionProfileName(const TArray<int32>& BoneIds, class FName ProfileName);
	void SetRestCollection(const class UGeometryCollection* RestCollectionIn, bool bApplyAssetDefaults);
	void UpdateCachedBounds();

	TArray<float> GetDamageThreshold() const;
	TArray<struct FTransform3f> GetInitialLocalRestTransforms() const;
	struct FBox GetLocalBounds() const;
	struct FTransform GetParticleWorldTransform_External(int32 TransformGroupIndex) const;
	struct FTransform GetRootCurrentTransform() const;
	int32 GetRootIndex() const;
	struct FTransform GetRootInitialTransform() const;
	bool IsRootBroken() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionComponent">();
	}
	static class UGeometryCollectionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionComponent>();
	}
};
static_assert(alignof(UGeometryCollectionComponent) == 0x000010, "Wrong alignment on UGeometryCollectionComponent");
static_assert(sizeof(UGeometryCollectionComponent) == 0x001520, "Wrong size on UGeometryCollectionComponent");
static_assert(offsetof(UGeometryCollectionComponent, ChaosSolverActor) == 0x0008B0, "Member 'UGeometryCollectionComponent::ChaosSolverActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RestCollection) == 0x000980, "Member 'UGeometryCollectionComponent::RestCollection' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, SimpleCollectionPath) == 0x000988, "Member 'UGeometryCollectionComponent::SimpleCollectionPath' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, GCRemapData) == 0x0009B0, "Member 'UGeometryCollectionComponent::GCRemapData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitializationFields) == 0x000A00, "Member 'UGeometryCollectionComponent::InitializationFields' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, Simulating) == 0x000A10, "Member 'UGeometryCollectionComponent::Simulating' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DisableAfterBreakFlag) == 0x000A12, "Member 'UGeometryCollectionComponent::DisableAfterBreakFlag' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ObjectType) == 0x000A13, "Member 'UGeometryCollectionComponent::ObjectType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, GravityGroupIndex) == 0x000A14, "Member 'UGeometryCollectionComponent::GravityGroupIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bForceMotionBlur) == 0x000A18, "Member 'UGeometryCollectionComponent::bForceMotionBlur' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EnableClustering) == 0x000A19, "Member 'UGeometryCollectionComponent::EnableClustering' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ClusterGroupIndex) == 0x000A1C, "Member 'UGeometryCollectionComponent::ClusterGroupIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxClusterLevel) == 0x000A20, "Member 'UGeometryCollectionComponent::MaxClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxSimulatedLevel) == 0x000A24, "Member 'UGeometryCollectionComponent::MaxSimulatedLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamageModel) == 0x000A28, "Member 'UGeometryCollectionComponent::DamageModel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamageThreshold) == 0x000A30, "Member 'UGeometryCollectionComponent::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bUseSizeSpecificDamageThreshold) == 0x000A40, "Member 'UGeometryCollectionComponent::bUseSizeSpecificDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DamagePropagationData) == 0x000A44, "Member 'UGeometryCollectionComponent::DamagePropagationData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableDamageFromCollision) == 0x000A50, "Member 'UGeometryCollectionComponent::bEnableDamageFromCollision' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bAllowRemovalOnSleep) == 0x000A51, "Member 'UGeometryCollectionComponent::bAllowRemovalOnSleep' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bAllowRemovalOnBreak) == 0x000A52, "Member 'UGeometryCollectionComponent::bAllowRemovalOnBreak' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, SmallParticleCreateRatio) == 0x000A54, "Member 'UGeometryCollectionComponent::SmallParticleCreateRatio' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, SmallParticleDisappearRatio) == 0x000A58, "Member 'UGeometryCollectionComponent::SmallParticleDisappearRatio' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MinVolumeSize) == 0x000A5C, "Member 'UGeometryCollectionComponent::MinVolumeSize' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, MaxVolumeSize) == 0x000A60, "Member 'UGeometryCollectionComponent::MaxVolumeSize' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ClusterConnectionType) == 0x000A64, "Member 'UGeometryCollectionComponent::ClusterConnectionType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionGroup) == 0x000A68, "Member 'UGeometryCollectionComponent::CollisionGroup' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionSampleFraction) == 0x000A6C, "Member 'UGeometryCollectionComponent::CollisionSampleFraction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, LinearEtherDrag) == 0x000A70, "Member 'UGeometryCollectionComponent::LinearEtherDrag' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, AngularEtherDrag) == 0x000A74, "Member 'UGeometryCollectionComponent::AngularEtherDrag' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PhysicalMaterial) == 0x000A78, "Member 'UGeometryCollectionComponent::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialVelocityType) == 0x000A80, "Member 'UGeometryCollectionComponent::InitialVelocityType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialLinearVelocity) == 0x000A88, "Member 'UGeometryCollectionComponent::InitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitialAngularVelocity) == 0x000AA0, "Member 'UGeometryCollectionComponent::InitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PhysicalMaterialOverride) == 0x000AB8, "Member 'UGeometryCollectionComponent::PhysicalMaterialOverride' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CacheParameters) == 0x000AC0, "Member 'UGeometryCollectionComponent::CacheParameters' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, RestTransforms) == 0x000B10, "Member 'UGeometryCollectionComponent::RestTransforms' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bISMOnlyWorkInLumen) == 0x000B30, "Member 'UGeometryCollectionComponent::bISMOnlyWorkInLumen' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bUseISM) == 0x000B31, "Member 'UGeometryCollectionComponent::bUseISM' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bOptimizeISMUpdate) == 0x000B32, "Member 'UGeometryCollectionComponent::bOptimizeISMUpdate' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, IgnoreParentNodeList) == 0x000B48, "Member 'UGeometryCollectionComponent::IgnoreParentNodeList' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, LODDistances) == 0x000B58, "Member 'UGeometryCollectionComponent::LODDistances' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bGCUpdateISMTransform) == 0x000B68, "Member 'UGeometryCollectionComponent::bGCUpdateISMTransform' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange) == 0x000B70, "Member 'UGeometryCollectionComponent::NotifyGeometryCollectionPhysicsStateChange' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange) == 0x000B80, "Member 'UGeometryCollectionComponent::NotifyGeometryCollectionPhysicsLoadingStateChange' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosBreakEvent) == 0x000BA8, "Member 'UGeometryCollectionComponent::OnChaosBreakEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosRemovalEvent) == 0x000BB8, "Member 'UGeometryCollectionComponent::OnChaosRemovalEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosCrumblingEvent) == 0x000BC8, "Member 'UGeometryCollectionComponent::OnChaosCrumblingEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosDamageEvent) == 0x000BD8, "Member 'UGeometryCollectionComponent::OnChaosDamageEvent' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DesiredCacheTime) == 0x000C28, "Member 'UGeometryCollectionComponent::DesiredCacheTime' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CachePlayback) == 0x000C2C, "Member 'UGeometryCollectionComponent::CachePlayback' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, OnChaosPhysicsCollision) == 0x000C80, "Member 'UGeometryCollectionComponent::OnChaosPhysicsCollision' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyBreaks) == 0x000C90, "Member 'UGeometryCollectionComponent::bNotifyBreaks' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyCollisions) == 0x000C91, "Member 'UGeometryCollectionComponent::bNotifyCollisions' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyTrailing) == 0x000C92, "Member 'UGeometryCollectionComponent::bNotifyTrailing' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyRemovals) == 0x000C93, "Member 'UGeometryCollectionComponent::bNotifyRemovals' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyCrumblings) == 0x000C94, "Member 'UGeometryCollectionComponent::bNotifyCrumblings' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyDamage) == 0x000C95, "Member 'UGeometryCollectionComponent::bNotifyDamage' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bCrumblingEventIncludesChildren) == 0x000C96, "Member 'UGeometryCollectionComponent::bCrumblingEventIncludesChildren' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyGlobalBreaks) == 0x000C97, "Member 'UGeometryCollectionComponent::bNotifyGlobalBreaks' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyGlobalCollisions) == 0x000C98, "Member 'UGeometryCollectionComponent::bNotifyGlobalCollisions' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyGlobalRemovals) == 0x000C99, "Member 'UGeometryCollectionComponent::bNotifyGlobalRemovals' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bNotifyGlobalCrumblings) == 0x000C9A, "Member 'UGeometryCollectionComponent::bNotifyGlobalCrumblings' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bGlobalCrumblingEventIncludesChildren) == 0x000C9B, "Member 'UGeometryCollectionComponent::bGlobalCrumblingEventIncludesChildren' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bStoreVelocities) == 0x000C9C, "Member 'UGeometryCollectionComponent::bStoreVelocities' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bServerSimulatePhysics) == 0x000C9D, "Member 'UGeometryCollectionComponent::bServerSimulatePhysics' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableAdvancedReplication) == 0x000C9E, "Member 'UGeometryCollectionComponent::bEnableAdvancedReplication' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableSyncLerp) == 0x000C9F, "Member 'UGeometryCollectionComponent::bEnableSyncLerp' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bShowBoneColors) == 0x000CB1, "Member 'UGeometryCollectionComponent::bShowBoneColors' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bShowCollapseGroupColors) == 0x000CB2, "Member 'UGeometryCollectionComponent::bShowCollapseGroupColors' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bUseRootProxyForNavigation) == 0x000CB3, "Member 'UGeometryCollectionComponent::bUseRootProxyForNavigation' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bUpdateNavigationInTick) == 0x000CB4, "Member 'UGeometryCollectionComponent::bUpdateNavigationInTick' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ISMPool) == 0x000CB8, "Member 'UGeometryCollectionComponent::ISMPool' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bAutoAssignISMPool) == 0x000CC0, "Member 'UGeometryCollectionComponent::bAutoAssignISMPool' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bOverrideCustomRenderer) == 0x000CC1, "Member 'UGeometryCollectionComponent::bOverrideCustomRenderer' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CustomRendererType) == 0x000CC8, "Member 'UGeometryCollectionComponent::CustomRendererType' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CustomRenderer) == 0x000CD0, "Member 'UGeometryCollectionComponent::CustomRenderer' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableReplication) == 0x000CD8, "Member 'UGeometryCollectionComponent::bEnableReplication' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bEnableAbandonAfterLevel) == 0x000D10, "Member 'UGeometryCollectionComponent::bEnableAbandonAfterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ReplicationAbandonAfterLevel) == 0x000D14, "Member 'UGeometryCollectionComponent::ReplicationAbandonAfterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, AbandonedCollisionProfileName) == 0x000D18, "Member 'UGeometryCollectionComponent::AbandonedCollisionProfileName' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CollisionProfilePerLevel) == 0x000D78, "Member 'UGeometryCollectionComponent::CollisionProfilePerLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ReplicationAbandonClusterLevel) == 0x000D98, "Member 'UGeometryCollectionComponent::ReplicationAbandonClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, ReplicationMaxPositionAndVelocityCorrectionLevel) == 0x000D9C, "Member 'UGeometryCollectionComponent::ReplicationMaxPositionAndVelocityCorrectionLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, InitRepData) == 0x000DA0, "Member 'UGeometryCollectionComponent::InitRepData' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, DummyBodySetup) == 0x0011C8, "Member 'UGeometryCollectionComponent::DummyBodySetup' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EventDispatcher) == 0x0011D0, "Member 'UGeometryCollectionComponent::EventDispatcher' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, EmbeddedGeometryComponents) == 0x0011D8, "Member 'UGeometryCollectionComponent::EmbeddedGeometryComponents' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bMovable) == 0x0013E8, "Member 'UGeometryCollectionComponent::bMovable' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, CheckAllParticleBeDisableTime) == 0x001440, "Member 'UGeometryCollectionComponent::CheckAllParticleBeDisableTime' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PostPhysicsTickFunction) == 0x001458, "Member 'UGeometryCollectionComponent::PostPhysicsTickFunction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, PostUpdateWorkTickFunction) == 0x0014C0, "Member 'UGeometryCollectionComponent::PostUpdateWorkTickFunction' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionComponent, bGCMoveByAnim) == 0x0014F8, "Member 'UGeometryCollectionComponent::bGCMoveByAnim' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawActor
// 0x00C0 (0x0550 - 0x0490)
class AGeometryCollectionDebugDrawActor final : public AActor
{
public:
	struct FGeometryCollectionDebugDrawWarningMessage WarningMessage;                                    // 0x0490(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;                                 // 0x0498(0x0018)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWholeCollection;                         // 0x04B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawHierarchy;                               // 0x04B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawClustering;                              // 0x04B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryCollectionDebugDrawActorHideGeometry HideGeometry;                                      // 0x04B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyId;                                  // 0x04B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyCollision;                           // 0x04B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollisionAtOrigin;                                // 0x04B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyTransform;                           // 0x04B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyInertia;                             // 0x04B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyVelocity;                            // 0x04B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyForce;                               // 0x04BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRigidBodyInfos;                               // 0x04BB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransformIndex;                               // 0x04BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransform;                                    // 0x04BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowParent;                                       // 0x04BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLevel;                                        // 0x04BF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConnectivityEdges;                            // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGeometryIndex;                                // 0x04C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGeometryTransform;                            // 0x04C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBoundingBox;                                  // 0x04C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaces;                                        // 0x04C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaceIndices;                                  // 0x04C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFaceNormals;                                  // 0x04C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSingleFace;                                   // 0x04C7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SingleFaceIndex;                                   // 0x04C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertices;                                     // 0x04CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertexIndices;                                // 0x04CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVertexNormals;                                // 0x04CE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActiveVisualization;                           // 0x04CF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointThickness;                                    // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x04D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextShadow;                                       // 0x04D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextScale;                                         // 0x04DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalScale;                                       // 0x04E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x04E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowScale;                                        // 0x04E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyIdColor;                                  // 0x04EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RigidBodyTransformScale;                           // 0x04F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyCollisionColor;                           // 0x04F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyInertiaColor;                             // 0x04F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyVelocityColor;                            // 0x04FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyForceColor;                               // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RigidBodyInfoColor;                                // 0x0504(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TransformIndexColor;                               // 0x0508(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformScale;                                    // 0x050C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LevelColor;                                        // 0x0510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ParentColor;                                       // 0x0514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConnectivityEdgeThickness;                         // 0x0518(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GeometryIndexColor;                                // 0x051C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeometryTransformScale;                            // 0x0520(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BoundingBoxColor;                                  // 0x0524(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceColor;                                         // 0x0528(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceIndexColor;                                    // 0x052C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FaceNormalColor;                                   // 0x0530(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SingleFaceColor;                                   // 0x0534(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexColor;                                       // 0x0538(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexIndexColor;                                  // 0x053C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VertexNormalColor;                                 // 0x0540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBillboardComponent*                    SpriteComponent;                                   // 0x0548(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawActor">();
	}
	static class AGeometryCollectionDebugDrawActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionDebugDrawActor>();
	}
};
static_assert(alignof(AGeometryCollectionDebugDrawActor) == 0x000008, "Wrong alignment on AGeometryCollectionDebugDrawActor");
static_assert(sizeof(AGeometryCollectionDebugDrawActor) == 0x000550, "Wrong size on AGeometryCollectionDebugDrawActor");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, WarningMessage) == 0x000490, "Member 'AGeometryCollectionDebugDrawActor::WarningMessage' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SelectedRigidBody) == 0x000498, "Member 'AGeometryCollectionDebugDrawActor::SelectedRigidBody' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection) == 0x0004B0, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawWholeCollection' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy) == 0x0004B1, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawHierarchy' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bDebugDrawClustering) == 0x0004B2, "Member 'AGeometryCollectionDebugDrawActor::bDebugDrawClustering' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, HideGeometry) == 0x0004B3, "Member 'AGeometryCollectionDebugDrawActor::HideGeometry' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyId) == 0x0004B4, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyId' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision) == 0x0004B5, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyCollision' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bCollisionAtOrigin) == 0x0004B6, "Member 'AGeometryCollectionDebugDrawActor::bCollisionAtOrigin' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform) == 0x0004B7, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia) == 0x0004B8, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyInertia' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity) == 0x0004B9, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyVelocity' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyForce) == 0x0004BA, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyForce' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos) == 0x0004BB, "Member 'AGeometryCollectionDebugDrawActor::bShowRigidBodyInfos' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowTransformIndex) == 0x0004BC, "Member 'AGeometryCollectionDebugDrawActor::bShowTransformIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowTransform) == 0x0004BD, "Member 'AGeometryCollectionDebugDrawActor::bShowTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowParent) == 0x0004BE, "Member 'AGeometryCollectionDebugDrawActor::bShowParent' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowLevel) == 0x0004BF, "Member 'AGeometryCollectionDebugDrawActor::bShowLevel' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowConnectivityEdges) == 0x0004C0, "Member 'AGeometryCollectionDebugDrawActor::bShowConnectivityEdges' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowGeometryIndex) == 0x0004C1, "Member 'AGeometryCollectionDebugDrawActor::bShowGeometryIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowGeometryTransform) == 0x0004C2, "Member 'AGeometryCollectionDebugDrawActor::bShowGeometryTransform' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowBoundingBox) == 0x0004C3, "Member 'AGeometryCollectionDebugDrawActor::bShowBoundingBox' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaces) == 0x0004C4, "Member 'AGeometryCollectionDebugDrawActor::bShowFaces' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaceIndices) == 0x0004C5, "Member 'AGeometryCollectionDebugDrawActor::bShowFaceIndices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowFaceNormals) == 0x0004C6, "Member 'AGeometryCollectionDebugDrawActor::bShowFaceNormals' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowSingleFace) == 0x0004C7, "Member 'AGeometryCollectionDebugDrawActor::bShowSingleFace' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SingleFaceIndex) == 0x0004C8, "Member 'AGeometryCollectionDebugDrawActor::SingleFaceIndex' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertices) == 0x0004CC, "Member 'AGeometryCollectionDebugDrawActor::bShowVertices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertexIndices) == 0x0004CD, "Member 'AGeometryCollectionDebugDrawActor::bShowVertexIndices' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bShowVertexNormals) == 0x0004CE, "Member 'AGeometryCollectionDebugDrawActor::bShowVertexNormals' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bUseActiveVisualization) == 0x0004CF, "Member 'AGeometryCollectionDebugDrawActor::bUseActiveVisualization' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, PointThickness) == 0x0004D0, "Member 'AGeometryCollectionDebugDrawActor::PointThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, LineThickness) == 0x0004D4, "Member 'AGeometryCollectionDebugDrawActor::LineThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, bTextShadow) == 0x0004D8, "Member 'AGeometryCollectionDebugDrawActor::bTextShadow' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TextScale) == 0x0004DC, "Member 'AGeometryCollectionDebugDrawActor::TextScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, NormalScale) == 0x0004E0, "Member 'AGeometryCollectionDebugDrawActor::NormalScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, AxisScale) == 0x0004E4, "Member 'AGeometryCollectionDebugDrawActor::AxisScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ArrowScale) == 0x0004E8, "Member 'AGeometryCollectionDebugDrawActor::ArrowScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyIdColor) == 0x0004EC, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyIdColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyTransformScale) == 0x0004F0, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyTransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor) == 0x0004F4, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyCollisionColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor) == 0x0004F8, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyInertiaColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor) == 0x0004FC, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyVelocityColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyForceColor) == 0x000500, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyForceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, RigidBodyInfoColor) == 0x000504, "Member 'AGeometryCollectionDebugDrawActor::RigidBodyInfoColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TransformIndexColor) == 0x000508, "Member 'AGeometryCollectionDebugDrawActor::TransformIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, TransformScale) == 0x00050C, "Member 'AGeometryCollectionDebugDrawActor::TransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, LevelColor) == 0x000510, "Member 'AGeometryCollectionDebugDrawActor::LevelColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ParentColor) == 0x000514, "Member 'AGeometryCollectionDebugDrawActor::ParentColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness) == 0x000518, "Member 'AGeometryCollectionDebugDrawActor::ConnectivityEdgeThickness' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, GeometryIndexColor) == 0x00051C, "Member 'AGeometryCollectionDebugDrawActor::GeometryIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, GeometryTransformScale) == 0x000520, "Member 'AGeometryCollectionDebugDrawActor::GeometryTransformScale' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, BoundingBoxColor) == 0x000524, "Member 'AGeometryCollectionDebugDrawActor::BoundingBoxColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceColor) == 0x000528, "Member 'AGeometryCollectionDebugDrawActor::FaceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceIndexColor) == 0x00052C, "Member 'AGeometryCollectionDebugDrawActor::FaceIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, FaceNormalColor) == 0x000530, "Member 'AGeometryCollectionDebugDrawActor::FaceNormalColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SingleFaceColor) == 0x000534, "Member 'AGeometryCollectionDebugDrawActor::SingleFaceColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexColor) == 0x000538, "Member 'AGeometryCollectionDebugDrawActor::VertexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexIndexColor) == 0x00053C, "Member 'AGeometryCollectionDebugDrawActor::VertexIndexColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, VertexNormalColor) == 0x000540, "Member 'AGeometryCollectionDebugDrawActor::VertexNormalColor' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionDebugDrawActor, SpriteComponent) == 0x000548, "Member 'AGeometryCollectionDebugDrawActor::SpriteComponent' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionDebugDrawComponent
// 0x0018 (0x0108 - 0x00F0)
class UGeometryCollectionDebugDrawComponent final : public UActorComponent
{
public:
	class AGeometryCollectionDebugDrawActor*      GeometryCollectionDebugDrawActor;                  // 0x00F0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;             // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionDebugDrawComponent">();
	}
	static class UGeometryCollectionDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionDebugDrawComponent>();
	}
};
static_assert(alignof(UGeometryCollectionDebugDrawComponent) == 0x000008, "Wrong alignment on UGeometryCollectionDebugDrawComponent");
static_assert(sizeof(UGeometryCollectionDebugDrawComponent) == 0x000108, "Wrong size on UGeometryCollectionDebugDrawComponent");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor) == 0x0000F0, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionDebugDrawActor' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor) == 0x0000F8, "Member 'UGeometryCollectionDebugDrawComponent::GeometryCollectionRenderLevelSetActor' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolActor
// 0x0010 (0x04A0 - 0x0490)
class AGeometryCollectionISMPoolActor final : public AActor
{
public:
	class UGeometryCollectionISMPoolComponent*    ISMPoolComp;                                       // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGeometryCollectionISMPoolDebugDrawComponent* ISMPoolDebugDrawComp;                              // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolActor">();
	}
	static class AGeometryCollectionISMPoolActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionISMPoolActor>();
	}
};
static_assert(alignof(AGeometryCollectionISMPoolActor) == 0x000008, "Wrong alignment on AGeometryCollectionISMPoolActor");
static_assert(sizeof(AGeometryCollectionISMPoolActor) == 0x0004A0, "Wrong size on AGeometryCollectionISMPoolActor");
static_assert(offsetof(AGeometryCollectionISMPoolActor, ISMPoolComp) == 0x000490, "Member 'AGeometryCollectionISMPoolActor::ISMPoolComp' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionISMPoolActor, ISMPoolDebugDrawComp) == 0x000498, "Member 'AGeometryCollectionISMPoolActor::ISMPoolDebugDrawComp' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolComponent
// 0x00D0 (0x0540 - 0x0470)
class UGeometryCollectionISMPoolComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0xD0];                                     // 0x0470(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolComponent">();
	}
	static class UGeometryCollectionISMPoolComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMPoolComponent>();
	}
};
static_assert(alignof(UGeometryCollectionISMPoolComponent) == 0x000010, "Wrong alignment on UGeometryCollectionISMPoolComponent");
static_assert(sizeof(UGeometryCollectionISMPoolComponent) == 0x000540, "Wrong size on UGeometryCollectionISMPoolComponent");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolRenderer
// 0x00A0 (0x00D0 - 0x0030)
class alignas(0x10) UGeometryCollectionISMPoolRenderer final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AGeometryCollectionISMPoolActor*        ISMPoolActor;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x90];                                      // 0x0040(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolRenderer">();
	}
	static class UGeometryCollectionISMPoolRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMPoolRenderer>();
	}
};
static_assert(alignof(UGeometryCollectionISMPoolRenderer) == 0x000010, "Wrong alignment on UGeometryCollectionISMPoolRenderer");
static_assert(sizeof(UGeometryCollectionISMPoolRenderer) == 0x0000D0, "Wrong size on UGeometryCollectionISMPoolRenderer");
static_assert(offsetof(UGeometryCollectionISMPoolRenderer, ISMPoolActor) == 0x000038, "Member 'UGeometryCollectionISMPoolRenderer::ISMPoolActor' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollection
// 0x0238 (0x0268 - 0x0030)
class UGeometryCollection final : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bNewSecondaryFragmentData;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderDataLODNum;                                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableClustering;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClusterGroupIndex;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClusterLevel;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageModelTypeEnum                          DamageModel;                                       // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DamageThreshold;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSizeSpecificDamageThreshold;                   // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerClusterOnlyDamageThreshold;                     // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionDamagePropagationData DamagePropagationData;                             // 0x0084(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EClusterConnectionTypeEnum                    ClusterConnectionType;                             // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConnectionGraphBoundsFilteringMargin;              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionEmbeddedExemplar> EmbeddedGeometryExemplar;                          // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FGeometryCollectionNiagaraMeshs> NiagaraMeshs;                                      // 0x00B8(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseFullPrecisionUVs;                              // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripOnCook;                                      // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripRenderDataOnCook;                            // 0x010A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    CustomRendererType;                                // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometryCollectionProxyMeshData       RootProxyData;                                     // 0x0118(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionAutoInstanceMesh> AutoInstanceMeshes;                                // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableNanite;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertVertexColorsToSRGB;                        // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMassToLocalComputedByBoundingBox;                 // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicsMaterial;                                   // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDensityFromPhysicsMaterial;                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMassAsDensity;                                    // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumMassClamp;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportCollisionFromSource;                        // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleOnRemoval;                                   // 0x0155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnMaxSleep;                                 // 0x0156(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MaximumSleepTime;                                  // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RemovalDuration;                                   // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlowMovingAsSleeping;                             // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlowMovingVelocityThreshold;                       // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionSizeSpecificData> SizeSpecificData;                                  // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableRemovePiecesOnFracture;                      // 0x0190(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             RemoveOnFractureMaterials;                         // 0x0198(0x0010)(ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataflow*                              DataflowAsset;                                     // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataflowTerminal;                                  // 0x01B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Overrides;                                         // 0x01C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGuid                                  PersistentGuid;                                    // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  StateGuid;                                         // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RootIndex;                                         // 0x0230(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BoneSelectedMaterialIndex;                         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     BoneSelectedMaterial;                              // 0x0238(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0250(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshGCCollision();
	bool ReorderGCIndex();
	void SetConvertVertexColorsToSRGB(bool bValue);
	void SetEnableNanite(bool bValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollection">();
	}
	static class UGeometryCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollection>();
	}
};
static_assert(alignof(UGeometryCollection) == 0x000008, "Wrong alignment on UGeometryCollection");
static_assert(sizeof(UGeometryCollection) == 0x000268, "Wrong size on UGeometryCollection");
static_assert(offsetof(UGeometryCollection, bNewSecondaryFragmentData) == 0x000048, "Member 'UGeometryCollection::bNewSecondaryFragmentData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RenderDataLODNum) == 0x00004C, "Member 'UGeometryCollection::RenderDataLODNum' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EnableClustering) == 0x000060, "Member 'UGeometryCollection::EnableClustering' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ClusterGroupIndex) == 0x000064, "Member 'UGeometryCollection::ClusterGroupIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MaxClusterLevel) == 0x000068, "Member 'UGeometryCollection::MaxClusterLevel' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DamageModel) == 0x00006C, "Member 'UGeometryCollection::DamageModel' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DamageThreshold) == 0x000070, "Member 'UGeometryCollection::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bUseSizeSpecificDamageThreshold) == 0x000080, "Member 'UGeometryCollection::bUseSizeSpecificDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PerClusterOnlyDamageThreshold) == 0x000081, "Member 'UGeometryCollection::PerClusterOnlyDamageThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DamagePropagationData) == 0x000084, "Member 'UGeometryCollection::DamagePropagationData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ClusterConnectionType) == 0x000090, "Member 'UGeometryCollection::ClusterConnectionType' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, ConnectionGraphBoundsFilteringMargin) == 0x000094, "Member 'UGeometryCollection::ConnectionGraphBoundsFilteringMargin' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Materials) == 0x000098, "Member 'UGeometryCollection::Materials' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EmbeddedGeometryExemplar) == 0x0000A8, "Member 'UGeometryCollection::EmbeddedGeometryExemplar' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, NiagaraMeshs) == 0x0000B8, "Member 'UGeometryCollection::NiagaraMeshs' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bUseFullPrecisionUVs) == 0x000108, "Member 'UGeometryCollection::bUseFullPrecisionUVs' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bStripOnCook) == 0x000109, "Member 'UGeometryCollection::bStripOnCook' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bStripRenderDataOnCook) == 0x00010A, "Member 'UGeometryCollection::bStripRenderDataOnCook' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, CustomRendererType) == 0x000110, "Member 'UGeometryCollection::CustomRendererType' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RootProxyData) == 0x000118, "Member 'UGeometryCollection::RootProxyData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, AutoInstanceMeshes) == 0x000128, "Member 'UGeometryCollection::AutoInstanceMeshes' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EnableNanite) == 0x000138, "Member 'UGeometryCollection::EnableNanite' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bConvertVertexColorsToSRGB) == 0x000139, "Member 'UGeometryCollection::bConvertVertexColorsToSRGB' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bMassToLocalComputedByBoundingBox) == 0x00013A, "Member 'UGeometryCollection::bMassToLocalComputedByBoundingBox' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PhysicsMaterial) == 0x000140, "Member 'UGeometryCollection::PhysicsMaterial' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bDensityFromPhysicsMaterial) == 0x000148, "Member 'UGeometryCollection::bDensityFromPhysicsMaterial' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bMassAsDensity) == 0x000149, "Member 'UGeometryCollection::bMassAsDensity' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Mass) == 0x00014C, "Member 'UGeometryCollection::Mass' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MinimumMassClamp) == 0x000150, "Member 'UGeometryCollection::MinimumMassClamp' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bImportCollisionFromSource) == 0x000154, "Member 'UGeometryCollection::bImportCollisionFromSource' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bScaleOnRemoval) == 0x000155, "Member 'UGeometryCollection::bScaleOnRemoval' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bRemoveOnMaxSleep) == 0x000156, "Member 'UGeometryCollection::bRemoveOnMaxSleep' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, MaximumSleepTime) == 0x000158, "Member 'UGeometryCollection::MaximumSleepTime' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RemovalDuration) == 0x000168, "Member 'UGeometryCollection::RemovalDuration' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, bSlowMovingAsSleeping) == 0x000178, "Member 'UGeometryCollection::bSlowMovingAsSleeping' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, SlowMovingVelocityThreshold) == 0x00017C, "Member 'UGeometryCollection::SlowMovingVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, SizeSpecificData) == 0x000180, "Member 'UGeometryCollection::SizeSpecificData' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, EnableRemovePiecesOnFracture) == 0x000190, "Member 'UGeometryCollection::EnableRemovePiecesOnFracture' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RemoveOnFractureMaterials) == 0x000198, "Member 'UGeometryCollection::RemoveOnFractureMaterials' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DataflowAsset) == 0x0001A8, "Member 'UGeometryCollection::DataflowAsset' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, DataflowTerminal) == 0x0001B0, "Member 'UGeometryCollection::DataflowTerminal' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, Overrides) == 0x0001C0, "Member 'UGeometryCollection::Overrides' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, PersistentGuid) == 0x000210, "Member 'UGeometryCollection::PersistentGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, StateGuid) == 0x000220, "Member 'UGeometryCollection::StateGuid' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, RootIndex) == 0x000230, "Member 'UGeometryCollection::RootIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, BoneSelectedMaterialIndex) == 0x000234, "Member 'UGeometryCollection::BoneSelectedMaterialIndex' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, BoneSelectedMaterial) == 0x000238, "Member 'UGeometryCollection::BoneSelectedMaterial' has a wrong offset!");
static_assert(offsetof(UGeometryCollection, AssetUserData) == 0x000250, "Member 'UGeometryCollection::AssetUserData' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor
// 0x00F0 (0x0580 - 0x0490)
class alignas(0x10) AGeometryCollectionRenderLevelSetActor final : public AActor
{
public:
	class UVolumeTexture*                         TargetVolumeTexture;                               // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              RayMarchMaterial;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceTolerance;                                  // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Isovalue;                                          // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderVolumeBoundingBox;                           // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AA[0xD6];                                     // 0x04AA(0x00D6)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionRenderLevelSetActor">();
	}
	static class AGeometryCollectionRenderLevelSetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometryCollectionRenderLevelSetActor>();
	}
};
static_assert(alignof(AGeometryCollectionRenderLevelSetActor) == 0x000010, "Wrong alignment on AGeometryCollectionRenderLevelSetActor");
static_assert(sizeof(AGeometryCollectionRenderLevelSetActor) == 0x000580, "Wrong size on AGeometryCollectionRenderLevelSetActor");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture) == 0x000490, "Member 'AGeometryCollectionRenderLevelSetActor::TargetVolumeTexture' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RayMarchMaterial) == 0x000498, "Member 'AGeometryCollectionRenderLevelSetActor::RayMarchMaterial' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, SurfaceTolerance) == 0x0004A0, "Member 'AGeometryCollectionRenderLevelSetActor::SurfaceTolerance' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Isovalue) == 0x0004A4, "Member 'AGeometryCollectionRenderLevelSetActor::Isovalue' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, Enabled) == 0x0004A8, "Member 'AGeometryCollectionRenderLevelSetActor::Enabled' has a wrong offset!");
static_assert(offsetof(AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox) == 0x0004A9, "Member 'AGeometryCollectionRenderLevelSetActor::RenderVolumeBoundingBox' has a wrong offset!");

// Class GeometryCollectionEngine.GeometryCollectionISMPoolDebugDrawComponent
// 0x0010 (0x08A0 - 0x0890)
class UGeometryCollectionISMPoolDebugDrawComponent final : public UDebugDrawComponent
{
public:
	bool                                          bShowGlobalStats;                                  // 0x0888(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowStats;                                        // 0x0889(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBounds;                                       // 0x088A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88B[0x5];                                      // 0x088B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          SelectedComponent;                                 // 0x0890(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_898[0x8];                                      // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometryCollectionISMPoolDebugDrawComponent">();
	}
	static class UGeometryCollectionISMPoolDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometryCollectionISMPoolDebugDrawComponent>();
	}
};
static_assert(alignof(UGeometryCollectionISMPoolDebugDrawComponent) == 0x000010, "Wrong alignment on UGeometryCollectionISMPoolDebugDrawComponent");
static_assert(sizeof(UGeometryCollectionISMPoolDebugDrawComponent) == 0x0008A0, "Wrong size on UGeometryCollectionISMPoolDebugDrawComponent");
static_assert(offsetof(UGeometryCollectionISMPoolDebugDrawComponent, bShowGlobalStats) == 0x000888, "Member 'UGeometryCollectionISMPoolDebugDrawComponent::bShowGlobalStats' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionISMPoolDebugDrawComponent, bShowStats) == 0x000889, "Member 'UGeometryCollectionISMPoolDebugDrawComponent::bShowStats' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionISMPoolDebugDrawComponent, bShowBounds) == 0x00088A, "Member 'UGeometryCollectionISMPoolDebugDrawComponent::bShowBounds' has a wrong offset!");
static_assert(offsetof(UGeometryCollectionISMPoolDebugDrawComponent, SelectedComponent) == 0x000890, "Member 'UGeometryCollectionISMPoolDebugDrawComponent::SelectedComponent' has a wrong offset!");

}

