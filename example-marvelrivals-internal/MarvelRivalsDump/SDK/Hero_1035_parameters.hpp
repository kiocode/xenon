#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1035

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Hero_1035_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Hero_1035.Ability_103521.OnPressLeft
// 0x0004 (0x0004 - 0x0000)
struct Ability_103521_OnPressLeft final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103521_OnPressLeft) == 0x000004, "Wrong alignment on Ability_103521_OnPressLeft");
static_assert(sizeof(Ability_103521_OnPressLeft) == 0x000004, "Wrong size on Ability_103521_OnPressLeft");
static_assert(offsetof(Ability_103521_OnPressLeft, TimeWaited) == 0x000000, "Member 'Ability_103521_OnPressLeft::TimeWaited' has a wrong offset!");

// Function Hero_1035.Ability_103521.OnReleaseLeft
// 0x0004 (0x0004 - 0x0000)
struct Ability_103521_OnReleaseLeft final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103521_OnReleaseLeft) == 0x000004, "Wrong alignment on Ability_103521_OnReleaseLeft");
static_assert(sizeof(Ability_103521_OnReleaseLeft) == 0x000004, "Wrong size on Ability_103521_OnReleaseLeft");
static_assert(offsetof(Ability_103521_OnReleaseLeft, TimeWaited) == 0x000000, "Member 'Ability_103521_OnReleaseLeft::TimeWaited' has a wrong offset!");

// Function Hero_1035.Ability_103521.OnSpawnSuccess
// 0x0170 (0x0170 - 0x0000)
struct Ability_103521_OnSpawnSuccess final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103521_OnSpawnSuccess) == 0x000008, "Wrong alignment on Ability_103521_OnSpawnSuccess");
static_assert(sizeof(Ability_103521_OnSpawnSuccess) == 0x000170, "Wrong size on Ability_103521_OnSpawnSuccess");
static_assert(offsetof(Ability_103521_OnSpawnSuccess, SpawnActor) == 0x000000, "Member 'Ability_103521_OnSpawnSuccess::SpawnActor' has a wrong offset!");
static_assert(offsetof(Ability_103521_OnSpawnSuccess, Data) == 0x000008, "Member 'Ability_103521_OnSpawnSuccess::Data' has a wrong offset!");

// Function Hero_1035.Scope_10352101.OnDeactivateTentacle
// 0x0004 (0x0004 - 0x0000)
struct Scope_10352101_OnDeactivateTentacle final
{
public:
	int32                                         TentacleID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_10352101_OnDeactivateTentacle) == 0x000004, "Wrong alignment on Scope_10352101_OnDeactivateTentacle");
static_assert(sizeof(Scope_10352101_OnDeactivateTentacle) == 0x000004, "Wrong size on Scope_10352101_OnDeactivateTentacle");
static_assert(offsetof(Scope_10352101_OnDeactivateTentacle, TentacleID) == 0x000000, "Member 'Scope_10352101_OnDeactivateTentacle::TentacleID' has a wrong offset!");

// Function Hero_1035.Scope_10352101.ServerSetTraceResult
// 0x0170 (0x0170 - 0x0000)
struct Scope_10352101_ServerSetTraceResult final
{
public:
	struct FHitResult                             InTraceResult;                                     // 0x0000(0x0170)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_10352101_ServerSetTraceResult) == 0x000008, "Wrong alignment on Scope_10352101_ServerSetTraceResult");
static_assert(sizeof(Scope_10352101_ServerSetTraceResult) == 0x000170, "Wrong size on Scope_10352101_ServerSetTraceResult");
static_assert(offsetof(Scope_10352101_ServerSetTraceResult, InTraceResult) == 0x000000, "Member 'Scope_10352101_ServerSetTraceResult::InTraceResult' has a wrong offset!");

// Function Hero_1035.Ability_103531.Explode
// 0x0170 (0x0170 - 0x0000)
struct Ability_103531_Explode final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103531_Explode) == 0x000008, "Wrong alignment on Ability_103531_Explode");
static_assert(sizeof(Ability_103531_Explode) == 0x000170, "Wrong size on Ability_103531_Explode");
static_assert(offsetof(Ability_103531_Explode, Hit) == 0x000000, "Member 'Ability_103531_Explode::Hit' has a wrong offset!");

// Function Hero_1035.Ability_103531.OnDashFinish
// 0x0001 (0x0001 - 0x0000)
struct Ability_103531_OnDashFinish final
{
public:
	EDashStopReason                               Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103531_OnDashFinish) == 0x000001, "Wrong alignment on Ability_103531_OnDashFinish");
static_assert(sizeof(Ability_103531_OnDashFinish) == 0x000001, "Wrong size on Ability_103531_OnDashFinish");
static_assert(offsetof(Ability_103531_OnDashFinish, Reason) == 0x000000, "Member 'Ability_103531_OnDashFinish::Reason' has a wrong offset!");

// Function Hero_1035.Ability_103531.PlayMontage
// 0x0004 (0x0004 - 0x0000)
struct Ability_103531_PlayMontage final
{
public:
	int32                                         MontageIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103531_PlayMontage) == 0x000004, "Wrong alignment on Ability_103531_PlayMontage");
static_assert(sizeof(Ability_103531_PlayMontage) == 0x000004, "Wrong size on Ability_103531_PlayMontage");
static_assert(offsetof(Ability_103531_PlayMontage, MontageIndex) == 0x000000, "Member 'Ability_103531_PlayMontage::MontageIndex' has a wrong offset!");

// Function Hero_1035.Ability_103531.TraceGround
// 0x0001 (0x0001 - 0x0000)
struct Ability_103531_TraceGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103531_TraceGround) == 0x000001, "Wrong alignment on Ability_103531_TraceGround");
static_assert(sizeof(Ability_103531_TraceGround) == 0x000001, "Wrong size on Ability_103531_TraceGround");
static_assert(offsetof(Ability_103531_TraceGround, ReturnValue) == 0x000000, "Member 'Ability_103531_TraceGround::ReturnValue' has a wrong offset!");

// Function Hero_1035.Cue_Ability_Loop_10353102.OnAbilityCanActivateChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged final
{
public:
	bool                                          bCanActivate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged");
static_assert(sizeof(Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged");
static_assert(offsetof(Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged, bCanActivate) == 0x000000, "Member 'Cue_Ability_Loop_10353102_OnAbilityCanActivateChanged::bCanActivate' has a wrong offset!");

// Function Hero_1035.Cue_Ability_Loop_10353102.OnDashStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10353102_OnDashStateChanged final
{
public:
	bool                                          bIsDashing;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10353102_OnDashStateChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10353102_OnDashStateChanged");
static_assert(sizeof(Cue_Ability_Loop_10353102_OnDashStateChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10353102_OnDashStateChanged");
static_assert(offsetof(Cue_Ability_Loop_10353102_OnDashStateChanged, bIsDashing) == 0x000000, "Member 'Cue_Ability_Loop_10353102_OnDashStateChanged::bIsDashing' has a wrong offset!");

// Function Hero_1035.Cue_Ability_Loop_10353102.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10353102_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10353102_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10353102_OnPlayerViewSideChanged");
static_assert(sizeof(Cue_Ability_Loop_10353102_OnPlayerViewSideChanged) == 0x000001, "Wrong size on Cue_Ability_Loop_10353102_OnPlayerViewSideChanged");
static_assert(offsetof(Cue_Ability_Loop_10353102_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'Cue_Ability_Loop_10353102_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1035.Cue_Buff_10354101.OnSymbioteStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Buff_10354101_OnSymbioteStateChanged final
{
public:
	bool                                          InSymbioteState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Buff_10354101_OnSymbioteStateChanged) == 0x000001, "Wrong alignment on Cue_Buff_10354101_OnSymbioteStateChanged");
static_assert(sizeof(Cue_Buff_10354101_OnSymbioteStateChanged) == 0x000001, "Wrong size on Cue_Buff_10354101_OnSymbioteStateChanged");
static_assert(offsetof(Cue_Buff_10354101_OnSymbioteStateChanged, InSymbioteState) == 0x000000, "Member 'Cue_Buff_10354101_OnSymbioteStateChanged::InSymbioteState' has a wrong offset!");

// Function Hero_1035.Cue_AbilityLoop_103551.AddArmFXComponent
// 0x0008 (0x0008 - 0x0000)
struct Cue_AbilityLoop_103551_AddArmFXComponent final
{
public:
	class UNiagaraComponent*                      StartComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_103551_AddArmFXComponent) == 0x000008, "Wrong alignment on Cue_AbilityLoop_103551_AddArmFXComponent");
static_assert(sizeof(Cue_AbilityLoop_103551_AddArmFXComponent) == 0x000008, "Wrong size on Cue_AbilityLoop_103551_AddArmFXComponent");
static_assert(offsetof(Cue_AbilityLoop_103551_AddArmFXComponent, StartComp) == 0x000000, "Member 'Cue_AbilityLoop_103551_AddArmFXComponent::StartComp' has a wrong offset!");

// Function Hero_1035.Cue_AbilityLoop_103551.GetTargetLocationEXT
// 0x0018 (0x0018 - 0x0000)
struct Cue_AbilityLoop_103551_GetTargetLocationEXT final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_103551_GetTargetLocationEXT) == 0x000008, "Wrong alignment on Cue_AbilityLoop_103551_GetTargetLocationEXT");
static_assert(sizeof(Cue_AbilityLoop_103551_GetTargetLocationEXT) == 0x000018, "Wrong size on Cue_AbilityLoop_103551_GetTargetLocationEXT");
static_assert(offsetof(Cue_AbilityLoop_103551_GetTargetLocationEXT, ReturnValue) == 0x000000, "Member 'Cue_AbilityLoop_103551_GetTargetLocationEXT::ReturnValue' has a wrong offset!");

// Function Hero_1035.Cue_AbilityLoop_103551.SetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct Cue_AbilityLoop_103551_SetTargetLocation final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_103551_SetTargetLocation) == 0x000008, "Wrong alignment on Cue_AbilityLoop_103551_SetTargetLocation");
static_assert(sizeof(Cue_AbilityLoop_103551_SetTargetLocation) == 0x000018, "Wrong size on Cue_AbilityLoop_103551_SetTargetLocation");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTargetLocation, InTargetLocation) == 0x000000, "Member 'Cue_AbilityLoop_103551_SetTargetLocation::InTargetLocation' has a wrong offset!");

// Function Hero_1035.Cue_AbilityLoop_103551.SetTentacleMaterialParamValue
// 0x0010 (0x0010 - 0x0000)
struct Cue_AbilityLoop_103551_SetTentacleMaterialParamValue final
{
public:
	class FName                                   InName;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_103551_SetTentacleMaterialParamValue) == 0x000004, "Wrong alignment on Cue_AbilityLoop_103551_SetTentacleMaterialParamValue");
static_assert(sizeof(Cue_AbilityLoop_103551_SetTentacleMaterialParamValue) == 0x000010, "Wrong size on Cue_AbilityLoop_103551_SetTentacleMaterialParamValue");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTentacleMaterialParamValue, InName) == 0x000000, "Member 'Cue_AbilityLoop_103551_SetTentacleMaterialParamValue::InName' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTentacleMaterialParamValue, InValue) == 0x00000C, "Member 'Cue_AbilityLoop_103551_SetTentacleMaterialParamValue::InValue' has a wrong offset!");

// Function Hero_1035.Cue_AbilityLoop_103551.SetTransientFXLerpValue
// 0x0028 (0x0028 - 0x0000)
struct Cue_AbilityLoop_103551_SetTransientFXLerpValue final
{
public:
	class UNiagaraComponent*                      StartComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InTargetLocation;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLerpValue;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_AbilityLoop_103551_SetTransientFXLerpValue) == 0x000008, "Wrong alignment on Cue_AbilityLoop_103551_SetTransientFXLerpValue");
static_assert(sizeof(Cue_AbilityLoop_103551_SetTransientFXLerpValue) == 0x000028, "Wrong size on Cue_AbilityLoop_103551_SetTransientFXLerpValue");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTransientFXLerpValue, StartComp) == 0x000000, "Member 'Cue_AbilityLoop_103551_SetTransientFXLerpValue::StartComp' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTransientFXLerpValue, InTargetLocation) == 0x000008, "Member 'Cue_AbilityLoop_103551_SetTransientFXLerpValue::InTargetLocation' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_103551_SetTransientFXLerpValue, InLerpValue) == 0x000020, "Member 'Cue_AbilityLoop_103551_SetTransientFXLerpValue::InLerpValue' has a wrong offset!");

// Function Hero_1035.Ability_103571.ChangeGravity
// 0x0004 (0x0004 - 0x0000)
struct Ability_103571_ChangeGravity final
{
public:
	float                                         InGravityScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103571_ChangeGravity) == 0x000004, "Wrong alignment on Ability_103571_ChangeGravity");
static_assert(sizeof(Ability_103571_ChangeGravity) == 0x000004, "Wrong size on Ability_103571_ChangeGravity");
static_assert(offsetof(Ability_103571_ChangeGravity, InGravityScale) == 0x000000, "Member 'Ability_103571_ChangeGravity::InGravityScale' has a wrong offset!");

// Function Hero_1035.Scope_10357101.SetScopeRadius
// 0x0004 (0x0004 - 0x0000)
struct Scope_10357101_SetScopeRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_10357101_SetScopeRadius) == 0x000004, "Wrong alignment on Scope_10357101_SetScopeRadius");
static_assert(sizeof(Scope_10357101_SetScopeRadius) == 0x000004, "Wrong size on Scope_10357101_SetScopeRadius");
static_assert(offsetof(Scope_10357101_SetScopeRadius, InRadius) == 0x000000, "Member 'Scope_10357101_SetScopeRadius::InRadius' has a wrong offset!");

// Function Hero_1035.Scope_10357101.SetScopeState
// 0x0001 (0x0001 - 0x0000)
struct Scope_10357101_SetScopeState final
{
public:
	ESymbiontScopeState                           InScopeState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_10357101_SetScopeState) == 0x000001, "Wrong alignment on Scope_10357101_SetScopeState");
static_assert(sizeof(Scope_10357101_SetScopeState) == 0x000001, "Wrong size on Scope_10357101_SetScopeState");
static_assert(offsetof(Scope_10357101_SetScopeState, InScopeState) == 0x000000, "Member 'Scope_10357101_SetScopeState::InScopeState' has a wrong offset!");

// Function Hero_1035.Cue_Scope_Loop_10357101.OnGenericGameplayTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate) == 0x000004, "Wrong alignment on Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate");
static_assert(sizeof(Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate) == 0x000010, "Wrong size on Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate");
static_assert(offsetof(Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate, InTag) == 0x000000, "Member 'Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate::InTag' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate, Count) == 0x00000C, "Member 'Cue_Scope_Loop_10357101_OnGenericGameplayTagUpdate::Count' has a wrong offset!");

// Function Hero_1035.Cue_Scope_Loop_10357101.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct Cue_Scope_Loop_10357101_OnMontageEnded final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInterrupted;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Scope_Loop_10357101_OnMontageEnded) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10357101_OnMontageEnded");
static_assert(sizeof(Cue_Scope_Loop_10357101_OnMontageEnded) == 0x000010, "Wrong size on Cue_Scope_Loop_10357101_OnMontageEnded");
static_assert(offsetof(Cue_Scope_Loop_10357101_OnMontageEnded, InMontage) == 0x000000, "Member 'Cue_Scope_Loop_10357101_OnMontageEnded::InMontage' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10357101_OnMontageEnded, bIsInterrupted) == 0x000008, "Member 'Cue_Scope_Loop_10357101_OnMontageEnded::bIsInterrupted' has a wrong offset!");

// Function Hero_1035.EpicMomentAction_1035.OnGameplayEffectAppliedToTarget
// 0x0018 (0x0018 - 0x0000)
struct EpicMomentAction_1035_OnGameplayEffectAppliedToTarget final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecStackHandle         GameplayEffectSpecHandle;                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveGameplayEffectHandle;                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1035_OnGameplayEffectAppliedToTarget) == 0x000008, "Wrong alignment on EpicMomentAction_1035_OnGameplayEffectAppliedToTarget");
static_assert(sizeof(EpicMomentAction_1035_OnGameplayEffectAppliedToTarget) == 0x000018, "Wrong size on EpicMomentAction_1035_OnGameplayEffectAppliedToTarget");
static_assert(offsetof(EpicMomentAction_1035_OnGameplayEffectAppliedToTarget, ASC) == 0x000000, "Member 'EpicMomentAction_1035_OnGameplayEffectAppliedToTarget::ASC' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1035_OnGameplayEffectAppliedToTarget, GameplayEffectSpecHandle) == 0x000008, "Member 'EpicMomentAction_1035_OnGameplayEffectAppliedToTarget::GameplayEffectSpecHandle' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1035_OnGameplayEffectAppliedToTarget, ActiveGameplayEffectHandle) == 0x000010, "Member 'EpicMomentAction_1035_OnGameplayEffectAppliedToTarget::ActiveGameplayEffectHandle' has a wrong offset!");

// Function Hero_1035.VenomCharacter.EnableSymbioteCollision
// 0x0001 (0x0001 - 0x0000)
struct VenomCharacter_EnableSymbioteCollision final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VenomCharacter_EnableSymbioteCollision) == 0x000001, "Wrong alignment on VenomCharacter_EnableSymbioteCollision");
static_assert(sizeof(VenomCharacter_EnableSymbioteCollision) == 0x000001, "Wrong size on VenomCharacter_EnableSymbioteCollision");
static_assert(offsetof(VenomCharacter_EnableSymbioteCollision, bIsEnable) == 0x000000, "Member 'VenomCharacter_EnableSymbioteCollision::bIsEnable' has a wrong offset!");

// Function Hero_1035.VenomChildActor.HideTentacle
// 0x0010 (0x0010 - 0x0000)
struct VenomChildActor_HideTentacle final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VenomChildActor_HideTentacle) == 0x000008, "Wrong alignment on VenomChildActor_HideTentacle");
static_assert(sizeof(VenomChildActor_HideTentacle) == 0x000010, "Wrong size on VenomChildActor_HideTentacle");
static_assert(offsetof(VenomChildActor_HideTentacle, AnimMontage) == 0x000000, "Member 'VenomChildActor_HideTentacle::AnimMontage' has a wrong offset!");
static_assert(offsetof(VenomChildActor_HideTentacle, bInterrupted) == 0x000008, "Member 'VenomChildActor_HideTentacle::bInterrupted' has a wrong offset!");

// Function Hero_1035.VenomChildActor.OnComponentMaterialChanged
// 0x0008 (0x0008 - 0x0000)
struct VenomChildActor_OnComponentMaterialChanged final
{
public:
	class UActorComponent*                        InActorComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VenomChildActor_OnComponentMaterialChanged) == 0x000008, "Wrong alignment on VenomChildActor_OnComponentMaterialChanged");
static_assert(sizeof(VenomChildActor_OnComponentMaterialChanged) == 0x000008, "Wrong size on VenomChildActor_OnComponentMaterialChanged");
static_assert(offsetof(VenomChildActor_OnComponentMaterialChanged, InActorComponent) == 0x000000, "Member 'VenomChildActor_OnComponentMaterialChanged::InActorComponent' has a wrong offset!");

// Function Hero_1035.VenomChildActor.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct VenomChildActor_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VenomChildActor_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on VenomChildActor_OnPlayerViewSideChanged");
static_assert(sizeof(VenomChildActor_OnPlayerViewSideChanged) == 0x000001, "Wrong size on VenomChildActor_OnPlayerViewSideChanged");
static_assert(offsetof(VenomChildActor_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'VenomChildActor_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

}

