#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GodRay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GodRay.BP_GodRay_C
// 0x0090 (0x0520 - 0x0490)
class ABP_GodRay_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0490(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    UISprite;                                          // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GodRayMesh;                                        // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Sun;                                               // 0x04A8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Width;                                             // 0x04B0(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x04B8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x04C8(0x0010)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brightness;                                        // 0x04D8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeDistance;                                      // 0x04E0(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animated;                                          // 0x04E8(0x0001)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          RandomTime;                                        // 0x04EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          SpotLight;                                         // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSun;                                            // 0x04F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x04F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F7[0x1];                                      // 0x04F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorScale;                                        // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetActorScale;                                     // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BoundScale;                                        // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void TODStart();
	void TODEnd();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_GodRay(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GodRay_C">();
	}
	static class ABP_GodRay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GodRay_C>();
	}
};
//static_assert(alignof(ABP_GodRay_C) == 0x000008, "Wrong alignment on ABP_GodRay_C");
//static_assert(sizeof(ABP_GodRay_C) == 0x000520, "Wrong size on ABP_GodRay_C");
//static_assert(offsetof(ABP_GodRay_C, UberGraphFrame) == 0x000490, "Member 'ABP_GodRay_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, UISprite) == 0x000498, "Member 'ABP_GodRay_C::UISprite' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, GodRayMesh) == 0x0004A0, "Member 'ABP_GodRay_C::GodRayMesh' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Sun) == 0x0004A8, "Member 'ABP_GodRay_C::Sun' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Width) == 0x0004B0, "Member 'ABP_GodRay_C::Width' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Length) == 0x0004B8, "Member 'ABP_GodRay_C::Length' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Mid) == 0x0004C0, "Member 'ABP_GodRay_C::Mid' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Color) == 0x0004C8, "Member 'ABP_GodRay_C::Color' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Brightness) == 0x0004D8, "Member 'ABP_GodRay_C::Brightness' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, FadeDistance) == 0x0004E0, "Member 'ABP_GodRay_C::FadeDistance' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Animated) == 0x0004E8, "Member 'ABP_GodRay_C::Animated' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, RandomTime) == 0x0004EC, "Member 'ABP_GodRay_C::RandomTime' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, SpotLight) == 0x0004F4, "Member 'ABP_GodRay_C::SpotLight' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, UseSun) == 0x0004F5, "Member 'ABP_GodRay_C::UseSun' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, Changed) == 0x0004F6, "Member 'ABP_GodRay_C::Changed' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, ActorScale) == 0x0004F8, "Member 'ABP_GodRay_C::ActorScale' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, SetActorScale) == 0x000510, "Member 'ABP_GodRay_C::SetActorScale' has a wrong offset!");
//static_assert(offsetof(ABP_GodRay_C, BoundScale) == 0x000518, "Member 'ABP_GodRay_C::BoundScale' has a wrong offset!");

}

