#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_101451

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Hero_1014_structs.hpp"
#include "Hero_1014_classes.hpp"


namespace SDK
{

// PythonClass PyAbility_101451.PyConfig_101451
// 0x1008 (0x10D0 - 0x00C8)
class UPyConfig_101451 final : public UConfig_101451
{
public:
	bool                                          ShouldDoTrace;                                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoSlideLaunchedZipline;                          // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldBlockTurn;                                   // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldBlockTagsWhenShooting;                       // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             SceneTraceContext;                                 // 0x00D0(0x0F90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilityTagsWhenShooting;                      // 0x1060(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ZiplinePositionOffset;                             // 0x10C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_101451">();
	}
	static class UPyConfig_101451* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_101451>();
	}
};
static_assert(alignof(UPyConfig_101451) == 0x000010, "Wrong alignment on UPyConfig_101451");
static_assert(sizeof(UPyConfig_101451) == 0x0010D0, "Wrong size on UPyConfig_101451");
static_assert(offsetof(UPyConfig_101451, ShouldDoTrace) == 0x0000C8, "Member 'UPyConfig_101451::ShouldDoTrace' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, AutoSlideLaunchedZipline) == 0x0000C9, "Member 'UPyConfig_101451::AutoSlideLaunchedZipline' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, ShouldBlockTurn) == 0x0000CA, "Member 'UPyConfig_101451::ShouldBlockTurn' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, ShouldBlockTagsWhenShooting) == 0x0000CB, "Member 'UPyConfig_101451::ShouldBlockTagsWhenShooting' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, SceneTraceContext) == 0x0000D0, "Member 'UPyConfig_101451::SceneTraceContext' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, BlockAbilityTagsWhenShooting) == 0x001060, "Member 'UPyConfig_101451::BlockAbilityTagsWhenShooting' has a wrong offset!");
static_assert(offsetof(UPyConfig_101451, ZiplinePositionOffset) == 0x0010C8, "Member 'UPyConfig_101451::ZiplinePositionOffset' has a wrong offset!");

// PythonClass PyAbility_101451.PyProjectile_10145101
// 0x0010 (0x3060 - 0x3050)
class APyProjectile_10145101 final : public AMarvelAbilityTargetActor_Projectile
{
public:
	FMulticastInlineDelegateProperty_             OnProjectileHit_PyProjectile_10145101;             // 0x3050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnProjectileHit__DelegateSignature(const struct FHitResult& ImpactResult);
	void K2_OnBeginAgentTask();
	void K2_OnProcessHit(const struct FHitResult& ImpactResult);
	void K2_OnFlyOverMaxDistance(const struct FHitResult& ImpactResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyProjectile_10145101">();
	}
	static class APyProjectile_10145101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyProjectile_10145101>();
	}
};
static_assert(alignof(APyProjectile_10145101) == 0x000010, "Wrong alignment on APyProjectile_10145101");
static_assert(sizeof(APyProjectile_10145101) == 0x003060, "Wrong size on APyProjectile_10145101");
static_assert(offsetof(APyProjectile_10145101, OnProjectileHit_PyProjectile_10145101) == 0x003050, "Member 'APyProjectile_10145101::OnProjectileHit_PyProjectile_10145101' has a wrong offset!");

// PythonClass PyAbility_101451.PyAbility_101451
// 0x0030 (0x25E0 - 0x25B0)
class UPyAbility_101451 : public UAbility_101451
{
public:
	FMulticastInlineDelegateProperty_             OnTrySpawnSuccess;                                 // 0x25B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTraceStart;                                      // 0x25C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCurrentZiplineLaunchEnd;                         // 0x25D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnTrySpawnSuccess__DelegateSignature();
	void OnTraceStart__DelegateSignature();
	void OnCurrentZiplineLaunchEnd__DelegateSignature(EZiplineLaunchResult LaunchResult);
	void BeginPlay();
	void K2_ActivateAbility();
	void MulticastTraceStartEvent();
	void MulticastStartSpawnSuccess();
	bool CanSpawnZipline();
	void K2_OnEndAbility(bool bWasCancelled);
	void MissileEventNotify();
	EZiplineLaunchResult IsValidToSetupZipline(const struct FHitResult& Hit);
	void OnZiplineLaunchEnd();
	void NativeOnMontageCompleted(const class FString& EventTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_101451">();
	}
	static class UPyAbility_101451* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_101451>();
	}
};
static_assert(alignof(UPyAbility_101451) == 0x000008, "Wrong alignment on UPyAbility_101451");
static_assert(sizeof(UPyAbility_101451) == 0x0025E0, "Wrong size on UPyAbility_101451");
static_assert(offsetof(UPyAbility_101451, OnTrySpawnSuccess) == 0x0025B0, "Member 'UPyAbility_101451::OnTrySpawnSuccess' has a wrong offset!");
static_assert(offsetof(UPyAbility_101451, OnTraceStart) == 0x0025C0, "Member 'UPyAbility_101451::OnTraceStart' has a wrong offset!");
static_assert(offsetof(UPyAbility_101451, OnCurrentZiplineLaunchEnd) == 0x0025D0, "Member 'UPyAbility_101451::OnCurrentZiplineLaunchEnd' has a wrong offset!");

// PythonClass PyAbility_101451.PySummonedComp_10145101
// 0x0000 (0x0CA0 - 0x0CA0)
class UPySummonedComp_10145101 final : public UMarvelSummonedComponent
{
public:
	void K2_OnBeginAgentTask();
	void K2_OnEndAgentTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PySummonedComp_10145101">();
	}
	static class UPySummonedComp_10145101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPySummonedComp_10145101>();
	}
};
static_assert(alignof(UPySummonedComp_10145101) == 0x000010, "Wrong alignment on UPySummonedComp_10145101");
static_assert(sizeof(UPySummonedComp_10145101) == 0x000CA0, "Wrong size on UPySummonedComp_10145101");

// PythonClass PyAbility_101451.PySummoned_10145101
// 0x1030 (0x1970 - 0x0940)
class APySummoned_10145101 : public ASummoned_10145101
{
public:
	class AActor*                                 ProjectileClaw;                                    // 0x0940(0x0008)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZiplineLaunchResult                          LastLaunchResult;                                  // 0x0948(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ZiplineDirectionVector;                            // 0x0950(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_968[0x8];                                      // 0x0968(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             CollisionWithSceneTraceParam;                      // 0x0970(0x0F90)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsTestCaseSummon;                                  // 0x1900(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1901[0x7];                                     // 0x1901(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomEndLocation;                                 // 0x1908(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLaunchStateChanged;                              // 0x1920(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClawSpawnSuccess;                                // 0x1930(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLaunchEnd;                                       // 0x1940(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClawChanged;                                     // 0x1950(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSlideStateChanged;                               // 0x1960(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnLaunchStateChanged__DelegateSignature();
	void OnClawSpawnSuccess__DelegateSignature();
	void OnLaunchEnd__DelegateSignature();
	void OnClawChanged__DelegateSignature();
	void OnSlideStateChanged__DelegateSignature();
	void K2_OnBeginAgentTask();
	void LaunchClaw();
	void OnRep_ClawChanged();
	void ClawChanged();
	void SetLaunchState(EZiplineLaunchState LaunchState_0);
	void SetSlideState(EZiplineSlideState SlideState_0);
	void LaunchStateChanged();
	void OnRep_SlideStateChanged();
	void AuthorityOnClawHit(const struct FHitResult& Hit);
	void MulticastHookClaw(const struct FVector& StartLocation, const struct FVector& EndLocation, const struct FPortalSegments& PortalSegments);
	void OnZiplineEndTask(class AActor* Portal);
	void MulticastLaunchEnd(EZiplineLaunchResult Result);
	void LaunchEnd(EZiplineLaunchResult Result);
	void ZiplineEndingChanged();
	void CheckIfHasValidUseCount();
	void K2_OnEndAgentTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PySummoned_10145101">();
	}
	static class APySummoned_10145101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APySummoned_10145101>();
	}
};
static_assert(alignof(APySummoned_10145101) == 0x000010, "Wrong alignment on APySummoned_10145101");
static_assert(sizeof(APySummoned_10145101) == 0x001970, "Wrong size on APySummoned_10145101");
static_assert(offsetof(APySummoned_10145101, ProjectileClaw) == 0x000940, "Member 'APySummoned_10145101::ProjectileClaw' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, LastLaunchResult) == 0x000948, "Member 'APySummoned_10145101::LastLaunchResult' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, ZiplineDirectionVector) == 0x000950, "Member 'APySummoned_10145101::ZiplineDirectionVector' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, CollisionWithSceneTraceParam) == 0x000970, "Member 'APySummoned_10145101::CollisionWithSceneTraceParam' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, IsTestCaseSummon) == 0x001900, "Member 'APySummoned_10145101::IsTestCaseSummon' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, CustomEndLocation) == 0x001908, "Member 'APySummoned_10145101::CustomEndLocation' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, OnLaunchStateChanged) == 0x001920, "Member 'APySummoned_10145101::OnLaunchStateChanged' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, OnClawSpawnSuccess) == 0x001930, "Member 'APySummoned_10145101::OnClawSpawnSuccess' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, OnLaunchEnd) == 0x001940, "Member 'APySummoned_10145101::OnLaunchEnd' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, OnClawChanged) == 0x001950, "Member 'APySummoned_10145101::OnClawChanged' has a wrong offset!");
static_assert(offsetof(APySummoned_10145101, OnSlideStateChanged) == 0x001960, "Member 'APySummoned_10145101::OnSlideStateChanged' has a wrong offset!");

// PythonClass PyAbility_101451.PyCue_Ability_Loop_10145101
// 0x0000 (0x0E50 - 0x0E50)
class APyCue_Ability_Loop_10145101 final : public AMarvelCueNotify_Ability
{
public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Ability_Loop_10145101">();
	}
	static class APyCue_Ability_Loop_10145101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Ability_Loop_10145101>();
	}
};
static_assert(alignof(APyCue_Ability_Loop_10145101) == 0x000008, "Wrong alignment on APyCue_Ability_Loop_10145101");
static_assert(sizeof(APyCue_Ability_Loop_10145101) == 0x000E50, "Wrong size on APyCue_Ability_Loop_10145101");

// PythonClass PyAbility_101451.PyCue_Projectile_HitImpact_10145101
// 0x0008 (0x04D8 - 0x04D0)
class UPyCue_Projectile_HitImpact_10145101 final : public UMarvelCueNotify_HitImpact
{
public:
	int32                                         LaunchHitAudioID;                                  // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Projectile_HitImpact_10145101">();
	}
	static class UPyCue_Projectile_HitImpact_10145101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyCue_Projectile_HitImpact_10145101>();
	}
};
static_assert(alignof(UPyCue_Projectile_HitImpact_10145101) == 0x000008, "Wrong alignment on UPyCue_Projectile_HitImpact_10145101");
static_assert(sizeof(UPyCue_Projectile_HitImpact_10145101) == 0x0004D8, "Wrong size on UPyCue_Projectile_HitImpact_10145101");
static_assert(offsetof(UPyCue_Projectile_HitImpact_10145101, LaunchHitAudioID) == 0x0004D0, "Member 'UPyCue_Projectile_HitImpact_10145101::LaunchHitAudioID' has a wrong offset!");

// PythonClass PyAbility_101451.PySummoned_Cue_10145101_Loop
// 0x0010 (0x0EB0 - 0x0EA0)
class APySummoned_Cue_10145101_Loop final : public ASummonedCue_10145101_Loop
{
public:
	class UAnimationAsset*                        DeployRodAnim;                                     // 0x0EA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaunchEndAudioID;                                  // 0x0EA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveTick(float DeltaSeconds);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void SetTargetActor(class AActor* TargetActor);
	void LaunchEnd();
	void LaunchStateChanged();
	void ClawSpawnSuccess();
	void ClawChanged();
	void SlideStateChanged();
	void SetCableVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PySummoned_Cue_10145101_Loop">();
	}
	static class APySummoned_Cue_10145101_Loop* GetDefaultObj()
	{
		return GetDefaultObjImpl<APySummoned_Cue_10145101_Loop>();
	}
};
static_assert(alignof(APySummoned_Cue_10145101_Loop) == 0x000008, "Wrong alignment on APySummoned_Cue_10145101_Loop");
static_assert(sizeof(APySummoned_Cue_10145101_Loop) == 0x000EB0, "Wrong size on APySummoned_Cue_10145101_Loop");
static_assert(offsetof(APySummoned_Cue_10145101_Loop, DeployRodAnim) == 0x000EA0, "Member 'APySummoned_Cue_10145101_Loop::DeployRodAnim' has a wrong offset!");
static_assert(offsetof(APySummoned_Cue_10145101_Loop, LaunchEndAudioID) == 0x000EA8, "Member 'APySummoned_Cue_10145101_Loop::LaunchEndAudioID' has a wrong offset!");

// PythonClass PyAbility_101451.PyUIController_101451
// 0x0000 (0x0C60 - 0x0C60)
class UPyUIController_101451 final : public UUIC_Ability
{
public:
	void SetAbility(int32 InAbilityId, class UGameplayAbility* InAbility);
	void OnDestruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_101451">();
	}
	static class UPyUIController_101451* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_101451>();
	}
};
static_assert(alignof(UPyUIController_101451) == 0x000008, "Wrong alignment on UPyUIController_101451");
static_assert(sizeof(UPyUIController_101451) == 0x000C60, "Wrong size on UPyUIController_101451");

}

