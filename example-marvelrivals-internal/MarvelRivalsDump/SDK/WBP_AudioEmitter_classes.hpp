#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AudioEmitter

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AudioEmitter.WBP_AudioEmitter_C
// 0x0100 (0x04B8 - 0x03B8)
class UWBP_AudioEmitter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMarvelTextBlock*                       AkName;                                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       AkRtpcValues;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       AkSwitchValues;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Icon;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelVerticalBox*                     PostingEvents;                                     // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       ThreatValue;                                       // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FMargin                                UnitMargin;                                        // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSet<class UAkAudioEvent*>                    PlayingEvents;                                     // 0x0400(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAkComponent*                           AkComp;                                            // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UAkAudioEvent*, class UWBP_AudioEmitterLine_C*> PlayingLines;                                      // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_AudioEmitterLine_C*                TmpLine;                                           // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMarvelAudioAdmin*                      CachedAdmin;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_AudioEmitter(int32 EntryPoint);
	void GetCachedAdmin(class UMarvelAudioAdmin** AudioAdmin);
	void HasPlayingEvent(bool* Has);
	bool IsEventNameEnabled();
	bool IsThreatValueEnabled();
	void PlayEvent(class UAkAudioEvent* Event, class FName InEventName, class UAkComponent* InAkComp);
	void SetAkCompRtpc(class UAkComponent* AkComp_0);
	void SetAkCompSwitch(class UAkComponent* AkComp_0);
	void SetAkName(class UAkComponent* AkComponent);
	void SetEventName(class UAkAudioEvent* AkEvent, class FName EventName, class UAkComponent* AkComp_0);
	void SetThreatValue(bool Playing);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AudioEmitter_C">();
	}
	static class UWBP_AudioEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AudioEmitter_C>();
	}
};
//static_assert(alignof(UWBP_AudioEmitter_C) == 0x000008, "Wrong alignment on UWBP_AudioEmitter_C");
//static_assert(sizeof(UWBP_AudioEmitter_C) == 0x0004B8, "Wrong size on UWBP_AudioEmitter_C");
//static_assert(offsetof(UWBP_AudioEmitter_C, UberGraphFrame) == 0x0003B8, "Member 'UWBP_AudioEmitter_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, AkName) == 0x0003C0, "Member 'UWBP_AudioEmitter_C::AkName' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, AkRtpcValues) == 0x0003C8, "Member 'UWBP_AudioEmitter_C::AkRtpcValues' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, AkSwitchValues) == 0x0003D0, "Member 'UWBP_AudioEmitter_C::AkSwitchValues' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, Image_Icon) == 0x0003D8, "Member 'UWBP_AudioEmitter_C::Image_Icon' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, PostingEvents) == 0x0003E0, "Member 'UWBP_AudioEmitter_C::PostingEvents' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, ThreatValue) == 0x0003E8, "Member 'UWBP_AudioEmitter_C::ThreatValue' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, UnitMargin) == 0x0003F0, "Member 'UWBP_AudioEmitter_C::UnitMargin' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, PlayingEvents) == 0x000400, "Member 'UWBP_AudioEmitter_C::PlayingEvents' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, AkComp) == 0x000450, "Member 'UWBP_AudioEmitter_C::AkComp' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, PlayingLines) == 0x000458, "Member 'UWBP_AudioEmitter_C::PlayingLines' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, TmpLine) == 0x0004A8, "Member 'UWBP_AudioEmitter_C::TmpLine' has a wrong offset!");
//static_assert(offsetof(UWBP_AudioEmitter_C, CachedAdmin) == 0x0004B0, "Member 'UWBP_AudioEmitter_C::CachedAdmin' has a wrong offset!");

}

