#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyControl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DeclarativeUnreal_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "PyCamp_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyControl.PyControl
// 0x0138 (0x0758 - 0x0620)
class APyControl : public APyCamp
{
public:
	float                                         OccupyProgress;                                    // 0x0620(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressSpeed;                                     // 0x0624(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                OccupySide;                                        // 0x0628(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                OwnerSide;                                         // 0x0629(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62A[0x2];                                      // 0x062A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlueVictoryProgress;                               // 0x062C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RedVictoryProgress;                                // 0x0630(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlLocationIndex;                              // 0x0634(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OccupyProgressMax;                                 // 0x0648(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            OccupyProgressSpeed;                               // 0x0650(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         OccupyLosingSpeed;                                 // 0x06A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLosingOccupy;                                  // 0x06A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APyControlLocation*>             ControlLocations;                                  // 0x06A8(0x0010)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOccupyProgressChanged;                     // 0x06B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchControlOwnerChanged;                       // 0x06C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VOccupySideDispatcher;                             // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchVictoryProgressChanged;                    // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchChangeControlLocation;                     // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherProgressInfoChange;                      // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBothSideIn;                                      // 0x0718(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBothSideOut;                                     // 0x0728(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnlyRedIn;                                         // 0x0738(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnlyBlueIn;                                        // 0x0748(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void DispatchOccupyProgressChanged__DelegateSignature(class AActor* Control_base, EBattleSide battle_side);
	void DispatchControlOwnerChanged__DelegateSignature(class AActor* Control_base, EOwnershipType Owner_side);
	void VOccupySideDispatcher__DelegateSignature(class AActor* Control_base, EOwnershipType Occupy_side);
	void DispatchVictoryProgressChanged__DelegateSignature(class AActor* Control, EBattleSide battle_side);
	void DispatchChangeControlLocation__DelegateSignature(const struct FVector& New_location);
	void DispatcherProgressInfoChange__DelegateSignature(float Progress, float Speed);
	void ReceiveInit();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void S_Initialize();
	void BroadCastFightStart();
	void S_on_player_exit_camp(class AActor* Char);
	void Update();
	void BSetOccupySpeed(float Speed);
	void PlayNumSetOccupySpeed();
	void OnRep_OccupyProgress();
	void OnRep_OccupySide();
	void OnRep_OwnerSide();
	void BroadCastOccupied(EBattleSide BattleSide, bool IsFirstChange);
	void OnRep_ProgressSpeed();
	void PayloadEndFight();
	void OnRep_RedVictoryProgress();
	void OnRep_BlueVictoryProgress();
	void OnRep_ControlLocationIndex();
	void OnBothSideIn__DelegateSignature(class AActor* Control);
	void OnBothSideOut__DelegateSignature(class AActor* Control);
	void OnlyRedIn__DelegateSignature(class AActor* Control);
	void OnlyBlueIn__DelegateSignature(class AActor* Control);
	float GetOccupyProgress();
	EOwnershipType GetOwnerSide();
	float GetVictoryProgress();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyControl">();
	}
	static class APyControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyControl>();
	}
};
static_assert(alignof(APyControl) == 0x000008, "Wrong alignment on APyControl");
static_assert(sizeof(APyControl) == 0x000758, "Wrong size on APyControl");
static_assert(offsetof(APyControl, OccupyProgress) == 0x000620, "Member 'APyControl::OccupyProgress' has a wrong offset!");
static_assert(offsetof(APyControl, ProgressSpeed) == 0x000624, "Member 'APyControl::ProgressSpeed' has a wrong offset!");
static_assert(offsetof(APyControl, OccupySide) == 0x000628, "Member 'APyControl::OccupySide' has a wrong offset!");
static_assert(offsetof(APyControl, OwnerSide) == 0x000629, "Member 'APyControl::OwnerSide' has a wrong offset!");
static_assert(offsetof(APyControl, BlueVictoryProgress) == 0x00062C, "Member 'APyControl::BlueVictoryProgress' has a wrong offset!");
static_assert(offsetof(APyControl, RedVictoryProgress) == 0x000630, "Member 'APyControl::RedVictoryProgress' has a wrong offset!");
static_assert(offsetof(APyControl, ControlLocationIndex) == 0x000634, "Member 'APyControl::ControlLocationIndex' has a wrong offset!");
static_assert(offsetof(APyControl, Name_0) == 0x000638, "Member 'APyControl::Name_0' has a wrong offset!");
static_assert(offsetof(APyControl, OccupyProgressMax) == 0x000648, "Member 'APyControl::OccupyProgressMax' has a wrong offset!");
static_assert(offsetof(APyControl, OccupyProgressSpeed) == 0x000650, "Member 'APyControl::OccupyProgressSpeed' has a wrong offset!");
static_assert(offsetof(APyControl, OccupyLosingSpeed) == 0x0006A0, "Member 'APyControl::OccupyLosingSpeed' has a wrong offset!");
static_assert(offsetof(APyControl, TimeLosingOccupy) == 0x0006A4, "Member 'APyControl::TimeLosingOccupy' has a wrong offset!");
static_assert(offsetof(APyControl, ControlLocations) == 0x0006A8, "Member 'APyControl::ControlLocations' has a wrong offset!");
static_assert(offsetof(APyControl, DispatchOccupyProgressChanged) == 0x0006B8, "Member 'APyControl::DispatchOccupyProgressChanged' has a wrong offset!");
static_assert(offsetof(APyControl, DispatchControlOwnerChanged) == 0x0006C8, "Member 'APyControl::DispatchControlOwnerChanged' has a wrong offset!");
static_assert(offsetof(APyControl, VOccupySideDispatcher) == 0x0006D8, "Member 'APyControl::VOccupySideDispatcher' has a wrong offset!");
static_assert(offsetof(APyControl, DispatchVictoryProgressChanged) == 0x0006E8, "Member 'APyControl::DispatchVictoryProgressChanged' has a wrong offset!");
static_assert(offsetof(APyControl, DispatchChangeControlLocation) == 0x0006F8, "Member 'APyControl::DispatchChangeControlLocation' has a wrong offset!");
static_assert(offsetof(APyControl, DispatcherProgressInfoChange) == 0x000708, "Member 'APyControl::DispatcherProgressInfoChange' has a wrong offset!");
static_assert(offsetof(APyControl, OnBothSideIn) == 0x000718, "Member 'APyControl::OnBothSideIn' has a wrong offset!");
static_assert(offsetof(APyControl, OnBothSideOut) == 0x000728, "Member 'APyControl::OnBothSideOut' has a wrong offset!");
static_assert(offsetof(APyControl, OnlyRedIn) == 0x000738, "Member 'APyControl::OnlyRedIn' has a wrong offset!");
static_assert(offsetof(APyControl, OnlyBlueIn) == 0x000748, "Member 'APyControl::OnlyBlueIn' has a wrong offset!");

// PythonClass PyControl.PyControlV2
// 0x0000 (0x0758 - 0x0758)
class APyControlV2 final : public APyControl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyControlV2">();
	}
	static class APyControlV2* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyControlV2>();
	}
};
static_assert(alignof(APyControlV2) == 0x000008, "Wrong alignment on APyControlV2");
static_assert(sizeof(APyControlV2) == 0x000758, "Wrong size on APyControlV2");

// PythonClass PyControl.PyCue_Level_Base
// 0x0040 (0x0F08 - 0x0EC8)
class APyCue_Level_Base : public AMarvelCueNotify_LoopNoRecycle
{
public:
	class UMaterialInstance*                      MaterialColorWhite;                                // 0x0EC8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialColorBlue;                                 // 0x0ED0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialColorRed;                                  // 0x0ED8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicColorWhite;                                 // 0x0EE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicColorBlue;                                  // 0x0EE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicColorRed;                                   // 0x0EF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     ViewTargetWatcher;                                 // 0x0EF8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();
	bool WhileActive(class AActor* ControlActor, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnControlOwnerChanged(class AActor* ControlPoint, EOwnershipType OwnerSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Level_Base">();
	}
	static class APyCue_Level_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Level_Base>();
	}
};
static_assert(alignof(APyCue_Level_Base) == 0x000008, "Wrong alignment on APyCue_Level_Base");
static_assert(sizeof(APyCue_Level_Base) == 0x000F08, "Wrong size on APyCue_Level_Base");
static_assert(offsetof(APyCue_Level_Base, MaterialColorWhite) == 0x000EC8, "Member 'APyCue_Level_Base::MaterialColorWhite' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, MaterialColorBlue) == 0x000ED0, "Member 'APyCue_Level_Base::MaterialColorBlue' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, MaterialColorRed) == 0x000ED8, "Member 'APyCue_Level_Base::MaterialColorRed' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, DynamicColorWhite) == 0x000EE0, "Member 'APyCue_Level_Base::DynamicColorWhite' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, DynamicColorBlue) == 0x000EE8, "Member 'APyCue_Level_Base::DynamicColorBlue' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, DynamicColorRed) == 0x000EF0, "Member 'APyCue_Level_Base::DynamicColorRed' has a wrong offset!");
static_assert(offsetof(APyCue_Level_Base, ViewTargetWatcher) == 0x000EF8, "Member 'APyCue_Level_Base::ViewTargetWatcher' has a wrong offset!");

// PythonClass PyControl.PyCue_Level_100001
// 0x0000 (0x0F08 - 0x0F08)
class APyCue_Level_100001 final : public APyCue_Level_Base
{
public:
	bool WhileActive(class AActor* ControlActor, const struct FGameplayCueParameters& Parameters);
	void OnControlOwnerChanged(class AActor* ControlPoint, EOwnershipType OwnerSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Level_100001">();
	}
	static class APyCue_Level_100001* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Level_100001>();
	}
};
static_assert(alignof(APyCue_Level_100001) == 0x000008, "Wrong alignment on APyCue_Level_100001");
static_assert(sizeof(APyCue_Level_100001) == 0x000F08, "Wrong size on APyCue_Level_100001");

// PythonClass PyControl.PyCue_Level_ControlPointV2
// 0x0020 (0x0F28 - 0x0F08)
class APyCue_Level_ControlPointV2 final : public APyCue_Level_Base
{
public:
	class UCurveFloat*                            LightUpCurve;                                      // 0x0F08(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LightDownCurve;                                    // 0x0F10(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LatticeUV;                                         // 0x0F18(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveTick(float DeltaSeconds);
	bool WhileActive(class AActor* ControlActor, const struct FGameplayCueParameters& Parameters);
	void OnControlOwnerChanged(class AActor* ControlPoint, EOwnershipType OwnerSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Level_ControlPointV2">();
	}
	static class APyCue_Level_ControlPointV2* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Level_ControlPointV2>();
	}
};
static_assert(alignof(APyCue_Level_ControlPointV2) == 0x000008, "Wrong alignment on APyCue_Level_ControlPointV2");
static_assert(sizeof(APyCue_Level_ControlPointV2) == 0x000F28, "Wrong size on APyCue_Level_ControlPointV2");
static_assert(offsetof(APyCue_Level_ControlPointV2, LightUpCurve) == 0x000F08, "Member 'APyCue_Level_ControlPointV2::LightUpCurve' has a wrong offset!");
static_assert(offsetof(APyCue_Level_ControlPointV2, LightDownCurve) == 0x000F10, "Member 'APyCue_Level_ControlPointV2::LightDownCurve' has a wrong offset!");
static_assert(offsetof(APyCue_Level_ControlPointV2, LatticeUV) == 0x000F18, "Member 'APyCue_Level_ControlPointV2::LatticeUV' has a wrong offset!");

}

