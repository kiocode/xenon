#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1049

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hero_1049_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Hero_1049.AbilityExtraStatistics_104911.OnApplyPercentDamage
// 0x0768 (0x0768 - 0x0000)
struct AbilityExtraStatistics_104911_OnApplyPercentDamage final
{
public:
	float                                         PercentDamageValue;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpec                    SourceSpec;                                        // 0x0008(0x0760)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityExtraStatistics_104911_OnApplyPercentDamage) == 0x000008, "Wrong alignment on AbilityExtraStatistics_104911_OnApplyPercentDamage");
static_assert(sizeof(AbilityExtraStatistics_104911_OnApplyPercentDamage) == 0x000768, "Wrong size on AbilityExtraStatistics_104911_OnApplyPercentDamage");
static_assert(offsetof(AbilityExtraStatistics_104911_OnApplyPercentDamage, PercentDamageValue) == 0x000000, "Member 'AbilityExtraStatistics_104911_OnApplyPercentDamage::PercentDamageValue' has a wrong offset!");
static_assert(offsetof(AbilityExtraStatistics_104911_OnApplyPercentDamage, SourceSpec) == 0x000008, "Member 'AbilityExtraStatistics_104911_OnApplyPercentDamage::SourceSpec' has a wrong offset!");

// Function Hero_1049.Ability_104901.BindNotTreatShieldChanged
// 0x0001 (0x0001 - 0x0000)
struct Ability_104901_BindNotTreatShieldChanged final
{
public:
	bool                                          bBind;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_BindNotTreatShieldChanged) == 0x000001, "Wrong alignment on Ability_104901_BindNotTreatShieldChanged");
static_assert(sizeof(Ability_104901_BindNotTreatShieldChanged) == 0x000001, "Wrong size on Ability_104901_BindNotTreatShieldChanged");
static_assert(offsetof(Ability_104901_BindNotTreatShieldChanged, bBind) == 0x000000, "Member 'Ability_104901_BindNotTreatShieldChanged::bBind' has a wrong offset!");

// Function Hero_1049.Ability_104901.CanResurrectSelf
// 0x0001 (0x0001 - 0x0000)
struct Ability_104901_CanResurrectSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_CanResurrectSelf) == 0x000001, "Wrong alignment on Ability_104901_CanResurrectSelf");
static_assert(sizeof(Ability_104901_CanResurrectSelf) == 0x000001, "Wrong size on Ability_104901_CanResurrectSelf");
static_assert(offsetof(Ability_104901_CanResurrectSelf, ReturnValue) == 0x000000, "Member 'Ability_104901_CanResurrectSelf::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104901.OnAbilityActivateFailed
// 0x0068 (0x0068 - 0x0000)
struct Ability_104901_OnAbilityActivateFailed final
{
public:
	struct FGameplayTagContainer                  FailureReason;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_OnAbilityActivateFailed) == 0x000008, "Wrong alignment on Ability_104901_OnAbilityActivateFailed");
static_assert(sizeof(Ability_104901_OnAbilityActivateFailed) == 0x000068, "Wrong size on Ability_104901_OnAbilityActivateFailed");
static_assert(offsetof(Ability_104901_OnAbilityActivateFailed, FailureReason) == 0x000000, "Member 'Ability_104901_OnAbilityActivateFailed::FailureReason' has a wrong offset!");

// Function Hero_1049.Ability_104901.OnOwnerApplyDamage
// 0x0028 (0x0028 - 0x0000)
struct Ability_104901_OnOwnerApplyDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_OnOwnerApplyDamage) == 0x000008, "Wrong alignment on Ability_104901_OnOwnerApplyDamage");
static_assert(sizeof(Ability_104901_OnOwnerApplyDamage) == 0x000028, "Wrong size on Ability_104901_OnOwnerApplyDamage");
static_assert(offsetof(Ability_104901_OnOwnerApplyDamage, InSourceAvatar) == 0x000000, "Member 'Ability_104901_OnOwnerApplyDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104901_OnOwnerApplyDamage, InTargetAvatar) == 0x000008, "Member 'Ability_104901_OnOwnerApplyDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104901_OnOwnerApplyDamage, ModifierParameterHandle) == 0x000010, "Member 'Ability_104901_OnOwnerApplyDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104901.OnOwnerTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Ability_104901_OnOwnerTagUpdate final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104901_OnOwnerTagUpdate) == 0x000004, "Wrong alignment on Ability_104901_OnOwnerTagUpdate");
static_assert(sizeof(Ability_104901_OnOwnerTagUpdate) == 0x000010, "Wrong size on Ability_104901_OnOwnerTagUpdate");
static_assert(offsetof(Ability_104901_OnOwnerTagUpdate, InTag) == 0x000000, "Member 'Ability_104901_OnOwnerTagUpdate::InTag' has a wrong offset!");
static_assert(offsetof(Ability_104901_OnOwnerTagUpdate, bInExists) == 0x00000C, "Member 'Ability_104901_OnOwnerTagUpdate::bInExists' has a wrong offset!");

// Function Hero_1049.Ability_104901.OnTargetActorDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_104901_OnTargetActorDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_OnTargetActorDeath) == 0x000008, "Wrong alignment on Ability_104901_OnTargetActorDeath");
static_assert(sizeof(Ability_104901_OnTargetActorDeath) == 0x000028, "Wrong size on Ability_104901_OnTargetActorDeath");
static_assert(offsetof(Ability_104901_OnTargetActorDeath, InSourceAvatar) == 0x000000, "Member 'Ability_104901_OnTargetActorDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104901_OnTargetActorDeath, InTargetAvatar) == 0x000008, "Member 'Ability_104901_OnTargetActorDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104901_OnTargetActorDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_104901_OnTargetActorDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104901.AdjustNotTreatShieldByAnger
// 0x0004 (0x0004 - 0x0000)
struct Ability_104901_AdjustNotTreatShieldByAnger final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_AdjustNotTreatShieldByAnger) == 0x000004, "Wrong alignment on Ability_104901_AdjustNotTreatShieldByAnger");
static_assert(sizeof(Ability_104901_AdjustNotTreatShieldByAnger) == 0x000004, "Wrong size on Ability_104901_AdjustNotTreatShieldByAnger");
static_assert(offsetof(Ability_104901_AdjustNotTreatShieldByAnger, ReturnValue) == 0x000000, "Member 'Ability_104901_AdjustNotTreatShieldByAnger::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104901.GetAngerToShieldFactor
// 0x0008 (0x0008 - 0x0000)
struct Ability_104901_GetAngerToShieldFactor final
{
public:
	float                                         InAngerValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_GetAngerToShieldFactor) == 0x000004, "Wrong alignment on Ability_104901_GetAngerToShieldFactor");
static_assert(sizeof(Ability_104901_GetAngerToShieldFactor) == 0x000008, "Wrong size on Ability_104901_GetAngerToShieldFactor");
static_assert(offsetof(Ability_104901_GetAngerToShieldFactor, InAngerValue) == 0x000000, "Member 'Ability_104901_GetAngerToShieldFactor::InAngerValue' has a wrong offset!");
static_assert(offsetof(Ability_104901_GetAngerToShieldFactor, ReturnValue) == 0x000004, "Member 'Ability_104901_GetAngerToShieldFactor::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104901.GetCurrentAngerValue
// 0x0004 (0x0004 - 0x0000)
struct Ability_104901_GetCurrentAngerValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_GetCurrentAngerValue) == 0x000004, "Wrong alignment on Ability_104901_GetCurrentAngerValue");
static_assert(sizeof(Ability_104901_GetCurrentAngerValue) == 0x000004, "Wrong size on Ability_104901_GetCurrentAngerValue");
static_assert(offsetof(Ability_104901_GetCurrentAngerValue, ReturnValue) == 0x000000, "Member 'Ability_104901_GetCurrentAngerValue::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104901.GetExtraBaeHealthValue
// 0x0004 (0x0004 - 0x0000)
struct Ability_104901_GetExtraBaeHealthValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_GetExtraBaeHealthValue) == 0x000004, "Wrong alignment on Ability_104901_GetExtraBaeHealthValue");
static_assert(sizeof(Ability_104901_GetExtraBaeHealthValue) == 0x000004, "Wrong size on Ability_104901_GetExtraBaeHealthValue");
static_assert(offsetof(Ability_104901_GetExtraBaeHealthValue, ReturnValue) == 0x000000, "Member 'Ability_104901_GetExtraBaeHealthValue::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104901.GetTreatHealth
// 0x0004 (0x0004 - 0x0000)
struct Ability_104901_GetTreatHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104901_GetTreatHealth) == 0x000004, "Wrong alignment on Ability_104901_GetTreatHealth");
static_assert(sizeof(Ability_104901_GetTreatHealth) == 0x000004, "Wrong size on Ability_104901_GetTreatHealth");
static_assert(offsetof(Ability_104901_GetTreatHealth, ReturnValue) == 0x000000, "Member 'Ability_104901_GetTreatHealth::ReturnValue' has a wrong offset!");

// Function Hero_1049.MarvelCueNotify_Ability_10490101.OnOwningAbilityEnterHealStage
// 0x0001 (0x0001 - 0x0000)
struct MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage final
{
public:
	bool                                          bCanHeal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage) == 0x000001, "Wrong alignment on MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage");
static_assert(sizeof(MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage) == 0x000001, "Wrong size on MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage");
static_assert(offsetof(MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage, bCanHeal) == 0x000000, "Member 'MarvelCueNotify_Ability_10490101_OnOwningAbilityEnterHealStage::bCanHeal' has a wrong offset!");

// Function Hero_1049.MarvelCueNotify_Ability_10490101.OnOwningAbilityResurrectSelf
// 0x0004 (0x0004 - 0x0000)
struct MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf final
{
public:
	int32                                         ResurrectCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf) == 0x000004, "Wrong alignment on MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf");
static_assert(sizeof(MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf) == 0x000004, "Wrong size on MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf");
static_assert(offsetof(MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf, ResurrectCount) == 0x000000, "Member 'MarvelCueNotify_Ability_10490101_OnOwningAbilityResurrectSelf::ResurrectCount' has a wrong offset!");

// Function Hero_1049.EffectiveComponent_10491101.GetConfig_104911
// 0x0008 (0x0008 - 0x0000)
struct EffectiveComponent_10491101_GetConfig_104911 final
{
public:
	class UConfig_104911*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectiveComponent_10491101_GetConfig_104911) == 0x000008, "Wrong alignment on EffectiveComponent_10491101_GetConfig_104911");
static_assert(sizeof(EffectiveComponent_10491101_GetConfig_104911) == 0x000008, "Wrong size on EffectiveComponent_10491101_GetConfig_104911");
static_assert(offsetof(EffectiveComponent_10491101_GetConfig_104911, ReturnValue) == 0x000000, "Member 'EffectiveComponent_10491101_GetConfig_104911::ReturnValue' has a wrong offset!");

// Function Hero_1049.BuffAbility_10492101.GetAverageAttenuationSpeed
// 0x0004 (0x0004 - 0x0000)
struct BuffAbility_10492101_GetAverageAttenuationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffAbility_10492101_GetAverageAttenuationSpeed) == 0x000004, "Wrong alignment on BuffAbility_10492101_GetAverageAttenuationSpeed");
static_assert(sizeof(BuffAbility_10492101_GetAverageAttenuationSpeed) == 0x000004, "Wrong size on BuffAbility_10492101_GetAverageAttenuationSpeed");
static_assert(offsetof(BuffAbility_10492101_GetAverageAttenuationSpeed, ReturnValue) == 0x000000, "Member 'BuffAbility_10492101_GetAverageAttenuationSpeed::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104921.AddPassiveRageMeter
// 0x0004 (0x0004 - 0x0000)
struct Ability_104921_AddPassiveRageMeter final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_AddPassiveRageMeter) == 0x000004, "Wrong alignment on Ability_104921_AddPassiveRageMeter");
static_assert(sizeof(Ability_104921_AddPassiveRageMeter) == 0x000004, "Wrong size on Ability_104921_AddPassiveRageMeter");
static_assert(offsetof(Ability_104921_AddPassiveRageMeter, InValue) == 0x000000, "Member 'Ability_104921_AddPassiveRageMeter::InValue' has a wrong offset!");

// Function Hero_1049.Ability_104921.GetMyBuffAbilityCDO
// 0x0008 (0x0008 - 0x0000)
struct Ability_104921_GetMyBuffAbilityCDO final
{
public:
	class UBuffAbility_10492101*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_GetMyBuffAbilityCDO) == 0x000008, "Wrong alignment on Ability_104921_GetMyBuffAbilityCDO");
static_assert(sizeof(Ability_104921_GetMyBuffAbilityCDO) == 0x000008, "Wrong size on Ability_104921_GetMyBuffAbilityCDO");
static_assert(offsetof(Ability_104921_GetMyBuffAbilityCDO, ReturnValue) == 0x000000, "Member 'Ability_104921_GetMyBuffAbilityCDO::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104921.GetMyConfig
// 0x0008 (0x0008 - 0x0000)
struct Ability_104921_GetMyConfig final
{
public:
	class UConfig_104921*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_GetMyConfig) == 0x000008, "Wrong alignment on Ability_104921_GetMyConfig");
static_assert(sizeof(Ability_104921_GetMyConfig) == 0x000008, "Wrong size on Ability_104921_GetMyConfig");
static_assert(offsetof(Ability_104921_GetMyConfig, ReturnValue) == 0x000000, "Member 'Ability_104921_GetMyConfig::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104921.NotifyRemoveRage
// 0x0290 (0x0290 - 0x0000)
struct Ability_104921_NotifyRemoveRage final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x0290)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_NotifyRemoveRage) == 0x000008, "Wrong alignment on Ability_104921_NotifyRemoveRage");
static_assert(sizeof(Ability_104921_NotifyRemoveRage) == 0x000290, "Wrong size on Ability_104921_NotifyRemoveRage");
static_assert(offsetof(Ability_104921_NotifyRemoveRage, Payload) == 0x000000, "Member 'Ability_104921_NotifyRemoveRage::Payload' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnManuallyApplyDamage
// 0x0010 (0x0010 - 0x0000)
struct Ability_104921_OnManuallyApplyDamage final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnManuallyApplyDamage) == 0x000008, "Wrong alignment on Ability_104921_OnManuallyApplyDamage");
static_assert(sizeof(Ability_104921_OnManuallyApplyDamage) == 0x000010, "Wrong size on Ability_104921_OnManuallyApplyDamage");
static_assert(offsetof(Ability_104921_OnManuallyApplyDamage, InAbility) == 0x000000, "Member 'Ability_104921_OnManuallyApplyDamage::InAbility' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnManuallyApplyDamage, InActor) == 0x000008, "Member 'Ability_104921_OnManuallyApplyDamage::InActor' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnOwnerAbilityActivated
// 0x0008 (0x0008 - 0x0000)
struct Ability_104921_OnOwnerAbilityActivated final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnOwnerAbilityActivated) == 0x000008, "Wrong alignment on Ability_104921_OnOwnerAbilityActivated");
static_assert(sizeof(Ability_104921_OnOwnerAbilityActivated) == 0x000008, "Wrong size on Ability_104921_OnOwnerAbilityActivated");
static_assert(offsetof(Ability_104921_OnOwnerAbilityActivated, InAbility) == 0x000000, "Member 'Ability_104921_OnOwnerAbilityActivated::InAbility' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnOwnerAbilityHit
// 0x0030 (0x0030 - 0x0000)
struct Ability_104921_OnOwnerAbilityHit final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityHitParams                HitParams;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     InHitResults;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnOwnerAbilityHit) == 0x000008, "Wrong alignment on Ability_104921_OnOwnerAbilityHit");
static_assert(sizeof(Ability_104921_OnOwnerAbilityHit) == 0x000030, "Wrong size on Ability_104921_OnOwnerAbilityHit");
static_assert(offsetof(Ability_104921_OnOwnerAbilityHit, InAbility) == 0x000000, "Member 'Ability_104921_OnOwnerAbilityHit::InAbility' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerAbilityHit, HitParams) == 0x000008, "Member 'Ability_104921_OnOwnerAbilityHit::HitParams' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerAbilityHit, InHitResults) == 0x000020, "Member 'Ability_104921_OnOwnerAbilityHit::InHitResults' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnOwnerCharacterDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_104921_OnOwnerCharacterDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnOwnerCharacterDeath) == 0x000008, "Wrong alignment on Ability_104921_OnOwnerCharacterDeath");
static_assert(sizeof(Ability_104921_OnOwnerCharacterDeath) == 0x000028, "Wrong size on Ability_104921_OnOwnerCharacterDeath");
static_assert(offsetof(Ability_104921_OnOwnerCharacterDeath, InSourceAvatar) == 0x000000, "Member 'Ability_104921_OnOwnerCharacterDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerCharacterDeath, InTargetAvatar) == 0x000008, "Member 'Ability_104921_OnOwnerCharacterDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerCharacterDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_104921_OnOwnerCharacterDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnOwnerCharacterReborn
// 0x0740 (0x0740 - 0x0000)
struct Ability_104921_OnOwnerCharacterReborn final
{
public:
	class AActor*                                 InSourceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRebornParam                  RebornParam;                                       // 0x0010(0x0730)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnOwnerCharacterReborn) == 0x000010, "Wrong alignment on Ability_104921_OnOwnerCharacterReborn");
static_assert(sizeof(Ability_104921_OnOwnerCharacterReborn) == 0x000740, "Wrong size on Ability_104921_OnOwnerCharacterReborn");
static_assert(offsetof(Ability_104921_OnOwnerCharacterReborn, InSourceActor) == 0x000000, "Member 'Ability_104921_OnOwnerCharacterReborn::InSourceActor' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerCharacterReborn, RebornParam) == 0x000010, "Member 'Ability_104921_OnOwnerCharacterReborn::RebornParam' has a wrong offset!");

// Function Hero_1049.Ability_104921.OnOwnerTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct Ability_104921_OnOwnerTakeDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               InModifierParameterHandle;                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_OnOwnerTakeDamage) == 0x000008, "Wrong alignment on Ability_104921_OnOwnerTakeDamage");
static_assert(sizeof(Ability_104921_OnOwnerTakeDamage) == 0x000028, "Wrong size on Ability_104921_OnOwnerTakeDamage");
static_assert(offsetof(Ability_104921_OnOwnerTakeDamage, InSourceAvatar) == 0x000000, "Member 'Ability_104921_OnOwnerTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerTakeDamage, InTargetAvatar) == 0x000008, "Member 'Ability_104921_OnOwnerTakeDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104921_OnOwnerTakeDamage, InModifierParameterHandle) == 0x000010, "Member 'Ability_104921_OnOwnerTakeDamage::InModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104921.UpdateFullRageSelfBuff
// 0x0001 (0x0001 - 0x0000)
struct Ability_104921_UpdateFullRageSelfBuff final
{
public:
	bool                                          bFullRage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104921_UpdateFullRageSelfBuff) == 0x000001, "Wrong alignment on Ability_104921_UpdateFullRageSelfBuff");
static_assert(sizeof(Ability_104921_UpdateFullRageSelfBuff) == 0x000001, "Wrong size on Ability_104921_UpdateFullRageSelfBuff");
static_assert(offsetof(Ability_104921_UpdateFullRageSelfBuff, bFullRage) == 0x000000, "Member 'Ability_104921_UpdateFullRageSelfBuff::bFullRage' has a wrong offset!");

// Function Hero_1049.BuffCue_10492101.OnOwnedTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct BuffCue_10492101_OnOwnedTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuffCue_10492101_OnOwnedTagUpdate) == 0x000004, "Wrong alignment on BuffCue_10492101_OnOwnedTagUpdate");
static_assert(sizeof(BuffCue_10492101_OnOwnedTagUpdate) == 0x000010, "Wrong size on BuffCue_10492101_OnOwnedTagUpdate");
static_assert(offsetof(BuffCue_10492101_OnOwnedTagUpdate, TagUpdated) == 0x000000, "Member 'BuffCue_10492101_OnOwnedTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(BuffCue_10492101_OnOwnedTagUpdate, bTagExists) == 0x00000C, "Member 'BuffCue_10492101_OnOwnedTagUpdate::bTagExists' has a wrong offset!");

// Function Hero_1049.BuffCue_10492101.UpdateAudioParametersByRage
// 0x0004 (0x0004 - 0x0000)
struct BuffCue_10492101_UpdateAudioParametersByRage final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffCue_10492101_UpdateAudioParametersByRage) == 0x000004, "Wrong alignment on BuffCue_10492101_UpdateAudioParametersByRage");
static_assert(sizeof(BuffCue_10492101_UpdateAudioParametersByRage) == 0x000004, "Wrong size on BuffCue_10492101_UpdateAudioParametersByRage");
static_assert(offsetof(BuffCue_10492101_UpdateAudioParametersByRage, InValue) == 0x000000, "Member 'BuffCue_10492101_UpdateAudioParametersByRage::InValue' has a wrong offset!");

// Function Hero_1049.BuffCue_10492101.UpdateFXParametersByRage
// 0x0004 (0x0004 - 0x0000)
struct BuffCue_10492101_UpdateFXParametersByRage final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffCue_10492101_UpdateFXParametersByRage) == 0x000004, "Wrong alignment on BuffCue_10492101_UpdateFXParametersByRage");
static_assert(sizeof(BuffCue_10492101_UpdateFXParametersByRage) == 0x000004, "Wrong size on BuffCue_10492101_UpdateFXParametersByRage");
static_assert(offsetof(BuffCue_10492101_UpdateFXParametersByRage, InValue) == 0x000000, "Member 'BuffCue_10492101_UpdateFXParametersByRage::InValue' has a wrong offset!");

// Function Hero_1049.BuffCue_10492101.UpdateMaterialParametersByRage
// 0x0004 (0x0004 - 0x0000)
struct BuffCue_10492101_UpdateMaterialParametersByRage final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffCue_10492101_UpdateMaterialParametersByRage) == 0x000004, "Wrong alignment on BuffCue_10492101_UpdateMaterialParametersByRage");
static_assert(sizeof(BuffCue_10492101_UpdateMaterialParametersByRage) == 0x000004, "Wrong size on BuffCue_10492101_UpdateMaterialParametersByRage");
static_assert(offsetof(BuffCue_10492101_UpdateMaterialParametersByRage, InValue) == 0x000000, "Member 'BuffCue_10492101_UpdateMaterialParametersByRage::InValue' has a wrong offset!");

// Function Hero_1049.Ability_104951.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104951_GetCurrentState final
{
public:
	ERushState_104951                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104951_GetCurrentState) == 0x000001, "Wrong alignment on Ability_104951_GetCurrentState");
static_assert(sizeof(Ability_104951_GetCurrentState) == 0x000001, "Wrong size on Ability_104951_GetCurrentState");
static_assert(offsetof(Ability_104951_GetCurrentState, ReturnValue) == 0x000000, "Member 'Ability_104951_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104951.OnDashFinish
// 0x0001 (0x0001 - 0x0000)
struct Ability_104951_OnDashFinish final
{
public:
	EDashStopReason                               InReason;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104951_OnDashFinish) == 0x000001, "Wrong alignment on Ability_104951_OnDashFinish");
static_assert(sizeof(Ability_104951_OnDashFinish) == 0x000001, "Wrong size on Ability_104951_OnDashFinish");
static_assert(offsetof(Ability_104951_OnDashFinish, InReason) == 0x000000, "Member 'Ability_104951_OnDashFinish::InReason' has a wrong offset!");

// Function Hero_1049.Ability_104951.SetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104951_SetCurrentState final
{
public:
	ERushState_104951                             NewStat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104951_SetCurrentState) == 0x000001, "Wrong alignment on Ability_104951_SetCurrentState");
static_assert(sizeof(Ability_104951_SetCurrentState) == 0x000001, "Wrong size on Ability_104951_SetCurrentState");
static_assert(offsetof(Ability_104951_SetCurrentState, NewStat) == 0x000000, "Member 'Ability_104951_SetCurrentState::NewStat' has a wrong offset!");

// Function Hero_1049.Cue_Ability_Loop_10495101.OnWolverineStateChange
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10495101_OnWolverineStateChange final
{
public:
	ERushState_104951                             InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10495101_OnWolverineStateChange) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10495101_OnWolverineStateChange");
static_assert(sizeof(Cue_Ability_Loop_10495101_OnWolverineStateChange) == 0x000001, "Wrong size on Cue_Ability_Loop_10495101_OnWolverineStateChange");
static_assert(offsetof(Cue_Ability_Loop_10495101_OnWolverineStateChange, InState) == 0x000000, "Member 'Cue_Ability_Loop_10495101_OnWolverineStateChange::InState' has a wrong offset!");

// Function Hero_1049.Ability_104971.AddMoveIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct Ability_104971_AddMoveIgnoreActor final
{
public:
	class ACharacter*                             InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_AddMoveIgnoreActor) == 0x000008, "Wrong alignment on Ability_104971_AddMoveIgnoreActor");
static_assert(sizeof(Ability_104971_AddMoveIgnoreActor) == 0x000008, "Wrong size on Ability_104971_AddMoveIgnoreActor");
static_assert(offsetof(Ability_104971_AddMoveIgnoreActor, InActor) == 0x000000, "Member 'Ability_104971_AddMoveIgnoreActor::InActor' has a wrong offset!");

// Function Hero_1049.Ability_104971.CalcShiftJumpVelocity
// 0x0018 (0x0018 - 0x0000)
struct Ability_104971_CalcShiftJumpVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_CalcShiftJumpVelocity) == 0x000008, "Wrong alignment on Ability_104971_CalcShiftJumpVelocity");
static_assert(sizeof(Ability_104971_CalcShiftJumpVelocity) == 0x000018, "Wrong size on Ability_104971_CalcShiftJumpVelocity");
static_assert(offsetof(Ability_104971_CalcShiftJumpVelocity, ReturnValue) == 0x000000, "Member 'Ability_104971_CalcShiftJumpVelocity::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104971.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104971_GetCurrentState final
{
public:
	ERushState_104971                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_GetCurrentState) == 0x000001, "Wrong alignment on Ability_104971_GetCurrentState");
static_assert(sizeof(Ability_104971_GetCurrentState) == 0x000001, "Wrong size on Ability_104971_GetCurrentState");
static_assert(offsetof(Ability_104971_GetCurrentState, ReturnValue) == 0x000000, "Member 'Ability_104971_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104971.K2_ShouldEndScope
// 0x0001 (0x0001 - 0x0000)
struct Ability_104971_K2_ShouldEndScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_K2_ShouldEndScope) == 0x000001, "Wrong alignment on Ability_104971_K2_ShouldEndScope");
static_assert(sizeof(Ability_104971_K2_ShouldEndScope) == 0x000001, "Wrong size on Ability_104971_K2_ShouldEndScope");
static_assert(offsetof(Ability_104971_K2_ShouldEndScope, ReturnValue) == 0x000000, "Member 'Ability_104971_K2_ShouldEndScope::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104971.OnServerReceiveGrabTarget
// 0x0168 (0x0168 - 0x0000)
struct Ability_104971_OnServerReceiveGrabTarget final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_OnServerReceiveGrabTarget) == 0x000008, "Wrong alignment on Ability_104971_OnServerReceiveGrabTarget");
static_assert(sizeof(Ability_104971_OnServerReceiveGrabTarget) == 0x000168, "Wrong size on Ability_104971_OnServerReceiveGrabTarget");
static_assert(offsetof(Ability_104971_OnServerReceiveGrabTarget, Data) == 0x000000, "Member 'Ability_104971_OnServerReceiveGrabTarget::Data' has a wrong offset!");

// Function Hero_1049.Ability_104971.OnServerReceiveLaunchVelocity
// 0x0168 (0x0168 - 0x0000)
struct Ability_104971_OnServerReceiveLaunchVelocity final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_OnServerReceiveLaunchVelocity) == 0x000008, "Wrong alignment on Ability_104971_OnServerReceiveLaunchVelocity");
static_assert(sizeof(Ability_104971_OnServerReceiveLaunchVelocity) == 0x000168, "Wrong size on Ability_104971_OnServerReceiveLaunchVelocity");
static_assert(offsetof(Ability_104971_OnServerReceiveLaunchVelocity, Data) == 0x000000, "Member 'Ability_104971_OnServerReceiveLaunchVelocity::Data' has a wrong offset!");

// Function Hero_1049.Ability_104971.RegisterGrabTarget
// 0x0008 (0x0008 - 0x0000)
struct Ability_104971_RegisterGrabTarget final
{
public:
	class ACharacter*                             InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_RegisterGrabTarget) == 0x000008, "Wrong alignment on Ability_104971_RegisterGrabTarget");
static_assert(sizeof(Ability_104971_RegisterGrabTarget) == 0x000008, "Wrong size on Ability_104971_RegisterGrabTarget");
static_assert(offsetof(Ability_104971_RegisterGrabTarget, InTarget) == 0x000000, "Member 'Ability_104971_RegisterGrabTarget::InTarget' has a wrong offset!");

// Function Hero_1049.Ability_104971.RemoveMoveIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct Ability_104971_RemoveMoveIgnoreActor final
{
public:
	class ACharacter*                             InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_RemoveMoveIgnoreActor) == 0x000008, "Wrong alignment on Ability_104971_RemoveMoveIgnoreActor");
static_assert(sizeof(Ability_104971_RemoveMoveIgnoreActor) == 0x000008, "Wrong size on Ability_104971_RemoveMoveIgnoreActor");
static_assert(offsetof(Ability_104971_RemoveMoveIgnoreActor, InActor) == 0x000000, "Member 'Ability_104971_RemoveMoveIgnoreActor::InActor' has a wrong offset!");

// Function Hero_1049.Ability_104971.SetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104971_SetCurrentState final
{
public:
	ERushState_104971                             NewStat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_SetCurrentState) == 0x000001, "Wrong alignment on Ability_104971_SetCurrentState");
static_assert(sizeof(Ability_104971_SetCurrentState) == 0x000001, "Wrong size on Ability_104971_SetCurrentState");
static_assert(offsetof(Ability_104971_SetCurrentState, NewStat) == 0x000000, "Member 'Ability_104971_SetCurrentState::NewStat' has a wrong offset!");

// Function Hero_1049.Ability_104971.SetupShiftJumpParameters
// 0x0018 (0x0018 - 0x0000)
struct Ability_104971_SetupShiftJumpParameters final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_SetupShiftJumpParameters) == 0x000008, "Wrong alignment on Ability_104971_SetupShiftJumpParameters");
static_assert(sizeof(Ability_104971_SetupShiftJumpParameters) == 0x000018, "Wrong size on Ability_104971_SetupShiftJumpParameters");
static_assert(offsetof(Ability_104971_SetupShiftJumpParameters, InVelocity) == 0x000000, "Member 'Ability_104971_SetupShiftJumpParameters::InVelocity' has a wrong offset!");

// Function Hero_1049.Ability_104971.TryGrabTarget
// 0x0008 (0x0008 - 0x0000)
struct Ability_104971_TryGrabTarget final
{
public:
	class ACharacter*                             InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_TryGrabTarget) == 0x000008, "Wrong alignment on Ability_104971_TryGrabTarget");
static_assert(sizeof(Ability_104971_TryGrabTarget) == 0x000008, "Wrong size on Ability_104971_TryGrabTarget");
static_assert(offsetof(Ability_104971_TryGrabTarget, InTarget) == 0x000000, "Member 'Ability_104971_TryGrabTarget::InTarget' has a wrong offset!");

// Function Hero_1049.Ability_104971.UpdateShiftJumpUpState
// 0x0038 (0x0038 - 0x0000)
struct Ability_104971_UpdateShiftJumpUpState final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldLocation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_UpdateShiftJumpUpState) == 0x000008, "Wrong alignment on Ability_104971_UpdateShiftJumpUpState");
static_assert(sizeof(Ability_104971_UpdateShiftJumpUpState) == 0x000038, "Wrong size on Ability_104971_UpdateShiftJumpUpState");
static_assert(offsetof(Ability_104971_UpdateShiftJumpUpState, DeltaSeconds) == 0x000000, "Member 'Ability_104971_UpdateShiftJumpUpState::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Ability_104971_UpdateShiftJumpUpState, OldLocation) == 0x000008, "Member 'Ability_104971_UpdateShiftJumpUpState::OldLocation' has a wrong offset!");
static_assert(offsetof(Ability_104971_UpdateShiftJumpUpState, OldVelocity) == 0x000020, "Member 'Ability_104971_UpdateShiftJumpUpState::OldVelocity' has a wrong offset!");

// Function Hero_1049.Ability_104971.GetGrabbedRelativeLocation
// 0x0038 (0x0038 - 0x0000)
struct Ability_104971_GetGrabbedRelativeLocation final
{
public:
	class ACharacter*                             InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginRelativeLocation;                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104971_GetGrabbedRelativeLocation) == 0x000008, "Wrong alignment on Ability_104971_GetGrabbedRelativeLocation");
static_assert(sizeof(Ability_104971_GetGrabbedRelativeLocation) == 0x000038, "Wrong size on Ability_104971_GetGrabbedRelativeLocation");
static_assert(offsetof(Ability_104971_GetGrabbedRelativeLocation, InTarget) == 0x000000, "Member 'Ability_104971_GetGrabbedRelativeLocation::InTarget' has a wrong offset!");
static_assert(offsetof(Ability_104971_GetGrabbedRelativeLocation, OriginRelativeLocation) == 0x000008, "Member 'Ability_104971_GetGrabbedRelativeLocation::OriginRelativeLocation' has a wrong offset!");
static_assert(offsetof(Ability_104971_GetGrabbedRelativeLocation, ReturnValue) == 0x000020, "Member 'Ability_104971_GetGrabbedRelativeLocation::ReturnValue' has a wrong offset!");

// Function Hero_1049.Ability_104981.SetCurrentStatus
// 0x0001 (0x0001 - 0x0000)
struct Ability_104981_SetCurrentStatus final
{
public:
	EAbilityStatus_104981                         InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104981_SetCurrentStatus) == 0x000001, "Wrong alignment on Ability_104981_SetCurrentStatus");
static_assert(sizeof(Ability_104981_SetCurrentStatus) == 0x000001, "Wrong size on Ability_104981_SetCurrentStatus");
static_assert(offsetof(Ability_104981_SetCurrentStatus, InStatus) == 0x000000, "Member 'Ability_104981_SetCurrentStatus::InStatus' has a wrong offset!");

// Function Hero_1049.Ability_104981.GetCurrentStatus
// 0x0001 (0x0001 - 0x0000)
struct Ability_104981_GetCurrentStatus final
{
public:
	EAbilityStatus_104981                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104981_GetCurrentStatus) == 0x000001, "Wrong alignment on Ability_104981_GetCurrentStatus");
static_assert(sizeof(Ability_104981_GetCurrentStatus) == 0x000001, "Wrong size on Ability_104981_GetCurrentStatus");
static_assert(offsetof(Ability_104981_GetCurrentStatus, ReturnValue) == 0x000000, "Member 'Ability_104981_GetCurrentStatus::ReturnValue' has a wrong offset!");

// Function Hero_1049.Cue_Buff_10498105.UpdatePoseMesh
// 0x0004 (0x0004 - 0x0000)
struct Cue_Buff_10498105_UpdatePoseMesh final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Buff_10498105_UpdatePoseMesh) == 0x000004, "Wrong alignment on Cue_Buff_10498105_UpdatePoseMesh");
static_assert(sizeof(Cue_Buff_10498105_UpdatePoseMesh) == 0x000004, "Wrong size on Cue_Buff_10498105_UpdatePoseMesh");
static_assert(offsetof(Cue_Buff_10498105_UpdatePoseMesh, DeltaSeconds) == 0x000000, "Member 'Cue_Buff_10498105_UpdatePoseMesh::DeltaSeconds' has a wrong offset!");

// Function Hero_1049.MarvelCueNotify_Ability_10498101.OnAbilityStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged final
{
public:
	EAbilityStatus_104981                         InStatus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged) == 0x000001, "Wrong alignment on MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged");
static_assert(sizeof(MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged) == 0x000001, "Wrong size on MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged");
static_assert(offsetof(MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged, InStatus) == 0x000000, "Member 'MarvelCueNotify_Ability_10498101_OnAbilityStatusChanged::InStatus' has a wrong offset!");

// Function Hero_1049.MarvelCueNotify_Ability_10498101.OnOwnedTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate) == 0x000004, "Wrong alignment on MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate");
static_assert(sizeof(MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate) == 0x000010, "Wrong size on MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate");
static_assert(offsetof(MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate, TagUpdated) == 0x000000, "Member 'MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate::TagUpdated' has a wrong offset!");
static_assert(offsetof(MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate, bTagExists) == 0x00000C, "Member 'MarvelCueNotify_Ability_10498101_OnOwnedTagUpdate::bTagExists' has a wrong offset!");

// Function Hero_1049.Ability_104991.BindCameraToRideCharacter
// 0x0010 (0x0010 - 0x0000)
struct Ability_104991_BindCameraToRideCharacter final
{
public:
	class AMarvelBaseCharacter*                   RideCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104991_BindCameraToRideCharacter) == 0x000008, "Wrong alignment on Ability_104991_BindCameraToRideCharacter");
static_assert(sizeof(Ability_104991_BindCameraToRideCharacter) == 0x000010, "Wrong size on Ability_104991_BindCameraToRideCharacter");
static_assert(offsetof(Ability_104991_BindCameraToRideCharacter, RideCharacter) == 0x000000, "Member 'Ability_104991_BindCameraToRideCharacter::RideCharacter' has a wrong offset!");
static_assert(offsetof(Ability_104991_BindCameraToRideCharacter, bBind) == 0x000008, "Member 'Ability_104991_BindCameraToRideCharacter::bBind' has a wrong offset!");

// Function Hero_1049.Ability_104991.BindDettachDelegates
// 0x0008 (0x0008 - 0x0000)
struct Ability_104991_BindDettachDelegates final
{
public:
	class AActor*                                 InHulk;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_BindDettachDelegates) == 0x000008, "Wrong alignment on Ability_104991_BindDettachDelegates");
static_assert(sizeof(Ability_104991_BindDettachDelegates) == 0x000008, "Wrong size on Ability_104991_BindDettachDelegates");
static_assert(offsetof(Ability_104991_BindDettachDelegates, InHulk) == 0x000000, "Member 'Ability_104991_BindDettachDelegates::InHulk' has a wrong offset!");

// Function Hero_1049.Ability_104991.BindOwnerCapsuleAttachParentChildDetachDelegate
// 0x0001 (0x0001 - 0x0000)
struct Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate final
{
public:
	bool                                          bBind;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate) == 0x000001, "Wrong alignment on Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate");
static_assert(sizeof(Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate) == 0x000001, "Wrong size on Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate");
static_assert(offsetof(Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate, bBind) == 0x000000, "Member 'Ability_104991_BindOwnerCapsuleAttachParentChildDetachDelegate::bBind' has a wrong offset!");

// Function Hero_1049.Ability_104991.MarkOnHulk
// 0x0001 (0x0001 - 0x0000)
struct Ability_104991_MarkOnHulk final
{
public:
	bool                                          bOnGroot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_MarkOnHulk) == 0x000001, "Wrong alignment on Ability_104991_MarkOnHulk");
static_assert(sizeof(Ability_104991_MarkOnHulk) == 0x000001, "Wrong size on Ability_104991_MarkOnHulk");
static_assert(offsetof(Ability_104991_MarkOnHulk, bOnGroot) == 0x000000, "Member 'Ability_104991_MarkOnHulk::bOnGroot' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnHulkDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_104991_OnHulkDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_OnHulkDeath) == 0x000008, "Wrong alignment on Ability_104991_OnHulkDeath");
static_assert(sizeof(Ability_104991_OnHulkDeath) == 0x000028, "Wrong size on Ability_104991_OnHulkDeath");
static_assert(offsetof(Ability_104991_OnHulkDeath, InSourceAvatar) == 0x000000, "Member 'Ability_104991_OnHulkDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnHulkDeath, InTargetAvatar) == 0x000008, "Member 'Ability_104991_OnHulkDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnHulkDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_104991_OnHulkDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnHulkTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Ability_104991_OnHulkTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104991_OnHulkTagUpdated) == 0x000004, "Wrong alignment on Ability_104991_OnHulkTagUpdated");
static_assert(sizeof(Ability_104991_OnHulkTagUpdated) == 0x000010, "Wrong size on Ability_104991_OnHulkTagUpdated");
static_assert(offsetof(Ability_104991_OnHulkTagUpdated, TagUpdated) == 0x000000, "Member 'Ability_104991_OnHulkTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnHulkTagUpdated, bTagExists) == 0x00000C, "Member 'Ability_104991_OnHulkTagUpdated::bTagExists' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnOwnerCapsuleAttachParentChildDetach
// 0x0010 (0x0010 - 0x0000)
struct Ability_104991_OnOwnerCapsuleAttachParentChildDetach final
{
public:
	class USceneComponent*                        SourceComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ChildComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_OnOwnerCapsuleAttachParentChildDetach) == 0x000008, "Wrong alignment on Ability_104991_OnOwnerCapsuleAttachParentChildDetach");
static_assert(sizeof(Ability_104991_OnOwnerCapsuleAttachParentChildDetach) == 0x000010, "Wrong size on Ability_104991_OnOwnerCapsuleAttachParentChildDetach");
static_assert(offsetof(Ability_104991_OnOwnerCapsuleAttachParentChildDetach, SourceComponent) == 0x000000, "Member 'Ability_104991_OnOwnerCapsuleAttachParentChildDetach::SourceComponent' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnOwnerCapsuleAttachParentChildDetach, ChildComponent) == 0x000008, "Member 'Ability_104991_OnOwnerCapsuleAttachParentChildDetach::ChildComponent' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnWolverineDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_104991_OnWolverineDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_OnWolverineDeath) == 0x000008, "Wrong alignment on Ability_104991_OnWolverineDeath");
static_assert(sizeof(Ability_104991_OnWolverineDeath) == 0x000028, "Wrong size on Ability_104991_OnWolverineDeath");
static_assert(offsetof(Ability_104991_OnWolverineDeath, InSourceAvatar) == 0x000000, "Member 'Ability_104991_OnWolverineDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnWolverineDeath, InTargetAvatar) == 0x000008, "Member 'Ability_104991_OnWolverineDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnWolverineDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_104991_OnWolverineDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnWolverineTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Ability_104991_OnWolverineTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104991_OnWolverineTagUpdated) == 0x000004, "Wrong alignment on Ability_104991_OnWolverineTagUpdated");
static_assert(sizeof(Ability_104991_OnWolverineTagUpdated) == 0x000010, "Wrong size on Ability_104991_OnWolverineTagUpdated");
static_assert(offsetof(Ability_104991_OnWolverineTagUpdated, TagUpdated) == 0x000000, "Member 'Ability_104991_OnWolverineTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnWolverineTagUpdated, bTagExists) == 0x00000C, "Member 'Ability_104991_OnWolverineTagUpdated::bTagExists' has a wrong offset!");

// Function Hero_1049.Ability_104991.OnWolverineTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct Ability_104991_OnWolverineTakeDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_OnWolverineTakeDamage) == 0x000008, "Wrong alignment on Ability_104991_OnWolverineTakeDamage");
static_assert(sizeof(Ability_104991_OnWolverineTakeDamage) == 0x000028, "Wrong size on Ability_104991_OnWolverineTakeDamage");
static_assert(offsetof(Ability_104991_OnWolverineTakeDamage, InSourceAvatar) == 0x000000, "Member 'Ability_104991_OnWolverineTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnWolverineTakeDamage, InTargetAvatar) == 0x000008, "Member 'Ability_104991_OnWolverineTakeDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104991_OnWolverineTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'Ability_104991_OnWolverineTakeDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.Ability_104991.SetSpringArmIgnore
// 0x0018 (0x0018 - 0x0000)
struct Ability_104991_SetSpringArmIgnore final
{
public:
	class AMarvelBaseCharacter*                   InHulk;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnChar;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104991_SetSpringArmIgnore) == 0x000008, "Wrong alignment on Ability_104991_SetSpringArmIgnore");
static_assert(sizeof(Ability_104991_SetSpringArmIgnore) == 0x000018, "Wrong size on Ability_104991_SetSpringArmIgnore");
static_assert(offsetof(Ability_104991_SetSpringArmIgnore, InHulk) == 0x000000, "Member 'Ability_104991_SetSpringArmIgnore::InHulk' has a wrong offset!");
static_assert(offsetof(Ability_104991_SetSpringArmIgnore, OwnChar) == 0x000008, "Member 'Ability_104991_SetSpringArmIgnore::OwnChar' has a wrong offset!");
static_assert(offsetof(Ability_104991_SetSpringArmIgnore, bIgnore) == 0x000010, "Member 'Ability_104991_SetSpringArmIgnore::bIgnore' has a wrong offset!");

// Function Hero_1049.Ability_104991.SetSynergyState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104991_SetSynergyState final
{
public:
	EWolverineSynergyState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_SetSynergyState) == 0x000001, "Wrong alignment on Ability_104991_SetSynergyState");
static_assert(sizeof(Ability_104991_SetSynergyState) == 0x000001, "Wrong size on Ability_104991_SetSynergyState");
static_assert(offsetof(Ability_104991_SetSynergyState, InState) == 0x000000, "Member 'Ability_104991_SetSynergyState::InState' has a wrong offset!");

// Function Hero_1049.Ability_104991.UnBindDettachDelegates
// 0x0008 (0x0008 - 0x0000)
struct Ability_104991_UnBindDettachDelegates final
{
public:
	class AActor*                                 InHulk;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104991_UnBindDettachDelegates) == 0x000008, "Wrong alignment on Ability_104991_UnBindDettachDelegates");
static_assert(sizeof(Ability_104991_UnBindDettachDelegates) == 0x000008, "Wrong size on Ability_104991_UnBindDettachDelegates");
static_assert(offsetof(Ability_104991_UnBindDettachDelegates, InHulk) == 0x000000, "Member 'Ability_104991_UnBindDettachDelegates::InHulk' has a wrong offset!");

// Function Hero_1049.Cue_Ability_Loop_10499101.OnCoopStateChange
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10499101_OnCoopStateChange final
{
public:
	EWolverineSynergyState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10499101_OnCoopStateChange) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10499101_OnCoopStateChange");
static_assert(sizeof(Cue_Ability_Loop_10499101_OnCoopStateChange) == 0x000001, "Wrong size on Cue_Ability_Loop_10499101_OnCoopStateChange");
static_assert(offsetof(Cue_Ability_Loop_10499101_OnCoopStateChange, InState) == 0x000000, "Member 'Cue_Ability_Loop_10499101_OnCoopStateChange::InState' has a wrong offset!");

// Function Hero_1049.MarvelDrainLifeEffectAbility.OnOwnerApplyDamage
// 0x0028 (0x0028 - 0x0000)
struct MarvelDrainLifeEffectAbility_OnOwnerApplyDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelDrainLifeEffectAbility_OnOwnerApplyDamage) == 0x000008, "Wrong alignment on MarvelDrainLifeEffectAbility_OnOwnerApplyDamage");
static_assert(sizeof(MarvelDrainLifeEffectAbility_OnOwnerApplyDamage) == 0x000028, "Wrong size on MarvelDrainLifeEffectAbility_OnOwnerApplyDamage");
static_assert(offsetof(MarvelDrainLifeEffectAbility_OnOwnerApplyDamage, InSourceAvatar) == 0x000000, "Member 'MarvelDrainLifeEffectAbility_OnOwnerApplyDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(MarvelDrainLifeEffectAbility_OnOwnerApplyDamage, InTargetAvatar) == 0x000008, "Member 'MarvelDrainLifeEffectAbility_OnOwnerApplyDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(MarvelDrainLifeEffectAbility_OnOwnerApplyDamage, ModifierParameterHandle) == 0x000010, "Member 'MarvelDrainLifeEffectAbility_OnOwnerApplyDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1049.WolverineAnimInstance.OnMouseRightStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WolverineAnimInstance_OnMouseRightStateChanged final
{
public:
	ERushState_104951                             CurrentState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineAnimInstance_OnMouseRightStateChanged) == 0x000001, "Wrong alignment on WolverineAnimInstance_OnMouseRightStateChanged");
static_assert(sizeof(WolverineAnimInstance_OnMouseRightStateChanged) == 0x000001, "Wrong size on WolverineAnimInstance_OnMouseRightStateChanged");
static_assert(offsetof(WolverineAnimInstance_OnMouseRightStateChanged, CurrentState) == 0x000000, "Member 'WolverineAnimInstance_OnMouseRightStateChanged::CurrentState' has a wrong offset!");

// Function Hero_1049.WolverineAnimInstance.OnShiftStateChanged
// 0x0004 (0x0004 - 0x0000)
struct WolverineAnimInstance_OnShiftStateChanged final
{
public:
	int32                                         InState;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineAnimInstance_OnShiftStateChanged) == 0x000004, "Wrong alignment on WolverineAnimInstance_OnShiftStateChanged");
static_assert(sizeof(WolverineAnimInstance_OnShiftStateChanged) == 0x000004, "Wrong size on WolverineAnimInstance_OnShiftStateChanged");
static_assert(offsetof(WolverineAnimInstance_OnShiftStateChanged, InState) == 0x000000, "Member 'WolverineAnimInstance_OnShiftStateChanged::InState' has a wrong offset!");

// Function Hero_1049.WolverineAnimInstance.OnTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct WolverineAnimInstance_OnTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WolverineAnimInstance_OnTagUpdated) == 0x000004, "Wrong alignment on WolverineAnimInstance_OnTagUpdated");
static_assert(sizeof(WolverineAnimInstance_OnTagUpdated) == 0x000010, "Wrong size on WolverineAnimInstance_OnTagUpdated");
static_assert(offsetof(WolverineAnimInstance_OnTagUpdated, TagUpdated) == 0x000000, "Member 'WolverineAnimInstance_OnTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(WolverineAnimInstance_OnTagUpdated, TagExists) == 0x00000C, "Member 'WolverineAnimInstance_OnTagUpdated::TagExists' has a wrong offset!");

// Function Hero_1049.WolverineCharacter.CanResurrectSelfExternal
// 0x0001 (0x0001 - 0x0000)
struct WolverineCharacter_CanResurrectSelfExternal final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineCharacter_CanResurrectSelfExternal) == 0x000001, "Wrong alignment on WolverineCharacter_CanResurrectSelfExternal");
static_assert(sizeof(WolverineCharacter_CanResurrectSelfExternal) == 0x000001, "Wrong size on WolverineCharacter_CanResurrectSelfExternal");
static_assert(offsetof(WolverineCharacter_CanResurrectSelfExternal, Result) == 0x000000, "Member 'WolverineCharacter_CanResurrectSelfExternal::Result' has a wrong offset!");

// Function Hero_1049.WolverineCharacter.GetWolverineAngerCurrent
// 0x0004 (0x0004 - 0x0000)
struct WolverineCharacter_GetWolverineAngerCurrent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineCharacter_GetWolverineAngerCurrent) == 0x000004, "Wrong alignment on WolverineCharacter_GetWolverineAngerCurrent");
static_assert(sizeof(WolverineCharacter_GetWolverineAngerCurrent) == 0x000004, "Wrong size on WolverineCharacter_GetWolverineAngerCurrent");
static_assert(offsetof(WolverineCharacter_GetWolverineAngerCurrent, ReturnValue) == 0x000000, "Member 'WolverineCharacter_GetWolverineAngerCurrent::ReturnValue' has a wrong offset!");

// Function Hero_1049.WolverineCharacter.GetWolverineAngerFull
// 0x0004 (0x0004 - 0x0000)
struct WolverineCharacter_GetWolverineAngerFull final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineCharacter_GetWolverineAngerFull) == 0x000004, "Wrong alignment on WolverineCharacter_GetWolverineAngerFull");
static_assert(sizeof(WolverineCharacter_GetWolverineAngerFull) == 0x000004, "Wrong size on WolverineCharacter_GetWolverineAngerFull");
static_assert(offsetof(WolverineCharacter_GetWolverineAngerFull, ReturnValue) == 0x000000, "Member 'WolverineCharacter_GetWolverineAngerFull::ReturnValue' has a wrong offset!");

// Function Hero_1049.WolverineCharacter.IsWolverineAngerFull
// 0x0001 (0x0001 - 0x0000)
struct WolverineCharacter_IsWolverineAngerFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineCharacter_IsWolverineAngerFull) == 0x000001, "Wrong alignment on WolverineCharacter_IsWolverineAngerFull");
static_assert(sizeof(WolverineCharacter_IsWolverineAngerFull) == 0x000001, "Wrong size on WolverineCharacter_IsWolverineAngerFull");
static_assert(offsetof(WolverineCharacter_IsWolverineAngerFull, ReturnValue) == 0x000000, "Member 'WolverineCharacter_IsWolverineAngerFull::ReturnValue' has a wrong offset!");

// Function Hero_1049.WolverineChildActor.OnHairTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct WolverineChildActor_OnHairTagUpdated final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInExist;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WolverineChildActor_OnHairTagUpdated) == 0x000004, "Wrong alignment on WolverineChildActor_OnHairTagUpdated");
static_assert(sizeof(WolverineChildActor_OnHairTagUpdated) == 0x000010, "Wrong size on WolverineChildActor_OnHairTagUpdated");
static_assert(offsetof(WolverineChildActor_OnHairTagUpdated, InTag) == 0x000000, "Member 'WolverineChildActor_OnHairTagUpdated::InTag' has a wrong offset!");
static_assert(offsetof(WolverineChildActor_OnHairTagUpdated, bInExist) == 0x00000C, "Member 'WolverineChildActor_OnHairTagUpdated::bInExist' has a wrong offset!");

// Function Hero_1049.WolverineMovementComponent.SetBlendAccelerationByCameraDirection
// 0x0008 (0x0008 - 0x0000)
struct WolverineMovementComponent_SetBlendAccelerationByCameraDirection final
{
public:
	bool                                          bBlend;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendFactor;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WolverineMovementComponent_SetBlendAccelerationByCameraDirection) == 0x000004, "Wrong alignment on WolverineMovementComponent_SetBlendAccelerationByCameraDirection");
static_assert(sizeof(WolverineMovementComponent_SetBlendAccelerationByCameraDirection) == 0x000008, "Wrong size on WolverineMovementComponent_SetBlendAccelerationByCameraDirection");
static_assert(offsetof(WolverineMovementComponent_SetBlendAccelerationByCameraDirection, bBlend) == 0x000000, "Member 'WolverineMovementComponent_SetBlendAccelerationByCameraDirection::bBlend' has a wrong offset!");
static_assert(offsetof(WolverineMovementComponent_SetBlendAccelerationByCameraDirection, InBlendFactor) == 0x000004, "Member 'WolverineMovementComponent_SetBlendAccelerationByCameraDirection::InBlendFactor' has a wrong offset!");

}

