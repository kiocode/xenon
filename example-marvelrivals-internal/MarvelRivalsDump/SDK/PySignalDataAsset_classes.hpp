#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PySignalDataAsset

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass PySignalDataAsset.PySignalDataAsset
// 0x2560 (0x2630 - 0x00D0)
class UPySignalDataAsset final : public USignalDataAsset
{
public:
	bool                                          EnableSignalSystem;                                // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SignalActionName;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SignalInCDText;                                    // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SignalInCDAudioEvent;                              // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FGameplayTagContainer>     ClickPriorities;                                   // 0x0108(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DoubleClickInterval;                               // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FGameplayTagContainer>     DoubleClickPriorities;                             // 0x0160(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         HoldDuration;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowPanelDistance;                                 // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APySignalHandlerActor>      SignalClass;                                       // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SignalDuration;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AllyTags;                                          // 0x01C8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EnemyTags;                                         // 0x0230(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayActorTags;                                 // 0x0298(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ResponseTag;                                       // 0x0300(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HurtTeammateTag;                                   // 0x030C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbilitySignalTag;                                  // 0x0318(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAbilityInputBinds, struct FAbilityStatusSignalConfig> CDSignalAbilityInputConfig;                        // 0x0328(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<EAbilityInputBinds>                    CDSignalBlockAbilityInputs;                        // 0x0378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 AbilityInputWhiteList;                             // 0x0388(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityStateMsgPrefix;                             // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityCoolDownChatMsg;                            // 0x03B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityCoolDownChatMsgSuffix;                      // 0x03C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityBlockChatMsg;                               // 0x03E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityReadyChatMsg;                               // 0x03F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 EnergyToCDAbilityIDs;                              // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SameActivateStatusPairs;                           // 0x0420(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BondAbilityTag_Sender;                             // 0x0470(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BondAbilityTag_Receiver;                           // 0x047C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IgnoredBondAbilityTag;                             // 0x0488(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, TArray<int32>>      ActivityIgnoredCommID;                             // 0x0498(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, class FText>                      SpecialSummonedChatName;                           // 0x04E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, class FText>                      SpecialTargetChatPrefix;                           // 0x0538(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<int32>                                   DontFindLowSculptAudioHeroList;                    // 0x0588(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x05E0(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             ThroughWallTraceContext;                           // 0x1570(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      EnemyCharacterQuery;                               // 0x2500(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      EnemySummonedQuery;                                // 0x2548(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TeammateCharacterQuery;                            // 0x2590(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TeammateSummonedQuery;                             // 0x25D8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UPrimaryDataAsset*                      ThroughWallConfig;                                 // 0x2620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PySignalDataAsset">();
	}
	static class UPySignalDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPySignalDataAsset>();
	}
};
static_assert(alignof(UPySignalDataAsset) == 0x000010, "Wrong alignment on UPySignalDataAsset");
static_assert(sizeof(UPySignalDataAsset) == 0x002630, "Wrong size on UPySignalDataAsset");
static_assert(offsetof(UPySignalDataAsset, EnableSignalSystem) == 0x0000D0, "Member 'UPySignalDataAsset::EnableSignalSystem' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SignalActionName) == 0x0000D8, "Member 'UPySignalDataAsset::SignalActionName' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SignalInCDText) == 0x0000E8, "Member 'UPySignalDataAsset::SignalInCDText' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SignalInCDAudioEvent) == 0x000100, "Member 'UPySignalDataAsset::SignalInCDAudioEvent' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ClickPriorities) == 0x000108, "Member 'UPySignalDataAsset::ClickPriorities' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, DoubleClickInterval) == 0x000158, "Member 'UPySignalDataAsset::DoubleClickInterval' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, DoubleClickPriorities) == 0x000160, "Member 'UPySignalDataAsset::DoubleClickPriorities' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, HoldDuration) == 0x0001B0, "Member 'UPySignalDataAsset::HoldDuration' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ShowPanelDistance) == 0x0001B4, "Member 'UPySignalDataAsset::ShowPanelDistance' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SignalClass) == 0x0001B8, "Member 'UPySignalDataAsset::SignalClass' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SignalDuration) == 0x0001C0, "Member 'UPySignalDataAsset::SignalDuration' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AllyTags) == 0x0001C8, "Member 'UPySignalDataAsset::AllyTags' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, EnemyTags) == 0x000230, "Member 'UPySignalDataAsset::EnemyTags' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, GameplayActorTags) == 0x000298, "Member 'UPySignalDataAsset::GameplayActorTags' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ResponseTag) == 0x000300, "Member 'UPySignalDataAsset::ResponseTag' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, HurtTeammateTag) == 0x00030C, "Member 'UPySignalDataAsset::HurtTeammateTag' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilitySignalTag) == 0x000318, "Member 'UPySignalDataAsset::AbilitySignalTag' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, CDSignalAbilityInputConfig) == 0x000328, "Member 'UPySignalDataAsset::CDSignalAbilityInputConfig' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, CDSignalBlockAbilityInputs) == 0x000378, "Member 'UPySignalDataAsset::CDSignalBlockAbilityInputs' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityInputWhiteList) == 0x000388, "Member 'UPySignalDataAsset::AbilityInputWhiteList' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityStateMsgPrefix) == 0x000398, "Member 'UPySignalDataAsset::AbilityStateMsgPrefix' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityCoolDownChatMsg) == 0x0003B0, "Member 'UPySignalDataAsset::AbilityCoolDownChatMsg' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityCoolDownChatMsgSuffix) == 0x0003C8, "Member 'UPySignalDataAsset::AbilityCoolDownChatMsgSuffix' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityBlockChatMsg) == 0x0003E0, "Member 'UPySignalDataAsset::AbilityBlockChatMsg' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, AbilityReadyChatMsg) == 0x0003F8, "Member 'UPySignalDataAsset::AbilityReadyChatMsg' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, EnergyToCDAbilityIDs) == 0x000410, "Member 'UPySignalDataAsset::EnergyToCDAbilityIDs' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SameActivateStatusPairs) == 0x000420, "Member 'UPySignalDataAsset::SameActivateStatusPairs' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, BondAbilityTag_Sender) == 0x000470, "Member 'UPySignalDataAsset::BondAbilityTag_Sender' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, BondAbilityTag_Receiver) == 0x00047C, "Member 'UPySignalDataAsset::BondAbilityTag_Receiver' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, IgnoredBondAbilityTag) == 0x000488, "Member 'UPySignalDataAsset::IgnoredBondAbilityTag' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ActivityIgnoredCommID) == 0x000498, "Member 'UPySignalDataAsset::ActivityIgnoredCommID' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SpecialSummonedChatName) == 0x0004E8, "Member 'UPySignalDataAsset::SpecialSummonedChatName' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, SpecialTargetChatPrefix) == 0x000538, "Member 'UPySignalDataAsset::SpecialTargetChatPrefix' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, DontFindLowSculptAudioHeroList) == 0x000588, "Member 'UPySignalDataAsset::DontFindLowSculptAudioHeroList' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, TraceContext) == 0x0005E0, "Member 'UPySignalDataAsset::TraceContext' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ThroughWallTraceContext) == 0x001570, "Member 'UPySignalDataAsset::ThroughWallTraceContext' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, EnemyCharacterQuery) == 0x002500, "Member 'UPySignalDataAsset::EnemyCharacterQuery' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, EnemySummonedQuery) == 0x002548, "Member 'UPySignalDataAsset::EnemySummonedQuery' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, TeammateCharacterQuery) == 0x002590, "Member 'UPySignalDataAsset::TeammateCharacterQuery' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, TeammateSummonedQuery) == 0x0025D8, "Member 'UPySignalDataAsset::TeammateSummonedQuery' has a wrong offset!");
static_assert(offsetof(UPySignalDataAsset, ThroughWallConfig) == 0x002620, "Member 'UPySignalDataAsset::ThroughWallConfig' has a wrong offset!");

}

