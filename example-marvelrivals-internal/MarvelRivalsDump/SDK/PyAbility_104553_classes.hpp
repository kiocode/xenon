#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_104553

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1045_classes.hpp"


namespace SDK
{

// PythonClass PyAbility_104553.PyConfig_104553
// 0x0060 (0x00F8 - 0x0098)
class UPyConfig_104553 final : public UMarvelAbilityConfig
{
public:
	float                                         MaxShootAngle;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShootInterval;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, float>              IntervalReplaceMap;                                // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SpawnScopeID;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_104553">();
	}
	static class UPyConfig_104553* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_104553>();
	}
};
static_assert(alignof(UPyConfig_104553) == 0x000008, "Wrong alignment on UPyConfig_104553");
static_assert(sizeof(UPyConfig_104553) == 0x0000F8, "Wrong size on UPyConfig_104553");
static_assert(offsetof(UPyConfig_104553, MaxShootAngle) == 0x000098, "Member 'UPyConfig_104553::MaxShootAngle' has a wrong offset!");
static_assert(offsetof(UPyConfig_104553, MinShootInterval) == 0x00009C, "Member 'UPyConfig_104553::MinShootInterval' has a wrong offset!");
static_assert(offsetof(UPyConfig_104553, IntervalReplaceMap) == 0x0000A0, "Member 'UPyConfig_104553::IntervalReplaceMap' has a wrong offset!");
static_assert(offsetof(UPyConfig_104553, SpawnScopeID) == 0x0000F0, "Member 'UPyConfig_104553::SpawnScopeID' has a wrong offset!");

// PythonClass PyAbility_104553.PyAbility_104553
// 0x0008 (0x2590 - 0x2588)
class UPyAbility_104553 : public UAbility_104553
{
public:
	float                                         LastShootTime;                                     // 0x2588(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BeginPlay();
	void EndPlay();
	void OnTagUpdate(const struct FGameplayTag& TagUpdated, bool TagExists);
	bool CanActivate();
	void NativeOnMontageEvent(const class FString& Tag);

	bool IsOnCooldown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_104553">();
	}
	static class UPyAbility_104553* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_104553>();
	}
};
static_assert(alignof(UPyAbility_104553) == 0x000008, "Wrong alignment on UPyAbility_104553");
static_assert(sizeof(UPyAbility_104553) == 0x002590, "Wrong size on UPyAbility_104553");
static_assert(offsetof(UPyAbility_104553, LastShootTime) == 0x002588, "Member 'UPyAbility_104553::LastShootTime' has a wrong offset!");

}

