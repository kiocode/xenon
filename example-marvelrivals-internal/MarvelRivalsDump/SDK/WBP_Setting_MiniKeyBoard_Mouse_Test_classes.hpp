#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Setting_MiniKeyBoard_Mouse_Test

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Setting_MiniKeyBoard_Mouse_Test.WBP_Setting_MiniKeyBoard_Mouse_Test_C
// 0x01A8 (0x0560 - 0x03B8)
class UWBP_Setting_MiniKeyBoard_Mouse_Test_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMarvelImage*                           Bg_Left;                                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Middle;                                         // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Right;                                          // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Side_Down;                                      // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Side_Up;                                        // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Wheel_Down;                                     // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Bg_Wheel_Up;                                       // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Left;                                          // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Right;                                         // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Side_Down;                                     // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Side_Up;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Wheel;                                         // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Wheel_Down;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelButton*                          Btn_Wheel_Up;                                      // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Icon_Wheel_Down;                                   // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Icon_Wheel_Up;                                     // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Mouse;                                         // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Img_TextBg;                                        // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Left;                                         // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Right;                                        // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Wheel;                                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          LeftIsCombined;                                    // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftIsDisable;                                     // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftIsConflict;                                    // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B[0x5];                                      // 0x046B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combine_False;                                     // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combine_True;                                      // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combine_Disable;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsCombined;                                   // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsDisable;                                    // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsConflict;                                   // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsCombined;                                  // 0x048B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsDisable;                                   // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsConflict;                                  // 0x048D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisCombined;                               // 0x048E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisDisable;                                // 0x048F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisConflict;                               // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisCombined;                                 // 0x0491(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisDisable;                                  // 0x0492(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisConflict;                                 // 0x0493(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Text_Color_White;                                  // 0x0494(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            Text_Color_Black;                                  // 0x04A8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            Text_Color_White_Gary;                             // 0x04BC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMarvelTextBlock*                       Text;                                              // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsCombined;                                   // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsDisable;                                    // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsConflict;                                   // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsCombined;                                  // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsDisable;                                   // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsConflict;                                  // 0x04DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DE[0x2];                                      // 0x04DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Image_0;                                           // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_1;                                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_2;                                           // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_3;                                           // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_4;                                           // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_5;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_6;                                           // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_7;                                           // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_8;                                           // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_9;                                           // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CombineColor;                                      // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalColor;                                       // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ConflictColor;                                     // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_WBP_Setting_MiniKeyBoard_Mouse_Test(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Setting_MiniKeyBoard_Mouse_Test_C">();
	}
	static class UWBP_Setting_MiniKeyBoard_Mouse_Test_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Setting_MiniKeyBoard_Mouse_Test_C>();
	}
};
////static_assert(alignof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C) == 0x000008, "Wrong alignment on UWBP_Setting_MiniKeyBoard_Mouse_Test_C");
////static_assert(sizeof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C) == 0x000560, "Wrong size on UWBP_Setting_MiniKeyBoard_Mouse_Test_C");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, UberGraphFrame) == 0x0003B8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::UberGraphFrame' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Left) == 0x0003C0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Left' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Middle) == 0x0003C8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Middle' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Right) == 0x0003D0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Right' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Side_Down) == 0x0003D8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Side_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Side_Up) == 0x0003E0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Side_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Wheel_Down) == 0x0003E8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Wheel_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Bg_Wheel_Up) == 0x0003F0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Bg_Wheel_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Left) == 0x0003F8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Left' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Right) == 0x000400, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Right' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Side_Down) == 0x000408, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Side_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Side_Up) == 0x000410, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Side_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Wheel) == 0x000418, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Wheel' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Wheel_Down) == 0x000420, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Wheel_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Btn_Wheel_Up) == 0x000428, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Btn_Wheel_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Icon_Wheel_Down) == 0x000430, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Icon_Wheel_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Icon_Wheel_Up) == 0x000438, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Icon_Wheel_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Img_Mouse) == 0x000440, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Img_Mouse' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Img_TextBg) == 0x000448, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Img_TextBg' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Left) == 0x000450, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Left' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Right) == 0x000458, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Right' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Wheel) == 0x000460, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Wheel' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, LeftIsCombined) == 0x000468, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::LeftIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, LeftIsDisable) == 0x000469, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::LeftIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, LeftIsConflict) == 0x00046A, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::LeftIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Combine_False) == 0x000470, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Combine_False' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Combine_True) == 0x000478, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Combine_True' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Combine_Disable) == 0x000480, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Combine_Disable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, RightIsCombined) == 0x000488, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::RightIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, RightIsDisable) == 0x000489, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::RightIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, RightIsConflict) == 0x00048A, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::RightIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, MiddleIsCombined) == 0x00048B, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::MiddleIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, MiddleIsDisable) == 0x00048C, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::MiddleIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, MiddleIsConflict) == 0x00048D, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::MiddleIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelDownisCombined) == 0x00048E, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelDownisCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelDownisDisable) == 0x00048F, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelDownisDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelDownisConflict) == 0x000490, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelDownisConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelUpisCombined) == 0x000491, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelUpisCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelUpisDisable) == 0x000492, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelUpisDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, WheelUpisConflict) == 0x000493, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::WheelUpisConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Color_White) == 0x000494, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Color_White' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Color_Black) == 0x0004A8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Color_Black' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text_Color_White_Gary) == 0x0004BC, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text_Color_White_Gary' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Text) == 0x0004D0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Text' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, ThumbIsCombined) == 0x0004D8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::ThumbIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, ThumbIsDisable) == 0x0004D9, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::ThumbIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, ThumbIsConflict) == 0x0004DA, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::ThumbIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Thumb2IsCombined) == 0x0004DB, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Thumb2IsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Thumb2IsDisable) == 0x0004DC, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Thumb2IsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Thumb2IsConflict) == 0x0004DD, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Thumb2IsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_0) == 0x0004E0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_0' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_1) == 0x0004E8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_1' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_2) == 0x0004F0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_2' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_3) == 0x0004F8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_3' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_4) == 0x000500, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_4' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_5) == 0x000508, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_5' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_6) == 0x000510, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_6' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_7) == 0x000518, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_7' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_8) == 0x000520, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_8' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, Image_9) == 0x000528, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::Image_9' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, CombineColor) == 0x000530, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::CombineColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, NormalColor) == 0x000540, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::NormalColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_Test_C, ConflictColor) == 0x000550, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_Test_C::ConflictColor' has a wrong offset!");

}

