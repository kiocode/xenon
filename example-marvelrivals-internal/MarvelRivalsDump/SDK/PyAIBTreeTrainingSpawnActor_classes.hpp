#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAIBTreeTrainingSpawnActor

#include "Basic.hpp"

#include "PyAITrainBaseSpawnActor_classes.hpp"


namespace SDK
{

// PythonClass PyAIBTreeTrainingSpawnActor.PyAIBtreeTestSpawnActor
// 0x0018 (0x0518 - 0x0500)
class APyAIBtreeTestSpawnActor : public APyAITrainBaseSpawnActor
{
public:
	int32                                         HeroID;                                            // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Camp;                                              // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReliveTime;                                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BTree;                                             // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAIBtreeTestSpawnActor">();
	}
	static class APyAIBtreeTestSpawnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyAIBtreeTestSpawnActor>();
	}
};
static_assert(alignof(APyAIBtreeTestSpawnActor) == 0x000008, "Wrong alignment on APyAIBtreeTestSpawnActor");
static_assert(sizeof(APyAIBtreeTestSpawnActor) == 0x000518, "Wrong size on APyAIBtreeTestSpawnActor");
static_assert(offsetof(APyAIBtreeTestSpawnActor, HeroID) == 0x000500, "Member 'APyAIBtreeTestSpawnActor::HeroID' has a wrong offset!");
static_assert(offsetof(APyAIBtreeTestSpawnActor, DifficultyLevel) == 0x000504, "Member 'APyAIBtreeTestSpawnActor::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(APyAIBtreeTestSpawnActor, Camp) == 0x000508, "Member 'APyAIBtreeTestSpawnActor::Camp' has a wrong offset!");
static_assert(offsetof(APyAIBtreeTestSpawnActor, ReliveTime) == 0x00050C, "Member 'APyAIBtreeTestSpawnActor::ReliveTime' has a wrong offset!");
static_assert(offsetof(APyAIBtreeTestSpawnActor, BTree) == 0x000510, "Member 'APyAIBtreeTestSpawnActor::BTree' has a wrong offset!");

}

