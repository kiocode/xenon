#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RemoteControl

#include "Basic.hpp"

#include "RemoteControl_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "StructUtils_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RemoteControl.RCVirtualPropertyBase
// 0x0090 (0x00C0 - 0x0030)
class URCVirtualPropertyBase : public UObject
{
public:
	class FName                                   PropertyName;                                      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FieldId;                                           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class URemoteControlPreset>    PresetWeakPtr;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayName;                                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayIndex;                                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              MetaData;                                          // 0x0070(0x0050)(NativeAccessSpecifierPublic)

public:
	bool SetValueBool(const bool InBoolValue);
	bool SetValueByte(const uint8 InByte);
	bool SetValueColor(const struct FColor& InColor);
	bool SetValueDouble(const double InDouble);
	bool SetValueFloat(const float InFloat);
	bool SetValueInt16(const int16 InInt16);
	bool SetValueInt32(const int32 InInt32);
	bool SetValueInt64(const int64 InInt64);
	bool SetValueInt8(const int8 InInt8);
	bool SetValueName(const class FName& InNameValue);
	bool SetValueNumericInteger(const int64 InInt64Value);
	bool SetValueRotator(const struct FRotator& InRotator);
	bool SetValueString(const class FString& InStringValue);
	bool SetValueText(const class FText& InTextValue);
	bool SetValueUint16(const uint16 InUInt16);
	bool SetValueUInt32(const uint32 InUInt32);
	bool SetValueUint64(const uint64 InUInt64);
	bool SetValueVector(const struct FVector& InVector);

	class FString GetDisplayValueAsString() const;
	class FName GetPropertyName() const;
	bool GetValueBool(bool* OutBoolValue) const;
	bool GetValueByte(uint8* OutByte) const;
	bool GetValueColor(struct FColor* OutColor) const;
	bool GetValueDouble(double* OutDouble) const;
	bool GetValueFloat(float* OutFloat) const;
	bool GetValueInt16(int16* OutInt16) const;
	bool GetValueInt32(int32* OutInt32) const;
	bool GetValueInt64(int64* OuyInt64) const;
	bool GetValueInt8(int8* OutInt8) const;
	bool GetValueName(class FName* OutNameValue) const;
	bool GetValueNumericInteger(int64* OutInt64Value) const;
	class UObject* GetValueObject() const;
	bool GetValueRotator(struct FRotator* OutRotator) const;
	bool GetValueString(class FString* OutStringValue) const;
	bool GetValueText(class FText* OutTextValue) const;
	bool GetValueUint16(uint16* OutUInt16) const;
	bool GetValueUInt32(uint32* OutUInt32) const;
	bool GetValueUint64(uint64* OuyUInt64) const;
	bool GetValueVector(struct FVector* OutVector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCVirtualPropertyBase">();
	}
	static class URCVirtualPropertyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCVirtualPropertyBase>();
	}
};
//static_assert(alignof(URCVirtualPropertyBase) == 0x000008, "Wrong alignment on URCVirtualPropertyBase");
//static_assert(sizeof(URCVirtualPropertyBase) == 0x0000C0, "Wrong size on URCVirtualPropertyBase");
//static_assert(offsetof(URCVirtualPropertyBase, PropertyName) == 0x000030, "Member 'URCVirtualPropertyBase::PropertyName' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, ID) == 0x00003C, "Member 'URCVirtualPropertyBase::ID' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, FieldId) == 0x00004C, "Member 'URCVirtualPropertyBase::FieldId' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, PresetWeakPtr) == 0x000058, "Member 'URCVirtualPropertyBase::PresetWeakPtr' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, DisplayName) == 0x000060, "Member 'URCVirtualPropertyBase::DisplayName' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, DisplayIndex) == 0x00006C, "Member 'URCVirtualPropertyBase::DisplayIndex' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyBase, MetaData) == 0x000070, "Member 'URCVirtualPropertyBase::MetaData' has a wrong offset!");

// Class RemoteControl.RCVirtualPropertyInContainer
// 0x0008 (0x00C8 - 0x00C0)
class URCVirtualPropertyInContainer : public URCVirtualPropertyBase
{
public:
	TWeakObjectPtr<class URCVirtualPropertyContainerBase> ContainerWeakPtr;                                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCVirtualPropertyInContainer">();
	}
	static class URCVirtualPropertyInContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCVirtualPropertyInContainer>();
	}
};
//static_assert(alignof(URCVirtualPropertyInContainer) == 0x000008, "Wrong alignment on URCVirtualPropertyInContainer");
//static_assert(sizeof(URCVirtualPropertyInContainer) == 0x0000C8, "Wrong size on URCVirtualPropertyInContainer");
//static_assert(offsetof(URCVirtualPropertyInContainer, ContainerWeakPtr) == 0x0000C0, "Member 'URCVirtualPropertyInContainer::ContainerWeakPtr' has a wrong offset!");

// Class RemoteControl.RCVirtualPropertySelfContainer
// 0x0010 (0x00D0 - 0x00C0)
class URCVirtualPropertySelfContainer final : public URCVirtualPropertyBase
{
public:
	struct FInstancedPropertyBag                  Bag;                                               // 0x00C0(0x0010)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCVirtualPropertySelfContainer">();
	}
	static class URCVirtualPropertySelfContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCVirtualPropertySelfContainer>();
	}
};
//static_assert(alignof(URCVirtualPropertySelfContainer) == 0x000008, "Wrong alignment on URCVirtualPropertySelfContainer");
//static_assert(sizeof(URCVirtualPropertySelfContainer) == 0x0000D0, "Wrong size on URCVirtualPropertySelfContainer");
//static_assert(offsetof(URCVirtualPropertySelfContainer, Bag) == 0x0000C0, "Member 'URCVirtualPropertySelfContainer::Bag' has a wrong offset!");

// Class RemoteControl.RCVirtualPropertyContainerBase
// 0x0080 (0x00B0 - 0x0030)
class URCVirtualPropertyContainerBase : public UObject
{
public:
	struct FInstancedPropertyBag                  Bag;                                               // 0x0030(0x0010)(Protected, NativeAccessSpecifierProtected)
	TSet<class URCVirtualPropertyBase*>           VirtualProperties;                                 // 0x0040(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class URemoteControlPreset>    PresetWeakPtr;                                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCVirtualPropertyContainerBase">();
	}
	static class URCVirtualPropertyContainerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCVirtualPropertyContainerBase>();
	}
};
//static_assert(alignof(URCVirtualPropertyContainerBase) == 0x000008, "Wrong alignment on URCVirtualPropertyContainerBase");
//static_assert(sizeof(URCVirtualPropertyContainerBase) == 0x0000B0, "Wrong size on URCVirtualPropertyContainerBase");
//static_assert(offsetof(URCVirtualPropertyContainerBase, Bag) == 0x000030, "Member 'URCVirtualPropertyContainerBase::Bag' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyContainerBase, VirtualProperties) == 0x000040, "Member 'URCVirtualPropertyContainerBase::VirtualProperties' has a wrong offset!");
//static_assert(offsetof(URCVirtualPropertyContainerBase, PresetWeakPtr) == 0x000090, "Member 'URCVirtualPropertyContainerBase::PresetWeakPtr' has a wrong offset!");

// Class RemoteControl.RemoteControlBinding
// 0x0038 (0x0068 - 0x0030)
class URemoteControlBinding : public UObject
{
public:
	class FString                                 Name_0;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LastBoundObjectPath;                               // 0x0040(0x0028)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlBinding">();
	}
	static class URemoteControlBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlBinding>();
	}
};
//static_assert(alignof(URemoteControlBinding) == 0x000008, "Wrong alignment on URemoteControlBinding");
//static_assert(sizeof(URemoteControlBinding) == 0x000068, "Wrong size on URemoteControlBinding");
//static_assert(offsetof(URemoteControlBinding, Name_0) == 0x000030, "Member 'URemoteControlBinding::Name_0' has a wrong offset!");
//static_assert(offsetof(URemoteControlBinding, LastBoundObjectPath) == 0x000040, "Member 'URemoteControlBinding::LastBoundObjectPath' has a wrong offset!");

// Class RemoteControl.RemoteControlLevelIndependantBinding
// 0x0030 (0x0098 - 0x0068)
class URemoteControlLevelIndependantBinding final : public URemoteControlBinding
{
public:
	TSoftObjectPtr<class UObject>                 BoundObject;                                       // 0x0068(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlLevelIndependantBinding">();
	}
	static class URemoteControlLevelIndependantBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlLevelIndependantBinding>();
	}
};
//static_assert(alignof(URemoteControlLevelIndependantBinding) == 0x000008, "Wrong alignment on URemoteControlLevelIndependantBinding");
//static_assert(sizeof(URemoteControlLevelIndependantBinding) == 0x000098, "Wrong size on URemoteControlLevelIndependantBinding");
//static_assert(offsetof(URemoteControlLevelIndependantBinding, BoundObject) == 0x000068, "Member 'URemoteControlLevelIndependantBinding::BoundObject' has a wrong offset!");

// Class RemoteControl.RemoteControlLevelDependantBinding
// 0x0160 (0x01C8 - 0x0068)
class URemoteControlLevelDependantBinding final : public URemoteControlBinding
{
public:
	TMap<struct FSoftObjectPath, TSoftObjectPtr<class UObject>> BoundObjectMapByPath;                              // 0x0068(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<struct FSoftObjectPath, TSoftObjectPtr<class ULevel>> SubLevelSelectionMapByPath;                        // 0x00B8(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class ULevel>                  LevelWithLastSuccessfulResolve;                    // 0x0108(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRemoteControlInitialBindingContext    BindingContext;                                    // 0x0138(0x0090)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlLevelDependantBinding">();
	}
	static class URemoteControlLevelDependantBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlLevelDependantBinding>();
	}
};
//static_assert(alignof(URemoteControlLevelDependantBinding) == 0x000008, "Wrong alignment on URemoteControlLevelDependantBinding");
//static_assert(sizeof(URemoteControlLevelDependantBinding) == 0x0001C8, "Wrong size on URemoteControlLevelDependantBinding");
//static_assert(offsetof(URemoteControlLevelDependantBinding, BoundObjectMapByPath) == 0x000068, "Member 'URemoteControlLevelDependantBinding::BoundObjectMapByPath' has a wrong offset!");
//static_assert(offsetof(URemoteControlLevelDependantBinding, SubLevelSelectionMapByPath) == 0x0000B8, "Member 'URemoteControlLevelDependantBinding::SubLevelSelectionMapByPath' has a wrong offset!");
//static_assert(offsetof(URemoteControlLevelDependantBinding, LevelWithLastSuccessfulResolve) == 0x000108, "Member 'URemoteControlLevelDependantBinding::LevelWithLastSuccessfulResolve' has a wrong offset!");
//static_assert(offsetof(URemoteControlLevelDependantBinding, BindingContext) == 0x000138, "Member 'URemoteControlLevelDependantBinding::BindingContext' has a wrong offset!");

// Class RemoteControl.RemoteControlDeltaAPITestObject
// 0x0048 (0x0078 - 0x0030)
class URemoteControlDeltaAPITestObject final : public UObject
{
public:
	int32                                         Int32Value;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorValue;                                       // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRemoteControlDeltaAPITestStruct       StructValue;                                       // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Int32WithSetterValue;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloatWithSetterValue;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetInt32WithSetterValue();
	void SetInt32WithSetterValue(const int32 NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlDeltaAPITestObject">();
	}
	static class URemoteControlDeltaAPITestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlDeltaAPITestObject>();
	}
};
//static_assert(alignof(URemoteControlDeltaAPITestObject) == 0x000008, "Wrong alignment on URemoteControlDeltaAPITestObject");
//static_assert(sizeof(URemoteControlDeltaAPITestObject) == 0x000078, "Wrong size on URemoteControlDeltaAPITestObject");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, Int32Value) == 0x000030, "Member 'URemoteControlDeltaAPITestObject::Int32Value' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, FloatValue) == 0x000034, "Member 'URemoteControlDeltaAPITestObject::FloatValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, VectorValue) == 0x000038, "Member 'URemoteControlDeltaAPITestObject::VectorValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, ColorValue) == 0x000050, "Member 'URemoteControlDeltaAPITestObject::ColorValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, StructValue) == 0x000060, "Member 'URemoteControlDeltaAPITestObject::StructValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, Int32WithSetterValue) == 0x000070, "Member 'URemoteControlDeltaAPITestObject::Int32WithSetterValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlDeltaAPITestObject, FloatWithSetterValue) == 0x000074, "Member 'URemoteControlDeltaAPITestObject::FloatWithSetterValue' has a wrong offset!");

// Class RemoteControl.RemoteControlExposeRegistry
// 0x00F0 (0x0120 - 0x0030)
class URemoteControlExposeRegistry final : public UObject
{
public:
	TSet<struct FRCEntityWrapper>                 ExposedEntities;                                   // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FGuid>               LabelToIdCache;                                    // 0x0080(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class UScriptStruct*>                    ExposedTypes;                                      // 0x00D0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlExposeRegistry">();
	}
	static class URemoteControlExposeRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlExposeRegistry>();
	}
};
//static_assert(alignof(URemoteControlExposeRegistry) == 0x000008, "Wrong alignment on URemoteControlExposeRegistry");
//static_assert(sizeof(URemoteControlExposeRegistry) == 0x000120, "Wrong size on URemoteControlExposeRegistry");
//static_assert(offsetof(URemoteControlExposeRegistry, ExposedEntities) == 0x000030, "Member 'URemoteControlExposeRegistry::ExposedEntities' has a wrong offset!");
//static_assert(offsetof(URemoteControlExposeRegistry, LabelToIdCache) == 0x000080, "Member 'URemoteControlExposeRegistry::LabelToIdCache' has a wrong offset!");
//static_assert(offsetof(URemoteControlExposeRegistry, ExposedTypes) == 0x0000D0, "Member 'URemoteControlExposeRegistry::ExposedTypes' has a wrong offset!");

// Class RemoteControl.RemoteControlFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class URemoteControlFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ApplyColorGradingWheelDelta(class UObject* TargetObject, const class FString& PropertyName, const struct FColorGradingWheelColor& DeltaValue, const struct FColorGradingWheelColor& ReferenceColor, bool bIsInteractive, float MinValue, float MaxValue);
	static bool ApplyColorWheelDelta(class UObject* TargetObject, const class FString& PropertyName, const struct FColorWheelColor& DeltaValue, const struct FColorWheelColor& ReferenceColor, bool bIsInteractive);
	static bool ExposeActor(class URemoteControlPreset* Preset, class AActor* Actor, const struct FRemoteControlOptionalExposeArgs& Args);
	static bool ExposeFunction(class URemoteControlPreset* Preset, class UObject* SourceObject, const class FString& Function, const struct FRemoteControlOptionalExposeArgs& Args);
	static bool ExposeProperty(class URemoteControlPreset* Preset, class UObject* SourceObject, const class FString& Property, const struct FRemoteControlOptionalExposeArgs& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlFunctionLibrary">();
	}
	static class URemoteControlFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlFunctionLibrary>();
	}
};
//static_assert(alignof(URemoteControlFunctionLibrary) == 0x000008, "Wrong alignment on URemoteControlFunctionLibrary");
//static_assert(sizeof(URemoteControlFunctionLibrary) == 0x000030, "Wrong size on URemoteControlFunctionLibrary");

// Class RemoteControl.RemoteControlInterceptionTestObject
// 0x0030 (0x0060 - 0x0030)
class URemoteControlInterceptionTestObject final : public UObject
{
public:
	struct FRemoteControlInterceptionTestStruct   CustomStruct;                                      // 0x0030(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRemoteControlInterceptionFunctionParamStruct FunctionParamStruct;                               // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)

public:
	struct FRemoteControlInterceptionFunctionParamStruct TestFunction(const struct FRemoteControlInterceptionFunctionParamStruct& InStruct, int32 InTestFactor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlInterceptionTestObject">();
	}
	static class URemoteControlInterceptionTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlInterceptionTestObject>();
	}
};
//static_assert(alignof(URemoteControlInterceptionTestObject) == 0x000008, "Wrong alignment on URemoteControlInterceptionTestObject");
//static_assert(sizeof(URemoteControlInterceptionTestObject) == 0x000060, "Wrong size on URemoteControlInterceptionTestObject");
//static_assert(offsetof(URemoteControlInterceptionTestObject, CustomStruct) == 0x000030, "Member 'URemoteControlInterceptionTestObject::CustomStruct' has a wrong offset!");
//static_assert(offsetof(URemoteControlInterceptionTestObject, FunctionParamStruct) == 0x000038, "Member 'URemoteControlInterceptionTestObject::FunctionParamStruct' has a wrong offset!");

// Class RemoteControl.RemoteControlPreset
// 0x0528 (0x0558 - 0x0030)
class URemoteControlPreset final : public UObject
{
public:
	struct FRemoteControlPresetLayout             Layout;                                            // 0x0030(0x00C0)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            MetaData;                                          // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	TArray<class URemoteControlBinding*>          Bindings;                                          // 0x0140(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class URCVirtualPropertyContainerBase*        ControllerContainer;                               // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  PresetId;                                          // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FRCCachedFieldData> FieldCache;                                        // 0x0168(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FGuid>               NameToGuidMap;                                     // 0x01B8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class URemoteControlExposeRegistry*           Registry;                                          // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x348];                                    // 0x0210(0x0348)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlPreset">();
	}
	static class URemoteControlPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlPreset>();
	}
};
//static_assert(alignof(URemoteControlPreset) == 0x000008, "Wrong alignment on URemoteControlPreset");
//static_assert(sizeof(URemoteControlPreset) == 0x000558, "Wrong size on URemoteControlPreset");
//static_assert(offsetof(URemoteControlPreset, Layout) == 0x000030, "Member 'URemoteControlPreset::Layout' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, MetaData) == 0x0000F0, "Member 'URemoteControlPreset::MetaData' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, Bindings) == 0x000140, "Member 'URemoteControlPreset::Bindings' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, ControllerContainer) == 0x000150, "Member 'URemoteControlPreset::ControllerContainer' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, PresetId) == 0x000158, "Member 'URemoteControlPreset::PresetId' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, FieldCache) == 0x000168, "Member 'URemoteControlPreset::FieldCache' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, NameToGuidMap) == 0x0001B8, "Member 'URemoteControlPreset::NameToGuidMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlPreset, Registry) == 0x000208, "Member 'URemoteControlPreset::Registry' has a wrong offset!");

// Class RemoteControl.RemoteControlPresetActor
// 0x0010 (0x04A0 - 0x0490)
class ARemoteControlPresetActor final : public AActor
{
public:
	class URemoteControlPreset*                   Preset;                                            // 0x0490(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlPresetActor">();
	}
	static class ARemoteControlPresetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARemoteControlPresetActor>();
	}
};
//static_assert(alignof(ARemoteControlPresetActor) == 0x000008, "Wrong alignment on ARemoteControlPresetActor");
//static_assert(sizeof(ARemoteControlPresetActor) == 0x0004A0, "Wrong size on ARemoteControlPresetActor");
//static_assert(offsetof(ARemoteControlPresetActor, Preset) == 0x000490, "Member 'ARemoteControlPresetActor::Preset' has a wrong offset!");

// Class RemoteControl.RemoteControlAPITestObject
// 0x02A0 (0x02D0 - 0x0030)
class URemoteControlAPITestObject final : public UObject
{
public:
	int32                                         CStyleIntArray[0x3];                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArray;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRemoteControlTestStructOuter>  StructOuterArray;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   IntSet;                                            // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            IntMap;                                            // 0x00B0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FRemoteControlTestStructOuter> StructOuterMap;                                    // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FColor>            StringColorMap;                                    // 0x0150(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ArrayOfVectors;                                    // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x01B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Int8Value;                                         // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x1];                                      // 0x01B9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Int16Value;                                        // 0x01BA(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int32Value;                                        // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DoubleValue;                                       // 0x01C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRemoteControlTestStructOuter          RemoteControlTestStructOuter;                      // 0x01D0(0x0078)(Edit, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0248(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x0258(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextValue;                                         // 0x0268(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0280(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ByteValue;                                         // 0x0281(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemoteControlEnum                            RemoteControlEnumByteValue;                        // 0x0282(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemoteControlEnumClass                       RemoteControlEnumValue;                            // 0x0283(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VectorValue;                                       // 0x0288(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotatorValue;                                      // 0x02A0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 ColorValue;                                        // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColorValue;                                  // 0x02BC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlAPITestObject">();
	}
	static class URemoteControlAPITestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlAPITestObject>();
	}
};
//static_assert(alignof(URemoteControlAPITestObject) == 0x000008, "Wrong alignment on URemoteControlAPITestObject");
//static_assert(sizeof(URemoteControlAPITestObject) == 0x0002D0, "Wrong size on URemoteControlAPITestObject");
//static_assert(offsetof(URemoteControlAPITestObject, CStyleIntArray) == 0x000030, "Member 'URemoteControlAPITestObject::CStyleIntArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, IntArray) == 0x000040, "Member 'URemoteControlAPITestObject::IntArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, StructOuterArray) == 0x000050, "Member 'URemoteControlAPITestObject::StructOuterArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, IntSet) == 0x000060, "Member 'URemoteControlAPITestObject::IntSet' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, IntMap) == 0x0000B0, "Member 'URemoteControlAPITestObject::IntMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, StructOuterMap) == 0x000100, "Member 'URemoteControlAPITestObject::StructOuterMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, StringColorMap) == 0x000150, "Member 'URemoteControlAPITestObject::StringColorMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, ArrayOfVectors) == 0x0001A0, "Member 'URemoteControlAPITestObject::ArrayOfVectors' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, StaticMeshComponent) == 0x0001B0, "Member 'URemoteControlAPITestObject::StaticMeshComponent' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, Int8Value) == 0x0001B8, "Member 'URemoteControlAPITestObject::Int8Value' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, Int16Value) == 0x0001BA, "Member 'URemoteControlAPITestObject::Int16Value' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, Int32Value) == 0x0001BC, "Member 'URemoteControlAPITestObject::Int32Value' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, FloatValue) == 0x0001C0, "Member 'URemoteControlAPITestObject::FloatValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, DoubleValue) == 0x0001C8, "Member 'URemoteControlAPITestObject::DoubleValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, RemoteControlTestStructOuter) == 0x0001D0, "Member 'URemoteControlAPITestObject::RemoteControlTestStructOuter' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, StringValue) == 0x000248, "Member 'URemoteControlAPITestObject::StringValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, NameValue) == 0x000258, "Member 'URemoteControlAPITestObject::NameValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, TextValue) == 0x000268, "Member 'URemoteControlAPITestObject::TextValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, bValue) == 0x000280, "Member 'URemoteControlAPITestObject::bValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, ByteValue) == 0x000281, "Member 'URemoteControlAPITestObject::ByteValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, RemoteControlEnumByteValue) == 0x000282, "Member 'URemoteControlAPITestObject::RemoteControlEnumByteValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, RemoteControlEnumValue) == 0x000283, "Member 'URemoteControlAPITestObject::RemoteControlEnumValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, VectorValue) == 0x000288, "Member 'URemoteControlAPITestObject::VectorValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, RotatorValue) == 0x0002A0, "Member 'URemoteControlAPITestObject::RotatorValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, ColorValue) == 0x0002B8, "Member 'URemoteControlAPITestObject::ColorValue' has a wrong offset!");
//static_assert(offsetof(URemoteControlAPITestObject, LinearColorValue) == 0x0002BC, "Member 'URemoteControlAPITestObject::LinearColorValue' has a wrong offset!");

// Class RemoteControl.RemoteControlTestObject
// 0x0170 (0x01A0 - 0x0030)
class URemoteControlTestObject final : public UObject
{
public:
	int32                                         CStyleIntArray[0x3];                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntArray;                                          // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArray;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   IntSet;                                            // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, int32>                            IntMap;                                            // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FRemoteControlTestInnerStruct> IntInnerStructMap;                                 // 0x0100(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FColor>            StringColorMap;                                    // 0x0150(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlTestObject">();
	}
	static class URemoteControlTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlTestObject>();
	}
};
//static_assert(alignof(URemoteControlTestObject) == 0x000008, "Wrong alignment on URemoteControlTestObject");
//static_assert(sizeof(URemoteControlTestObject) == 0x0001A0, "Wrong size on URemoteControlTestObject");
//static_assert(offsetof(URemoteControlTestObject, CStyleIntArray) == 0x000030, "Member 'URemoteControlTestObject::CStyleIntArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, IntArray) == 0x000040, "Member 'URemoteControlTestObject::IntArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, FloatArray) == 0x000050, "Member 'URemoteControlTestObject::FloatArray' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, IntSet) == 0x000060, "Member 'URemoteControlTestObject::IntSet' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, IntMap) == 0x0000B0, "Member 'URemoteControlTestObject::IntMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, IntInnerStructMap) == 0x000100, "Member 'URemoteControlTestObject::IntInnerStructMap' has a wrong offset!");
//static_assert(offsetof(URemoteControlTestObject, StringColorMap) == 0x000150, "Member 'URemoteControlTestObject::StringColorMap' has a wrong offset!");

}

