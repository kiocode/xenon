#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyHeroSwitchRuleComponent

#include "Basic.hpp"

#include "MarvelLevel_structs.hpp"
#include "MarvelLevel_classes.hpp"
#include "Marvel_structs.hpp"
#include "PyRuleComponent_classes.hpp"


namespace SDK
{

// PythonClass PyHeroSwitchRuleComponent.PyHeroSwitchConfig
// 0x0170 (0x01A0 - 0x0030)
class UPyHeroSwitchConfig final : public UMarvelRuleConfig
{
public:
	bool                                          CanChangeHero;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepeatLimit;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TankHeroLimit;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageHeroLimit;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportHeroLimit;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowRechooseRole;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroSwitch                                   SwitchType;                                        // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixedInitialHero;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HeroValidList;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 HeroLimitList;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 SelectHeroValidList;                               // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 RandomHeroList;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         FixedTime;                                         // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FixedHeroList;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ScoreHeroMap;                                      // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bRandom;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixed;                                            // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScore;                                            // 0x00FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            HeroSkinLimit;                                     // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FAbilityIDSet>             HeroLimitAbility;                                  // 0x0150(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	void PyPostEditChange();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyHeroSwitchConfig">();
	}
	static class UPyHeroSwitchConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyHeroSwitchConfig>();
	}
};
static_assert(alignof(UPyHeroSwitchConfig) == 0x000008, "Wrong alignment on UPyHeroSwitchConfig");
static_assert(sizeof(UPyHeroSwitchConfig) == 0x0001A0, "Wrong size on UPyHeroSwitchConfig");
static_assert(offsetof(UPyHeroSwitchConfig, CanChangeHero) == 0x000030, "Member 'UPyHeroSwitchConfig::CanChangeHero' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, RepeatLimit) == 0x000034, "Member 'UPyHeroSwitchConfig::RepeatLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, TankHeroLimit) == 0x000038, "Member 'UPyHeroSwitchConfig::TankHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, DamageHeroLimit) == 0x00003C, "Member 'UPyHeroSwitchConfig::DamageHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, SupportHeroLimit) == 0x000040, "Member 'UPyHeroSwitchConfig::SupportHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, AllowRechooseRole) == 0x000044, "Member 'UPyHeroSwitchConfig::AllowRechooseRole' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, SwitchType) == 0x000045, "Member 'UPyHeroSwitchConfig::SwitchType' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, FixedInitialHero) == 0x000048, "Member 'UPyHeroSwitchConfig::FixedInitialHero' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, HeroValidList) == 0x000050, "Member 'UPyHeroSwitchConfig::HeroValidList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, HeroLimitList) == 0x000060, "Member 'UPyHeroSwitchConfig::HeroLimitList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, SelectHeroValidList) == 0x000070, "Member 'UPyHeroSwitchConfig::SelectHeroValidList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, RandomHeroList) == 0x000080, "Member 'UPyHeroSwitchConfig::RandomHeroList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, FixedTime) == 0x000090, "Member 'UPyHeroSwitchConfig::FixedTime' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, FixedHeroList) == 0x000098, "Member 'UPyHeroSwitchConfig::FixedHeroList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, ScoreHeroMap) == 0x0000A8, "Member 'UPyHeroSwitchConfig::ScoreHeroMap' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, bRandom) == 0x0000F8, "Member 'UPyHeroSwitchConfig::bRandom' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, bFixed) == 0x0000F9, "Member 'UPyHeroSwitchConfig::bFixed' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, bScore) == 0x0000FA, "Member 'UPyHeroSwitchConfig::bScore' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, HeroSkinLimit) == 0x000100, "Member 'UPyHeroSwitchConfig::HeroSkinLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchConfig, HeroLimitAbility) == 0x000150, "Member 'UPyHeroSwitchConfig::HeroLimitAbility' has a wrong offset!");

// PythonClass PyHeroSwitchRuleComponent.PyHeroSwitchRuleComponent
// 0x01F8 (0x02E8 - 0x00F0)
class UPyHeroSwitchRuleComponent final : public UPyRuleComponent
{
public:
	bool                                          CanChangeHero;                                     // 0x00F0(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroSwitch                                   SwitchType;                                        // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixedInitialHero;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 HeroValidList;                                     // 0x00F8(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	TArray<int32>                                 HeroLimitList;                                     // 0x0108(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	TArray<int32>                                 SelectHeroValidList;                               // 0x0118(0x0010)(Net, NativeAccessSpecifierPublic)
	TArray<int32>                                 RandomHeroList;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         FixedTime;                                         // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FixedHeroList;                                     // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ScoreHeroMap;                                      // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RepeatLimit;                                       // 0x01A0(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TankHeroLimit;                                     // 0x01A4(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageHeroLimit;                                   // 0x01A8(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportHeroLimit;                                  // 0x01AC(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowRechooseRole;                                 // 0x01B0(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicateTimer                        FixHeroTimer;                                      // 0x01B8(0x0078)(BlueprintVisible, Net, NativeAccessSpecifierPublic)
	TArray<int32>                                 TmpFixList;                                        // 0x0230(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	int32                                         FixedIndex;                                        // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            HeroSkinLimit;                                     // 0x0248(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FAbilityIDSet>             HeroLimitAbility;                                  // 0x0298(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	void Fixed_change_all_player_hero();
	void OnRep_CanChangeHero();
	void OnRep_RepeatHeroLimit();
	void OnRep_TankHeroLimit();
	void OnRep_DamageHeroLimit();
	void OnRep_SupportHeroLimit();
	void OnRep_HeroValidList();
	void OnRep_HeroLimitList();
	void OnRep_AllowRechooseRole();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyHeroSwitchRuleComponent">();
	}
	static class UPyHeroSwitchRuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyHeroSwitchRuleComponent>();
	}
};
static_assert(alignof(UPyHeroSwitchRuleComponent) == 0x000008, "Wrong alignment on UPyHeroSwitchRuleComponent");
static_assert(sizeof(UPyHeroSwitchRuleComponent) == 0x0002E8, "Wrong size on UPyHeroSwitchRuleComponent");
static_assert(offsetof(UPyHeroSwitchRuleComponent, CanChangeHero) == 0x0000F0, "Member 'UPyHeroSwitchRuleComponent::CanChangeHero' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, SwitchType) == 0x0000F1, "Member 'UPyHeroSwitchRuleComponent::SwitchType' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, FixedInitialHero) == 0x0000F4, "Member 'UPyHeroSwitchRuleComponent::FixedInitialHero' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, HeroValidList) == 0x0000F8, "Member 'UPyHeroSwitchRuleComponent::HeroValidList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, HeroLimitList) == 0x000108, "Member 'UPyHeroSwitchRuleComponent::HeroLimitList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, SelectHeroValidList) == 0x000118, "Member 'UPyHeroSwitchRuleComponent::SelectHeroValidList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, RandomHeroList) == 0x000128, "Member 'UPyHeroSwitchRuleComponent::RandomHeroList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, FixedTime) == 0x000138, "Member 'UPyHeroSwitchRuleComponent::FixedTime' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, FixedHeroList) == 0x000140, "Member 'UPyHeroSwitchRuleComponent::FixedHeroList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, ScoreHeroMap) == 0x000150, "Member 'UPyHeroSwitchRuleComponent::ScoreHeroMap' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, RepeatLimit) == 0x0001A0, "Member 'UPyHeroSwitchRuleComponent::RepeatLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, TankHeroLimit) == 0x0001A4, "Member 'UPyHeroSwitchRuleComponent::TankHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, DamageHeroLimit) == 0x0001A8, "Member 'UPyHeroSwitchRuleComponent::DamageHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, SupportHeroLimit) == 0x0001AC, "Member 'UPyHeroSwitchRuleComponent::SupportHeroLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, AllowRechooseRole) == 0x0001B0, "Member 'UPyHeroSwitchRuleComponent::AllowRechooseRole' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, FixHeroTimer) == 0x0001B8, "Member 'UPyHeroSwitchRuleComponent::FixHeroTimer' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, TmpFixList) == 0x000230, "Member 'UPyHeroSwitchRuleComponent::TmpFixList' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, FixedIndex) == 0x000240, "Member 'UPyHeroSwitchRuleComponent::FixedIndex' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, HeroSkinLimit) == 0x000248, "Member 'UPyHeroSwitchRuleComponent::HeroSkinLimit' has a wrong offset!");
static_assert(offsetof(UPyHeroSwitchRuleComponent, HeroLimitAbility) == 0x000298, "Member 'UPyHeroSwitchRuleComponent::HeroLimitAbility' has a wrong offset!");

}

