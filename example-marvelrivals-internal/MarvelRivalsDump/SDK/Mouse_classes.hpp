#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mouse

#include "Basic.hpp"

#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass Mouse.UISettingMouseSensitivityHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingMouseSensitivityHandler final : public UUISettingEntrySettingHandler
{
public:
	float BP_GetCurrentValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);
	TMap<class FString, int32> BP_OnChanged(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags);
	float BP_GetDefaultValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingMouseSensitivityHandler">();
	}
	static class UUISettingMouseSensitivityHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingMouseSensitivityHandler>();
	}
};
static_assert(alignof(UUISettingMouseSensitivityHandler) == 0x000008, "Wrong alignment on UUISettingMouseSensitivityHandler");
static_assert(sizeof(UUISettingMouseSensitivityHandler) == 0x000030, "Wrong size on UUISettingMouseSensitivityHandler");

// PythonClass Mouse.UISettingMouseInvertCameraHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingMouseInvertCameraHandler final : public UUISettingEntrySettingHandler
{
public:
	float BP_GetCurrentValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);
	TMap<class FString, int32> BP_OnChanged(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags);
	float BP_GetDefaultValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingMouseInvertCameraHandler">();
	}
	static class UUISettingMouseInvertCameraHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingMouseInvertCameraHandler>();
	}
};
static_assert(alignof(UUISettingMouseInvertCameraHandler) == 0x000008, "Wrong alignment on UUISettingMouseInvertCameraHandler");
static_assert(sizeof(UUISettingMouseInvertCameraHandler) == 0x000030, "Wrong size on UUISettingMouseInvertCameraHandler");

// PythonClass Mouse.UISettingMouseAccelerationHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingMouseAccelerationHandler final : public UUISettingEntrySettingHandler
{
public:
	float BP_GetCurrentValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);
	TMap<class FString, int32> BP_OnChanged(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags);
	float BP_GetDefaultValue(class UObject* Obj, const class FString& Setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& O);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingMouseAccelerationHandler">();
	}
	static class UUISettingMouseAccelerationHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingMouseAccelerationHandler>();
	}
};
static_assert(alignof(UUISettingMouseAccelerationHandler) == 0x000008, "Wrong alignment on UUISettingMouseAccelerationHandler");
static_assert(sizeof(UUISettingMouseAccelerationHandler) == 0x000030, "Wrong size on UUISettingMouseAccelerationHandler");

}

