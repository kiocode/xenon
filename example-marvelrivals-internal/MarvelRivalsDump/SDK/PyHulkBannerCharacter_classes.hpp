#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyHulkBannerCharacter

#include "Basic.hpp"

#include "Hero_1011_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Marvel_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyHulkBannerCharacter.PyHulkBannerCharacter
// 0x0010 (0x18D0 - 0x18C0)
class APyHulkBannerCharacter : public AHulkBannerCharacter
{
public:
	class UMarveSculptConfigComponent*            HulkHeroSculptConfigComponent;                     // 0x18C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarveSculptConfigComponent*            HulkMonsterSculptConfigComponent;                  // 0x18C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnHeroReviving(EPlayerLivingState State);
	void OnPreDeath(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameter);
	void K2_OnSculptChanged(int32 SculptID);
	void OnLevelForceKill(class AActor* Kill_target);
	void OnTagUpdate(const struct FGameplayTag& Tag, bool Exist);
	void OnCharacterReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnActivateAbility(int32 AbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyHulkBannerCharacter">();
	}
	static class APyHulkBannerCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyHulkBannerCharacter>();
	}
};
static_assert(alignof(APyHulkBannerCharacter) == 0x000010, "Wrong alignment on APyHulkBannerCharacter");
static_assert(sizeof(APyHulkBannerCharacter) == 0x0018D0, "Wrong size on APyHulkBannerCharacter");
static_assert(offsetof(APyHulkBannerCharacter, HulkHeroSculptConfigComponent) == 0x0018C0, "Member 'APyHulkBannerCharacter::HulkHeroSculptConfigComponent' has a wrong offset!");
static_assert(offsetof(APyHulkBannerCharacter, HulkMonsterSculptConfigComponent) == 0x0018C8, "Member 'APyHulkBannerCharacter::HulkMonsterSculptConfigComponent' has a wrong offset!");

// PythonClass PyHulkBannerCharacter.PyBannerBaseChildActor
// 0x0000 (0x0A88 - 0x0A88)
class APyBannerBaseChildActor final : public ABannerBaseChildActor
{
public:
	void ReceivePoolBeginPlay();
	void ReceivePoolEndPlay();
	void OnGenericGameplayTagUpdate(const struct FGameplayTag& InTag, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyBannerBaseChildActor">();
	}
	static class APyBannerBaseChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyBannerBaseChildActor>();
	}
};
static_assert(alignof(APyBannerBaseChildActor) == 0x000008, "Wrong alignment on APyBannerBaseChildActor");
static_assert(sizeof(APyBannerBaseChildActor) == 0x000A88, "Wrong size on APyBannerBaseChildActor");

// PythonClass PyHulkBannerCharacter.PyHulkMonsterChildActor
// 0x0010 (0x0A70 - 0x0A60)
class APyHulkMonsterChildActor final : public AHulkBannerChildActor
{
public:
	struct FGameplayTag                           CueTagOnBeginPlay;                                 // 0x0A60(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceivePoolBeginPlay();
	void ReceivePoolEndPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyHulkMonsterChildActor">();
	}
	static class APyHulkMonsterChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyHulkMonsterChildActor>();
	}
};
static_assert(alignof(APyHulkMonsterChildActor) == 0x000008, "Wrong alignment on APyHulkMonsterChildActor");
static_assert(sizeof(APyHulkMonsterChildActor) == 0x000A70, "Wrong size on APyHulkMonsterChildActor");
static_assert(offsetof(APyHulkMonsterChildActor, CueTagOnBeginPlay) == 0x000A60, "Member 'APyHulkMonsterChildActor::CueTagOnBeginPlay' has a wrong offset!");

}

