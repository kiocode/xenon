#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Setting_MiniKeyBoard_Mouse_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PyWidget_SettingMiniKeyboard_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Setting_MiniKeyBoard_Mouse_V2.WBP_Setting_MiniKeyBoard_Mouse_V2_C
// 0x01A0 (0x0790 - 0x05F0)
class UWBP_Setting_MiniKeyBoard_Mouse_V2_C final : public UPyWidget_SettingMiniMouse
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMarvelImage*                           Icon_Wheel_Down;                                   // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Icon_Wheel_Middle;                                 // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Icon_Wheel_Up;                                     // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_MouseBg;                                       // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Img_TextBg;                                        // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelImage*                           Img_TextBg_1;                                      // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Left;                                          // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Right;                                         // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Side_Down;                                     // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Side_Up;                                       // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Wheel_Down;                                    // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Wheel_Middle;                                  // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Setting_MiniKeyBoard_MouseKey_V2_C* Key_Wheel_Up;                                      // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Left;                                         // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Right;                                        // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarvelTextBlock*                       Text_Wheel;                                        // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          LeftIsCombined;                                    // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftIsDisable;                                     // 0x0679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftIsConflict;                                    // 0x067A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67B[0x5];                                      // 0x067B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Combine_False;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combine_True;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Combine_Disable;                                   // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsCombined;                                   // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsDisable;                                    // 0x0699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightIsConflict;                                   // 0x069A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsCombined;                                  // 0x069B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsDisable;                                   // 0x069C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MiddleIsConflict;                                  // 0x069D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisCombined;                               // 0x069E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisDisable;                                // 0x069F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelDownisConflict;                               // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisCombined;                                 // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisDisable;                                  // 0x06A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelUpisConflict;                                 // 0x06A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Text_Color_White;                                  // 0x06A4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            Text_Color_Black;                                  // 0x06B8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            Text_Color_White_Gary;                             // 0x06CC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMarvelTextBlock*                       Text;                                              // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsCombined;                                   // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsDisable;                                    // 0x06E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThumbIsConflict;                                   // 0x06EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsCombined;                                  // 0x06EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsDisable;                                   // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Thumb2IsConflict;                                  // 0x06ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EE[0x2];                                      // 0x06EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Image_0;                                           // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_1;                                           // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_2;                                           // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_3;                                           // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_4;                                           // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_5;                                           // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_6;                                           // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_7;                                           // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_8;                                           // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Image_9;                                           // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CombineColor;                                      // 0x0740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalColor;                                       // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ConflictColor;                                     // 0x0760(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CommonFrameColor;                                  // 0x0770(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DisableFrameColor;                                 // 0x0780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_WBP_Setting_MiniKeyBoard_Mouse_V2(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Setting_MiniKeyBoard_Mouse_V2_C">();
	}
	static class UWBP_Setting_MiniKeyBoard_Mouse_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Setting_MiniKeyBoard_Mouse_V2_C>();
	}
};
////static_assert(alignof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C) == 0x000008, "Wrong alignment on UWBP_Setting_MiniKeyBoard_Mouse_V2_C");
////static_assert(sizeof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C) == 0x000790, "Wrong size on UWBP_Setting_MiniKeyBoard_Mouse_V2_C");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, UberGraphFrame) == 0x0005F0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::UberGraphFrame' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Icon_Wheel_Down) == 0x0005F8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Icon_Wheel_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Icon_Wheel_Middle) == 0x000600, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Icon_Wheel_Middle' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Icon_Wheel_Up) == 0x000608, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Icon_Wheel_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Img_MouseBg) == 0x000610, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Img_MouseBg' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Img_TextBg) == 0x000618, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Img_TextBg' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Img_TextBg_1) == 0x000620, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Img_TextBg_1' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Left) == 0x000628, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Left' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Right) == 0x000630, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Right' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Side_Down) == 0x000638, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Side_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Side_Up) == 0x000640, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Side_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Wheel_Down) == 0x000648, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Wheel_Down' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Wheel_Middle) == 0x000650, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Wheel_Middle' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Key_Wheel_Up) == 0x000658, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Key_Wheel_Up' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Left) == 0x000660, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Left' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Right) == 0x000668, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Right' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Wheel) == 0x000670, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Wheel' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, LeftIsCombined) == 0x000678, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::LeftIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, LeftIsDisable) == 0x000679, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::LeftIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, LeftIsConflict) == 0x00067A, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::LeftIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Combine_False) == 0x000680, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Combine_False' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Combine_True) == 0x000688, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Combine_True' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Combine_Disable) == 0x000690, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Combine_Disable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, RightIsCombined) == 0x000698, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::RightIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, RightIsDisable) == 0x000699, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::RightIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, RightIsConflict) == 0x00069A, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::RightIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, MiddleIsCombined) == 0x00069B, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::MiddleIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, MiddleIsDisable) == 0x00069C, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::MiddleIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, MiddleIsConflict) == 0x00069D, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::MiddleIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelDownisCombined) == 0x00069E, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelDownisCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelDownisDisable) == 0x00069F, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelDownisDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelDownisConflict) == 0x0006A0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelDownisConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelUpisCombined) == 0x0006A1, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelUpisCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelUpisDisable) == 0x0006A2, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelUpisDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, WheelUpisConflict) == 0x0006A3, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::WheelUpisConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Color_White) == 0x0006A4, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Color_White' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Color_Black) == 0x0006B8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Color_Black' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text_Color_White_Gary) == 0x0006CC, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text_Color_White_Gary' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Text) == 0x0006E0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Text' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, ThumbIsCombined) == 0x0006E8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::ThumbIsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, ThumbIsDisable) == 0x0006E9, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::ThumbIsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, ThumbIsConflict) == 0x0006EA, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::ThumbIsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Thumb2IsCombined) == 0x0006EB, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Thumb2IsCombined' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Thumb2IsDisable) == 0x0006EC, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Thumb2IsDisable' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Thumb2IsConflict) == 0x0006ED, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Thumb2IsConflict' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_0) == 0x0006F0, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_0' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_1) == 0x0006F8, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_1' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_2) == 0x000700, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_2' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_3) == 0x000708, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_3' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_4) == 0x000710, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_4' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_5) == 0x000718, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_5' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_6) == 0x000720, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_6' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_7) == 0x000728, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_7' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_8) == 0x000730, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_8' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, Image_9) == 0x000738, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::Image_9' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, CombineColor) == 0x000740, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::CombineColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, NormalColor) == 0x000750, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::NormalColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, ConflictColor) == 0x000760, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::ConflictColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, CommonFrameColor) == 0x000770, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::CommonFrameColor' has a wrong offset!");
////static_assert(offsetof(UWBP_Setting_MiniKeyBoard_Mouse_V2_C, DisableFrameColor) == 0x000780, "Member 'UWBP_Setting_MiniKeyBoard_Mouse_V2_C::DisableFrameColor' has a wrong offset!");

}

