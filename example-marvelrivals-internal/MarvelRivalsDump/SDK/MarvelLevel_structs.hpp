#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelLevel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MarvelLevel.ELevelAnimMoveMode
// NumValues: 0x0005
enum class ELevelAnimMoveMode : uint8
{
	None                                     = 0,
	Walking                                  = 1,
	Falling                                  = 2,
	Flying                                   = 3,
	MAX                                      = 4,
};

// Enum MarvelLevel.EActionSwitchCondition
// NumValues: 0x0008
enum class EActionSwitchCondition : uint8
{
	None                                     = 0,
	MontageSectionEnded                      = 1,
	BeHit                                    = 2,
	Landed                                   = 4,
	FallFromCliff                            = 8,
	GCBreak                                  = 16,
	All                                      = 31,
	EActionSwitchCondition_MAX               = 32,
};

// Enum MarvelLevel.EMarvelLevelAnimActionType
// NumValues: 0x0004
enum class EMarvelLevelAnimActionType : uint8
{
	None                                     = 0,
	PlayMontageSection                       = 1,
	StopAnim                                 = 2,
	EMarvelLevelAnimActionType_MAX           = 3,
};

// Enum MarvelLevel.EHeroSwitch
// NumValues: 0x0006
enum class EHeroSwitch : uint8
{
	Optional                                 = 0,
	Random                                   = 1,
	FixedTime                                = 2,
	Score                                    = 3,
	TimeoutRandom                            = 4,
	EHeroSwitch_MAX                          = 5,
};

// Enum MarvelLevel.EBirthType
// NumValues: 0x0006
enum class EBirthType : uint8
{
	BirthBase                                = 0,
	KeepAway                                 = 1,
	ModeCustom                               = 2,
	PlayStartTurn                            = 3,
	PlayStartFixed                           = 4,
	EBirthType_MAX                           = 5,
};

// Enum MarvelLevel.ETrainCustomOp
// NumValues: 0x0004
enum class ETrainCustomOp : uint8
{
	FriendHarm                               = 0,
	AIHate                                   = 1,
	SkillCD                                  = 2,
	ETrainCustomOp_MAX                       = 3,
};

// Enum MarvelLevel.ETrainAction
// NumValues: 0x0007
enum class ETrainAction : uint8
{
	FixedTarget                              = 0,
	MovingTarget                             = 1,
	QuickKill                                = 2,
	TimedKill                                = 3,
	WallTraining                             = 4,
	FlyTraining                              = 5,
	ETrainAction_MAX                         = 6,
};

// Enum MarvelLevel.ETrainAssist
// NumValues: 0x000B
enum class ETrainAssist : uint8
{
	ResetBroken                              = 0,
	ChargeSkill                              = 1,
	Teleport                                 = 2,
	Drone                                    = 3,
	Ranking                                  = 4,
	Summon                                   = 5,
	HeroSpawn                                = 6,
	Cooperate                                = 7,
	LimitTime                                = 8,
	RecoveryDestruction                      = 9,
	ETrainAssist_MAX                         = 10,
};

// Enum MarvelLevel.EShootingDis
// NumValues: 0x0006
enum class EShootingDis : uint8
{
	Close                                    = 0,
	Middle                                   = 1,
	Far                                      = 2,
	UltraFar                                 = 3,
	Mix                                      = 4,
	EShootingDis_MAX                         = 5,
};

// Enum MarvelLevel.ETrainAIModeType
// NumValues: 0x0004
enum class ETrainAIModeType : uint8
{
	Still                                    = 0,
	Law                                      = 1,
	Irregular                                = 2,
	ETrainAIModeType_MAX                     = 3,
};

// Enum MarvelLevel.ETrainUIModeType
// NumValues: 0x0008
enum class ETrainUIModeType : uint8
{
	Unknow                                   = 0,
	FixedTarget                              = 1,
	MovingTarget                             = 2,
	Melee                                    = 3,
	Parkour                                  = 4,
	Duel                                     = 5,
	FreeTrain                                = 6,
	ETrainUIModeType_MAX                     = 7,
};

// Enum MarvelLevel.ETrainUIModeItemType
// NumValues: 0x0006
enum class ETrainUIModeItemType : uint8
{
	Unknow                                   = 0,
	DropdownList                             = 1,
	Shift                                    = 2,
	Slider                                   = 3,
	Switch                                   = 4,
	ETrainUIModeItemType_MAX                 = 5,
};

// Enum MarvelLevel.ETrainShotingTargetType
// NumValues: 0x0003
enum class ETrainShotingTargetType : uint8
{
	Floor                                    = 0,
	Air                                      = 1,
	ETrainShotingTargetType_MAX              = 2,
};

// Enum MarvelLevel.ETrainAreaType
// NumValues: 0x0004
enum class ETrainAreaType : uint8
{
	Free                                     = 0,
	LimitTime                                = 1,
	SceneDamage                              = 2,
	ETrainAreaType_MAX                       = 3,
};

// Enum MarvelLevel.ETrainPlayerStartType
// NumValues: 0x0006
enum class ETrainPlayerStartType : uint8
{
	Unknow                                   = 0,
	Free                                     = 1,
	Parkour                                  = 2,
	Shooting                                 = 3,
	Duel                                     = 4,
	ETrainPlayerStartType_MAX                = 5,
};

// Enum MarvelLevel.EHeroSelectType
// NumValues: 0x0005
enum class EHeroSelectType : uint8
{
	All                                      = 0,
	Dead                                     = 1,
	DeadAndBirth                             = 2,
	AllNot                                   = 3,
	EHeroSelectType_MAX                      = 4,
};

// Enum MarvelLevel.EOvertimeState
// NumValues: 0x0006
enum class EOvertimeState : uint8
{
	Default                                  = 0,
	Clear                                    = 1,
	Consume                                  = 2,
	ResetAndHold                             = 3,
	End                                      = 4,
	EOvertimeState_MAX                       = 5,
};

// Enum MarvelLevel.EEventPointWay
// NumValues: 0x0004
enum class EEventPointWay : uint8
{
	Positive                                 = 0,
	Reverse                                  = 1,
	Both                                     = 2,
	EEventPointWay_MAX                       = 3,
};

// Enum MarvelLevel.EDoorType
// NumValues: 0x0004
enum class EDoorType : uint8
{
	DoorBoth                                 = 0,
	DoorBlock                                = 1,
	DoorHealing                              = 2,
	EDoorType_MAX                            = 3,
};

// Enum MarvelLevel.EInfinityCrisisState
// NumValues: 0x0008
enum class EInfinityCrisisState : uint8
{
	Initial                                  = 0,
	UnLock                                   = 1,
	Reset                                    = 2,
	Restart                                  = 3,
	Dropped                                  = 4,
	PickUp                                   = 5,
	Placed                                   = 6,
	EInfinityCrisisState_MAX                 = 7,
};

// Enum MarvelLevel.EAreaType
// NumValues: 0x0006
enum class EAreaType : uint8
{
	Unknown                                  = 0,
	Fire                                     = 1,
	NoWar                                    = 2,
	Heal                                     = 3,
	LowGravity                               = 4,
	EAreaType_MAX                            = 5,
};

// Enum MarvelLevel.EAreaState
// NumValues: 0x0004
enum class EAreaState : uint8
{
	Init                                     = 0,
	Activated                                = 1,
	UnActivated                              = 2,
	EAreaState_MAX                           = 3,
};

// Enum MarvelLevel.EBanPickOperateType
// NumValues: 0x0003
enum class EBanPickOperateType : uint8
{
	Ban                                      = 0,
	Pick                                     = 1,
	EBanPickOperateType_MAX                  = 2,
};

// Enum MarvelLevel.EBanPickMemberType
// NumValues: 0x0004
enum class EBanPickMemberType : uint8
{
	EveryOne                                 = 0,
	TeamLeader                               = 1,
	NoBanPick                                = 2,
	EBanPickMemberType_MAX                   = 3,
};

// Enum MarvelLevel.EBanPickCountingType
// NumValues: 0x0003
enum class EBanPickCountingType : uint8
{
	CountingByRamdom                         = 0,
	CountingByMax                            = 1,
	EBanPickCountingType_MAX                 = 2,
};

// Enum MarvelLevel.EBanPickModeOrderType
// NumValues: 0x0003
enum class EBanPickModeOrderType : uint8
{
	SingleSide                               = 0,
	BothSide                                 = 1,
	EBanPickModeOrderType_MAX                = 2,
};

// Enum MarvelLevel.ESpecialAreaState
// NumValues: 0x0004
enum class ESpecialAreaState : uint8
{
	Init                                     = 0,
	Running                                  = 1,
	Pause                                    = 2,
	ESpecialAreaState_MAX                    = 3,
};

// Enum MarvelLevel.ESpecialAreaType
// NumValues: 0x0005
enum class ESpecialAreaType : uint8
{
	Unknown                                  = 0,
	Fire                                     = 1,
	LowGravity                               = 2,
	Fog                                      = 3,
	ESpecialAreaType_MAX                     = 4,
};

// Enum MarvelLevel.EBtnInteractiveMode
// NumValues: 0x0003
enum class EBtnInteractiveMode : uint8
{
	Cache                                    = 0,
	Truncation                               = 1,
	EBtnInteractiveMode_MAX                  = 2,
};

// Enum MarvelLevel.EModeRoomCampType
// NumValues: 0x0005
enum class EModeRoomCampType : uint8
{
	Default                                  = 0,
	PureAlly                                 = 1,
	NoAttackDistinction                      = 2,
	DefaultCampAndBothAttack                 = 3,
	EModeRoomCampType_MAX                    = 4,
};

// ScriptStruct MarvelLevel.PPVStandard
// 0x0028 (0x0048 - 0x0020)
struct FPPVStandard final : public FTableRowBase
{
public:
	class FString                                 PropertyName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNumber;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNumber;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPVStandard) == 0x000008, "Wrong alignment on FPPVStandard");
static_assert(sizeof(FPPVStandard) == 0x000048, "Wrong size on FPPVStandard");
static_assert(offsetof(FPPVStandard, PropertyName) == 0x000020, "Member 'FPPVStandard::PropertyName' has a wrong offset!");
static_assert(offsetof(FPPVStandard, PropertyPath) == 0x000030, "Member 'FPPVStandard::PropertyPath' has a wrong offset!");
static_assert(offsetof(FPPVStandard, MinNumber) == 0x000040, "Member 'FPPVStandard::MinNumber' has a wrong offset!");
static_assert(offsetof(FPPVStandard, MaxNumber) == 0x000044, "Member 'FPPVStandard::MaxNumber' has a wrong offset!");

// ScriptStruct MarvelLevel.BuffInfo
// 0x0028 (0x0028 - 0x0000)
struct FBuffInfo final
{
public:
	TArray<int32>                                 BuffID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBringOut;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountOfUse;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegionTickTime;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffCD;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffInfo) == 0x000008, "Wrong alignment on FBuffInfo");
static_assert(sizeof(FBuffInfo) == 0x000028, "Wrong size on FBuffInfo");
static_assert(offsetof(FBuffInfo, BuffID) == 0x000000, "Member 'FBuffInfo::BuffID' has a wrong offset!");
static_assert(offsetof(FBuffInfo, bBringOut) == 0x000010, "Member 'FBuffInfo::bBringOut' has a wrong offset!");
static_assert(offsetof(FBuffInfo, CountOfUse) == 0x000014, "Member 'FBuffInfo::CountOfUse' has a wrong offset!");
static_assert(offsetof(FBuffInfo, DurationTime) == 0x000018, "Member 'FBuffInfo::DurationTime' has a wrong offset!");
static_assert(offsetof(FBuffInfo, RegionTickTime) == 0x00001C, "Member 'FBuffInfo::RegionTickTime' has a wrong offset!");
static_assert(offsetof(FBuffInfo, BuffCD) == 0x000020, "Member 'FBuffInfo::BuffCD' has a wrong offset!");

// ScriptStruct MarvelLevel.LevelEventConfig
// 0x0020 (0x0020 - 0x0000)
struct FLevelEventConfig
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventArgs;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEventConfig) == 0x000008, "Wrong alignment on FLevelEventConfig");
static_assert(sizeof(FLevelEventConfig) == 0x000020, "Wrong size on FLevelEventConfig");
static_assert(offsetof(FLevelEventConfig, EventTag) == 0x000000, "Member 'FLevelEventConfig::EventTag' has a wrong offset!");
static_assert(offsetof(FLevelEventConfig, EventArgs) == 0x000010, "Member 'FLevelEventConfig::EventArgs' has a wrong offset!");

// ScriptStruct MarvelLevel.ObjectiveLevelEventConfig
// 0x0008 (0x0028 - 0x0020)
struct FObjectiveLevelEventConfig final : public FLevelEventConfig
{
public:
	float                                         Progress;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectiveLevelEventConfig) == 0x000008, "Wrong alignment on FObjectiveLevelEventConfig");
static_assert(sizeof(FObjectiveLevelEventConfig) == 0x000028, "Wrong size on FObjectiveLevelEventConfig");
static_assert(offsetof(FObjectiveLevelEventConfig, Progress) == 0x000020, "Member 'FObjectiveLevelEventConfig::Progress' has a wrong offset!");

// ScriptStruct MarvelLevel.LevelPredesConfigTable
// 0x00A8 (0x00C8 - 0x0020)
struct FLevelPredesConfigTable final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale3D;                                   // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FMarvelPresetDestructionParam> DestructionParams;                                 // 0x0078(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelPredesConfigTable) == 0x000008, "Wrong alignment on FLevelPredesConfigTable");
static_assert(sizeof(FLevelPredesConfigTable) == 0x0000C8, "Wrong size on FLevelPredesConfigTable");
static_assert(offsetof(FLevelPredesConfigTable, Name) == 0x000020, "Member 'FLevelPredesConfigTable::Name' has a wrong offset!");
static_assert(offsetof(FLevelPredesConfigTable, RelativeLocation) == 0x000030, "Member 'FLevelPredesConfigTable::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FLevelPredesConfigTable, RelativeRotation) == 0x000048, "Member 'FLevelPredesConfigTable::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FLevelPredesConfigTable, RelativeScale3D) == 0x000060, "Member 'FLevelPredesConfigTable::RelativeScale3D' has a wrong offset!");
static_assert(offsetof(FLevelPredesConfigTable, DestructionParams) == 0x000078, "Member 'FLevelPredesConfigTable::DestructionParams' has a wrong offset!");

// ScriptStruct MarvelLevel.BanPickBothSideInfo
// 0x0008 (0x0008 - 0x0000)
struct FBanPickBothSideInfo final
{
public:
	EBanPickOperateType                           OperateType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContinueTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanPickBothSideInfo) == 0x000004, "Wrong alignment on FBanPickBothSideInfo");
static_assert(sizeof(FBanPickBothSideInfo) == 0x000008, "Wrong size on FBanPickBothSideInfo");
static_assert(offsetof(FBanPickBothSideInfo, OperateType) == 0x000000, "Member 'FBanPickBothSideInfo::OperateType' has a wrong offset!");
static_assert(offsetof(FBanPickBothSideInfo, ContinueTime) == 0x000004, "Member 'FBanPickBothSideInfo::ContinueTime' has a wrong offset!");

// ScriptStruct MarvelLevel.BanPickOneSideInfo
// 0x000C (0x000C - 0x0000)
struct FBanPickOneSideInfo final
{
public:
	EBanPickOperateType                           OperateType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContinueTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num;                                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBanPickOneSideInfo) == 0x000004, "Wrong alignment on FBanPickOneSideInfo");
static_assert(sizeof(FBanPickOneSideInfo) == 0x00000C, "Wrong size on FBanPickOneSideInfo");
static_assert(offsetof(FBanPickOneSideInfo, OperateType) == 0x000000, "Member 'FBanPickOneSideInfo::OperateType' has a wrong offset!");
static_assert(offsetof(FBanPickOneSideInfo, ContinueTime) == 0x000004, "Member 'FBanPickOneSideInfo::ContinueTime' has a wrong offset!");
static_assert(offsetof(FBanPickOneSideInfo, BattleSide) == 0x000008, "Member 'FBanPickOneSideInfo::BattleSide' has a wrong offset!");
static_assert(offsetof(FBanPickOneSideInfo, Num) == 0x000009, "Member 'FBanPickOneSideInfo::Num' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelBanPickHotFixTable
// 0x0060 (0x0080 - 0x0020)
struct FMarvelBanPickHotFixTable final : public FTableRowBase
{
public:
	bool                                          EnableBanPick;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LowestRank;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowestRankNum;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ModeIdList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 GamePlayModeIDList;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PreSelectHeroTime;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnnouncementTime;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanPickMemberType                            BanPickMemberType;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanPickCountingType                          BanPickCountingType;                               // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanPickModeOrderType                         BanPickModeOrderType;                              // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBanPickOneSideInfo>            BanPickOneSideList;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBanPickBothSideInfo>           BanPickBothSideList;                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelBanPickHotFixTable) == 0x000008, "Wrong alignment on FMarvelBanPickHotFixTable");
static_assert(sizeof(FMarvelBanPickHotFixTable) == 0x000080, "Wrong size on FMarvelBanPickHotFixTable");
static_assert(offsetof(FMarvelBanPickHotFixTable, EnableBanPick) == 0x000020, "Member 'FMarvelBanPickHotFixTable::EnableBanPick' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, LowestRank) == 0x000024, "Member 'FMarvelBanPickHotFixTable::LowestRank' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, LowestRankNum) == 0x000028, "Member 'FMarvelBanPickHotFixTable::LowestRankNum' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, ModeIdList) == 0x000030, "Member 'FMarvelBanPickHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, GamePlayModeIDList) == 0x000040, "Member 'FMarvelBanPickHotFixTable::GamePlayModeIDList' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, PreSelectHeroTime) == 0x000050, "Member 'FMarvelBanPickHotFixTable::PreSelectHeroTime' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, AnnouncementTime) == 0x000054, "Member 'FMarvelBanPickHotFixTable::AnnouncementTime' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, BanPickMemberType) == 0x000058, "Member 'FMarvelBanPickHotFixTable::BanPickMemberType' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, BanPickCountingType) == 0x000059, "Member 'FMarvelBanPickHotFixTable::BanPickCountingType' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, BanPickModeOrderType) == 0x00005A, "Member 'FMarvelBanPickHotFixTable::BanPickModeOrderType' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, BanPickOneSideList) == 0x000060, "Member 'FMarvelBanPickHotFixTable::BanPickOneSideList' has a wrong offset!");
static_assert(offsetof(FMarvelBanPickHotFixTable, BanPickBothSideList) == 0x000070, "Member 'FMarvelBanPickHotFixTable::BanPickBothSideList' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelControlHotFixTable
// 0x0088 (0x00A8 - 0x0020)
struct FMarvelControlHotFixTable final : public FTableRowBase
{
public:
	class FName                                   InstanceName;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ModeIdList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OccupyProgressMax;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            OccupyProgressSpeed;                               // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         OccupyLosingSpeed;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLosingOccupy;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateInterval;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UNLOCK_TIME;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelControlHotFixTable) == 0x000008, "Wrong alignment on FMarvelControlHotFixTable");
static_assert(sizeof(FMarvelControlHotFixTable) == 0x0000A8, "Wrong size on FMarvelControlHotFixTable");
static_assert(offsetof(FMarvelControlHotFixTable, InstanceName) == 0x000020, "Member 'FMarvelControlHotFixTable::InstanceName' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, ModeIdList) == 0x000030, "Member 'FMarvelControlHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, OccupyProgressMax) == 0x000040, "Member 'FMarvelControlHotFixTable::OccupyProgressMax' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, OccupyProgressSpeed) == 0x000048, "Member 'FMarvelControlHotFixTable::OccupyProgressSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, OccupyLosingSpeed) == 0x000098, "Member 'FMarvelControlHotFixTable::OccupyLosingSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, TimeLosingOccupy) == 0x00009C, "Member 'FMarvelControlHotFixTable::TimeLosingOccupy' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, UpdateInterval) == 0x0000A0, "Member 'FMarvelControlHotFixTable::UpdateInterval' has a wrong offset!");
static_assert(offsetof(FMarvelControlHotFixTable, UNLOCK_TIME) == 0x0000A4, "Member 'FMarvelControlHotFixTable::UNLOCK_TIME' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelHeroSwitchHotFixTable
// 0x00B0 (0x00D0 - 0x0020)
struct FMarvelHeroSwitchHotFixTable final : public FTableRowBase
{
public:
	TArray<int32>                                 ModeIdList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanChangeHero;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepeatLimit;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TankHeroLimit;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageHeroLimit;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportHeroLimit;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowRechooseRole;                                 // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedTime;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HeroLimitList;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RandomHeroList;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FixedHeroList;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ScoreHeroMap;                                      // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelHeroSwitchHotFixTable) == 0x000008, "Wrong alignment on FMarvelHeroSwitchHotFixTable");
static_assert(sizeof(FMarvelHeroSwitchHotFixTable) == 0x0000D0, "Wrong size on FMarvelHeroSwitchHotFixTable");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, ModeIdList) == 0x000020, "Member 'FMarvelHeroSwitchHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, CanChangeHero) == 0x000030, "Member 'FMarvelHeroSwitchHotFixTable::CanChangeHero' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, RepeatLimit) == 0x000034, "Member 'FMarvelHeroSwitchHotFixTable::RepeatLimit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, TankHeroLimit) == 0x000038, "Member 'FMarvelHeroSwitchHotFixTable::TankHeroLimit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, DamageHeroLimit) == 0x00003C, "Member 'FMarvelHeroSwitchHotFixTable::DamageHeroLimit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, SupportHeroLimit) == 0x000040, "Member 'FMarvelHeroSwitchHotFixTable::SupportHeroLimit' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, AllowRechooseRole) == 0x000044, "Member 'FMarvelHeroSwitchHotFixTable::AllowRechooseRole' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, FixedTime) == 0x000048, "Member 'FMarvelHeroSwitchHotFixTable::FixedTime' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, HeroLimitList) == 0x000050, "Member 'FMarvelHeroSwitchHotFixTable::HeroLimitList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, RandomHeroList) == 0x000060, "Member 'FMarvelHeroSwitchHotFixTable::RandomHeroList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, FixedHeroList) == 0x000070, "Member 'FMarvelHeroSwitchHotFixTable::FixedHeroList' has a wrong offset!");
static_assert(offsetof(FMarvelHeroSwitchHotFixTable, ScoreHeroMap) == 0x000080, "Member 'FMarvelHeroSwitchHotFixTable::ScoreHeroMap' has a wrong offset!");

// ScriptStruct MarvelLevel.OneOffMontageSectionSimulateContext
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FOneOffMontageSectionSimulateContext final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOneOffMontageSectionSimulateContext) == 0x000008, "Wrong alignment on FOneOffMontageSectionSimulateContext");
static_assert(sizeof(FOneOffMontageSectionSimulateContext) == 0x000038, "Wrong size on FOneOffMontageSectionSimulateContext");

// ScriptStruct MarvelLevel.GroundedCondition
// 0x0014 (0x0014 - 0x0000)
struct FGroundedCondition final
{
public:
	float                                         GroundZ;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundZRange;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundedValidDelay;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckVelocity;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckVelocityInterval;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundedCondition) == 0x000004, "Wrong alignment on FGroundedCondition");
static_assert(sizeof(FGroundedCondition) == 0x000014, "Wrong size on FGroundedCondition");
static_assert(offsetof(FGroundedCondition, GroundZ) == 0x000000, "Member 'FGroundedCondition::GroundZ' has a wrong offset!");
static_assert(offsetof(FGroundedCondition, GroundZRange) == 0x000004, "Member 'FGroundedCondition::GroundZRange' has a wrong offset!");
static_assert(offsetof(FGroundedCondition, GroundedValidDelay) == 0x000008, "Member 'FGroundedCondition::GroundedValidDelay' has a wrong offset!");
static_assert(offsetof(FGroundedCondition, bCheckVelocity) == 0x00000C, "Member 'FGroundedCondition::bCheckVelocity' has a wrong offset!");
static_assert(offsetof(FGroundedCondition, CheckVelocityInterval) == 0x000010, "Member 'FGroundedCondition::CheckVelocityInterval' has a wrong offset!");

// ScriptStruct MarvelLevel.AnimActionEndCheck
// 0x0028 (0x0028 - 0x0000)
struct FAnimActionEndCheck final
{
public:
	uint8                                         ActionSwitchCondition;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroundedCondition                     GroundedCondition;                                 // 0x0004(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkGCActors;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimActionEndCheck) == 0x000008, "Wrong alignment on FAnimActionEndCheck");
static_assert(sizeof(FAnimActionEndCheck) == 0x000028, "Wrong size on FAnimActionEndCheck");
static_assert(offsetof(FAnimActionEndCheck, ActionSwitchCondition) == 0x000000, "Member 'FAnimActionEndCheck::ActionSwitchCondition' has a wrong offset!");
static_assert(offsetof(FAnimActionEndCheck, GroundedCondition) == 0x000004, "Member 'FAnimActionEndCheck::GroundedCondition' has a wrong offset!");
static_assert(offsetof(FAnimActionEndCheck, LinkGCActors) == 0x000018, "Member 'FAnimActionEndCheck::LinkGCActors' has a wrong offset!");

// ScriptStruct MarvelLevel.AnimActionStandUpCheck
// 0x000C (0x000C - 0x0000)
struct FAnimActionStandUpCheck final
{
public:
	uint8                                         bCheckCanStandUp : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandUpCheckSweepDistance;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreStandUpRoll;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimActionStandUpCheck) == 0x000004, "Wrong alignment on FAnimActionStandUpCheck");
static_assert(sizeof(FAnimActionStandUpCheck) == 0x00000C, "Wrong size on FAnimActionStandUpCheck");
static_assert(offsetof(FAnimActionStandUpCheck, StandUpCheckSweepDistance) == 0x000004, "Member 'FAnimActionStandUpCheck::StandUpCheckSweepDistance' has a wrong offset!");
static_assert(offsetof(FAnimActionStandUpCheck, PreStandUpRoll) == 0x000008, "Member 'FAnimActionStandUpCheck::PreStandUpRoll' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelAnimFadeOutEffectConfigParam
// 0x0038 (0x0038 - 0x0000)
struct FMarvelAnimFadeOutEffectConfigParam final
{
public:
	class UNiagaraSystem*                         FadeOutEffect;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePos;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AbsoluteRotate;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelAnimFadeOutEffectConfigParam) == 0x000008, "Wrong alignment on FMarvelAnimFadeOutEffectConfigParam");
static_assert(sizeof(FMarvelAnimFadeOutEffectConfigParam) == 0x000038, "Wrong size on FMarvelAnimFadeOutEffectConfigParam");
static_assert(offsetof(FMarvelAnimFadeOutEffectConfigParam, FadeOutEffect) == 0x000000, "Member 'FMarvelAnimFadeOutEffectConfigParam::FadeOutEffect' has a wrong offset!");
static_assert(offsetof(FMarvelAnimFadeOutEffectConfigParam, RelativePos) == 0x000008, "Member 'FMarvelAnimFadeOutEffectConfigParam::RelativePos' has a wrong offset!");
static_assert(offsetof(FMarvelAnimFadeOutEffectConfigParam, AbsoluteRotate) == 0x000020, "Member 'FMarvelAnimFadeOutEffectConfigParam::AbsoluteRotate' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelLevelAnimAction
// 0x0098 (0x0098 - 0x0000)
struct FMarvelLevelAnimAction final
{
public:
	EMarvelLevelAnimActionType                    ActionType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableHit : 1;                                    // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSimulateRootPhysics : 1;                          // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableKinematic : 1;                              // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SectionName;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableRootMotion : 1;                             // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimActionStandUpCheck                StandUpCheck;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimActionEndCheck                    AnimActionEndCheck;                                // 0x0020(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bShouldHideSelf : 1;                               // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PendinglInteractableActors;                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelAnimFadeOutEffectConfigParam    FadeOutEffectConfig;                               // 0x0060(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelLevelAnimAction) == 0x000008, "Wrong alignment on FMarvelLevelAnimAction");
static_assert(sizeof(FMarvelLevelAnimAction) == 0x000098, "Wrong size on FMarvelLevelAnimAction");
static_assert(offsetof(FMarvelLevelAnimAction, ActionType) == 0x000000, "Member 'FMarvelLevelAnimAction::ActionType' has a wrong offset!");
static_assert(offsetof(FMarvelLevelAnimAction, SectionName) == 0x000004, "Member 'FMarvelLevelAnimAction::SectionName' has a wrong offset!");
static_assert(offsetof(FMarvelLevelAnimAction, StandUpCheck) == 0x000014, "Member 'FMarvelLevelAnimAction::StandUpCheck' has a wrong offset!");
static_assert(offsetof(FMarvelLevelAnimAction, AnimActionEndCheck) == 0x000020, "Member 'FMarvelLevelAnimAction::AnimActionEndCheck' has a wrong offset!");
static_assert(offsetof(FMarvelLevelAnimAction, PendinglInteractableActors) == 0x000050, "Member 'FMarvelLevelAnimAction::PendinglInteractableActors' has a wrong offset!");
static_assert(offsetof(FMarvelLevelAnimAction, FadeOutEffectConfig) == 0x000060, "Member 'FMarvelLevelAnimAction::FadeOutEffectConfig' has a wrong offset!");

// ScriptStruct MarvelLevel.AConditionContent
// 0x0008 (0x0008 - 0x0000)
struct FAConditionContent final
{
public:
	class UMarvelAudioCondition*                  ConditionConfig;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAConditionContent) == 0x000008, "Wrong alignment on FAConditionContent");
static_assert(sizeof(FAConditionContent) == 0x000008, "Wrong size on FAConditionContent");
static_assert(offsetof(FAConditionContent, ConditionConfig) == 0x000000, "Member 'FAConditionContent::ConditionConfig' has a wrong offset!");

// ScriptStruct MarvelLevel.LevelAudioContent
// 0x0028 (0x0028 - 0x0000)
struct FLevelAudioContent final
{
public:
	bool                                          bEnableCondition;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAConditionContent>             ConditionList;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyData>           NotifyList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelAudioContent) == 0x000008, "Wrong alignment on FLevelAudioContent");
static_assert(sizeof(FLevelAudioContent) == 0x000028, "Wrong size on FLevelAudioContent");
static_assert(offsetof(FLevelAudioContent, bEnableCondition) == 0x000000, "Member 'FLevelAudioContent::bEnableCondition' has a wrong offset!");
static_assert(offsetof(FLevelAudioContent, ConditionList) == 0x000008, "Member 'FLevelAudioContent::ConditionList' has a wrong offset!");
static_assert(offsetof(FLevelAudioContent, NotifyList) == 0x000018, "Member 'FLevelAudioContent::NotifyList' has a wrong offset!");

// ScriptStruct MarvelLevel.LevelAudioList
// 0x0020 (0x0020 - 0x0000)
struct FLevelAudioList final
{
public:
	struct FGameplayTag                           TriggerTag;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelAudioContent>             ContentList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelAudioList) == 0x000008, "Wrong alignment on FLevelAudioList");
static_assert(sizeof(FLevelAudioList) == 0x000020, "Wrong size on FLevelAudioList");
static_assert(offsetof(FLevelAudioList, TriggerTag) == 0x000000, "Member 'FLevelAudioList::TriggerTag' has a wrong offset!");
static_assert(offsetof(FLevelAudioList, ContentList) == 0x000010, "Member 'FLevelAudioList::ContentList' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainLimit
// 0x01D0 (0x01D0 - 0x0000)
struct FTrainLimit final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLimit;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitScore;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondScore;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Traces;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 HeroIDList;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           Teleport;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EShootingDis, class APlayerStart*>       ShootingTeleports;                                 // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EShootingDis, class AActor*>             FloorTargets;                                      // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EShootingDis, class AActor*>             AirTargets;                                        // 0x00E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         PosTargets;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETrainShotingTargetType, int32>          TargetHeroMap;                                     // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETrainAIModeType                              MoveType;                                          // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AICreateDelay;                                     // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIEnemyNum;                                        // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundNum;                                          // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AISpeed;                                           // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIHealth;                                          // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AISpeedMin;                                        // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AISpeedMax;                                        // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShootingDis                                  SelectDis;                                         // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectHeroID;                                      // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseXZ;                                             // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrainLimit) == 0x000008, "Wrong alignment on FTrainLimit");
static_assert(sizeof(FTrainLimit) == 0x0001D0, "Wrong size on FTrainLimit");
static_assert(offsetof(FTrainLimit, Action) == 0x000000, "Member 'FTrainLimit::Action' has a wrong offset!");
static_assert(offsetof(FTrainLimit, NumLimit) == 0x000004, "Member 'FTrainLimit::NumLimit' has a wrong offset!");
static_assert(offsetof(FTrainLimit, TimeLimit) == 0x000008, "Member 'FTrainLimit::TimeLimit' has a wrong offset!");
static_assert(offsetof(FTrainLimit, InitScore) == 0x00000C, "Member 'FTrainLimit::InitScore' has a wrong offset!");
static_assert(offsetof(FTrainLimit, SecondScore) == 0x000010, "Member 'FTrainLimit::SecondScore' has a wrong offset!");
static_assert(offsetof(FTrainLimit, Traces) == 0x000018, "Member 'FTrainLimit::Traces' has a wrong offset!");
static_assert(offsetof(FTrainLimit, HeroIDList) == 0x000028, "Member 'FTrainLimit::HeroIDList' has a wrong offset!");
static_assert(offsetof(FTrainLimit, DelayTime) == 0x000038, "Member 'FTrainLimit::DelayTime' has a wrong offset!");
static_assert(offsetof(FTrainLimit, Teleport) == 0x000040, "Member 'FTrainLimit::Teleport' has a wrong offset!");
static_assert(offsetof(FTrainLimit, ShootingTeleports) == 0x000048, "Member 'FTrainLimit::ShootingTeleports' has a wrong offset!");
static_assert(offsetof(FTrainLimit, FloorTargets) == 0x000098, "Member 'FTrainLimit::FloorTargets' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AirTargets) == 0x0000E8, "Member 'FTrainLimit::AirTargets' has a wrong offset!");
static_assert(offsetof(FTrainLimit, PosTargets) == 0x000138, "Member 'FTrainLimit::PosTargets' has a wrong offset!");
static_assert(offsetof(FTrainLimit, TargetHeroID) == 0x000148, "Member 'FTrainLimit::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FTrainLimit, TargetHeroMap) == 0x000150, "Member 'FTrainLimit::TargetHeroMap' has a wrong offset!");
static_assert(offsetof(FTrainLimit, MoveType) == 0x0001A0, "Member 'FTrainLimit::MoveType' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AICreateDelay) == 0x0001A4, "Member 'FTrainLimit::AICreateDelay' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AIEnemyNum) == 0x0001A8, "Member 'FTrainLimit::AIEnemyNum' has a wrong offset!");
static_assert(offsetof(FTrainLimit, RoundNum) == 0x0001AC, "Member 'FTrainLimit::RoundNum' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AISpeed) == 0x0001B0, "Member 'FTrainLimit::AISpeed' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AIHealth) == 0x0001B4, "Member 'FTrainLimit::AIHealth' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AISpeedMin) == 0x0001B8, "Member 'FTrainLimit::AISpeedMin' has a wrong offset!");
static_assert(offsetof(FTrainLimit, AISpeedMax) == 0x0001BC, "Member 'FTrainLimit::AISpeedMax' has a wrong offset!");
static_assert(offsetof(FTrainLimit, SelectDis) == 0x0001C0, "Member 'FTrainLimit::SelectDis' has a wrong offset!");
static_assert(offsetof(FTrainLimit, SelectHeroID) == 0x0001C4, "Member 'FTrainLimit::SelectHeroID' has a wrong offset!");
static_assert(offsetof(FTrainLimit, UseXZ) == 0x0001C8, "Member 'FTrainLimit::UseXZ' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainLogContent
// 0x0018 (0x0018 - 0x0000)
struct FTrainLogContent final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectHeroID;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShootingDis                                  SelectDis;                                         // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrainShotingTargetType                       TargetType;                                        // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrainAIModeType                              MoveType;                                          // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AINum;                                             // 0x000F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Difficulty;                                        // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetHeroID;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainLogContent) == 0x000004, "Wrong alignment on FTrainLogContent");
static_assert(sizeof(FTrainLogContent) == 0x000018, "Wrong size on FTrainLogContent");
static_assert(offsetof(FTrainLogContent, Action) == 0x000000, "Member 'FTrainLogContent::Action' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, UID) == 0x000004, "Member 'FTrainLogContent::UID' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, SelectHeroID) == 0x000008, "Member 'FTrainLogContent::SelectHeroID' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, SelectDis) == 0x00000C, "Member 'FTrainLogContent::SelectDis' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, TargetType) == 0x00000D, "Member 'FTrainLogContent::TargetType' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, MoveType) == 0x00000E, "Member 'FTrainLogContent::MoveType' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, AINum) == 0x00000F, "Member 'FTrainLogContent::AINum' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, Difficulty) == 0x000010, "Member 'FTrainLogContent::Difficulty' has a wrong offset!");
static_assert(offsetof(FTrainLogContent, TargetHeroID) == 0x000014, "Member 'FTrainLogContent::TargetHeroID' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainContent
// 0x0008 (0x0008 - 0x0000)
struct FTrainContent final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainContent) == 0x000004, "Wrong alignment on FTrainContent");
static_assert(sizeof(FTrainContent) == 0x000008, "Wrong size on FTrainContent");
static_assert(offsetof(FTrainContent, Action) == 0x000000, "Member 'FTrainContent::Action' has a wrong offset!");
static_assert(offsetof(FTrainContent, UID) == 0x000004, "Member 'FTrainContent::UID' has a wrong offset!");

// ScriptStruct MarvelLevel.CooperateHero
// 0x0050 (0x0050 - 0x0000)
struct FCooperateHero final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           PlayerStart;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CloseCDAbilitys;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReliveTime;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        TreeInfo;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperateHero) == 0x000008, "Wrong alignment on FCooperateHero");
static_assert(sizeof(FCooperateHero) == 0x000050, "Wrong size on FCooperateHero");
static_assert(offsetof(FCooperateHero, HeroID) == 0x000000, "Member 'FCooperateHero::HeroID' has a wrong offset!");
static_assert(offsetof(FCooperateHero, PlayerStart) == 0x000008, "Member 'FCooperateHero::PlayerStart' has a wrong offset!");
static_assert(offsetof(FCooperateHero, CloseCDAbilitys) == 0x000010, "Member 'FCooperateHero::CloseCDAbilitys' has a wrong offset!");
static_assert(offsetof(FCooperateHero, ReliveTime) == 0x000020, "Member 'FCooperateHero::ReliveTime' has a wrong offset!");
static_assert(offsetof(FCooperateHero, TreeInfo) == 0x000028, "Member 'FCooperateHero::TreeInfo' has a wrong offset!");

// ScriptStruct MarvelLevel.CooperateContent
// 0x0028 (0x0028 - 0x0000)
struct FCooperateContent final
{
public:
	int32                                         BondID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCooperateHero>                 Friends;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCooperateHero>                 Enemys;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperateContent) == 0x000008, "Wrong alignment on FCooperateContent");
static_assert(sizeof(FCooperateContent) == 0x000028, "Wrong size on FCooperateContent");
static_assert(offsetof(FCooperateContent, BondID) == 0x000000, "Member 'FCooperateContent::BondID' has a wrong offset!");
static_assert(offsetof(FCooperateContent, HeroID) == 0x000004, "Member 'FCooperateContent::HeroID' has a wrong offset!");
static_assert(offsetof(FCooperateContent, Friends) == 0x000008, "Member 'FCooperateContent::Friends' has a wrong offset!");
static_assert(offsetof(FCooperateContent, Enemys) == 0x000018, "Member 'FCooperateContent::Enemys' has a wrong offset!");

// ScriptStruct MarvelLevel.CooperateHeroBanContent
// 0x0018 (0x0018 - 0x0000)
struct FCooperateHeroBanContent final
{
public:
	int32                                         BondGroupID;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BanedHeroIDs;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooperateHeroBanContent) == 0x000008, "Wrong alignment on FCooperateHeroBanContent");
static_assert(sizeof(FCooperateHeroBanContent) == 0x000018, "Wrong size on FCooperateHeroBanContent");
static_assert(offsetof(FCooperateHeroBanContent, BondGroupID) == 0x000000, "Member 'FCooperateHeroBanContent::BondGroupID' has a wrong offset!");
static_assert(offsetof(FCooperateHeroBanContent, BanedHeroIDs) == 0x000008, "Member 'FCooperateHeroBanContent::BanedHeroIDs' has a wrong offset!");

// ScriptStruct MarvelLevel.AssistContent
// 0x00B8 (0x00B8 - 0x0000)
struct FAssistContent final
{
public:
	ETrainAssist                                  AssistType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           Teleport;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrainAreaType                                TargetArea;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerStart*>                   BirthPos;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AIMaxNum;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AINum;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetHeroID;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStart*                           TrainHeroPlayerStart;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainHeroID;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReliveTime;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CDTime;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          BornAudio;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCooperateContent>              CooperateInfo;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CooperateCover;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCooperateHeroBanContent>       CooperateHeroBanConfig;                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CooperateCreateAudio;                              // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CooperateResetAudio;                               // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CooperateClearAudio;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearInterval;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AChaosDestructionActor*>         RecoveryDestructionActors;                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssistContent) == 0x000008, "Wrong alignment on FAssistContent");
static_assert(sizeof(FAssistContent) == 0x0000B8, "Wrong size on FAssistContent");
static_assert(offsetof(FAssistContent, AssistType) == 0x000000, "Member 'FAssistContent::AssistType' has a wrong offset!");
static_assert(offsetof(FAssistContent, Teleport) == 0x000008, "Member 'FAssistContent::Teleport' has a wrong offset!");
static_assert(offsetof(FAssistContent, TargetArea) == 0x000010, "Member 'FAssistContent::TargetArea' has a wrong offset!");
static_assert(offsetof(FAssistContent, DelayTime) == 0x000014, "Member 'FAssistContent::DelayTime' has a wrong offset!");
static_assert(offsetof(FAssistContent, BirthPos) == 0x000018, "Member 'FAssistContent::BirthPos' has a wrong offset!");
static_assert(offsetof(FAssistContent, AIMaxNum) == 0x000028, "Member 'FAssistContent::AIMaxNum' has a wrong offset!");
static_assert(offsetof(FAssistContent, AINum) == 0x00002C, "Member 'FAssistContent::AINum' has a wrong offset!");
static_assert(offsetof(FAssistContent, Difficulty) == 0x000030, "Member 'FAssistContent::Difficulty' has a wrong offset!");
static_assert(offsetof(FAssistContent, TargetHeroID) == 0x000034, "Member 'FAssistContent::TargetHeroID' has a wrong offset!");
static_assert(offsetof(FAssistContent, TrainHeroPlayerStart) == 0x000038, "Member 'FAssistContent::TrainHeroPlayerStart' has a wrong offset!");
static_assert(offsetof(FAssistContent, TrainHeroID) == 0x000040, "Member 'FAssistContent::TrainHeroID' has a wrong offset!");
static_assert(offsetof(FAssistContent, ReliveTime) == 0x000044, "Member 'FAssistContent::ReliveTime' has a wrong offset!");
static_assert(offsetof(FAssistContent, CDTime) == 0x000048, "Member 'FAssistContent::CDTime' has a wrong offset!");
static_assert(offsetof(FAssistContent, BornAudio) == 0x000050, "Member 'FAssistContent::BornAudio' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateInfo) == 0x000058, "Member 'FAssistContent::CooperateInfo' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateCover) == 0x000068, "Member 'FAssistContent::CooperateCover' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateHeroBanConfig) == 0x000078, "Member 'FAssistContent::CooperateHeroBanConfig' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateCreateAudio) == 0x000088, "Member 'FAssistContent::CooperateCreateAudio' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateResetAudio) == 0x000090, "Member 'FAssistContent::CooperateResetAudio' has a wrong offset!");
static_assert(offsetof(FAssistContent, CooperateClearAudio) == 0x000098, "Member 'FAssistContent::CooperateClearAudio' has a wrong offset!");
static_assert(offsetof(FAssistContent, ClearInterval) == 0x0000A0, "Member 'FAssistContent::ClearInterval' has a wrong offset!");
static_assert(offsetof(FAssistContent, RecoveryDestructionActors) == 0x0000A8, "Member 'FAssistContent::RecoveryDestructionActors' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainPointConfig
// 0x0008 (0x0008 - 0x0000)
struct FTrainPointConfig final
{
public:
	float                                         Degree;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainPointConfig) == 0x000004, "Wrong alignment on FTrainPointConfig");
static_assert(sizeof(FTrainPointConfig) == 0x000008, "Wrong size on FTrainPointConfig");
static_assert(offsetof(FTrainPointConfig, Degree) == 0x000000, "Member 'FTrainPointConfig::Degree' has a wrong offset!");
static_assert(offsetof(FTrainPointConfig, Scale) == 0x000004, "Member 'FTrainPointConfig::Scale' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainResult
// 0x0028 (0x0028 - 0x0000)
struct FTrainResult final
{
public:
	float                                         Hurt;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgHurt;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRate;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadshotRate;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Kill;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillRate;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrainScore;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timestamp;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainResult) == 0x000008, "Wrong alignment on FTrainResult");
static_assert(sizeof(FTrainResult) == 0x000028, "Wrong size on FTrainResult");
static_assert(offsetof(FTrainResult, Hurt) == 0x000000, "Member 'FTrainResult::Hurt' has a wrong offset!");
static_assert(offsetof(FTrainResult, AvgHurt) == 0x000004, "Member 'FTrainResult::AvgHurt' has a wrong offset!");
static_assert(offsetof(FTrainResult, HitRate) == 0x000008, "Member 'FTrainResult::HitRate' has a wrong offset!");
static_assert(offsetof(FTrainResult, HeadshotRate) == 0x00000C, "Member 'FTrainResult::HeadshotRate' has a wrong offset!");
static_assert(offsetof(FTrainResult, Kill) == 0x000010, "Member 'FTrainResult::Kill' has a wrong offset!");
static_assert(offsetof(FTrainResult, KillRate) == 0x000014, "Member 'FTrainResult::KillRate' has a wrong offset!");
static_assert(offsetof(FTrainResult, TrainScore) == 0x000018, "Member 'FTrainResult::TrainScore' has a wrong offset!");
static_assert(offsetof(FTrainResult, Timestamp) == 0x000020, "Member 'FTrainResult::Timestamp' has a wrong offset!");

// ScriptStruct MarvelLevel.GroupMoveActorInfo
// 0x0028 (0x0028 - 0x0000)
struct FGroupMoveActorInfo final
{
public:
	class FString                                 InstanceName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaDegree;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInitRotation;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupMoveActorInfo) == 0x000008, "Wrong alignment on FGroupMoveActorInfo");
static_assert(sizeof(FGroupMoveActorInfo) == 0x000028, "Wrong size on FGroupMoveActorInfo");
static_assert(offsetof(FGroupMoveActorInfo, InstanceName) == 0x000000, "Member 'FGroupMoveActorInfo::InstanceName' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorInfo, MoveSpeed) == 0x000010, "Member 'FGroupMoveActorInfo::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorInfo, BackSpeed) == 0x000014, "Member 'FGroupMoveActorInfo::BackSpeed' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorInfo, DelayTime) == 0x000018, "Member 'FGroupMoveActorInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorInfo, DeltaDegree) == 0x00001C, "Member 'FGroupMoveActorInfo::DeltaDegree' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorInfo, IsInitRotation) == 0x000020, "Member 'FGroupMoveActorInfo::IsInitRotation' has a wrong offset!");

// ScriptStruct MarvelLevel.GroupMoveActorTimeInfo
// 0x0028 (0x0028 - 0x0000)
struct FGroupMoveActorTimeInfo final
{
public:
	class FString                                 InstanceName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaDegree;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInitRotation;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupMoveActorTimeInfo) == 0x000008, "Wrong alignment on FGroupMoveActorTimeInfo");
static_assert(sizeof(FGroupMoveActorTimeInfo) == 0x000028, "Wrong size on FGroupMoveActorTimeInfo");
static_assert(offsetof(FGroupMoveActorTimeInfo, InstanceName) == 0x000000, "Member 'FGroupMoveActorTimeInfo::InstanceName' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorTimeInfo, MoveTime) == 0x000010, "Member 'FGroupMoveActorTimeInfo::MoveTime' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorTimeInfo, BackTime) == 0x000014, "Member 'FGroupMoveActorTimeInfo::BackTime' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorTimeInfo, DelayTime) == 0x000018, "Member 'FGroupMoveActorTimeInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorTimeInfo, DeltaDegree) == 0x00001C, "Member 'FGroupMoveActorTimeInfo::DeltaDegree' has a wrong offset!");
static_assert(offsetof(FGroupMoveActorTimeInfo, IsInitRotation) == 0x000020, "Member 'FGroupMoveActorTimeInfo::IsInitRotation' has a wrong offset!");

// ScriptStruct MarvelLevel.GroupMoveActorsContainner
// 0x0010 (0x0010 - 0x0000)
struct FGroupMoveActorsContainner final
{
public:
	TArray<struct FGroupMoveActorTimeInfo>        GroupActors;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupMoveActorsContainner) == 0x000008, "Wrong alignment on FGroupMoveActorsContainner");
static_assert(sizeof(FGroupMoveActorsContainner) == 0x000010, "Wrong size on FGroupMoveActorsContainner");
static_assert(offsetof(FGroupMoveActorsContainner, GroupActors) == 0x000000, "Member 'FGroupMoveActorsContainner::GroupActors' has a wrong offset!");

// ScriptStruct MarvelLevel.RandomLocationItem
// 0x0018 (0x0018 - 0x0000)
struct FRandomLocationItem final
{
public:
	int32                                         LevelId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Locations;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomLocationItem) == 0x000008, "Wrong alignment on FRandomLocationItem");
static_assert(sizeof(FRandomLocationItem) == 0x000018, "Wrong size on FRandomLocationItem");
static_assert(offsetof(FRandomLocationItem, LevelId) == 0x000000, "Member 'FRandomLocationItem::LevelId' has a wrong offset!");
static_assert(offsetof(FRandomLocationItem, Locations) == 0x000008, "Member 'FRandomLocationItem::Locations' has a wrong offset!");

// ScriptStruct MarvelLevel.HeroSkinVoice
// 0x0018 (0x0018 - 0x0000)
struct FHeroSkinVoice final
{
public:
	int32                                         HeroSkinID;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HeroVoice;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroSkinVoice) == 0x000008, "Wrong alignment on FHeroSkinVoice");
static_assert(sizeof(FHeroSkinVoice) == 0x000018, "Wrong size on FHeroSkinVoice");
static_assert(offsetof(FHeroSkinVoice, HeroSkinID) == 0x000000, "Member 'FHeroSkinVoice::HeroSkinID' has a wrong offset!");
static_assert(offsetof(FHeroSkinVoice, HeroVoice) == 0x000008, "Member 'FHeroSkinVoice::HeroVoice' has a wrong offset!");

// ScriptStruct MarvelLevel.HeroSkinVoiceList
// 0x0010 (0x0010 - 0x0000)
struct FHeroSkinVoiceList final
{
public:
	TArray<struct FHeroSkinVoice>                 HeroSkinVoiceList;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroSkinVoiceList) == 0x000008, "Wrong alignment on FHeroSkinVoiceList");
static_assert(sizeof(FHeroSkinVoiceList) == 0x000010, "Wrong size on FHeroSkinVoiceList");
static_assert(offsetof(FHeroSkinVoiceList, HeroSkinVoiceList) == 0x000000, "Member 'FHeroSkinVoiceList::HeroSkinVoiceList' has a wrong offset!");

// ScriptStruct MarvelLevel.MovingFloorConfig
// 0x0020 (0x0020 - 0x0000)
struct FMovingFloorConfig final
{
public:
	struct FVector                                EndPosition;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateChangeTime;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovingFloorConfig) == 0x000008, "Wrong alignment on FMovingFloorConfig");
static_assert(sizeof(FMovingFloorConfig) == 0x000020, "Wrong size on FMovingFloorConfig");
static_assert(offsetof(FMovingFloorConfig, EndPosition) == 0x000000, "Member 'FMovingFloorConfig::EndPosition' has a wrong offset!");
static_assert(offsetof(FMovingFloorConfig, MoveTime) == 0x000018, "Member 'FMovingFloorConfig::MoveTime' has a wrong offset!");
static_assert(offsetof(FMovingFloorConfig, StateChangeTime) == 0x00001C, "Member 'FMovingFloorConfig::StateChangeTime' has a wrong offset!");

// ScriptStruct MarvelLevel.MovingFloor
// 0x0020 (0x0020 - 0x0000)
struct FMovingFloor final
{
public:
	TArray<struct FMovingFloorConfig>             MovingFloorConfigs;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         MoveActors;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovingFloor) == 0x000008, "Wrong alignment on FMovingFloor");
static_assert(sizeof(FMovingFloor) == 0x000020, "Wrong size on FMovingFloor");
static_assert(offsetof(FMovingFloor, MovingFloorConfigs) == 0x000000, "Member 'FMovingFloor::MovingFloorConfigs' has a wrong offset!");
static_assert(offsetof(FMovingFloor, MoveActors) == 0x000010, "Member 'FMovingFloor::MoveActors' has a wrong offset!");

// ScriptStruct MarvelLevel.AreaRelevanceBroken
// 0x0010 (0x0010 - 0x0000)
struct FAreaRelevanceBroken final
{
public:
	class AChaosDestructionActor*                 Destructor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractureThreshold;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaRelevanceBroken) == 0x000008, "Wrong alignment on FAreaRelevanceBroken");
static_assert(sizeof(FAreaRelevanceBroken) == 0x000010, "Wrong size on FAreaRelevanceBroken");
static_assert(offsetof(FAreaRelevanceBroken, Destructor) == 0x000000, "Member 'FAreaRelevanceBroken::Destructor' has a wrong offset!");
static_assert(offsetof(FAreaRelevanceBroken, FractureThreshold) == 0x000008, "Member 'FAreaRelevanceBroken::FractureThreshold' has a wrong offset!");

// ScriptStruct MarvelLevel.AreaEffects
// 0x00D0 (0x00D0 - 0x0000)
struct FAreaEffects final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          FXSystem;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurvivalTime;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    Parameters;                                        // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaEffects) == 0x000008, "Wrong alignment on FAreaEffects");
static_assert(sizeof(FAreaEffects) == 0x0000D0, "Wrong size on FAreaEffects");
static_assert(offsetof(FAreaEffects, FXSystem) == 0x000000, "Member 'FAreaEffects::FXSystem' has a wrong offset!");
static_assert(offsetof(FAreaEffects, Location) == 0x000030, "Member 'FAreaEffects::Location' has a wrong offset!");
static_assert(offsetof(FAreaEffects, Rotator) == 0x000048, "Member 'FAreaEffects::Rotator' has a wrong offset!");
static_assert(offsetof(FAreaEffects, Scale) == 0x000060, "Member 'FAreaEffects::Scale' has a wrong offset!");
static_assert(offsetof(FAreaEffects, Delay) == 0x000078, "Member 'FAreaEffects::Delay' has a wrong offset!");
static_assert(offsetof(FAreaEffects, SurvivalTime) == 0x00007C, "Member 'FAreaEffects::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FAreaEffects, Parameters) == 0x000080, "Member 'FAreaEffects::Parameters' has a wrong offset!");

// ScriptStruct MarvelLevel.AreaAudios
// 0x0028 (0x0028 - 0x0000)
struct FAreaAudios final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AudioLocation;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioDelay;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaAudios) == 0x000008, "Wrong alignment on FAreaAudios");
static_assert(sizeof(FAreaAudios) == 0x000028, "Wrong size on FAreaAudios");
static_assert(offsetof(FAreaAudios, AudioEvent) == 0x000000, "Member 'FAreaAudios::AudioEvent' has a wrong offset!");
static_assert(offsetof(FAreaAudios, AudioLocation) == 0x000008, "Member 'FAreaAudios::AudioLocation' has a wrong offset!");
static_assert(offsetof(FAreaAudios, AudioDelay) == 0x000020, "Member 'FAreaAudios::AudioDelay' has a wrong offset!");

// ScriptStruct MarvelLevel.BanPickResultInfo
// 0x0010 (0x0010 - 0x0000)
struct FBanPickResultInfo final
{
public:
	EBanPickOperateType                           OperateType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanPickNum;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanPickResultInfo) == 0x000004, "Wrong alignment on FBanPickResultInfo");
static_assert(sizeof(FBanPickResultInfo) == 0x000010, "Wrong size on FBanPickResultInfo");
static_assert(offsetof(FBanPickResultInfo, OperateType) == 0x000000, "Member 'FBanPickResultInfo::OperateType' has a wrong offset!");
static_assert(offsetof(FBanPickResultInfo, BattleSide) == 0x000001, "Member 'FBanPickResultInfo::BattleSide' has a wrong offset!");
static_assert(offsetof(FBanPickResultInfo, HeroID) == 0x000004, "Member 'FBanPickResultInfo::HeroID' has a wrong offset!");
static_assert(offsetof(FBanPickResultInfo, RoundIndex) == 0x000008, "Member 'FBanPickResultInfo::RoundIndex' has a wrong offset!");
static_assert(offsetof(FBanPickResultInfo, BanPickNum) == 0x00000C, "Member 'FBanPickResultInfo::BanPickNum' has a wrong offset!");

// ScriptStruct MarvelLevel.SurrenderResultInfo
// 0x0008 (0x0008 - 0x0000)
struct FSurrenderResultInfo final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAgreeSurrender;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurrenderResultInfo) == 0x000004, "Wrong alignment on FSurrenderResultInfo");
static_assert(sizeof(FSurrenderResultInfo) == 0x000008, "Wrong size on FSurrenderResultInfo");
static_assert(offsetof(FSurrenderResultInfo, UID) == 0x000000, "Member 'FSurrenderResultInfo::UID' has a wrong offset!");
static_assert(offsetof(FSurrenderResultInfo, bAgreeSurrender) == 0x000004, "Member 'FSurrenderResultInfo::bAgreeSurrender' has a wrong offset!");

// ScriptStruct MarvelLevel.TrainCooperateRespawn
// 0x000C (0x000C - 0x0000)
struct FTrainCooperateRespawn final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BondID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainCooperateRespawn) == 0x000004, "Wrong alignment on FTrainCooperateRespawn");
static_assert(sizeof(FTrainCooperateRespawn) == 0x00000C, "Wrong size on FTrainCooperateRespawn");
static_assert(offsetof(FTrainCooperateRespawn, HeroID) == 0x000000, "Member 'FTrainCooperateRespawn::HeroID' has a wrong offset!");
static_assert(offsetof(FTrainCooperateRespawn, BondID) == 0x000004, "Member 'FTrainCooperateRespawn::BondID' has a wrong offset!");
static_assert(offsetof(FTrainCooperateRespawn, RespawnTime) == 0x000008, "Member 'FTrainCooperateRespawn::RespawnTime' has a wrong offset!");

// ScriptStruct MarvelLevel.AbilityIDSet
// 0x0050 (0x0050 - 0x0000)
struct FAbilityIDSet final
{
public:
	TSet<int32>                                   AbilityIDSet;                                      // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityIDSet) == 0x000008, "Wrong alignment on FAbilityIDSet");
static_assert(sizeof(FAbilityIDSet) == 0x000050, "Wrong size on FAbilityIDSet");
static_assert(offsetof(FAbilityIDSet, AbilityIDSet) == 0x000000, "Member 'FAbilityIDSet::AbilityIDSet' has a wrong offset!");

// ScriptStruct MarvelLevel.Areas
// 0x0010 (0x0010 - 0x0000)
struct FAreas final
{
public:
	TArray<class AActor*>                         Areas;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreas) == 0x000008, "Wrong alignment on FAreas");
static_assert(sizeof(FAreas) == 0x000010, "Wrong size on FAreas");
static_assert(offsetof(FAreas, Areas) == 0x000000, "Member 'FAreas::Areas' has a wrong offset!");

// ScriptStruct MarvelLevel.ActorsWithSameOneTag
// 0x0010 (0x0010 - 0x0000)
struct FActorsWithSameOneTag final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorsWithSameOneTag) == 0x000008, "Wrong alignment on FActorsWithSameOneTag");
static_assert(sizeof(FActorsWithSameOneTag) == 0x000010, "Wrong size on FActorsWithSameOneTag");
static_assert(offsetof(FActorsWithSameOneTag, Actors) == 0x000000, "Member 'FActorsWithSameOneTag::Actors' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelModeRuleTable
// 0x0110 (0x0130 - 0x0020)
struct FMarvelModeRuleTable final : public FTableRowBase
{
public:
	struct FGameplayTag                           ModeTypeV2;                                        // 0x0020(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PrefixName;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsMultiRound;                                      // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ModeControl;                                       // 0x0050(0x0028)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GlobalRule;                                        // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                RoundRule;                                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CommonAudio;                                       // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ModeAudio;                                         // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        HeroAssets;                                        // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModeRoomCampType                             RoomCampType;                                      // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelModeRuleTable) == 0x000008, "Wrong alignment on FMarvelModeRuleTable");
static_assert(sizeof(FMarvelModeRuleTable) == 0x000130, "Wrong size on FMarvelModeRuleTable");
static_assert(offsetof(FMarvelModeRuleTable, ModeTypeV2) == 0x000020, "Member 'FMarvelModeRuleTable::ModeTypeV2' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, PrefixName) == 0x000030, "Member 'FMarvelModeRuleTable::PrefixName' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, IsMultiRound) == 0x000048, "Member 'FMarvelModeRuleTable::IsMultiRound' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, ModeControl) == 0x000050, "Member 'FMarvelModeRuleTable::ModeControl' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, GlobalRule) == 0x000078, "Member 'FMarvelModeRuleTable::GlobalRule' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, RoundRule) == 0x0000A0, "Member 'FMarvelModeRuleTable::RoundRule' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, CommonAudio) == 0x0000B0, "Member 'FMarvelModeRuleTable::CommonAudio' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, ModeAudio) == 0x0000D8, "Member 'FMarvelModeRuleTable::ModeAudio' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, HeroAssets) == 0x000100, "Member 'FMarvelModeRuleTable::HeroAssets' has a wrong offset!");
static_assert(offsetof(FMarvelModeRuleTable, RoomCampType) == 0x000128, "Member 'FMarvelModeRuleTable::RoomCampType' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelObjectiveHotFixTable
// 0x0118 (0x0138 - 0x0020)
struct FMarvelObjectiveHotFixTable final : public FTableRowBase
{
public:
	class FName                                   InstanceName;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ModeIdList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, float>                            OccupyProgressStage;                               // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, float>                            OccupyRaisingSpeed;                                // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         OccupyLosingSpeed;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToLoseOccupy;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FObjectiveLevelEventConfig> RoundLevelEvents;                                  // 0x00E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelObjectiveHotFixTable) == 0x000008, "Wrong alignment on FMarvelObjectiveHotFixTable");
static_assert(sizeof(FMarvelObjectiveHotFixTable) == 0x000138, "Wrong size on FMarvelObjectiveHotFixTable");
static_assert(offsetof(FMarvelObjectiveHotFixTable, InstanceName) == 0x000020, "Member 'FMarvelObjectiveHotFixTable::InstanceName' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, ModeIdList) == 0x000030, "Member 'FMarvelObjectiveHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, OccupyProgressStage) == 0x000040, "Member 'FMarvelObjectiveHotFixTable::OccupyProgressStage' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, OccupyRaisingSpeed) == 0x000090, "Member 'FMarvelObjectiveHotFixTable::OccupyRaisingSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, OccupyLosingSpeed) == 0x0000E0, "Member 'FMarvelObjectiveHotFixTable::OccupyLosingSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, TimeToLoseOccupy) == 0x0000E4, "Member 'FMarvelObjectiveHotFixTable::TimeToLoseOccupy' has a wrong offset!");
static_assert(offsetof(FMarvelObjectiveHotFixTable, RoundLevelEvents) == 0x0000E8, "Member 'FMarvelObjectiveHotFixTable::RoundLevelEvents' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelOverTimeHotFixTable
// 0x0028 (0x0048 - 0x0020)
struct FMarvelOverTimeHotFixTable final : public FTableRowBase
{
public:
	TArray<int32>                                 ModeIdList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OvertimeLength;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertimeSpeedNoAttack;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertimeSpeedWithAttack;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverTimeCheck;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertimeProgressBegin;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelOverTimeHotFixTable) == 0x000008, "Wrong alignment on FMarvelOverTimeHotFixTable");
static_assert(sizeof(FMarvelOverTimeHotFixTable) == 0x000048, "Wrong size on FMarvelOverTimeHotFixTable");
static_assert(offsetof(FMarvelOverTimeHotFixTable, ModeIdList) == 0x000020, "Member 'FMarvelOverTimeHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelOverTimeHotFixTable, OvertimeLength) == 0x000030, "Member 'FMarvelOverTimeHotFixTable::OvertimeLength' has a wrong offset!");
static_assert(offsetof(FMarvelOverTimeHotFixTable, OvertimeSpeedNoAttack) == 0x000034, "Member 'FMarvelOverTimeHotFixTable::OvertimeSpeedNoAttack' has a wrong offset!");
static_assert(offsetof(FMarvelOverTimeHotFixTable, OvertimeSpeedWithAttack) == 0x000038, "Member 'FMarvelOverTimeHotFixTable::OvertimeSpeedWithAttack' has a wrong offset!");
static_assert(offsetof(FMarvelOverTimeHotFixTable, OverTimeCheck) == 0x00003C, "Member 'FMarvelOverTimeHotFixTable::OverTimeCheck' has a wrong offset!");
static_assert(offsetof(FMarvelOverTimeHotFixTable, OvertimeProgressBegin) == 0x000040, "Member 'FMarvelOverTimeHotFixTable::OvertimeProgressBegin' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelPayloadHotFixTable
// 0x00E0 (0x0100 - 0x0020)
struct FMarvelPayloadHotFixTable final : public FTableRowBase
{
public:
	class FName                                   InstanceName;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ModeIdList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OccupyProgressMax;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            OccupyProgressSpeed;                               // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         OccupyLosingSpeed;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLosingOccupy;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, float>                            PayloadMoveSpeed;                                  // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         PayloadBackwordSpeed;                              // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayForwardTime;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBackTime;                                     // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarvelPayloadHotFixTable) == 0x000008, "Wrong alignment on FMarvelPayloadHotFixTable");
static_assert(sizeof(FMarvelPayloadHotFixTable) == 0x000100, "Wrong size on FMarvelPayloadHotFixTable");
static_assert(offsetof(FMarvelPayloadHotFixTable, InstanceName) == 0x000020, "Member 'FMarvelPayloadHotFixTable::InstanceName' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, ModeIdList) == 0x000030, "Member 'FMarvelPayloadHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, OccupyProgressMax) == 0x000040, "Member 'FMarvelPayloadHotFixTable::OccupyProgressMax' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, OccupyProgressSpeed) == 0x000048, "Member 'FMarvelPayloadHotFixTable::OccupyProgressSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, OccupyLosingSpeed) == 0x000098, "Member 'FMarvelPayloadHotFixTable::OccupyLosingSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, TimeLosingOccupy) == 0x00009C, "Member 'FMarvelPayloadHotFixTable::TimeLosingOccupy' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, PayloadMoveSpeed) == 0x0000A0, "Member 'FMarvelPayloadHotFixTable::PayloadMoveSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, PayloadBackwordSpeed) == 0x0000F0, "Member 'FMarvelPayloadHotFixTable::PayloadBackwordSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, DelayForwardTime) == 0x0000F4, "Member 'FMarvelPayloadHotFixTable::DelayForwardTime' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadHotFixTable, DelayBackTime) == 0x0000F8, "Member 'FMarvelPayloadHotFixTable::DelayBackTime' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelPayloadTraceHotFixTable
// 0x0080 (0x00A0 - 0x0020)
struct FMarvelPayloadTraceHotFixTable final : public FTableRowBase
{
public:
	class FName                                   InstanceName;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ModeIdList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEventPointConfig>              EventPoints;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FEventPointList>           MultiRound;                                        // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelPayloadTraceHotFixTable) == 0x000008, "Wrong alignment on FMarvelPayloadTraceHotFixTable");
static_assert(sizeof(FMarvelPayloadTraceHotFixTable) == 0x0000A0, "Wrong size on FMarvelPayloadTraceHotFixTable");
static_assert(offsetof(FMarvelPayloadTraceHotFixTable, InstanceName) == 0x000020, "Member 'FMarvelPayloadTraceHotFixTable::InstanceName' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadTraceHotFixTable, ModeIdList) == 0x000030, "Member 'FMarvelPayloadTraceHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadTraceHotFixTable, EventPoints) == 0x000040, "Member 'FMarvelPayloadTraceHotFixTable::EventPoints' has a wrong offset!");
static_assert(offsetof(FMarvelPayloadTraceHotFixTable, MultiRound) == 0x000050, "Member 'FMarvelPayloadTraceHotFixTable::MultiRound' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelReBirthHotFixTable
// 0x0088 (0x00A8 - 0x0020)
struct FMarvelReBirthHotFixTable final : public FTableRowBase
{
public:
	TArray<int32>                                 ModeIdList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsInitial;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBirthType                                    BirthType;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RebirthTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverTimeAdd;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            RebirthBuffIds;                                    // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TimeFactorK;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveUpTime;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDownTime;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDIs;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebirthTimeSelf;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RebirthStartNum;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelReBirthHotFixTable) == 0x000008, "Wrong alignment on FMarvelReBirthHotFixTable");
static_assert(sizeof(FMarvelReBirthHotFixTable) == 0x0000A8, "Wrong size on FMarvelReBirthHotFixTable");
static_assert(offsetof(FMarvelReBirthHotFixTable, ModeIdList) == 0x000020, "Member 'FMarvelReBirthHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, IsInitial) == 0x000030, "Member 'FMarvelReBirthHotFixTable::IsInitial' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, BirthType) == 0x000031, "Member 'FMarvelReBirthHotFixTable::BirthType' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, RebirthTime) == 0x000034, "Member 'FMarvelReBirthHotFixTable::RebirthTime' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, OverTimeAdd) == 0x000038, "Member 'FMarvelReBirthHotFixTable::OverTimeAdd' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, RebirthBuffIds) == 0x000040, "Member 'FMarvelReBirthHotFixTable::RebirthBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, TimeFactorK) == 0x000090, "Member 'FMarvelReBirthHotFixTable::TimeFactorK' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, ActiveUpTime) == 0x000094, "Member 'FMarvelReBirthHotFixTable::ActiveUpTime' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, ActiveDownTime) == 0x000098, "Member 'FMarvelReBirthHotFixTable::ActiveDownTime' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, ActiveDIs) == 0x00009C, "Member 'FMarvelReBirthHotFixTable::ActiveDIs' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, RebirthTimeSelf) == 0x0000A0, "Member 'FMarvelReBirthHotFixTable::RebirthTimeSelf' has a wrong offset!");
static_assert(offsetof(FMarvelReBirthHotFixTable, RebirthStartNum) == 0x0000A4, "Member 'FMarvelReBirthHotFixTable::RebirthStartNum' has a wrong offset!");

// ScriptStruct MarvelLevel.MarvelRoundHotFixTable
// 0x0078 (0x0098 - 0x0020)
struct FMarvelRoundHotFixTable final : public FTableRowBase
{
public:
	TArray<int32>                                 ModeIdList;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SelectHeroTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrePareTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            PrepareBuffIds;                                    // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         VictoryRaisingSpeed;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VictoryProgressMax;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarvelRoundHotFixTable) == 0x000008, "Wrong alignment on FMarvelRoundHotFixTable");
static_assert(sizeof(FMarvelRoundHotFixTable) == 0x000098, "Wrong size on FMarvelRoundHotFixTable");
static_assert(offsetof(FMarvelRoundHotFixTable, ModeIdList) == 0x000020, "Member 'FMarvelRoundHotFixTable::ModeIdList' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, SelectHeroTime) == 0x000030, "Member 'FMarvelRoundHotFixTable::SelectHeroTime' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, PrePareTime) == 0x000034, "Member 'FMarvelRoundHotFixTable::PrePareTime' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, RemainingTime) == 0x000038, "Member 'FMarvelRoundHotFixTable::RemainingTime' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, PrepareBuffIds) == 0x000040, "Member 'FMarvelRoundHotFixTable::PrepareBuffIds' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, VictoryRaisingSpeed) == 0x000090, "Member 'FMarvelRoundHotFixTable::VictoryRaisingSpeed' has a wrong offset!");
static_assert(offsetof(FMarvelRoundHotFixTable, VictoryProgressMax) == 0x000094, "Member 'FMarvelRoundHotFixTable::VictoryProgressMax' has a wrong offset!");

// ScriptStruct MarvelLevel.RuleCondition
// 0x0008 (0x0008 - 0x0000)
struct FRuleCondition final
{
public:
	class UMarvelRuleCondition*                   RuleCondition;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuleCondition) == 0x000008, "Wrong alignment on FRuleCondition");
static_assert(sizeof(FRuleCondition) == 0x000008, "Wrong size on FRuleCondition");
static_assert(offsetof(FRuleCondition, RuleCondition) == 0x000000, "Member 'FRuleCondition::RuleCondition' has a wrong offset!");

// ScriptStruct MarvelLevel.RuleContent
// 0x0030 (0x0030 - 0x0000)
struct FRuleContent final
{
public:
	bool                                          bEnableCondition;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuleCondition>                 RuleConditionList;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMarvelRuleConfig*                      RuleConfig;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustom;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URuleComponent>             RuleClass;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuleContent) == 0x000008, "Wrong alignment on FRuleContent");
static_assert(sizeof(FRuleContent) == 0x000030, "Wrong size on FRuleContent");
static_assert(offsetof(FRuleContent, bEnableCondition) == 0x000000, "Member 'FRuleContent::bEnableCondition' has a wrong offset!");
static_assert(offsetof(FRuleContent, RuleConditionList) == 0x000008, "Member 'FRuleContent::RuleConditionList' has a wrong offset!");
static_assert(offsetof(FRuleContent, RuleConfig) == 0x000018, "Member 'FRuleContent::RuleConfig' has a wrong offset!");
static_assert(offsetof(FRuleContent, bCustom) == 0x000020, "Member 'FRuleContent::bCustom' has a wrong offset!");
static_assert(offsetof(FRuleContent, RuleClass) == 0x000028, "Member 'FRuleContent::RuleClass' has a wrong offset!");

// ScriptStruct MarvelLevel.SpringFestivalPlayerStat
// 0x0018 (0x0018 - 0x0000)
struct FSpringFestivalPlayerStat final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Stats;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpringFestivalPlayerStat) == 0x000008, "Wrong alignment on FSpringFestivalPlayerStat");
static_assert(sizeof(FSpringFestivalPlayerStat) == 0x000018, "Wrong size on FSpringFestivalPlayerStat");
static_assert(offsetof(FSpringFestivalPlayerStat, UID) == 0x000000, "Member 'FSpringFestivalPlayerStat::UID' has a wrong offset!");
static_assert(offsetof(FSpringFestivalPlayerStat, Stats) == 0x000008, "Member 'FSpringFestivalPlayerStat::Stats' has a wrong offset!");

}

