#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_105031

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyAbility_105031.PyCue_Projectile_HitImpact_10503102.OnExecuteFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Projectile_HitImpact_10503102_OnExecuteFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Projectile_HitImpact_10503102_OnExecuteFX) == 0x000008, "Wrong alignment on PyCue_Projectile_HitImpact_10503102_OnExecuteFX");
static_assert(sizeof(PyCue_Projectile_HitImpact_10503102_OnExecuteFX) == 0x0001C0, "Wrong size on PyCue_Projectile_HitImpact_10503102_OnExecuteFX");
static_assert(offsetof(PyCue_Projectile_HitImpact_10503102_OnExecuteFX, MyTarget) == 0x000000, "Member 'PyCue_Projectile_HitImpact_10503102_OnExecuteFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_HitImpact_10503102_OnExecuteFX, Parameters) == 0x000008, "Member 'PyCue_Projectile_HitImpact_10503102_OnExecuteFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Ability_Loop_10503101.WhileActiveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Ability_Loop_10503101_WhileActiveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Ability_Loop_10503101_WhileActiveFX) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10503101_WhileActiveFX");
static_assert(sizeof(PyCue_Ability_Loop_10503101_WhileActiveFX) == 0x0001C0, "Wrong size on PyCue_Ability_Loop_10503101_WhileActiveFX");
static_assert(offsetof(PyCue_Ability_Loop_10503101_WhileActiveFX, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10503101_WhileActiveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10503101_WhileActiveFX, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10503101_WhileActiveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Ability_Loop_10503101.OnRemoveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Ability_Loop_10503101_OnRemoveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Ability_Loop_10503101_OnRemoveFX) == 0x000008, "Wrong alignment on PyCue_Ability_Loop_10503101_OnRemoveFX");
static_assert(sizeof(PyCue_Ability_Loop_10503101_OnRemoveFX) == 0x0001C0, "Wrong size on PyCue_Ability_Loop_10503101_OnRemoveFX");
static_assert(offsetof(PyCue_Ability_Loop_10503101_OnRemoveFX, MyTarget) == 0x000000, "Member 'PyCue_Ability_Loop_10503101_OnRemoveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Ability_Loop_10503101_OnRemoveFX, Parameters) == 0x000008, "Member 'PyCue_Ability_Loop_10503101_OnRemoveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Projectile_Loop_10503102.WhileActiveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Projectile_Loop_10503102_WhileActiveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Projectile_Loop_10503102_WhileActiveFX) == 0x000008, "Wrong alignment on PyCue_Projectile_Loop_10503102_WhileActiveFX");
static_assert(sizeof(PyCue_Projectile_Loop_10503102_WhileActiveFX) == 0x0001C0, "Wrong size on PyCue_Projectile_Loop_10503102_WhileActiveFX");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_WhileActiveFX, MyTarget) == 0x000000, "Member 'PyCue_Projectile_Loop_10503102_WhileActiveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_WhileActiveFX, Parameters) == 0x000008, "Member 'PyCue_Projectile_Loop_10503102_WhileActiveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Projectile_Loop_10503102.OnReturnStateChange
// 0x0001 (0x0001 - 0x0000)
struct PyCue_Projectile_Loop_10503102_OnReturnStateChange final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Projectile_Loop_10503102_OnReturnStateChange) == 0x000001, "Wrong alignment on PyCue_Projectile_Loop_10503102_OnReturnStateChange");
static_assert(sizeof(PyCue_Projectile_Loop_10503102_OnReturnStateChange) == 0x000001, "Wrong size on PyCue_Projectile_Loop_10503102_OnReturnStateChange");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_OnReturnStateChange, State) == 0x000000, "Member 'PyCue_Projectile_Loop_10503102_OnReturnStateChange::State' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Projectile_Loop_10503102.OnExecuteFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Projectile_Loop_10503102_OnExecuteFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Projectile_Loop_10503102_OnExecuteFX) == 0x000008, "Wrong alignment on PyCue_Projectile_Loop_10503102_OnExecuteFX");
static_assert(sizeof(PyCue_Projectile_Loop_10503102_OnExecuteFX) == 0x0001C0, "Wrong size on PyCue_Projectile_Loop_10503102_OnExecuteFX");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_OnExecuteFX, MyTarget) == 0x000000, "Member 'PyCue_Projectile_Loop_10503102_OnExecuteFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_OnExecuteFX, Parameters) == 0x000008, "Member 'PyCue_Projectile_Loop_10503102_OnExecuteFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyCue_Projectile_Loop_10503102.OnRemoveFX
// 0x01C0 (0x01C0 - 0x0000)
struct PyCue_Projectile_Loop_10503102_OnRemoveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyCue_Projectile_Loop_10503102_OnRemoveFX) == 0x000008, "Wrong alignment on PyCue_Projectile_Loop_10503102_OnRemoveFX");
static_assert(sizeof(PyCue_Projectile_Loop_10503102_OnRemoveFX) == 0x0001C0, "Wrong size on PyCue_Projectile_Loop_10503102_OnRemoveFX");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_OnRemoveFX, MyTarget) == 0x000000, "Member 'PyCue_Projectile_Loop_10503102_OnRemoveFX::MyTarget' has a wrong offset!");
static_assert(offsetof(PyCue_Projectile_Loop_10503102_OnRemoveFX, Parameters) == 0x000008, "Member 'PyCue_Projectile_Loop_10503102_OnRemoveFX::Parameters' has a wrong offset!");

// PythonFunction PyAbility_105031.PyProjectile_10503101.ShouldEndTaskOverMaxDistance
// 0x0001 (0x0001 - 0x0000)
struct PyProjectile_10503101_ShouldEndTaskOverMaxDistance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyProjectile_10503101_ShouldEndTaskOverMaxDistance) == 0x000001, "Wrong alignment on PyProjectile_10503101_ShouldEndTaskOverMaxDistance");
static_assert(sizeof(PyProjectile_10503101_ShouldEndTaskOverMaxDistance) == 0x000001, "Wrong size on PyProjectile_10503101_ShouldEndTaskOverMaxDistance");
static_assert(offsetof(PyProjectile_10503101_ShouldEndTaskOverMaxDistance, ReturnValue) == 0x000000, "Member 'PyProjectile_10503101_ShouldEndTaskOverMaxDistance::ReturnValue' has a wrong offset!");

// PythonFunction PyAbility_105031.PyProjectile_10503101.K2_OnProcessHit
// 0x0170 (0x0170 - 0x0000)
struct PyProjectile_10503101_K2_OnProcessHit final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyProjectile_10503101_K2_OnProcessHit) == 0x000008, "Wrong alignment on PyProjectile_10503101_K2_OnProcessHit");
static_assert(sizeof(PyProjectile_10503101_K2_OnProcessHit) == 0x000170, "Wrong size on PyProjectile_10503101_K2_OnProcessHit");
static_assert(offsetof(PyProjectile_10503101_K2_OnProcessHit, ImpactResult) == 0x000000, "Member 'PyProjectile_10503101_K2_OnProcessHit::ImpactResult' has a wrong offset!");

// PythonFunction PyAbility_105031.PyUIController_105031.SetAbility
// 0x0010 (0x0010 - 0x0000)
struct PyUIController_105031_SetAbility final
{
public:
	int32                                         InAbilityId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       InAbility;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyUIController_105031_SetAbility) == 0x000008, "Wrong alignment on PyUIController_105031_SetAbility");
static_assert(sizeof(PyUIController_105031_SetAbility) == 0x000010, "Wrong size on PyUIController_105031_SetAbility");
static_assert(offsetof(PyUIController_105031_SetAbility, InAbilityId) == 0x000000, "Member 'PyUIController_105031_SetAbility::InAbilityId' has a wrong offset!");
static_assert(offsetof(PyUIController_105031_SetAbility, InAbility) == 0x000008, "Member 'PyUIController_105031_SetAbility::InAbility' has a wrong offset!");

}

