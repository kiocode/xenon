#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyModularRuleComponent

#include "Basic.hpp"

#include "Marvel_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.OnCampStart
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_OnCampStart final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	EBattleSide                                   AttackSide;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainTime;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_OnCampStart) == 0x000008, "Wrong alignment on PyModularRuleComponent_OnCampStart");
static_assert(sizeof(PyModularRuleComponent_OnCampStart) == 0x000018, "Wrong size on PyModularRuleComponent_OnCampStart");
static_assert(offsetof(PyModularRuleComponent_OnCampStart, Name_0) == 0x000000, "Member 'PyModularRuleComponent_OnCampStart::Name_0' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnCampStart, AttackSide) == 0x000010, "Member 'PyModularRuleComponent_OnCampStart::AttackSide' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnCampStart, RemainTime) == 0x000014, "Member 'PyModularRuleComponent_OnCampStart::RemainTime' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetCurrentCamp
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_GetCurrentCamp final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_GetCurrentCamp) == 0x000008, "Wrong alignment on PyModularRuleComponent_GetCurrentCamp");
static_assert(sizeof(PyModularRuleComponent_GetCurrentCamp) == 0x000008, "Wrong size on PyModularRuleComponent_GetCurrentCamp");
static_assert(offsetof(PyModularRuleComponent_GetCurrentCamp, ReturnValue) == 0x000000, "Member 'PyModularRuleComponent_GetCurrentCamp::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetCampByName
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_GetCampByName final
{
public:
	class FString                                 CampName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_GetCampByName) == 0x000008, "Wrong alignment on PyModularRuleComponent_GetCampByName");
static_assert(sizeof(PyModularRuleComponent_GetCampByName) == 0x000018, "Wrong size on PyModularRuleComponent_GetCampByName");
static_assert(offsetof(PyModularRuleComponent_GetCampByName, CampName) == 0x000000, "Member 'PyModularRuleComponent_GetCampByName::CampName' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_GetCampByName, ReturnValue) == 0x000010, "Member 'PyModularRuleComponent_GetCampByName::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetDefaultHeroID
// 0x0004 (0x0004 - 0x0000)
struct PyModularRuleComponent_SetDefaultHeroID final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SetDefaultHeroID) == 0x000004, "Wrong alignment on PyModularRuleComponent_SetDefaultHeroID");
static_assert(sizeof(PyModularRuleComponent_SetDefaultHeroID) == 0x000004, "Wrong size on PyModularRuleComponent_SetDefaultHeroID");
static_assert(offsetof(PyModularRuleComponent_SetDefaultHeroID, HeroID) == 0x000000, "Member 'PyModularRuleComponent_SetDefaultHeroID::HeroID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetBattleSideDefaultHeroID
// 0x0050 (0x0050 - 0x0000)
struct PyModularRuleComponent_SetBattleSideDefaultHeroID final
{
public:
	TMap<EBattleSide, int32>                      DefaultHeroMap;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_SetBattleSideDefaultHeroID) == 0x000008, "Wrong alignment on PyModularRuleComponent_SetBattleSideDefaultHeroID");
static_assert(sizeof(PyModularRuleComponent_SetBattleSideDefaultHeroID) == 0x000050, "Wrong size on PyModularRuleComponent_SetBattleSideDefaultHeroID");
static_assert(offsetof(PyModularRuleComponent_SetBattleSideDefaultHeroID, DefaultHeroMap) == 0x000000, "Member 'PyModularRuleComponent_SetBattleSideDefaultHeroID::DefaultHeroMap' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetAllPlayerHeroByHeroId
// 0x0004 (0x0004 - 0x0000)
struct PyModularRuleComponent_SetAllPlayerHeroByHeroId final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SetAllPlayerHeroByHeroId) == 0x000004, "Wrong alignment on PyModularRuleComponent_SetAllPlayerHeroByHeroId");
static_assert(sizeof(PyModularRuleComponent_SetAllPlayerHeroByHeroId) == 0x000004, "Wrong size on PyModularRuleComponent_SetAllPlayerHeroByHeroId");
static_assert(offsetof(PyModularRuleComponent_SetAllPlayerHeroByHeroId, HeroID) == 0x000000, "Member 'PyModularRuleComponent_SetAllPlayerHeroByHeroId::HeroID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetSidePlayerHeroByHeroId
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_SetSidePlayerHeroByHeroId final
{
public:
	int32                                         AttackSideHeroID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefendSideHeroID;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SetSidePlayerHeroByHeroId) == 0x000004, "Wrong alignment on PyModularRuleComponent_SetSidePlayerHeroByHeroId");
static_assert(sizeof(PyModularRuleComponent_SetSidePlayerHeroByHeroId) == 0x000008, "Wrong size on PyModularRuleComponent_SetSidePlayerHeroByHeroId");
static_assert(offsetof(PyModularRuleComponent_SetSidePlayerHeroByHeroId, AttackSideHeroID) == 0x000000, "Member 'PyModularRuleComponent_SetSidePlayerHeroByHeroId::AttackSideHeroID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_SetSidePlayerHeroByHeroId, DefendSideHeroID) == 0x000004, "Member 'PyModularRuleComponent_SetSidePlayerHeroByHeroId::DefendSideHeroID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetPlayerHeroByHeroId
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_SetPlayerHeroByHeroId final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeroID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SetPlayerHeroByHeroId) == 0x000004, "Wrong alignment on PyModularRuleComponent_SetPlayerHeroByHeroId");
static_assert(sizeof(PyModularRuleComponent_SetPlayerHeroByHeroId) == 0x000008, "Wrong size on PyModularRuleComponent_SetPlayerHeroByHeroId");
static_assert(offsetof(PyModularRuleComponent_SetPlayerHeroByHeroId, UID) == 0x000000, "Member 'PyModularRuleComponent_SetPlayerHeroByHeroId::UID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_SetPlayerHeroByHeroId, HeroID) == 0x000004, "Member 'PyModularRuleComponent_SetPlayerHeroByHeroId::HeroID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetPayLoadProgress
// 0x0004 (0x0004 - 0x0000)
struct PyModularRuleComponent_GetPayLoadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_GetPayLoadProgress) == 0x000004, "Wrong alignment on PyModularRuleComponent_GetPayLoadProgress");
static_assert(sizeof(PyModularRuleComponent_GetPayLoadProgress) == 0x000004, "Wrong size on PyModularRuleComponent_GetPayLoadProgress");
static_assert(offsetof(PyModularRuleComponent_GetPayLoadProgress, ReturnValue) == 0x000000, "Member 'PyModularRuleComponent_GetPayLoadProgress::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SideGetPoints
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_SideGetPoints final
{
public:
	EBattleSide                                   BattleSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SideGetPoints) == 0x000004, "Wrong alignment on PyModularRuleComponent_SideGetPoints");
static_assert(sizeof(PyModularRuleComponent_SideGetPoints) == 0x000008, "Wrong size on PyModularRuleComponent_SideGetPoints");
static_assert(offsetof(PyModularRuleComponent_SideGetPoints, BattleSide) == 0x000000, "Member 'PyModularRuleComponent_SideGetPoints::BattleSide' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_SideGetPoints, Score) == 0x000004, "Member 'PyModularRuleComponent_SideGetPoints::Score' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.CheckSideScore
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_CheckSideScore final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_CheckSideScore) == 0x000004, "Wrong alignment on PyModularRuleComponent_CheckSideScore");
static_assert(sizeof(PyModularRuleComponent_CheckSideScore) == 0x000008, "Wrong size on PyModularRuleComponent_CheckSideScore");
static_assert(offsetof(PyModularRuleComponent_CheckSideScore, Score) == 0x000000, "Member 'PyModularRuleComponent_CheckSideScore::Score' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_CheckSideScore, ReturnValue) == 0x000004, "Member 'PyModularRuleComponent_CheckSideScore::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetScoreSide
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_GetScoreSide final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleSide                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_GetScoreSide) == 0x000004, "Wrong alignment on PyModularRuleComponent_GetScoreSide");
static_assert(sizeof(PyModularRuleComponent_GetScoreSide) == 0x000008, "Wrong size on PyModularRuleComponent_GetScoreSide");
static_assert(offsetof(PyModularRuleComponent_GetScoreSide, Score) == 0x000000, "Member 'PyModularRuleComponent_GetScoreSide::Score' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_GetScoreSide, ReturnValue) == 0x000004, "Member 'PyModularRuleComponent_GetScoreSide::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.EscortTouchProgressCheck
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_EscortTouchProgressCheck final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleSide                                   AttackSide;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_EscortTouchProgressCheck) == 0x000004, "Wrong alignment on PyModularRuleComponent_EscortTouchProgressCheck");
static_assert(sizeof(PyModularRuleComponent_EscortTouchProgressCheck) == 0x000008, "Wrong size on PyModularRuleComponent_EscortTouchProgressCheck");
static_assert(offsetof(PyModularRuleComponent_EscortTouchProgressCheck, Progress) == 0x000000, "Member 'PyModularRuleComponent_EscortTouchProgressCheck::Progress' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_EscortTouchProgressCheck, AttackSide) == 0x000004, "Member 'PyModularRuleComponent_EscortTouchProgressCheck::AttackSide' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.OnSpawnCharacterBP
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_OnSpawnCharacterBP final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_OnSpawnCharacterBP) == 0x000008, "Wrong alignment on PyModularRuleComponent_OnSpawnCharacterBP");
static_assert(sizeof(PyModularRuleComponent_OnSpawnCharacterBP) == 0x000008, "Wrong size on PyModularRuleComponent_OnSpawnCharacterBP");
static_assert(offsetof(PyModularRuleComponent_OnSpawnCharacterBP, Character) == 0x000000, "Member 'PyModularRuleComponent_OnSpawnCharacterBP::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.AddBuffToPlayer
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_AddBuffToPlayer final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ActorList;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_AddBuffToPlayer) == 0x000008, "Wrong alignment on PyModularRuleComponent_AddBuffToPlayer");
static_assert(sizeof(PyModularRuleComponent_AddBuffToPlayer) == 0x000018, "Wrong size on PyModularRuleComponent_AddBuffToPlayer");
static_assert(offsetof(PyModularRuleComponent_AddBuffToPlayer, BuffID) == 0x000000, "Member 'PyModularRuleComponent_AddBuffToPlayer::BuffID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_AddBuffToPlayer, ActorList) == 0x000008, "Member 'PyModularRuleComponent_AddBuffToPlayer::ActorList' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.RemoveBuffToPlayer
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_RemoveBuffToPlayer final
{
public:
	int32                                         BuffID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PlayerUIDList;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_RemoveBuffToPlayer) == 0x000008, "Wrong alignment on PyModularRuleComponent_RemoveBuffToPlayer");
static_assert(sizeof(PyModularRuleComponent_RemoveBuffToPlayer) == 0x000018, "Wrong size on PyModularRuleComponent_RemoveBuffToPlayer");
static_assert(offsetof(PyModularRuleComponent_RemoveBuffToPlayer, BuffID) == 0x000000, "Member 'PyModularRuleComponent_RemoveBuffToPlayer::BuffID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_RemoveBuffToPlayer, PlayerUIDList) == 0x000008, "Member 'PyModularRuleComponent_RemoveBuffToPlayer::PlayerUIDList' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.RespawnPlayer
// 0x0010 (0x0010 - 0x0000)
struct PyModularRuleComponent_RespawnPlayer final
{
public:
	TArray<int32>                                 ActorList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_RespawnPlayer) == 0x000008, "Wrong alignment on PyModularRuleComponent_RespawnPlayer");
static_assert(sizeof(PyModularRuleComponent_RespawnPlayer) == 0x000010, "Wrong size on PyModularRuleComponent_RespawnPlayer");
static_assert(offsetof(PyModularRuleComponent_RespawnPlayer, ActorList) == 0x000000, "Member 'PyModularRuleComponent_RespawnPlayer::ActorList' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetAllPlayer
// 0x0010 (0x0010 - 0x0000)
struct PyModularRuleComponent_GetAllPlayer final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(PyModularRuleComponent_GetAllPlayer) == 0x000008, "Wrong alignment on PyModularRuleComponent_GetAllPlayer");
static_assert(sizeof(PyModularRuleComponent_GetAllPlayer) == 0x000010, "Wrong size on PyModularRuleComponent_GetAllPlayer");
static_assert(offsetof(PyModularRuleComponent_GetAllPlayer, ReturnValue) == 0x000000, "Member 'PyModularRuleComponent_GetAllPlayer::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.GetPlayerDeathCount
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_GetPlayerDeathCount final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_GetPlayerDeathCount) == 0x000004, "Wrong alignment on PyModularRuleComponent_GetPlayerDeathCount");
static_assert(sizeof(PyModularRuleComponent_GetPlayerDeathCount) == 0x000008, "Wrong size on PyModularRuleComponent_GetPlayerDeathCount");
static_assert(offsetof(PyModularRuleComponent_GetPlayerDeathCount, UID) == 0x000000, "Member 'PyModularRuleComponent_GetPlayerDeathCount::UID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_GetPlayerDeathCount, ReturnValue) == 0x000004, "Member 'PyModularRuleComponent_GetPlayerDeathCount::ReturnValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.OnPlayerAbilityHit
// 0x0030 (0x0030 - 0x0000)
struct PyModularRuleComponent_OnPlayerAbilityHit final
{
public:
	TArray<int32>                                 PlayerList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 AbilityList;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_OnPlayerAbilityHit) == 0x000008, "Wrong alignment on PyModularRuleComponent_OnPlayerAbilityHit");
static_assert(sizeof(PyModularRuleComponent_OnPlayerAbilityHit) == 0x000030, "Wrong size on PyModularRuleComponent_OnPlayerAbilityHit");
static_assert(offsetof(PyModularRuleComponent_OnPlayerAbilityHit, PlayerList) == 0x000000, "Member 'PyModularRuleComponent_OnPlayerAbilityHit::PlayerList' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnPlayerAbilityHit, AbilityList) == 0x000010, "Member 'PyModularRuleComponent_OnPlayerAbilityHit::AbilityList' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnPlayerAbilityHit, EventName) == 0x000020, "Member 'PyModularRuleComponent_OnPlayerAbilityHit::EventName' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.OnActorWeaponAmmoUse
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_OnActorWeaponAmmoUse final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCritHit;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0016(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(PyModularRuleComponent_OnActorWeaponAmmoUse) == 0x000008, "Wrong alignment on PyModularRuleComponent_OnActorWeaponAmmoUse");
static_assert(sizeof(PyModularRuleComponent_OnActorWeaponAmmoUse) == 0x000018, "Wrong size on PyModularRuleComponent_OnActorWeaponAmmoUse");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, Source) == 0x000000, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::Source' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, Target) == 0x000008, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::Target' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, AbilityID) == 0x000010, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::AbilityID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, bHit) == 0x000014, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::bHit' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, bIsCritHit) == 0x000015, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::bIsCritHit' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_OnActorWeaponAmmoUse, ExtraData) == 0x000016, "Member 'PyModularRuleComponent_OnActorWeaponAmmoUse::ExtraData' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.AddCharHealthAttr
// 0x000C (0x000C - 0x0000)
struct PyModularRuleComponent_AddCharHealthAttr final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PercentValue;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FixedValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_AddCharHealthAttr) == 0x000004, "Wrong alignment on PyModularRuleComponent_AddCharHealthAttr");
static_assert(sizeof(PyModularRuleComponent_AddCharHealthAttr) == 0x00000C, "Wrong size on PyModularRuleComponent_AddCharHealthAttr");
static_assert(offsetof(PyModularRuleComponent_AddCharHealthAttr, PlayerUID) == 0x000000, "Member 'PyModularRuleComponent_AddCharHealthAttr::PlayerUID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_AddCharHealthAttr, PercentValue) == 0x000004, "Member 'PyModularRuleComponent_AddCharHealthAttr::PercentValue' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_AddCharHealthAttr, FixedValue) == 0x000008, "Member 'PyModularRuleComponent_AddCharHealthAttr::FixedValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ReduceCharHealthAttr
// 0x000C (0x000C - 0x0000)
struct PyModularRuleComponent_ReduceCharHealthAttr final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PercentValue;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FixedValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ReduceCharHealthAttr) == 0x000004, "Wrong alignment on PyModularRuleComponent_ReduceCharHealthAttr");
static_assert(sizeof(PyModularRuleComponent_ReduceCharHealthAttr) == 0x00000C, "Wrong size on PyModularRuleComponent_ReduceCharHealthAttr");
static_assert(offsetof(PyModularRuleComponent_ReduceCharHealthAttr, PlayerUID) == 0x000000, "Member 'PyModularRuleComponent_ReduceCharHealthAttr::PlayerUID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ReduceCharHealthAttr, PercentValue) == 0x000004, "Member 'PyModularRuleComponent_ReduceCharHealthAttr::PercentValue' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ReduceCharHealthAttr, FixedValue) == 0x000008, "Member 'PyModularRuleComponent_ReduceCharHealthAttr::FixedValue' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetBirthBaseState
// 0x0050 (0x0050 - 0x0000)
struct PyModularRuleComponent_SetBirthBaseState final
{
public:
	TMap<class FString, bool>                     BirthbaseState;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_SetBirthBaseState) == 0x000008, "Wrong alignment on PyModularRuleComponent_SetBirthBaseState");
static_assert(sizeof(PyModularRuleComponent_SetBirthBaseState) == 0x000050, "Wrong size on PyModularRuleComponent_SetBirthBaseState");
static_assert(offsetof(PyModularRuleComponent_SetBirthBaseState, BirthbaseState) == 0x000000, "Member 'PyModularRuleComponent_SetBirthBaseState::BirthbaseState' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetBirthBaseOpen
// 0x0050 (0x0050 - 0x0000)
struct PyModularRuleComponent_SetBirthBaseOpen final
{
public:
	TMap<class FString, bool>                     BirthbaseState;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyModularRuleComponent_SetBirthBaseOpen) == 0x000008, "Wrong alignment on PyModularRuleComponent_SetBirthBaseOpen");
static_assert(sizeof(PyModularRuleComponent_SetBirthBaseOpen) == 0x000050, "Wrong size on PyModularRuleComponent_SetBirthBaseOpen");
static_assert(offsetof(PyModularRuleComponent_SetBirthBaseOpen, BirthbaseState) == 0x000000, "Member 'PyModularRuleComponent_SetBirthBaseOpen::BirthbaseState' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.EndWithResult
// 0x0001 (0x0001 - 0x0000)
struct PyModularRuleComponent_EndWithResult final
{
public:
	EBattleSide                                   WinnerSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_EndWithResult) == 0x000001, "Wrong alignment on PyModularRuleComponent_EndWithResult");
static_assert(sizeof(PyModularRuleComponent_EndWithResult) == 0x000001, "Wrong size on PyModularRuleComponent_EndWithResult");
static_assert(offsetof(PyModularRuleComponent_EndWithResult, WinnerSide) == 0x000000, "Member 'PyModularRuleComponent_EndWithResult::WinnerSide' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.BindPlayerDeathEvent
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_BindPlayerDeathEvent final
{
public:
	int32                                         PlayerUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_BindPlayerDeathEvent) == 0x000008, "Wrong alignment on PyModularRuleComponent_BindPlayerDeathEvent");
static_assert(sizeof(PyModularRuleComponent_BindPlayerDeathEvent) == 0x000018, "Wrong size on PyModularRuleComponent_BindPlayerDeathEvent");
static_assert(offsetof(PyModularRuleComponent_BindPlayerDeathEvent, PlayerUID) == 0x000000, "Member 'PyModularRuleComponent_BindPlayerDeathEvent::PlayerUID' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_BindPlayerDeathEvent, EventName) == 0x000008, "Member 'PyModularRuleComponent_BindPlayerDeathEvent::EventName' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.OpenSelectHeroPanel
// 0x0004 (0x0004 - 0x0000)
struct PyModularRuleComponent_OpenSelectHeroPanel final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_OpenSelectHeroPanel) == 0x000004, "Wrong alignment on PyModularRuleComponent_OpenSelectHeroPanel");
static_assert(sizeof(PyModularRuleComponent_OpenSelectHeroPanel) == 0x000004, "Wrong size on PyModularRuleComponent_OpenSelectHeroPanel");
static_assert(offsetof(PyModularRuleComponent_OpenSelectHeroPanel, UID) == 0x000000, "Member 'PyModularRuleComponent_OpenSelectHeroPanel::UID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.SetModularHeroID
// 0x0004 (0x0004 - 0x0000)
struct PyModularRuleComponent_SetModularHeroID final
{
public:
	int32                                         HeroID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_SetModularHeroID) == 0x000004, "Wrong alignment on PyModularRuleComponent_SetModularHeroID");
static_assert(sizeof(PyModularRuleComponent_SetModularHeroID) == 0x000004, "Wrong size on PyModularRuleComponent_SetModularHeroID");
static_assert(offsetof(PyModularRuleComponent_SetModularHeroID, HeroID) == 0x000000, "Member 'PyModularRuleComponent_SetModularHeroID::HeroID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ClearPlayerAbilityCD
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_ClearPlayerAbilityCD final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ClearPlayerAbilityCD) == 0x000008, "Wrong alignment on PyModularRuleComponent_ClearPlayerAbilityCD");
static_assert(sizeof(PyModularRuleComponent_ClearPlayerAbilityCD) == 0x000008, "Wrong size on PyModularRuleComponent_ClearPlayerAbilityCD");
static_assert(offsetof(PyModularRuleComponent_ClearPlayerAbilityCD, Character) == 0x000000, "Member 'PyModularRuleComponent_ClearPlayerAbilityCD::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ChargePlayerAbility
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_ChargePlayerAbility final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ChargePlayerAbility) == 0x000008, "Wrong alignment on PyModularRuleComponent_ChargePlayerAbility");
static_assert(sizeof(PyModularRuleComponent_ChargePlayerAbility) == 0x000008, "Wrong size on PyModularRuleComponent_ChargePlayerAbility");
static_assert(offsetof(PyModularRuleComponent_ChargePlayerAbility, Character) == 0x000000, "Member 'PyModularRuleComponent_ChargePlayerAbility::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.MonitorPlayerDamage
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_MonitorPlayerDamage final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_MonitorPlayerDamage) == 0x000008, "Wrong alignment on PyModularRuleComponent_MonitorPlayerDamage");
static_assert(sizeof(PyModularRuleComponent_MonitorPlayerDamage) == 0x000008, "Wrong size on PyModularRuleComponent_MonitorPlayerDamage");
static_assert(offsetof(PyModularRuleComponent_MonitorPlayerDamage, Character) == 0x000000, "Member 'PyModularRuleComponent_MonitorPlayerDamage::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ApplyDamageTrigger
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_ApplyDamageTrigger final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ApplyDamageTrigger) == 0x000008, "Wrong alignment on PyModularRuleComponent_ApplyDamageTrigger");
static_assert(sizeof(PyModularRuleComponent_ApplyDamageTrigger) == 0x000018, "Wrong size on PyModularRuleComponent_ApplyDamageTrigger");
static_assert(offsetof(PyModularRuleComponent_ApplyDamageTrigger, Source) == 0x000000, "Member 'PyModularRuleComponent_ApplyDamageTrigger::Source' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyDamageTrigger, Target) == 0x000008, "Member 'PyModularRuleComponent_ApplyDamageTrigger::Target' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyDamageTrigger, Damage) == 0x000010, "Member 'PyModularRuleComponent_ApplyDamageTrigger::Damage' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyDamageTrigger, AbilityID) == 0x000014, "Member 'PyModularRuleComponent_ApplyDamageTrigger::AbilityID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.MonitorPlayerTreat
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_MonitorPlayerTreat final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_MonitorPlayerTreat) == 0x000008, "Wrong alignment on PyModularRuleComponent_MonitorPlayerTreat");
static_assert(sizeof(PyModularRuleComponent_MonitorPlayerTreat) == 0x000008, "Wrong size on PyModularRuleComponent_MonitorPlayerTreat");
static_assert(offsetof(PyModularRuleComponent_MonitorPlayerTreat, Character) == 0x000000, "Member 'PyModularRuleComponent_MonitorPlayerTreat::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ApplyTreatTrigger
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_ApplyTreatTrigger final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Treat;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AbilityID;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ApplyTreatTrigger) == 0x000008, "Wrong alignment on PyModularRuleComponent_ApplyTreatTrigger");
static_assert(sizeof(PyModularRuleComponent_ApplyTreatTrigger) == 0x000018, "Wrong size on PyModularRuleComponent_ApplyTreatTrigger");
static_assert(offsetof(PyModularRuleComponent_ApplyTreatTrigger, Source) == 0x000000, "Member 'PyModularRuleComponent_ApplyTreatTrigger::Source' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyTreatTrigger, Target) == 0x000008, "Member 'PyModularRuleComponent_ApplyTreatTrigger::Target' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyTreatTrigger, Treat) == 0x000010, "Member 'PyModularRuleComponent_ApplyTreatTrigger::Treat' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyTreatTrigger, AbilityID) == 0x000014, "Member 'PyModularRuleComponent_ApplyTreatTrigger::AbilityID' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.MonitorPlayerBuff
// 0x0008 (0x0008 - 0x0000)
struct PyModularRuleComponent_MonitorPlayerBuff final
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_MonitorPlayerBuff) == 0x000008, "Wrong alignment on PyModularRuleComponent_MonitorPlayerBuff");
static_assert(sizeof(PyModularRuleComponent_MonitorPlayerBuff) == 0x000008, "Wrong size on PyModularRuleComponent_MonitorPlayerBuff");
static_assert(offsetof(PyModularRuleComponent_MonitorPlayerBuff, Character) == 0x000000, "Member 'PyModularRuleComponent_MonitorPlayerBuff::Character' has a wrong offset!");

// PythonFunction PyModularRuleComponent.PyModularRuleComponent.ApplyBuffTrigger
// 0x0018 (0x0018 - 0x0000)
struct PyModularRuleComponent_ApplyBuffTrigger final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         BuffID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModularRuleComponent_ApplyBuffTrigger) == 0x000008, "Wrong alignment on PyModularRuleComponent_ApplyBuffTrigger");
static_assert(sizeof(PyModularRuleComponent_ApplyBuffTrigger) == 0x000018, "Wrong size on PyModularRuleComponent_ApplyBuffTrigger");
static_assert(offsetof(PyModularRuleComponent_ApplyBuffTrigger, Source) == 0x000000, "Member 'PyModularRuleComponent_ApplyBuffTrigger::Source' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyBuffTrigger, Target) == 0x000008, "Member 'PyModularRuleComponent_ApplyBuffTrigger::Target' has a wrong offset!");
static_assert(offsetof(PyModularRuleComponent_ApplyBuffTrigger, BuffID) == 0x000010, "Member 'PyModularRuleComponent_ApplyBuffTrigger::BuffID' has a wrong offset!");

}

