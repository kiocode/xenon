#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SM_PracticeRangeBuilding001A_Part1_Des

#include "Basic.hpp"

#include "Marvel_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SM_PracticeRangeBuilding001A_Part1_Des.SM_PracticeRangeBuilding001A_Part1_Des_C
// 0x0070 (0x0580 - 0x0510)
class alignas(0x10) ASM_PracticeRangeBuilding001A_Part1_Des_C final : public ARecoveryEffectMeshActor
{
public:
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bb;                     // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Ba;                     // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bb_Decal;               // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Ba_Decal;               // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc2;                    // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc4;                    // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc5;                    // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc6;                    // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc3;                    // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc;                     // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PracticeRangeBuilding001Bc1;                    // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Main_Part;                                         // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DecalMesh;                                         // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SM_PracticeRangeBuilding001A_Part1_Des;            // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SM_PracticeRangeBuilding001A_Part1_Des_C">();
	}
	static class ASM_PracticeRangeBuilding001A_Part1_Des_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASM_PracticeRangeBuilding001A_Part1_Des_C>();
	}
};
////static_assert(alignof(ASM_PracticeRangeBuilding001A_Part1_Des_C) == 0x000010, "Wrong alignment on ASM_PracticeRangeBuilding001A_Part1_Des_C");
////static_assert(sizeof(ASM_PracticeRangeBuilding001A_Part1_Des_C) == 0x000580, "Wrong size on ASM_PracticeRangeBuilding001A_Part1_Des_C");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bb) == 0x000510, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bb' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Ba) == 0x000518, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Ba' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bb_Decal) == 0x000520, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bb_Decal' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Ba_Decal) == 0x000528, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Ba_Decal' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc2) == 0x000530, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc2' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc4) == 0x000538, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc4' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc5) == 0x000540, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc5' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc6) == 0x000548, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc6' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc3) == 0x000550, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc3' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc) == 0x000558, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001Bc1) == 0x000560, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001Bc1' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, Main_Part) == 0x000568, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::Main_Part' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, DecalMesh) == 0x000570, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::DecalMesh' has a wrong offset!");
////static_assert(offsetof(ASM_PracticeRangeBuilding001A_Part1_Des_C, SM_PracticeRangeBuilding001A_Part1_Des) == 0x000578, "Member 'ASM_PracticeRangeBuilding001A_Part1_Des_C::SM_PracticeRangeBuilding001A_Part1_Des' has a wrong offset!");

}

