#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineSettings

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieRenderPipelineCore_classes.hpp"
#include "MovieRenderPipelineSettings_structs.hpp"


namespace SDK
{

// Class MovieRenderPipelineSettings.MoviePipelineBurnInWidget
// 0x0000 (0x03B8 - 0x03B8)
class UMoviePipelineBurnInWidget final : public UUserWidget
{
public:
	void OnOutputFrameStarted(class UMoviePipeline* ForPipeline);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBurnInWidget">();
	}
	static class UMoviePipelineBurnInWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBurnInWidget>();
	}
};
static_assert(alignof(UMoviePipelineBurnInWidget) == 0x000008, "Wrong alignment on UMoviePipelineBurnInWidget");
static_assert(sizeof(UMoviePipelineBurnInWidget) == 0x0003B8, "Wrong size on UMoviePipelineBurnInWidget");

// Class MovieRenderPipelineSettings.MoviePipelineBurnInSetting
// 0x0070 (0x00C0 - 0x0050)
class UMoviePipelineBurnInSetting final : public UMoviePipelineRenderPass
{
public:
	struct FSoftClassPath                         BurnInClass;                                       // 0x0050(0x0028)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompositeOntoFinalImage;                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x2F];                                      // 0x0079(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoviePipelineBurnInWidget*>     BurnInWidgetInstances;                             // 0x00B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineBurnInSetting">();
	}
	static class UMoviePipelineBurnInSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineBurnInSetting>();
	}
};
static_assert(alignof(UMoviePipelineBurnInSetting) == 0x000008, "Wrong alignment on UMoviePipelineBurnInSetting");
static_assert(sizeof(UMoviePipelineBurnInSetting) == 0x0000C0, "Wrong size on UMoviePipelineBurnInSetting");
static_assert(offsetof(UMoviePipelineBurnInSetting, BurnInClass) == 0x000050, "Member 'UMoviePipelineBurnInSetting::BurnInClass' has a wrong offset!");
static_assert(offsetof(UMoviePipelineBurnInSetting, bCompositeOntoFinalImage) == 0x000078, "Member 'UMoviePipelineBurnInSetting::bCompositeOntoFinalImage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineBurnInSetting, RenderTarget) == 0x0000A8, "Member 'UMoviePipelineBurnInSetting::RenderTarget' has a wrong offset!");
static_assert(offsetof(UMoviePipelineBurnInSetting, BurnInWidgetInstances) == 0x0000B0, "Member 'UMoviePipelineBurnInSetting::BurnInWidgetInstances' has a wrong offset!");

// Class MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting
// 0x00B0 (0x0100 - 0x0050)
class UMoviePipelineConsoleVariableSetting final : public UMoviePipelineSetting
{
public:
	TArray<TScriptInterface<class IMovieSceneConsoleVariableTrackInterface>> ConsoleVariablePresets;                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    ConsoleVariables;                                  // 0x0060(0x0050)(Deprecated, NativeAccessSpecifierPublic)
	TArray<class FString>                         StartConsoleCommands;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EndConsoleCommands;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMoviePipelineConsoleVariableEntry> CVars;                                             // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x20];                                      // 0x00E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddConsoleVariable(const class FString& Name_0, const float Value);
	bool AddOrUpdateConsoleVariable(const class FString& Name_0, const float Value);
	bool RemoveConsoleVariable(const class FString& Name_0, const bool bRemoveAllInstances);
	bool UpdateConsoleVariableEnableState(const class FString& Name_0, const bool bIsEnabled);

	TArray<struct FMoviePipelineConsoleVariableEntry> GetConsoleVariables() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineConsoleVariableSetting">();
	}
	static class UMoviePipelineConsoleVariableSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineConsoleVariableSetting>();
	}
};
static_assert(alignof(UMoviePipelineConsoleVariableSetting) == 0x000008, "Wrong alignment on UMoviePipelineConsoleVariableSetting");
static_assert(sizeof(UMoviePipelineConsoleVariableSetting) == 0x000100, "Wrong size on UMoviePipelineConsoleVariableSetting");
static_assert(offsetof(UMoviePipelineConsoleVariableSetting, ConsoleVariablePresets) == 0x000050, "Member 'UMoviePipelineConsoleVariableSetting::ConsoleVariablePresets' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConsoleVariableSetting, ConsoleVariables) == 0x000060, "Member 'UMoviePipelineConsoleVariableSetting::ConsoleVariables' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConsoleVariableSetting, StartConsoleCommands) == 0x0000B0, "Member 'UMoviePipelineConsoleVariableSetting::StartConsoleCommands' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConsoleVariableSetting, EndConsoleCommands) == 0x0000C0, "Member 'UMoviePipelineConsoleVariableSetting::EndConsoleCommands' has a wrong offset!");
static_assert(offsetof(UMoviePipelineConsoleVariableSetting, CVars) == 0x0000D0, "Member 'UMoviePipelineConsoleVariableSetting::CVars' has a wrong offset!");

// Class MovieRenderPipelineSettings.MoviePipelineWidgetRenderer
// 0x0020 (0x0070 - 0x0050)
class UMoviePipelineWidgetRenderer final : public UMoviePipelineRenderPass
{
public:
	bool                                          bCompositeOntoFinalImage;                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUseViwportFormat;                            // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x16];                                      // 0x0052(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoviePipelineWidgetRenderer">();
	}
	static class UMoviePipelineWidgetRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoviePipelineWidgetRenderer>();
	}
};
static_assert(alignof(UMoviePipelineWidgetRenderer) == 0x000008, "Wrong alignment on UMoviePipelineWidgetRenderer");
static_assert(sizeof(UMoviePipelineWidgetRenderer) == 0x000070, "Wrong size on UMoviePipelineWidgetRenderer");
static_assert(offsetof(UMoviePipelineWidgetRenderer, bCompositeOntoFinalImage) == 0x000050, "Member 'UMoviePipelineWidgetRenderer::bCompositeOntoFinalImage' has a wrong offset!");
static_assert(offsetof(UMoviePipelineWidgetRenderer, bForceUseViwportFormat) == 0x000051, "Member 'UMoviePipelineWidgetRenderer::bForceUseViwportFormat' has a wrong offset!");
static_assert(offsetof(UMoviePipelineWidgetRenderer, RenderTarget) == 0x000068, "Member 'UMoviePipelineWidgetRenderer::RenderTarget' has a wrong offset!");

}

