#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum KawaiiPhysics.EPlanarConstraint
// NumValues: 0x0005
enum class EPlanarConstraint : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EPlanarConstraint_MAX                    = 4,
};

// Enum KawaiiPhysics.EBoneForwardAxis
// NumValues: 0x0007
enum class EBoneForwardAxis : uint8
{
	X_Positive                               = 0,
	X_Negative                               = 1,
	Y_Positive                               = 2,
	Y_Negative                               = 3,
	Z_Positive                               = 4,
	Z_Negative                               = 5,
	EBoneForwardAxis_MAX                     = 6,
};

// Enum KawaiiPhysics.ECollisionLimitType
// NumValues: 0x0005
enum class ECollisionLimitType : uint8
{
	None                                     = 0,
	Spherical                                = 1,
	Capsule                                  = 2,
	Planar                                   = 3,
	ECollisionLimitType_MAX                  = 4,
};

// Enum KawaiiPhysics.EXPBDComplianceType
// NumValues: 0x0008
enum class EXPBDComplianceType : uint8
{
	Concrete                                 = 0,
	Wood                                     = 1,
	Leather                                  = 2,
	Tendon                                   = 3,
	Rubber                                   = 4,
	Muscle                                   = 5,
	Fat                                      = 6,
	EXPBDComplianceType_MAX                  = 7,
};

// ScriptStruct KawaiiPhysics.CollisionLimitBase
// 0x0090 (0x0090 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FCollisionLimitBase
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0060(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FCollisionLimitBase) == 0x000010, "Wrong alignment on FCollisionLimitBase");
static_assert(sizeof(FCollisionLimitBase) == 0x000090, "Wrong size on FCollisionLimitBase");
static_assert(offsetof(FCollisionLimitBase, DrivingBone) == 0x000000, "Member 'FCollisionLimitBase::DrivingBone' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetLocation) == 0x000018, "Member 'FCollisionLimitBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, OffsetRotation) == 0x000030, "Member 'FCollisionLimitBase::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Location) == 0x000048, "Member 'FCollisionLimitBase::Location' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, Rotation) == 0x000060, "Member 'FCollisionLimitBase::Rotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitBase, bEnable) == 0x000080, "Member 'FCollisionLimitBase::bEnable' has a wrong offset!");

// ScriptStruct KawaiiPhysics.SphericalLimit
// 0x0000 (0x0090 - 0x0090)
struct FSphericalLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalLimit) == 0x000010, "Wrong alignment on FSphericalLimit");
static_assert(sizeof(FSphericalLimit) == 0x000090, "Wrong size on FSphericalLimit");
static_assert(offsetof(FSphericalLimit, Radius) == 0x000088, "Member 'FSphericalLimit::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalLimit, LimitType) == 0x00008C, "Member 'FSphericalLimit::LimitType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CapsuleLimit
// 0x0000 (0x0090 - 0x0090)
struct FCapsuleLimit final : public FCollisionLimitBase
{
public:
	float                                         Radius;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCapsuleLimit) == 0x000010, "Wrong alignment on FCapsuleLimit");
static_assert(sizeof(FCapsuleLimit) == 0x000090, "Wrong size on FCapsuleLimit");
static_assert(offsetof(FCapsuleLimit, Radius) == 0x000088, "Member 'FCapsuleLimit::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleLimit, Length) == 0x00008C, "Member 'FCapsuleLimit::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.PlanarLimit
// 0x0020 (0x00B0 - 0x0090)
struct FPlanarLimit final : public FCollisionLimitBase
{
public:
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 Plane;                                             // 0x0090(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanarLimit) == 0x000010, "Wrong alignment on FPlanarLimit");
static_assert(sizeof(FPlanarLimit) == 0x0000B0, "Wrong size on FPlanarLimit");
static_assert(offsetof(FPlanarLimit, Plane) == 0x000090, "Member 'FPlanarLimit::Plane' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsSettings
// 0x0020 (0x0020 - 0x0000)
struct FKawaiiPhysicsSettings final
{
public:
	float                                         Damping;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingLocation;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingRotation;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngle;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitLinear;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKawaiiPhysicsSettings) == 0x000004, "Wrong alignment on FKawaiiPhysicsSettings");
static_assert(sizeof(FKawaiiPhysicsSettings) == 0x000020, "Wrong size on FKawaiiPhysicsSettings");
static_assert(offsetof(FKawaiiPhysicsSettings, Damping) == 0x000000, "Member 'FKawaiiPhysicsSettings::Damping' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingLocation) == 0x000004, "Member 'FKawaiiPhysicsSettings::WorldDampingLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, WorldDampingRotation) == 0x000008, "Member 'FKawaiiPhysicsSettings::WorldDampingRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Stiffness) == 0x00000C, "Member 'FKawaiiPhysicsSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, Radius) == 0x000010, "Member 'FKawaiiPhysicsSettings::Radius' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, LimitAngle) == 0x000014, "Member 'FKawaiiPhysicsSettings::LimitAngle' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, LimitLinear) == 0x000018, "Member 'FKawaiiPhysicsSettings::LimitLinear' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsSettings, GravityScale) == 0x00001C, "Member 'FKawaiiPhysicsSettings::GravityScale' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsModifyBone
// 0x0110 (0x0110 - 0x0000)
struct FKawaiiPhysicsModifyBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildIndexs;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0028(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocation;                                      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PrevRotation;                                      // 0x0080(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoseLocation;                                      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PoseRotation;                                      // 0x00C0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PoseScale;                                         // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthFromRoot;                                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDummy;                                            // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipSimulate;                                     // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixed;                                            // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFollowBone;                                    // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChildOfWaveBeginBone;                             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveAmplitude;                                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKawaiiPhysicsModifyBone) == 0x000010, "Wrong alignment on FKawaiiPhysicsModifyBone");
static_assert(sizeof(FKawaiiPhysicsModifyBone) == 0x000110, "Wrong size on FKawaiiPhysicsModifyBone");
static_assert(offsetof(FKawaiiPhysicsModifyBone, BoneRef) == 0x000000, "Member 'FKawaiiPhysicsModifyBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ParentIndex) == 0x000014, "Member 'FKawaiiPhysicsModifyBone::ParentIndex' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, ChildIndexs) == 0x000018, "Member 'FKawaiiPhysicsModifyBone::ChildIndexs' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PhysicsSettings) == 0x000028, "Member 'FKawaiiPhysicsModifyBone::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, Location) == 0x000048, "Member 'FKawaiiPhysicsModifyBone::Location' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevLocation) == 0x000060, "Member 'FKawaiiPhysicsModifyBone::PrevLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PrevRotation) == 0x000080, "Member 'FKawaiiPhysicsModifyBone::PrevRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseLocation) == 0x0000A0, "Member 'FKawaiiPhysicsModifyBone::PoseLocation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseRotation) == 0x0000C0, "Member 'FKawaiiPhysicsModifyBone::PoseRotation' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, PoseScale) == 0x0000E0, "Member 'FKawaiiPhysicsModifyBone::PoseScale' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, LengthFromRoot) == 0x0000F8, "Member 'FKawaiiPhysicsModifyBone::LengthFromRoot' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bDummy) == 0x0000FC, "Member 'FKawaiiPhysicsModifyBone::bDummy' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bSkipSimulate) == 0x0000FD, "Member 'FKawaiiPhysicsModifyBone::bSkipSimulate' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bFixed) == 0x0000FE, "Member 'FKawaiiPhysicsModifyBone::bFixed' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bHasFollowBone) == 0x0000FF, "Member 'FKawaiiPhysicsModifyBone::bHasFollowBone' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, bChildOfWaveBeginBone) == 0x000100, "Member 'FKawaiiPhysicsModifyBone::bChildOfWaveBeginBone' has a wrong offset!");
static_assert(offsetof(FKawaiiPhysicsModifyBone, WaveAmplitude) == 0x000104, "Member 'FKawaiiPhysicsModifyBone::WaveAmplitude' has a wrong offset!");

// ScriptStruct KawaiiPhysics.ModifyBoneConstraint
// 0x0040 (0x0040 - 0x0000)
struct FModifyBoneConstraint final
{
public:
	struct FBoneReference                         Bone1;                                             // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Bone2;                                             // 0x0014(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideCompliance;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           ComplianceType;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModifyBoneIndex1;                                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifyBoneIndex2;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDummy;                                          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lambda;                                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModifyBoneConstraint) == 0x000004, "Wrong alignment on FModifyBoneConstraint");
static_assert(sizeof(FModifyBoneConstraint) == 0x000040, "Wrong size on FModifyBoneConstraint");
static_assert(offsetof(FModifyBoneConstraint, Bone1) == 0x000000, "Member 'FModifyBoneConstraint::Bone1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Bone2) == 0x000014, "Member 'FModifyBoneConstraint::Bone2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, bOverrideCompliance) == 0x000028, "Member 'FModifyBoneConstraint::bOverrideCompliance' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ComplianceType) == 0x000029, "Member 'FModifyBoneConstraint::ComplianceType' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ModifyBoneIndex1) == 0x00002C, "Member 'FModifyBoneConstraint::ModifyBoneIndex1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, ModifyBoneIndex2) == 0x000030, "Member 'FModifyBoneConstraint::ModifyBoneIndex2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Length) == 0x000034, "Member 'FModifyBoneConstraint::Length' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, bIsDummy) == 0x000038, "Member 'FModifyBoneConstraint::bIsDummy' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraint, Lambda) == 0x00003C, "Member 'FModifyBoneConstraint::Lambda' has a wrong offset!");

// ScriptStruct KawaiiPhysics.AnimNode_KawaiiPhysicsCacheBase
// 0x0004 (0x0008 - 0x0004)
struct FAnimNode_KawaiiPhysicsCacheBase final : public FAnimNode_SkeletalControlCacheBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_KawaiiPhysicsCacheBase) == 0x000004, "Wrong alignment on FAnimNode_KawaiiPhysicsCacheBase");
static_assert(sizeof(FAnimNode_KawaiiPhysicsCacheBase) == 0x000008, "Wrong size on FAnimNode_KawaiiPhysicsCacheBase");

// ScriptStruct KawaiiPhysics.AnimNode_KawaiiPhysics
// 0x0B58 (0x0C40 - 0x00E8)
struct FAnimNode_KawaiiPhysics final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootBone;                                          // 0x00E8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRootBoneSimulate;                                 // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 ExcludeBones;                                      // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldFixTailBone;                                // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         FixedBone;                                         // 0x0114(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FollowBone;                                        // 0x0128(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TargetFrameRate;                                   // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideTargetFramerate;                           // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedWarmUp;                                       // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WarmUpFrames;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKawaiiPhysicsSettings                 PhysicsSettings;                                   // 0x0148(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DampingCurve;                                      // 0x0168(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingLocationCurve;                         // 0x0170(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingRotationCurve;                         // 0x0178(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StiffnessCurve;                                    // 0x0180(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RadiusCurve;                                       // 0x0188(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LimitAngleCurve;                                   // 0x0190(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     DampingCurveData;                                  // 0x0198(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WorldDampingLocationCurveData;                     // 0x0220(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WorldDampingRotationCurveData;                     // 0x02A8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     StiffnessCurveData;                                // 0x0330(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RadiusCurveData;                                   // 0x03B8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LimitAngleCurveData;                               // 0x0440(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LimitLinearCurveData;                              // 0x04C8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     GravityCurveData;                                  // 0x0550(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUpdatePhysicsSettingsInGame;                      // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyBoneLength;                                   // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneForwardAxis                              BoneForwardAxis;                                   // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlanarConstraint                             PlanarConstraint;                                  // 0x05E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetBoneTransformWhenBoneNotFound;                // 0x05E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E3[0x5];                                      // 0x05E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSphericalLimit>                SphericalLimits;                                   // 0x05E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimits;                                     // 0x05F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimits;                                      // 0x0608(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           BoneConstraintGlobalComplianceType;                // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoneConstraintIterationCountBeforeCollision;       // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneConstraintIterationCountAfterCollision;        // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAddChildDummyBoneConstraint;                  // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModifyBoneConstraint>          BoneConstraints;                                   // 0x0628(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UKawaiiPhysicsBoneConstraintsDataAsset* BoneConstraintsDataAsset;                          // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModifyBoneConstraint>          BoneConstraintsData;                               // 0x0640(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FModifyBoneConstraint>          MergedBoneConstraints;                             // 0x0650(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UKawaiiPhysicsLimitsDataAsset*          LimitsDataAsset;                                   // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSphericalLimit>                SphericalLimitsData;                               // 0x0668(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleLimit>                  CapsuleLimitsData;                                 // 0x0678(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FPlanarLimit>                   PlanarLimitsData;                                  // 0x0688(0x0010)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         TeleportDistanceThreshold;                         // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportRotationThreshold;                         // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x06A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B9[0x3];                                      // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWaveAnim;                                   // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         WaveBeginBone;                                     // 0x06C4(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WaveFrequncy;                                      // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveNum;                                           // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveDirection;                                     // 0x06E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveAmplitude;                                     // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FC[0x4];                                      // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     WaveAmplitudeCurveData;                            // 0x0700(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAllowWorldCollision;                              // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCollisionParams;                          // 0x0789(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78A[0x6];                                      // 0x078A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          CollisionChannelSettings;                          // 0x0790(0x01B0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelfComponent;                              // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_941[0x7];                                      // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 IgnoreBones;                                       // 0x0948(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreBoneNamePrefix;                              // 0x0958(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKawaiiPhysicsModifyBone>       ModifyBones;                                       // 0x0968(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalBoneLength;                                   // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_97C[0x4];                                      // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreSkelCompTransform;                              // 0x0980(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInitPhysicsSettings;                              // 0x09E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9E1[0x25F];                                    // 0x09E1(0x025F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_KawaiiPhysics) == 0x000010, "Wrong alignment on FAnimNode_KawaiiPhysics");
static_assert(sizeof(FAnimNode_KawaiiPhysics) == 0x000C40, "Wrong size on FAnimNode_KawaiiPhysics");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RootBone) == 0x0000E8, "Member 'FAnimNode_KawaiiPhysics::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bRootBoneSimulate) == 0x0000FC, "Member 'FAnimNode_KawaiiPhysics::bRootBoneSimulate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ExcludeBones) == 0x000100, "Member 'FAnimNode_KawaiiPhysics::ExcludeBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bShouldFixTailBone) == 0x000110, "Member 'FAnimNode_KawaiiPhysics::bShouldFixTailBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, FixedBone) == 0x000114, "Member 'FAnimNode_KawaiiPhysics::FixedBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, FollowBone) == 0x000128, "Member 'FAnimNode_KawaiiPhysics::FollowBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TargetFrameRate) == 0x00013C, "Member 'FAnimNode_KawaiiPhysics::TargetFrameRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, OverrideTargetFramerate) == 0x000140, "Member 'FAnimNode_KawaiiPhysics::OverrideTargetFramerate' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bNeedWarmUp) == 0x000141, "Member 'FAnimNode_KawaiiPhysics::bNeedWarmUp' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WarmUpFrames) == 0x000144, "Member 'FAnimNode_KawaiiPhysics::WarmUpFrames' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PhysicsSettings) == 0x000148, "Member 'FAnimNode_KawaiiPhysics::PhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingCurve) == 0x000168, "Member 'FAnimNode_KawaiiPhysics::DampingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingLocationCurve) == 0x000170, "Member 'FAnimNode_KawaiiPhysics::WorldDampingLocationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingRotationCurve) == 0x000178, "Member 'FAnimNode_KawaiiPhysics::WorldDampingRotationCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, StiffnessCurve) == 0x000180, "Member 'FAnimNode_KawaiiPhysics::StiffnessCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RadiusCurve) == 0x000188, "Member 'FAnimNode_KawaiiPhysics::RadiusCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleCurve) == 0x000190, "Member 'FAnimNode_KawaiiPhysics::LimitAngleCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DampingCurveData) == 0x000198, "Member 'FAnimNode_KawaiiPhysics::DampingCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingLocationCurveData) == 0x000220, "Member 'FAnimNode_KawaiiPhysics::WorldDampingLocationCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WorldDampingRotationCurveData) == 0x0002A8, "Member 'FAnimNode_KawaiiPhysics::WorldDampingRotationCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, StiffnessCurveData) == 0x000330, "Member 'FAnimNode_KawaiiPhysics::StiffnessCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, RadiusCurveData) == 0x0003B8, "Member 'FAnimNode_KawaiiPhysics::RadiusCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitAngleCurveData) == 0x000440, "Member 'FAnimNode_KawaiiPhysics::LimitAngleCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitLinearCurveData) == 0x0004C8, "Member 'FAnimNode_KawaiiPhysics::LimitLinearCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, GravityCurveData) == 0x000550, "Member 'FAnimNode_KawaiiPhysics::GravityCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bUpdatePhysicsSettingsInGame) == 0x0005D8, "Member 'FAnimNode_KawaiiPhysics::bUpdatePhysicsSettingsInGame' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, DummyBoneLength) == 0x0005DC, "Member 'FAnimNode_KawaiiPhysics::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneForwardAxis) == 0x0005E0, "Member 'FAnimNode_KawaiiPhysics::BoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarConstraint) == 0x0005E1, "Member 'FAnimNode_KawaiiPhysics::PlanarConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ResetBoneTransformWhenBoneNotFound) == 0x0005E2, "Member 'FAnimNode_KawaiiPhysics::ResetBoneTransformWhenBoneNotFound' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SphericalLimits) == 0x0005E8, "Member 'FAnimNode_KawaiiPhysics::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CapsuleLimits) == 0x0005F8, "Member 'FAnimNode_KawaiiPhysics::CapsuleLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarLimits) == 0x000608, "Member 'FAnimNode_KawaiiPhysics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintGlobalComplianceType) == 0x000618, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintGlobalComplianceType' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintIterationCountBeforeCollision) == 0x00061C, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintIterationCountBeforeCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintIterationCountAfterCollision) == 0x000620, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintIterationCountAfterCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bAutoAddChildDummyBoneConstraint) == 0x000624, "Member 'FAnimNode_KawaiiPhysics::bAutoAddChildDummyBoneConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraints) == 0x000628, "Member 'FAnimNode_KawaiiPhysics::BoneConstraints' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintsDataAsset) == 0x000638, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintsDataAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, BoneConstraintsData) == 0x000640, "Member 'FAnimNode_KawaiiPhysics::BoneConstraintsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, MergedBoneConstraints) == 0x000650, "Member 'FAnimNode_KawaiiPhysics::MergedBoneConstraints' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, LimitsDataAsset) == 0x000660, "Member 'FAnimNode_KawaiiPhysics::LimitsDataAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, SphericalLimitsData) == 0x000668, "Member 'FAnimNode_KawaiiPhysics::SphericalLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CapsuleLimitsData) == 0x000678, "Member 'FAnimNode_KawaiiPhysics::CapsuleLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PlanarLimitsData) == 0x000688, "Member 'FAnimNode_KawaiiPhysics::PlanarLimitsData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportDistanceThreshold) == 0x000698, "Member 'FAnimNode_KawaiiPhysics::TeleportDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TeleportRotationThreshold) == 0x00069C, "Member 'FAnimNode_KawaiiPhysics::TeleportRotationThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, Gravity) == 0x0006A0, "Member 'FAnimNode_KawaiiPhysics::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableWind) == 0x0006B8, "Member 'FAnimNode_KawaiiPhysics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WindScale) == 0x0006BC, "Member 'FAnimNode_KawaiiPhysics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bEnableWaveAnim) == 0x0006C0, "Member 'FAnimNode_KawaiiPhysics::bEnableWaveAnim' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveBeginBone) == 0x0006C4, "Member 'FAnimNode_KawaiiPhysics::WaveBeginBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveFrequncy) == 0x0006D8, "Member 'FAnimNode_KawaiiPhysics::WaveFrequncy' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveNum) == 0x0006DC, "Member 'FAnimNode_KawaiiPhysics::WaveNum' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveDirection) == 0x0006E0, "Member 'FAnimNode_KawaiiPhysics::WaveDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveAmplitude) == 0x0006F8, "Member 'FAnimNode_KawaiiPhysics::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, WaveAmplitudeCurveData) == 0x000700, "Member 'FAnimNode_KawaiiPhysics::WaveAmplitudeCurveData' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bAllowWorldCollision) == 0x000788, "Member 'FAnimNode_KawaiiPhysics::bAllowWorldCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bOverrideCollisionParams) == 0x000789, "Member 'FAnimNode_KawaiiPhysics::bOverrideCollisionParams' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, CollisionChannelSettings) == 0x000790, "Member 'FAnimNode_KawaiiPhysics::CollisionChannelSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bIgnoreSelfComponent) == 0x000940, "Member 'FAnimNode_KawaiiPhysics::bIgnoreSelfComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, IgnoreBones) == 0x000948, "Member 'FAnimNode_KawaiiPhysics::IgnoreBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, IgnoreBoneNamePrefix) == 0x000958, "Member 'FAnimNode_KawaiiPhysics::IgnoreBoneNamePrefix' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, ModifyBones) == 0x000968, "Member 'FAnimNode_KawaiiPhysics::ModifyBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, TotalBoneLength) == 0x000978, "Member 'FAnimNode_KawaiiPhysics::TotalBoneLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, PreSkelCompTransform) == 0x000980, "Member 'FAnimNode_KawaiiPhysics::PreSkelCompTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_KawaiiPhysics, bInitPhysicsSettings) == 0x0009E0, "Member 'FAnimNode_KawaiiPhysics::bInitPhysicsSettings' has a wrong offset!");

// ScriptStruct KawaiiPhysics.ModifyBoneConstraintData
// 0x001C (0x001C - 0x0000)
struct FModifyBoneConstraintData final
{
public:
	class FName                                   BoneName1;                                         // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName2;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCompliance;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPBDComplianceType                           ComplianceType;                                    // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModifyBoneConstraintData) == 0x000004, "Wrong alignment on FModifyBoneConstraintData");
static_assert(sizeof(FModifyBoneConstraintData) == 0x00001C, "Wrong size on FModifyBoneConstraintData");
static_assert(offsetof(FModifyBoneConstraintData, BoneName1) == 0x000000, "Member 'FModifyBoneConstraintData::BoneName1' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, BoneName2) == 0x00000C, "Member 'FModifyBoneConstraintData::BoneName2' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, bOverrideCompliance) == 0x000018, "Member 'FModifyBoneConstraintData::bOverrideCompliance' has a wrong offset!");
static_assert(offsetof(FModifyBoneConstraintData, ComplianceType) == 0x000019, "Member 'FModifyBoneConstraintData::ComplianceType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.RegexPatternBoneSet
// 0x0020 (0x0020 - 0x0000)
struct FRegexPatternBoneSet final
{
public:
	class FString                                 RegexPatternBone1;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegexPatternBone2;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegexPatternBoneSet) == 0x000008, "Wrong alignment on FRegexPatternBoneSet");
static_assert(sizeof(FRegexPatternBoneSet) == 0x000020, "Wrong size on FRegexPatternBoneSet");
static_assert(offsetof(FRegexPatternBoneSet, RegexPatternBone1) == 0x000000, "Member 'FRegexPatternBoneSet::RegexPatternBone1' has a wrong offset!");
static_assert(offsetof(FRegexPatternBoneSet, RegexPatternBone2) == 0x000010, "Member 'FRegexPatternBoneSet::RegexPatternBone2' has a wrong offset!");

// ScriptStruct KawaiiPhysics.KawaiiPhysicsReference
// 0x0000 (0x0010 - 0x0010)
struct FKawaiiPhysicsReference final : public FAnimNodeReference
{
};
static_assert(alignof(FKawaiiPhysicsReference) == 0x000008, "Wrong alignment on FKawaiiPhysicsReference");
static_assert(sizeof(FKawaiiPhysicsReference) == 0x000010, "Wrong size on FKawaiiPhysicsReference");

// ScriptStruct KawaiiPhysics.CollisionLimitDataBase
// 0x0090 (0x0090 - 0x0000)
struct FCollisionLimitDataBase
{
public:
	class FName                                   DrivingBoneName;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0060(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollisionLimitDataBase) == 0x000010, "Wrong alignment on FCollisionLimitDataBase");
static_assert(sizeof(FCollisionLimitDataBase) == 0x000090, "Wrong size on FCollisionLimitDataBase");
static_assert(offsetof(FCollisionLimitDataBase, DrivingBoneName) == 0x000000, "Member 'FCollisionLimitDataBase::DrivingBoneName' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, OffsetLocation) == 0x000010, "Member 'FCollisionLimitDataBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, OffsetRotation) == 0x000028, "Member 'FCollisionLimitDataBase::OffsetRotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Location) == 0x000040, "Member 'FCollisionLimitDataBase::Location' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Rotation) == 0x000060, "Member 'FCollisionLimitDataBase::Rotation' has a wrong offset!");
static_assert(offsetof(FCollisionLimitDataBase, Guid) == 0x000080, "Member 'FCollisionLimitDataBase::Guid' has a wrong offset!");

// ScriptStruct KawaiiPhysics.SphericalLimitData
// 0x0010 (0x00A0 - 0x0090)
struct FSphericalLimitData final : public FCollisionLimitDataBase
{
public:
	float                                         Radius;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0xB];                                       // 0x0095(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalLimitData) == 0x000010, "Wrong alignment on FSphericalLimitData");
static_assert(sizeof(FSphericalLimitData) == 0x0000A0, "Wrong size on FSphericalLimitData");
static_assert(offsetof(FSphericalLimitData, Radius) == 0x000090, "Member 'FSphericalLimitData::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalLimitData, LimitType) == 0x000094, "Member 'FSphericalLimitData::LimitType' has a wrong offset!");

// ScriptStruct KawaiiPhysics.CapsuleLimitData
// 0x0010 (0x00A0 - 0x0090)
struct FCapsuleLimitData final : public FCollisionLimitDataBase
{
public:
	float                                         Radius;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCapsuleLimitData) == 0x000010, "Wrong alignment on FCapsuleLimitData");
static_assert(sizeof(FCapsuleLimitData) == 0x0000A0, "Wrong size on FCapsuleLimitData");
static_assert(offsetof(FCapsuleLimitData, Radius) == 0x000090, "Member 'FCapsuleLimitData::Radius' has a wrong offset!");
static_assert(offsetof(FCapsuleLimitData, Length) == 0x000094, "Member 'FCapsuleLimitData::Length' has a wrong offset!");

// ScriptStruct KawaiiPhysics.PlanarLimitData
// 0x0020 (0x00B0 - 0x0090)
struct FPlanarLimitData final : public FCollisionLimitDataBase
{
public:
	struct FPlane                                 Plane;                                             // 0x0090(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlanarLimitData) == 0x000010, "Wrong alignment on FPlanarLimitData");
static_assert(sizeof(FPlanarLimitData) == 0x0000B0, "Wrong size on FPlanarLimitData");
static_assert(offsetof(FPlanarLimitData, Plane) == 0x000090, "Member 'FPlanarLimitData::Plane' has a wrong offset!");

}

