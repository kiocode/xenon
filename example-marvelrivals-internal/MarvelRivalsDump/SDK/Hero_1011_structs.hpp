#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1011

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Hero_1011.EAbilityState_101198
// NumValues: 0x0003
enum class EAbilityState_101198 : uint8
{
	Idle                                     = 0,
	Run                                      = 1,
	EAbilityState_MAX                        = 2,
};

// Enum Hero_1011.CLIMBSTATE
// NumValues: 0x0004
enum class ECLIMBSTATE : uint8
{
	NONE                                     = 0,
	IDLE                                     = 1,
	HANGING                                  = 2,
	CLIMBSTATE_MAX                           = 3,
};

// ScriptStruct Hero_1011.HulkClimbParam
// 0x0010 (0x0010 - 0x0000)
struct FHulkClimbParam final
{
public:
	float                                         DistanceToWall;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingAngle;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingHorizontalAngle;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraArmLengthInClimb;                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHulkClimbParam) == 0x000004, "Wrong alignment on FHulkClimbParam");
static_assert(sizeof(FHulkClimbParam) == 0x000010, "Wrong size on FHulkClimbParam");
static_assert(offsetof(FHulkClimbParam, DistanceToWall) == 0x000000, "Member 'FHulkClimbParam::DistanceToWall' has a wrong offset!");
static_assert(offsetof(FHulkClimbParam, ClimbingAngle) == 0x000004, "Member 'FHulkClimbParam::ClimbingAngle' has a wrong offset!");
static_assert(offsetof(FHulkClimbParam, ClimbingHorizontalAngle) == 0x000008, "Member 'FHulkClimbParam::ClimbingHorizontalAngle' has a wrong offset!");
static_assert(offsetof(FHulkClimbParam, CameraArmLengthInClimb) == 0x00000C, "Member 'FHulkClimbParam::CameraArmLengthInClimb' has a wrong offset!");

// ScriptStruct Hero_1011.EnergyData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FEnergyData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnergyData) == 0x000004, "Wrong alignment on FEnergyData");
static_assert(sizeof(FEnergyData) == 0x000008, "Wrong size on FEnergyData");

// ScriptStruct Hero_1011.HulkJumpParam
// 0x0078 (0x0078 - 0x0000)
struct FHulkJumpParam final
{
public:
	int32                                         ShiftJumpAbilityID;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimeOnWall;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimeOnFloor;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchMin;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchMax;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchOffset;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchOffsetOnSlope;                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpUpGravityScale;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownGravityScale;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBlockGravityScale;                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHitWallDownGravityScale;                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedPredictLand;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinLandTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLandPermitHeight;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLandHoldingTime;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialJumpLandHoldingTime;                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           JumpLandAttackTag;                                 // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpRecoveryAnimSeconds;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           JumpRecoveryEndTag;                                // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClimbAbilityID;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawJumpDebugInfo;                                // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerDropClientMovePingThreshold;                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerDropClientMoveMinInterval;                   // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerDropClientMoveMaxInterval;                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckWallValidWhileClimbing;                      // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHulkJumpParam) == 0x000004, "Wrong alignment on FHulkJumpParam");
static_assert(sizeof(FHulkJumpParam) == 0x000078, "Wrong size on FHulkJumpParam");
static_assert(offsetof(FHulkJumpParam, ShiftJumpAbilityID) == 0x000000, "Member 'FHulkJumpParam::ShiftJumpAbilityID' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpTimeOnWall) == 0x000004, "Member 'FHulkJumpParam::JumpTimeOnWall' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpTimeOnFloor) == 0x000008, "Member 'FHulkJumpParam::JumpTimeOnFloor' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpPitchMin) == 0x00000C, "Member 'FHulkJumpParam::JumpPitchMin' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpPitchMax) == 0x000010, "Member 'FHulkJumpParam::JumpPitchMax' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpPitchOffset) == 0x000014, "Member 'FHulkJumpParam::JumpPitchOffset' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpPitchOffsetOnSlope) == 0x000018, "Member 'FHulkJumpParam::JumpPitchOffsetOnSlope' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpUpGravityScale) == 0x00001C, "Member 'FHulkJumpParam::JumpUpGravityScale' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpDownGravityScale) == 0x000020, "Member 'FHulkJumpParam::JumpDownGravityScale' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpBlockGravityScale) == 0x000024, "Member 'FHulkJumpParam::JumpBlockGravityScale' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpHitWallDownGravityScale) == 0x000028, "Member 'FHulkJumpParam::JumpHitWallDownGravityScale' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, MaxAcceleration) == 0x00002C, "Member 'FHulkJumpParam::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, bNeedPredictLand) == 0x000030, "Member 'FHulkJumpParam::bNeedPredictLand' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, MinLandTime) == 0x000034, "Member 'FHulkJumpParam::MinLandTime' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpLandPermitHeight) == 0x000038, "Member 'FHulkJumpParam::JumpLandPermitHeight' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpLandHoldingTime) == 0x00003C, "Member 'FHulkJumpParam::JumpLandHoldingTime' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, SpecialJumpLandHoldingTime) == 0x000040, "Member 'FHulkJumpParam::SpecialJumpLandHoldingTime' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpLandAttackTag) == 0x000044, "Member 'FHulkJumpParam::JumpLandAttackTag' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpRecoveryAnimSeconds) == 0x000050, "Member 'FHulkJumpParam::JumpRecoveryAnimSeconds' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, JumpRecoveryEndTag) == 0x000054, "Member 'FHulkJumpParam::JumpRecoveryEndTag' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, ClimbAbilityID) == 0x000060, "Member 'FHulkJumpParam::ClimbAbilityID' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, bDrawJumpDebugInfo) == 0x000064, "Member 'FHulkJumpParam::bDrawJumpDebugInfo' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, ServerDropClientMovePingThreshold) == 0x000068, "Member 'FHulkJumpParam::ServerDropClientMovePingThreshold' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, ServerDropClientMoveMinInterval) == 0x00006C, "Member 'FHulkJumpParam::ServerDropClientMoveMinInterval' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, ServerDropClientMoveMaxInterval) == 0x000070, "Member 'FHulkJumpParam::ServerDropClientMoveMaxInterval' has a wrong offset!");
static_assert(offsetof(FHulkJumpParam, bCheckWallValidWhileClimbing) == 0x000074, "Member 'FHulkJumpParam::bCheckWallValidWhileClimbing' has a wrong offset!");

}

