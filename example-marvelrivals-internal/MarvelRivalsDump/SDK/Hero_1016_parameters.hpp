#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1016

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Hero_1016.EffectiveComponent_Loki.GetConfig_101651
// 0x0008 (0x0008 - 0x0000)
struct EffectiveComponent_Loki_GetConfig_101651 final
{
public:
	class UConfig_101651*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectiveComponent_Loki_GetConfig_101651) == 0x000008, "Wrong alignment on EffectiveComponent_Loki_GetConfig_101651");
static_assert(sizeof(EffectiveComponent_Loki_GetConfig_101651) == 0x000008, "Wrong size on EffectiveComponent_Loki_GetConfig_101651");
static_assert(offsetof(EffectiveComponent_Loki_GetConfig_101651, ReturnValue) == 0x000000, "Member 'EffectiveComponent_Loki_GetConfig_101651::ReturnValue' has a wrong offset!");

// Function Hero_1016.EffectiveComponent_10161101.JudgeBackstabAndSetEffect
// 0x0010 (0x0010 - 0x0000)
struct EffectiveComponent_10161101_JudgeBackstabAndSetEffect final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectiveComponent_10161101_JudgeBackstabAndSetEffect) == 0x000008, "Wrong alignment on EffectiveComponent_10161101_JudgeBackstabAndSetEffect");
static_assert(sizeof(EffectiveComponent_10161101_JudgeBackstabAndSetEffect) == 0x000010, "Wrong size on EffectiveComponent_10161101_JudgeBackstabAndSetEffect");
static_assert(offsetof(EffectiveComponent_10161101_JudgeBackstabAndSetEffect, HitResults) == 0x000000, "Member 'EffectiveComponent_10161101_JudgeBackstabAndSetEffect::HitResults' has a wrong offset!");

// Function Hero_1016.Projectile_Loki.IsPhantomOwned
// 0x0001 (0x0001 - 0x0000)
struct Projectile_Loki_IsPhantomOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Loki_IsPhantomOwned) == 0x000001, "Wrong alignment on Projectile_Loki_IsPhantomOwned");
static_assert(sizeof(Projectile_Loki_IsPhantomOwned) == 0x000001, "Wrong size on Projectile_Loki_IsPhantomOwned");
static_assert(offsetof(Projectile_Loki_IsPhantomOwned, ReturnValue) == 0x000000, "Member 'Projectile_Loki_IsPhantomOwned::ReturnValue' has a wrong offset!");

// Function Hero_1016.Projectile_Loki.SetPhantomOwned
// 0x0001 (0x0001 - 0x0000)
struct Projectile_Loki_SetPhantomOwned final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Loki_SetPhantomOwned) == 0x000001, "Wrong alignment on Projectile_Loki_SetPhantomOwned");
static_assert(sizeof(Projectile_Loki_SetPhantomOwned) == 0x000001, "Wrong size on Projectile_Loki_SetPhantomOwned");
static_assert(offsetof(Projectile_Loki_SetPhantomOwned, bOwned) == 0x000000, "Member 'Projectile_Loki_SetPhantomOwned::bOwned' has a wrong offset!");

// Function Hero_1016.Summoned_10163101.GetOwningComponent
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10163101_GetOwningComponent final
{
public:
	class USummonedComp_10163101*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10163101_GetOwningComponent) == 0x000008, "Wrong alignment on Summoned_10163101_GetOwningComponent");
static_assert(sizeof(Summoned_10163101_GetOwningComponent) == 0x000008, "Wrong size on Summoned_10163101_GetOwningComponent");
static_assert(offsetof(Summoned_10163101_GetOwningComponent, ReturnValue) == 0x000000, "Member 'Summoned_10163101_GetOwningComponent::ReturnValue' has a wrong offset!");

// Function Hero_1016.SummonedComp_10163101.CalSurroundSphereCenters
// 0x0030 (0x0030 - 0x0000)
struct SummonedComp_10163101_CalSurroundSphereCenters final
{
public:
	struct FVector                                CenterPoint;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurroundNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurroundRadius;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10163101_CalSurroundSphereCenters) == 0x000008, "Wrong alignment on SummonedComp_10163101_CalSurroundSphereCenters");
static_assert(sizeof(SummonedComp_10163101_CalSurroundSphereCenters) == 0x000030, "Wrong size on SummonedComp_10163101_CalSurroundSphereCenters");
static_assert(offsetof(SummonedComp_10163101_CalSurroundSphereCenters, CenterPoint) == 0x000000, "Member 'SummonedComp_10163101_CalSurroundSphereCenters::CenterPoint' has a wrong offset!");
static_assert(offsetof(SummonedComp_10163101_CalSurroundSphereCenters, SurroundNum) == 0x000018, "Member 'SummonedComp_10163101_CalSurroundSphereCenters::SurroundNum' has a wrong offset!");
static_assert(offsetof(SummonedComp_10163101_CalSurroundSphereCenters, SurroundRadius) == 0x00001C, "Member 'SummonedComp_10163101_CalSurroundSphereCenters::SurroundRadius' has a wrong offset!");
static_assert(offsetof(SummonedComp_10163101_CalSurroundSphereCenters, ReturnValue) == 0x000020, "Member 'SummonedComp_10163101_CalSurroundSphereCenters::ReturnValue' has a wrong offset!");

// Function Hero_1016.SummonedComp_10163101.GetOwnerAbilityConfig
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10163101_GetOwnerAbilityConfig final
{
public:
	class UConfig_101631*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10163101_GetOwnerAbilityConfig) == 0x000008, "Wrong alignment on SummonedComp_10163101_GetOwnerAbilityConfig");
static_assert(sizeof(SummonedComp_10163101_GetOwnerAbilityConfig) == 0x000008, "Wrong size on SummonedComp_10163101_GetOwnerAbilityConfig");
static_assert(offsetof(SummonedComp_10163101_GetOwnerAbilityConfig, ReturnValue) == 0x000000, "Member 'SummonedComp_10163101_GetOwnerAbilityConfig::ReturnValue' has a wrong offset!");

// Function Hero_1016.SummonedComp_10163101.GetOwnerSummoned
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10163101_GetOwnerSummoned final
{
public:
	class ASummoned_10163101*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10163101_GetOwnerSummoned) == 0x000008, "Wrong alignment on SummonedComp_10163101_GetOwnerSummoned");
static_assert(sizeof(SummonedComp_10163101_GetOwnerSummoned) == 0x000008, "Wrong size on SummonedComp_10163101_GetOwnerSummoned");
static_assert(offsetof(SummonedComp_10163101_GetOwnerSummoned, ReturnValue) == 0x000000, "Member 'SummonedComp_10163101_GetOwnerSummoned::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101631.GetInstigatorAbility
// 0x0008 (0x0008 - 0x0000)
struct Ability_101631_GetInstigatorAbility final
{
public:
	class UAbility_101631*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101631_GetInstigatorAbility) == 0x000008, "Wrong alignment on Ability_101631_GetInstigatorAbility");
static_assert(sizeof(Ability_101631_GetInstigatorAbility) == 0x000008, "Wrong size on Ability_101631_GetInstigatorAbility");
static_assert(offsetof(Ability_101631_GetInstigatorAbility, ReturnValue) == 0x000000, "Member 'Ability_101631_GetInstigatorAbility::ReturnValue' has a wrong offset!");

// Function Hero_1016.Cue_Buff_10164101.SpawnDisappearFX
// 0x0008 (0x0008 - 0x0000)
struct Cue_Buff_10164101_SpawnDisappearFX final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Buff_10164101_SpawnDisappearFX) == 0x000008, "Wrong alignment on Cue_Buff_10164101_SpawnDisappearFX");
static_assert(sizeof(Cue_Buff_10164101_SpawnDisappearFX) == 0x000008, "Wrong size on Cue_Buff_10164101_SpawnDisappearFX");
static_assert(offsetof(Cue_Buff_10164101_SpawnDisappearFX, Character) == 0x000000, "Member 'Cue_Buff_10164101_SpawnDisappearFX::Character' has a wrong offset!");

// Function Hero_1016.Ability_101651.GetOriginCharacterAimedLocation
// 0x0018 (0x0018 - 0x0000)
struct Ability_101651_GetOriginCharacterAimedLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101651_GetOriginCharacterAimedLocation) == 0x000008, "Wrong alignment on Ability_101651_GetOriginCharacterAimedLocation");
static_assert(sizeof(Ability_101651_GetOriginCharacterAimedLocation) == 0x000018, "Wrong size on Ability_101651_GetOriginCharacterAimedLocation");
static_assert(offsetof(Ability_101651_GetOriginCharacterAimedLocation, ReturnValue) == 0x000000, "Member 'Ability_101651_GetOriginCharacterAimedLocation::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101651.SwitchTimelineTask
// 0x0010 (0x0010 - 0x0000)
struct Ability_101651_SwitchTimelineTask final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithAbilityEnd;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101651_SwitchTimelineTask) == 0x000004, "Wrong alignment on Ability_101651_SwitchTimelineTask");
static_assert(sizeof(Ability_101651_SwitchTimelineTask) == 0x000010, "Wrong size on Ability_101651_SwitchTimelineTask");
static_assert(offsetof(Ability_101651_SwitchTimelineTask, SectionName) == 0x000000, "Member 'Ability_101651_SwitchTimelineTask::SectionName' has a wrong offset!");
static_assert(offsetof(Ability_101651_SwitchTimelineTask, bWithAbilityEnd) == 0x00000C, "Member 'Ability_101651_SwitchTimelineTask::bWithAbilityEnd' has a wrong offset!");

// Function Hero_1016.SummonedController_10165101.GetOriginCharacterAimedLocation
// 0x0018 (0x0018 - 0x0000)
struct SummonedController_10165101_GetOriginCharacterAimedLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedController_10165101_GetOriginCharacterAimedLocation) == 0x000008, "Wrong alignment on SummonedController_10165101_GetOriginCharacterAimedLocation");
static_assert(sizeof(SummonedController_10165101_GetOriginCharacterAimedLocation) == 0x000018, "Wrong size on SummonedController_10165101_GetOriginCharacterAimedLocation");
static_assert(offsetof(SummonedController_10165101_GetOriginCharacterAimedLocation, ReturnValue) == 0x000000, "Member 'SummonedController_10165101_GetOriginCharacterAimedLocation::ReturnValue' has a wrong offset!");

// Function Hero_1016.Summoned_10165101.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10165101_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10165101_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on Summoned_10165101_OnPlayerViewSideChanged");
static_assert(sizeof(Summoned_10165101_OnPlayerViewSideChanged) == 0x000001, "Wrong size on Summoned_10165101_OnPlayerViewSideChanged");
static_assert(offsetof(Summoned_10165101_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'Summoned_10165101_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1016.Summoned_10165101.GetHeroRole
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10165101_GetHeroRole final
{
public:
	EHeroRole                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10165101_GetHeroRole) == 0x000001, "Wrong alignment on Summoned_10165101_GetHeroRole");
static_assert(sizeof(Summoned_10165101_GetHeroRole) == 0x000001, "Wrong size on Summoned_10165101_GetHeroRole");
static_assert(offsetof(Summoned_10165101_GetHeroRole, ReturnValue) == 0x000000, "Member 'Summoned_10165101_GetHeroRole::ReturnValue' has a wrong offset!");

// Function Hero_1016.SummonedComp_V2_10165101.OnInstigatorActivateAbility
// 0x0004 (0x0004 - 0x0000)
struct SummonedComp_V2_10165101_OnInstigatorActivateAbility final
{
public:
	int32                                         InAbilityId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_V2_10165101_OnInstigatorActivateAbility) == 0x000004, "Wrong alignment on SummonedComp_V2_10165101_OnInstigatorActivateAbility");
static_assert(sizeof(SummonedComp_V2_10165101_OnInstigatorActivateAbility) == 0x000004, "Wrong size on SummonedComp_V2_10165101_OnInstigatorActivateAbility");
static_assert(offsetof(SummonedComp_V2_10165101_OnInstigatorActivateAbility, InAbilityId) == 0x000000, "Member 'SummonedComp_V2_10165101_OnInstigatorActivateAbility::InAbilityId' has a wrong offset!");

// Function Hero_1016.SummonedComp_V2_10165101.OnInstigatorEndAbility
// 0x0004 (0x0004 - 0x0000)
struct SummonedComp_V2_10165101_OnInstigatorEndAbility final
{
public:
	int32                                         InAbilityId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_V2_10165101_OnInstigatorEndAbility) == 0x000004, "Wrong alignment on SummonedComp_V2_10165101_OnInstigatorEndAbility");
static_assert(sizeof(SummonedComp_V2_10165101_OnInstigatorEndAbility) == 0x000004, "Wrong size on SummonedComp_V2_10165101_OnInstigatorEndAbility");
static_assert(offsetof(SummonedComp_V2_10165101_OnInstigatorEndAbility, InAbilityId) == 0x000000, "Member 'SummonedComp_V2_10165101_OnInstigatorEndAbility::InAbilityId' has a wrong offset!");

// Function Hero_1016.Cue_TraceActor_10165101.OnFloatChange
// 0x001C (0x001C - 0x0000)
struct Cue_TraceActor_10165101_OnFloatChange final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_TraceActor_10165101_OnFloatChange) == 0x000004, "Wrong alignment on Cue_TraceActor_10165101_OnFloatChange");
static_assert(sizeof(Cue_TraceActor_10165101_OnFloatChange) == 0x00001C, "Wrong size on Cue_TraceActor_10165101_OnFloatChange");
static_assert(offsetof(Cue_TraceActor_10165101_OnFloatChange, TrackName) == 0x000000, "Member 'Cue_TraceActor_10165101_OnFloatChange::TrackName' has a wrong offset!");
static_assert(offsetof(Cue_TraceActor_10165101_OnFloatChange, PropertyName) == 0x00000C, "Member 'Cue_TraceActor_10165101_OnFloatChange::PropertyName' has a wrong offset!");
static_assert(offsetof(Cue_TraceActor_10165101_OnFloatChange, OutValue) == 0x000018, "Member 'Cue_TraceActor_10165101_OnFloatChange::OutValue' has a wrong offset!");

// Function Hero_1016.Summoned_10165102.NetMulticastCharacterOverlap
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10165102_NetMulticastCharacterOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10165102_NetMulticastCharacterOverlap) == 0x000008, "Wrong alignment on Summoned_10165102_NetMulticastCharacterOverlap");
static_assert(sizeof(Summoned_10165102_NetMulticastCharacterOverlap) == 0x000008, "Wrong size on Summoned_10165102_NetMulticastCharacterOverlap");
static_assert(offsetof(Summoned_10165102_NetMulticastCharacterOverlap, InActor) == 0x000000, "Member 'Summoned_10165102_NetMulticastCharacterOverlap::InActor' has a wrong offset!");

// Function Hero_1016.Summoned_10165102.OnValidCharacterOverlap
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10165102_OnValidCharacterOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10165102_OnValidCharacterOverlap) == 0x000008, "Wrong alignment on Summoned_10165102_OnValidCharacterOverlap");
static_assert(sizeof(Summoned_10165102_OnValidCharacterOverlap) == 0x000008, "Wrong size on Summoned_10165102_OnValidCharacterOverlap");
static_assert(offsetof(Summoned_10165102_OnValidCharacterOverlap, InActor) == 0x000000, "Member 'Summoned_10165102_OnValidCharacterOverlap::InActor' has a wrong offset!");

// Function Hero_1016.Cue_Summoner_Loop_10165101.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged");
static_assert(sizeof(Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged) == 0x000001, "Wrong size on Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged");
static_assert(offsetof(Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'Cue_Summoner_Loop_10165101_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1016.Cue_Summoner_Loop_10165101.SetTeammateMaterialParams
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10165101_SetTeammateMaterialParams final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10165101_SetTeammateMaterialParams) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10165101_SetTeammateMaterialParams");
static_assert(sizeof(Cue_Summoner_Loop_10165101_SetTeammateMaterialParams) == 0x000001, "Wrong size on Cue_Summoner_Loop_10165101_SetTeammateMaterialParams");
static_assert(offsetof(Cue_Summoner_Loop_10165101_SetTeammateMaterialParams, bSet) == 0x000000, "Member 'Cue_Summoner_Loop_10165101_SetTeammateMaterialParams::bSet' has a wrong offset!");

// Function Hero_1016.Config_101651.GetLokiPhantomConfig
// 0x0008 (0x0008 - 0x0000)
struct Config_101651_GetLokiPhantomConfig final
{
public:
	class UConfig_101651*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_101651_GetLokiPhantomConfig) == 0x000008, "Wrong alignment on Config_101651_GetLokiPhantomConfig");
static_assert(sizeof(Config_101651_GetLokiPhantomConfig) == 0x000008, "Wrong size on Config_101651_GetLokiPhantomConfig");
static_assert(offsetof(Config_101651_GetLokiPhantomConfig, ReturnValue) == 0x000000, "Member 'Config_101651_GetLokiPhantomConfig::ReturnValue' has a wrong offset!");

// Function Hero_1016.Scope_Loki.IsPhantomOwned
// 0x0001 (0x0001 - 0x0000)
struct Scope_Loki_IsPhantomOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_Loki_IsPhantomOwned) == 0x000001, "Wrong alignment on Scope_Loki_IsPhantomOwned");
static_assert(sizeof(Scope_Loki_IsPhantomOwned) == 0x000001, "Wrong size on Scope_Loki_IsPhantomOwned");
static_assert(offsetof(Scope_Loki_IsPhantomOwned, ReturnValue) == 0x000000, "Member 'Scope_Loki_IsPhantomOwned::ReturnValue' has a wrong offset!");

// Function Hero_1016.Scope_Loki.SetPhantomOwned
// 0x0001 (0x0001 - 0x0000)
struct Scope_Loki_SetPhantomOwned final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scope_Loki_SetPhantomOwned) == 0x000001, "Wrong alignment on Scope_Loki_SetPhantomOwned");
static_assert(sizeof(Scope_Loki_SetPhantomOwned) == 0x000001, "Wrong size on Scope_Loki_SetPhantomOwned");
static_assert(offsetof(Scope_Loki_SetPhantomOwned, bOwned) == 0x000000, "Member 'Scope_Loki_SetPhantomOwned::bOwned' has a wrong offset!");

// Function Hero_1016.LokiPhantomStatics.GetLokiPhantoms
// 0x0018 (0x0018 - 0x0000)
struct LokiPhantomStatics_GetLokiPhantoms final
{
public:
	class AMarvelBaseCharacter*                   InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LokiPhantomStatics_GetLokiPhantoms) == 0x000008, "Wrong alignment on LokiPhantomStatics_GetLokiPhantoms");
static_assert(sizeof(LokiPhantomStatics_GetLokiPhantoms) == 0x000018, "Wrong size on LokiPhantomStatics_GetLokiPhantoms");
static_assert(offsetof(LokiPhantomStatics_GetLokiPhantoms, InSource) == 0x000000, "Member 'LokiPhantomStatics_GetLokiPhantoms::InSource' has a wrong offset!");
static_assert(offsetof(LokiPhantomStatics_GetLokiPhantoms, ReturnValue) == 0x000008, "Member 'LokiPhantomStatics_GetLokiPhantoms::ReturnValue' has a wrong offset!");

// Function Hero_1016.LokiPhantomManagementComponent.GetOriginCharacterAimedLocation
// 0x0018 (0x0018 - 0x0000)
struct LokiPhantomManagementComponent_GetOriginCharacterAimedLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LokiPhantomManagementComponent_GetOriginCharacterAimedLocation) == 0x000008, "Wrong alignment on LokiPhantomManagementComponent_GetOriginCharacterAimedLocation");
static_assert(sizeof(LokiPhantomManagementComponent_GetOriginCharacterAimedLocation) == 0x000018, "Wrong size on LokiPhantomManagementComponent_GetOriginCharacterAimedLocation");
static_assert(offsetof(LokiPhantomManagementComponent_GetOriginCharacterAimedLocation, ReturnValue) == 0x000000, "Member 'LokiPhantomManagementComponent_GetOriginCharacterAimedLocation::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101652.AnglesToPoint
// 0x0080 (0x0080 - 0x0000)
struct Ability_101652_AnglesToPoint final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101652_AnglesToPoint) == 0x000010, "Wrong alignment on Ability_101652_AnglesToPoint");
static_assert(sizeof(Ability_101652_AnglesToPoint) == 0x000080, "Wrong size on Ability_101652_AnglesToPoint");
static_assert(offsetof(Ability_101652_AnglesToPoint, Transform) == 0x000000, "Member 'Ability_101652_AnglesToPoint::Transform' has a wrong offset!");
static_assert(offsetof(Ability_101652_AnglesToPoint, Point) == 0x000060, "Member 'Ability_101652_AnglesToPoint::Point' has a wrong offset!");
static_assert(offsetof(Ability_101652_AnglesToPoint, ReturnValue) == 0x000078, "Member 'Ability_101652_AnglesToPoint::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101652.GetProperPhantoms
// 0x0008 (0x0008 - 0x0000)
struct Ability_101652_GetProperPhantoms final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101652_GetProperPhantoms) == 0x000008, "Wrong alignment on Ability_101652_GetProperPhantoms");
static_assert(sizeof(Ability_101652_GetProperPhantoms) == 0x000008, "Wrong size on Ability_101652_GetProperPhantoms");
static_assert(offsetof(Ability_101652_GetProperPhantoms, ReturnValue) == 0x000000, "Member 'Ability_101652_GetProperPhantoms::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101661.AddActingCharacterEnergyValue
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_AddActingCharacterEnergyValue final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_AddActingCharacterEnergyValue) == 0x000008, "Wrong alignment on Ability_101661_AddActingCharacterEnergyValue");
static_assert(sizeof(Ability_101661_AddActingCharacterEnergyValue) == 0x000008, "Wrong size on Ability_101661_AddActingCharacterEnergyValue");
static_assert(offsetof(Ability_101661_AddActingCharacterEnergyValue, SourceActor) == 0x000000, "Member 'Ability_101661_AddActingCharacterEnergyValue::SourceActor' has a wrong offset!");

// Function Hero_1016.Ability_101661.AdjustPawnTransform
// 0x00D0 (0x00D0 - 0x0000)
struct Ability_101661_AdjustPawnTransform final
{
public:
	const class APawn*                            NewPawn;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            OldPawn;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OldTransform;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0070(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_AdjustPawnTransform) == 0x000010, "Wrong alignment on Ability_101661_AdjustPawnTransform");
static_assert(sizeof(Ability_101661_AdjustPawnTransform) == 0x0000D0, "Wrong size on Ability_101661_AdjustPawnTransform");
static_assert(offsetof(Ability_101661_AdjustPawnTransform, NewPawn) == 0x000000, "Member 'Ability_101661_AdjustPawnTransform::NewPawn' has a wrong offset!");
static_assert(offsetof(Ability_101661_AdjustPawnTransform, OldPawn) == 0x000008, "Member 'Ability_101661_AdjustPawnTransform::OldPawn' has a wrong offset!");
static_assert(offsetof(Ability_101661_AdjustPawnTransform, OldTransform) == 0x000010, "Member 'Ability_101661_AdjustPawnTransform::OldTransform' has a wrong offset!");
static_assert(offsetof(Ability_101661_AdjustPawnTransform, ReturnValue) == 0x000070, "Member 'Ability_101661_AdjustPawnTransform::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101661.CheckViewportTarget
// 0x0018 (0x0018 - 0x0000)
struct Ability_101661_CheckViewportTarget final
{
public:
	const class AMarvelBaseCharacter*             SourceCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InTarget;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101661_CheckViewportTarget) == 0x000008, "Wrong alignment on Ability_101661_CheckViewportTarget");
static_assert(sizeof(Ability_101661_CheckViewportTarget) == 0x000018, "Wrong size on Ability_101661_CheckViewportTarget");
static_assert(offsetof(Ability_101661_CheckViewportTarget, SourceCharacter) == 0x000000, "Member 'Ability_101661_CheckViewportTarget::SourceCharacter' has a wrong offset!");
static_assert(offsetof(Ability_101661_CheckViewportTarget, InTarget) == 0x000008, "Member 'Ability_101661_CheckViewportTarget::InTarget' has a wrong offset!");
static_assert(offsetof(Ability_101661_CheckViewportTarget, ReturnValue) == 0x000010, "Member 'Ability_101661_CheckViewportTarget::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101661.On104061JumpAgain
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_On104061JumpAgain final
{
public:
	class UMarvelGameplayAbility*                 InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_On104061JumpAgain) == 0x000008, "Wrong alignment on Ability_101661_On104061JumpAgain");
static_assert(sizeof(Ability_101661_On104061JumpAgain) == 0x000008, "Wrong size on Ability_101661_On104061JumpAgain");
static_assert(offsetof(Ability_101661_On104061JumpAgain, InAbility) == 0x000000, "Member 'Ability_101661_On104061JumpAgain::InAbility' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnActingCharacterAbilityFinishedInit
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnActingCharacterAbilityFinishedInit final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnActingCharacterAbilityFinishedInit) == 0x000008, "Wrong alignment on Ability_101661_OnActingCharacterAbilityFinishedInit");
static_assert(sizeof(Ability_101661_OnActingCharacterAbilityFinishedInit) == 0x000008, "Wrong size on Ability_101661_OnActingCharacterAbilityFinishedInit");
static_assert(offsetof(Ability_101661_OnActingCharacterAbilityFinishedInit, SourceActor) == 0x000000, "Member 'Ability_101661_OnActingCharacterAbilityFinishedInit::SourceActor' has a wrong offset!");

// DelegateFunction Hero_1016.Ability_101661.OnActingCharacterKillActor__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnActingCharacterKillActor__DelegateSignature final
{
public:
	class AActor*                                 KillTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnActingCharacterKillActor__DelegateSignature) == 0x000008, "Wrong alignment on Ability_101661_OnActingCharacterKillActor__DelegateSignature");
static_assert(sizeof(Ability_101661_OnActingCharacterKillActor__DelegateSignature) == 0x000008, "Wrong size on Ability_101661_OnActingCharacterKillActor__DelegateSignature");
static_assert(offsetof(Ability_101661_OnActingCharacterKillActor__DelegateSignature, KillTarget) == 0x000000, "Member 'Ability_101661_OnActingCharacterKillActor__DelegateSignature::KillTarget' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnActingCharacterTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Ability_101661_OnActingCharacterTagUpdated final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101661_OnActingCharacterTagUpdated) == 0x000004, "Wrong alignment on Ability_101661_OnActingCharacterTagUpdated");
static_assert(sizeof(Ability_101661_OnActingCharacterTagUpdated) == 0x000010, "Wrong size on Ability_101661_OnActingCharacterTagUpdated");
static_assert(offsetof(Ability_101661_OnActingCharacterTagUpdated, InTag) == 0x000000, "Member 'Ability_101661_OnActingCharacterTagUpdated::InTag' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnActingCharacterTagUpdated, bInExists) == 0x00000C, "Member 'Ability_101661_OnActingCharacterTagUpdated::bInExists' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnActorDeath
// 0x0030 (0x0030 - 0x0000)
struct Ability_101661_OnActorDeath final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101661_OnActorDeath) == 0x000008, "Wrong alignment on Ability_101661_OnActorDeath");
static_assert(sizeof(Ability_101661_OnActorDeath) == 0x000030, "Wrong size on Ability_101661_OnActorDeath");
static_assert(offsetof(Ability_101661_OnActorDeath, Killer) == 0x000000, "Member 'Ability_101661_OnActorDeath::Killer' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnActorDeath, Target) == 0x000008, "Member 'Ability_101661_OnActorDeath::Target' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnActorDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_101661_OnActorDeath::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnActorDeath, ExtraData) == 0x000028, "Member 'Ability_101661_OnActorDeath::ExtraData' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnDisguiseEffectRemoved
// 0x0028 (0x0028 - 0x0000)
struct Ability_101661_OnDisguiseEffectRemoved final
{
public:
	struct FGameplayEffectRemovalInfo             InGameplayEffectRemovalInfo;                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnDisguiseEffectRemoved) == 0x000008, "Wrong alignment on Ability_101661_OnDisguiseEffectRemoved");
static_assert(sizeof(Ability_101661_OnDisguiseEffectRemoved) == 0x000028, "Wrong size on Ability_101661_OnDisguiseEffectRemoved");
static_assert(offsetof(Ability_101661_OnDisguiseEffectRemoved, InGameplayEffectRemovalInfo) == 0x000000, "Member 'Ability_101661_OnDisguiseEffectRemoved::InGameplayEffectRemovalInfo' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnDisguiseInterruptedTagEvent
// 0x0290 (0x0290 - 0x0000)
struct Ability_101661_OnDisguiseInterruptedTagEvent final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x0290)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnDisguiseInterruptedTagEvent) == 0x000008, "Wrong alignment on Ability_101661_OnDisguiseInterruptedTagEvent");
static_assert(sizeof(Ability_101661_OnDisguiseInterruptedTagEvent) == 0x000290, "Wrong size on Ability_101661_OnDisguiseInterruptedTagEvent");
static_assert(offsetof(Ability_101661_OnDisguiseInterruptedTagEvent, Payload) == 0x000000, "Member 'Ability_101661_OnDisguiseInterruptedTagEvent::Payload' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnDisguiseStateChanged
// 0x0018 (0x0018 - 0x0000)
struct Ability_101661_OnDisguiseStateChanged final
{
public:
	class AMarvelPlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  InNewPawn;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  InOldPawn;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnDisguiseStateChanged) == 0x000008, "Wrong alignment on Ability_101661_OnDisguiseStateChanged");
static_assert(sizeof(Ability_101661_OnDisguiseStateChanged) == 0x000018, "Wrong size on Ability_101661_OnDisguiseStateChanged");
static_assert(offsetof(Ability_101661_OnDisguiseStateChanged, InPlayerState) == 0x000000, "Member 'Ability_101661_OnDisguiseStateChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnDisguiseStateChanged, InNewPawn) == 0x000008, "Member 'Ability_101661_OnDisguiseStateChanged::InNewPawn' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnDisguiseStateChanged, InOldPawn) == 0x000010, "Member 'Ability_101661_OnDisguiseStateChanged::InOldPawn' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnDisguiseStateEnded_CameraTransition
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnDisguiseStateEnded_CameraTransition final
{
public:
	class AMarvelPlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnDisguiseStateEnded_CameraTransition) == 0x000008, "Wrong alignment on Ability_101661_OnDisguiseStateEnded_CameraTransition");
static_assert(sizeof(Ability_101661_OnDisguiseStateEnded_CameraTransition) == 0x000008, "Wrong size on Ability_101661_OnDisguiseStateEnded_CameraTransition");
static_assert(offsetof(Ability_101661_OnDisguiseStateEnded_CameraTransition, InPlayerState) == 0x000000, "Member 'Ability_101661_OnDisguiseStateEnded_CameraTransition::InPlayerState' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnHeroHulkAbilitiesFinishInit
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnHeroHulkAbilitiesFinishInit final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnHeroHulkAbilitiesFinishInit) == 0x000008, "Wrong alignment on Ability_101661_OnHeroHulkAbilitiesFinishInit");
static_assert(sizeof(Ability_101661_OnHeroHulkAbilitiesFinishInit) == 0x000008, "Wrong size on Ability_101661_OnHeroHulkAbilitiesFinishInit");
static_assert(offsetof(Ability_101661_OnHeroHulkAbilitiesFinishInit, SourceActor) == 0x000000, "Member 'Ability_101661_OnHeroHulkAbilitiesFinishInit::SourceActor' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnMrFantasyAbilityEnd
// 0x0010 (0x0010 - 0x0000)
struct Ability_101661_OnMrFantasyAbilityEnd final
{
public:
	struct FAbilityEndedData                      InAbilityEndedData;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnMrFantasyAbilityEnd) == 0x000008, "Wrong alignment on Ability_101661_OnMrFantasyAbilityEnd");
static_assert(sizeof(Ability_101661_OnMrFantasyAbilityEnd) == 0x000010, "Wrong size on Ability_101661_OnMrFantasyAbilityEnd");
static_assert(offsetof(Ability_101661_OnMrFantasyAbilityEnd, InAbilityEndedData) == 0x000000, "Member 'Ability_101661_OnMrFantasyAbilityEnd::InAbilityEndedData' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnMySelfPlayerStateChange
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnMySelfPlayerStateChange final
{
public:
	class AMarvelPlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnMySelfPlayerStateChange) == 0x000008, "Wrong alignment on Ability_101661_OnMySelfPlayerStateChange");
static_assert(sizeof(Ability_101661_OnMySelfPlayerStateChange) == 0x000008, "Wrong size on Ability_101661_OnMySelfPlayerStateChange");
static_assert(offsetof(Ability_101661_OnMySelfPlayerStateChange, InPlayerState) == 0x000000, "Member 'Ability_101661_OnMySelfPlayerStateChange::InPlayerState' has a wrong offset!");

// DelegateFunction Hero_1016.Ability_101661.OnPrimaryTargetUpdate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnPrimaryTargetUpdate__DelegateSignature final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnPrimaryTargetUpdate__DelegateSignature) == 0x000008, "Wrong alignment on Ability_101661_OnPrimaryTargetUpdate__DelegateSignature");
static_assert(sizeof(Ability_101661_OnPrimaryTargetUpdate__DelegateSignature) == 0x000008, "Wrong size on Ability_101661_OnPrimaryTargetUpdate__DelegateSignature");
static_assert(offsetof(Ability_101661_OnPrimaryTargetUpdate__DelegateSignature, InTarget) == 0x000000, "Member 'Ability_101661_OnPrimaryTargetUpdate__DelegateSignature::InTarget' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnServerControllerPostNewPawn
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnServerControllerPostNewPawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnServerControllerPostNewPawn) == 0x000008, "Wrong alignment on Ability_101661_OnServerControllerPostNewPawn");
static_assert(sizeof(Ability_101661_OnServerControllerPostNewPawn) == 0x000008, "Wrong size on Ability_101661_OnServerControllerPostNewPawn");
static_assert(offsetof(Ability_101661_OnServerControllerPostNewPawn, InPawn) == 0x000000, "Member 'Ability_101661_OnServerControllerPostNewPawn::InPawn' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnServerControllerPostPawnSpawn
// 0x0010 (0x0010 - 0x0000)
struct Ability_101661_OnServerControllerPostPawnSpawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  InMethod;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101661_OnServerControllerPostPawnSpawn) == 0x000008, "Wrong alignment on Ability_101661_OnServerControllerPostPawnSpawn");
static_assert(sizeof(Ability_101661_OnServerControllerPostPawnSpawn) == 0x000010, "Wrong size on Ability_101661_OnServerControllerPostPawnSpawn");
static_assert(offsetof(Ability_101661_OnServerControllerPostPawnSpawn, InPawn) == 0x000000, "Member 'Ability_101661_OnServerControllerPostPawnSpawn::InPawn' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnServerControllerPostPawnSpawn, InMethod) == 0x000008, "Member 'Ability_101661_OnServerControllerPostPawnSpawn::InMethod' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnServerControllerPreNewPawn
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnServerControllerPreNewPawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnServerControllerPreNewPawn) == 0x000008, "Wrong alignment on Ability_101661_OnServerControllerPreNewPawn");
static_assert(sizeof(Ability_101661_OnServerControllerPreNewPawn) == 0x000008, "Wrong size on Ability_101661_OnServerControllerPreNewPawn");
static_assert(offsetof(Ability_101661_OnServerControllerPreNewPawn, InPawn) == 0x000000, "Member 'Ability_101661_OnServerControllerPreNewPawn::InPawn' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnTargetPlayerAbilityActivated
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnTargetPlayerAbilityActivated final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnTargetPlayerAbilityActivated) == 0x000008, "Wrong alignment on Ability_101661_OnTargetPlayerAbilityActivated");
static_assert(sizeof(Ability_101661_OnTargetPlayerAbilityActivated) == 0x000008, "Wrong size on Ability_101661_OnTargetPlayerAbilityActivated");
static_assert(offsetof(Ability_101661_OnTargetPlayerAbilityActivated, InAbility) == 0x000000, "Member 'Ability_101661_OnTargetPlayerAbilityActivated::InAbility' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnTargetPlayerAbilityCommitted
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_OnTargetPlayerAbilityCommitted final
{
public:
	class UGameplayAbility*                       InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnTargetPlayerAbilityCommitted) == 0x000008, "Wrong alignment on Ability_101661_OnTargetPlayerAbilityCommitted");
static_assert(sizeof(Ability_101661_OnTargetPlayerAbilityCommitted) == 0x000008, "Wrong size on Ability_101661_OnTargetPlayerAbilityCommitted");
static_assert(offsetof(Ability_101661_OnTargetPlayerAbilityCommitted, InAbility) == 0x000000, "Member 'Ability_101661_OnTargetPlayerAbilityCommitted::InAbility' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnTargetPlayerPreDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_101661_OnTargetPlayerPreDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnTargetPlayerPreDeath) == 0x000008, "Wrong alignment on Ability_101661_OnTargetPlayerPreDeath");
static_assert(sizeof(Ability_101661_OnTargetPlayerPreDeath) == 0x000028, "Wrong size on Ability_101661_OnTargetPlayerPreDeath");
static_assert(offsetof(Ability_101661_OnTargetPlayerPreDeath, InSourceAvatar) == 0x000000, "Member 'Ability_101661_OnTargetPlayerPreDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnTargetPlayerPreDeath, InTargetAvatar) == 0x000008, "Member 'Ability_101661_OnTargetPlayerPreDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnTargetPlayerPreDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_101661_OnTargetPlayerPreDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1016.Ability_101661.OnTargetPlayerReceiveEffect
// 0x0018 (0x0018 - 0x0000)
struct Ability_101661_OnTargetPlayerReceiveEffect final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecStackHandle         EffectSpecHandle;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_OnTargetPlayerReceiveEffect) == 0x000008, "Wrong alignment on Ability_101661_OnTargetPlayerReceiveEffect");
static_assert(sizeof(Ability_101661_OnTargetPlayerReceiveEffect) == 0x000018, "Wrong size on Ability_101661_OnTargetPlayerReceiveEffect");
static_assert(offsetof(Ability_101661_OnTargetPlayerReceiveEffect, Target) == 0x000000, "Member 'Ability_101661_OnTargetPlayerReceiveEffect::Target' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnTargetPlayerReceiveEffect, EffectSpecHandle) == 0x000008, "Member 'Ability_101661_OnTargetPlayerReceiveEffect::EffectSpecHandle' has a wrong offset!");
static_assert(offsetof(Ability_101661_OnTargetPlayerReceiveEffect, EffectHandle) == 0x000010, "Member 'Ability_101661_OnTargetPlayerReceiveEffect::EffectHandle' has a wrong offset!");

// Function Hero_1016.Ability_101661.ReCalculateAbilityRemainTime
// 0x0008 (0x0008 - 0x0000)
struct Ability_101661_ReCalculateAbilityRemainTime final
{
public:
	class UMarvelGameplayAbility*                 InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_ReCalculateAbilityRemainTime) == 0x000008, "Wrong alignment on Ability_101661_ReCalculateAbilityRemainTime");
static_assert(sizeof(Ability_101661_ReCalculateAbilityRemainTime) == 0x000008, "Wrong size on Ability_101661_ReCalculateAbilityRemainTime");
static_assert(offsetof(Ability_101661_ReCalculateAbilityRemainTime, InAbility) == 0x000000, "Member 'Ability_101661_ReCalculateAbilityRemainTime::InAbility' has a wrong offset!");

// Function Hero_1016.Ability_101661.StartDisguiseEffect
// 0x0001 (0x0001 - 0x0000)
struct Ability_101661_StartDisguiseEffect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_StartDisguiseEffect) == 0x000001, "Wrong alignment on Ability_101661_StartDisguiseEffect");
static_assert(sizeof(Ability_101661_StartDisguiseEffect) == 0x000001, "Wrong size on Ability_101661_StartDisguiseEffect");
static_assert(offsetof(Ability_101661_StartDisguiseEffect, ReturnValue) == 0x000000, "Member 'Ability_101661_StartDisguiseEffect::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101661.StopDisguiseEffect
// 0x0028 (0x0028 - 0x0000)
struct Ability_101661_StopDisguiseEffect final
{
public:
	bool                                          bIsAvatarAlive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InSourceAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_StopDisguiseEffect) == 0x000008, "Wrong alignment on Ability_101661_StopDisguiseEffect");
static_assert(sizeof(Ability_101661_StopDisguiseEffect) == 0x000028, "Wrong size on Ability_101661_StopDisguiseEffect");
static_assert(offsetof(Ability_101661_StopDisguiseEffect, bIsAvatarAlive) == 0x000000, "Member 'Ability_101661_StopDisguiseEffect::bIsAvatarAlive' has a wrong offset!");
static_assert(offsetof(Ability_101661_StopDisguiseEffect, InSourceAvatar) == 0x000008, "Member 'Ability_101661_StopDisguiseEffect::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_101661_StopDisguiseEffect, ModifierParameterHandle) == 0x000010, "Member 'Ability_101661_StopDisguiseEffect::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1016.Ability_101661.VerifyAndSaveTarget
// 0x0010 (0x0010 - 0x0000)
struct Ability_101661_VerifyAndSaveTarget final
{
public:
	const class AActor*                           InTarget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_101661_VerifyAndSaveTarget) == 0x000008, "Wrong alignment on Ability_101661_VerifyAndSaveTarget");
static_assert(sizeof(Ability_101661_VerifyAndSaveTarget) == 0x000010, "Wrong size on Ability_101661_VerifyAndSaveTarget");
static_assert(offsetof(Ability_101661_VerifyAndSaveTarget, InTarget) == 0x000000, "Member 'Ability_101661_VerifyAndSaveTarget::InTarget' has a wrong offset!");
static_assert(offsetof(Ability_101661_VerifyAndSaveTarget, ReturnValue) == 0x000008, "Member 'Ability_101661_VerifyAndSaveTarget::ReturnValue' has a wrong offset!");

// Function Hero_1016.Ability_101661.IsDisguiseActive
// 0x0001 (0x0001 - 0x0000)
struct Ability_101661_IsDisguiseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_101661_IsDisguiseActive) == 0x000001, "Wrong alignment on Ability_101661_IsDisguiseActive");
static_assert(sizeof(Ability_101661_IsDisguiseActive) == 0x000001, "Wrong size on Ability_101661_IsDisguiseActive");
static_assert(offsetof(Ability_101661_IsDisguiseActive, ReturnValue) == 0x000000, "Member 'Ability_101661_IsDisguiseActive::ReturnValue' has a wrong offset!");

// Function Hero_1016.ExtraWidget_101661.SetDurationAndStartCountDown
// 0x0008 (0x0008 - 0x0000)
struct ExtraWidget_101661_SetDurationAndStartCountDown final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRemaining;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtraWidget_101661_SetDurationAndStartCountDown) == 0x000004, "Wrong alignment on ExtraWidget_101661_SetDurationAndStartCountDown");
static_assert(sizeof(ExtraWidget_101661_SetDurationAndStartCountDown) == 0x000008, "Wrong size on ExtraWidget_101661_SetDurationAndStartCountDown");
static_assert(offsetof(ExtraWidget_101661_SetDurationAndStartCountDown, Duration) == 0x000000, "Member 'ExtraWidget_101661_SetDurationAndStartCountDown::Duration' has a wrong offset!");
static_assert(offsetof(ExtraWidget_101661_SetDurationAndStartCountDown, TimeRemaining) == 0x000004, "Member 'ExtraWidget_101661_SetDurationAndStartCountDown::TimeRemaining' has a wrong offset!");

// Function Hero_1016.CueNotify_10166102.MyOnRemoveFX
// 0x0008 (0x0008 - 0x0000)
struct CueNotify_10166102_MyOnRemoveFX final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CueNotify_10166102_MyOnRemoveFX) == 0x000008, "Wrong alignment on CueNotify_10166102_MyOnRemoveFX");
static_assert(sizeof(CueNotify_10166102_MyOnRemoveFX) == 0x000008, "Wrong size on CueNotify_10166102_MyOnRemoveFX");
static_assert(offsetof(CueNotify_10166102_MyOnRemoveFX, MyTarget) == 0x000000, "Member 'CueNotify_10166102_MyOnRemoveFX::MyTarget' has a wrong offset!");

// Function Hero_1016.CueNotify_10166102.OnTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct CueNotify_10166102_OnTagUpdate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CueNotify_10166102_OnTagUpdate) == 0x000004, "Wrong alignment on CueNotify_10166102_OnTagUpdate");
static_assert(sizeof(CueNotify_10166102_OnTagUpdate) == 0x000010, "Wrong size on CueNotify_10166102_OnTagUpdate");
static_assert(offsetof(CueNotify_10166102_OnTagUpdate, Tag) == 0x000000, "Member 'CueNotify_10166102_OnTagUpdate::Tag' has a wrong offset!");
static_assert(offsetof(CueNotify_10166102_OnTagUpdate, bTagExists) == 0x00000C, "Member 'CueNotify_10166102_OnTagUpdate::bTagExists' has a wrong offset!");

// Function Hero_1016.CueNotify_10166102.SetChildMeshMaterials
// 0x0020 (0x0020 - 0x0000)
struct CueNotify_10166102_SetChildMeshMaterials final
{
public:
	class AMarvelCharacterChildActor*             InChildActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SocketNames;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CueNotify_10166102_SetChildMeshMaterials) == 0x000008, "Wrong alignment on CueNotify_10166102_SetChildMeshMaterials");
static_assert(sizeof(CueNotify_10166102_SetChildMeshMaterials) == 0x000020, "Wrong size on CueNotify_10166102_SetChildMeshMaterials");
static_assert(offsetof(CueNotify_10166102_SetChildMeshMaterials, InChildActor) == 0x000000, "Member 'CueNotify_10166102_SetChildMeshMaterials::InChildActor' has a wrong offset!");
static_assert(offsetof(CueNotify_10166102_SetChildMeshMaterials, SocketNames) == 0x000008, "Member 'CueNotify_10166102_SetChildMeshMaterials::SocketNames' has a wrong offset!");
static_assert(offsetof(CueNotify_10166102_SetChildMeshMaterials, Value) == 0x000018, "Member 'CueNotify_10166102_SetChildMeshMaterials::Value' has a wrong offset!");

// Function Hero_1016.CueNotify_10166102.SetDuplicateEffect
// 0x0010 (0x0010 - 0x0000)
struct CueNotify_10166102_SetDuplicateEffect final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisguise;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   MyOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CueNotify_10166102_SetDuplicateEffect) == 0x000008, "Wrong alignment on CueNotify_10166102_SetDuplicateEffect");
static_assert(sizeof(CueNotify_10166102_SetDuplicateEffect) == 0x000010, "Wrong size on CueNotify_10166102_SetDuplicateEffect");
static_assert(offsetof(CueNotify_10166102_SetDuplicateEffect, bEnabled) == 0x000000, "Member 'CueNotify_10166102_SetDuplicateEffect::bEnabled' has a wrong offset!");
static_assert(offsetof(CueNotify_10166102_SetDuplicateEffect, bDisguise) == 0x000001, "Member 'CueNotify_10166102_SetDuplicateEffect::bDisguise' has a wrong offset!");
static_assert(offsetof(CueNotify_10166102_SetDuplicateEffect, MyOwner) == 0x000008, "Member 'CueNotify_10166102_SetDuplicateEffect::MyOwner' has a wrong offset!");

// Function Hero_1016.EpicMomentAction_1016.OnActorDamageToCure
// 0x0020 (0x0020 - 0x0000)
struct EpicMomentAction_1016_OnActorDamageToCure final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicMomentAction_1016_OnActorDamageToCure) == 0x000008, "Wrong alignment on EpicMomentAction_1016_OnActorDamageToCure");
static_assert(sizeof(EpicMomentAction_1016_OnActorDamageToCure) == 0x000020, "Wrong size on EpicMomentAction_1016_OnActorDamageToCure");
static_assert(offsetof(EpicMomentAction_1016_OnActorDamageToCure, InSource) == 0x000000, "Member 'EpicMomentAction_1016_OnActorDamageToCure::InSource' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnActorDamageToCure, InTarget) == 0x000008, "Member 'EpicMomentAction_1016_OnActorDamageToCure::InTarget' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnActorDamageToCure, AbilityID) == 0x000010, "Member 'EpicMomentAction_1016_OnActorDamageToCure::AbilityID' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnActorDamageToCure, Value) == 0x000014, "Member 'EpicMomentAction_1016_OnActorDamageToCure::Value' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnActorDamageToCure, DamageValue) == 0x000018, "Member 'EpicMomentAction_1016_OnActorDamageToCure::DamageValue' has a wrong offset!");

// Function Hero_1016.EpicMomentAction_1016.OnSummonedBegin
// 0x0060 (0x0060 - 0x0000)
struct EpicMomentAction_1016_OnSummonedBegin final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Summoned;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0018(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1016_OnSummonedBegin) == 0x000008, "Wrong alignment on EpicMomentAction_1016_OnSummonedBegin");
static_assert(sizeof(EpicMomentAction_1016_OnSummonedBegin) == 0x000060, "Wrong size on EpicMomentAction_1016_OnSummonedBegin");
static_assert(offsetof(EpicMomentAction_1016_OnSummonedBegin, SourceActor) == 0x000000, "Member 'EpicMomentAction_1016_OnSummonedBegin::SourceActor' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnSummonedBegin, SourceAbility) == 0x000008, "Member 'EpicMomentAction_1016_OnSummonedBegin::SourceAbility' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnSummonedBegin, Summoned) == 0x000010, "Member 'EpicMomentAction_1016_OnSummonedBegin::Summoned' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1016_OnSummonedBegin, GenerateInfo) == 0x000018, "Member 'EpicMomentAction_1016_OnSummonedBegin::GenerateInfo' has a wrong offset!");

// Function Hero_1016.EpicMomentAction_1016.OnSummonedEnd
// 0x0008 (0x0008 - 0x0000)
struct EpicMomentAction_1016_OnSummonedEnd final
{
public:
	class AActor*                                 InSummoner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1016_OnSummonedEnd) == 0x000008, "Wrong alignment on EpicMomentAction_1016_OnSummonedEnd");
static_assert(sizeof(EpicMomentAction_1016_OnSummonedEnd) == 0x000008, "Wrong size on EpicMomentAction_1016_OnSummonedEnd");
static_assert(offsetof(EpicMomentAction_1016_OnSummonedEnd, InSummoner) == 0x000000, "Member 'EpicMomentAction_1016_OnSummonedEnd::InSummoner' has a wrong offset!");

// Function Hero_1016.LokiCharacter.SpawnLokiPhantom
// 0x0070 (0x0070 - 0x0000)
struct LokiCharacter_SpawnLokiPhantom final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarvelGameplayAbility*           InAbility;                                         // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LokiCharacter_SpawnLokiPhantom) == 0x000010, "Wrong alignment on LokiCharacter_SpawnLokiPhantom");
static_assert(sizeof(LokiCharacter_SpawnLokiPhantom) == 0x000070, "Wrong size on LokiCharacter_SpawnLokiPhantom");
static_assert(offsetof(LokiCharacter_SpawnLokiPhantom, InTransform) == 0x000000, "Member 'LokiCharacter_SpawnLokiPhantom::InTransform' has a wrong offset!");
static_assert(offsetof(LokiCharacter_SpawnLokiPhantom, InAbility) == 0x000060, "Member 'LokiCharacter_SpawnLokiPhantom::InAbility' has a wrong offset!");

// Function Hero_1016.LokiCharacter.UpdatePhantomManagementComponentTick
// 0x0001 (0x0001 - 0x0000)
struct LokiCharacter_UpdatePhantomManagementComponentTick final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LokiCharacter_UpdatePhantomManagementComponentTick) == 0x000001, "Wrong alignment on LokiCharacter_UpdatePhantomManagementComponentTick");
static_assert(sizeof(LokiCharacter_UpdatePhantomManagementComponentTick) == 0x000001, "Wrong size on LokiCharacter_UpdatePhantomManagementComponentTick");
static_assert(offsetof(LokiCharacter_UpdatePhantomManagementComponentTick, bEnable) == 0x000000, "Member 'LokiCharacter_UpdatePhantomManagementComponentTick::bEnable' has a wrong offset!");

// Function Hero_1016.TabData_1016.OnActorDamageToCure
// 0x0020 (0x0020 - 0x0000)
struct TabData_1016_OnActorDamageToCure final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1016_OnActorDamageToCure) == 0x000008, "Wrong alignment on TabData_1016_OnActorDamageToCure");
static_assert(sizeof(TabData_1016_OnActorDamageToCure) == 0x000020, "Wrong size on TabData_1016_OnActorDamageToCure");
static_assert(offsetof(TabData_1016_OnActorDamageToCure, InSource) == 0x000000, "Member 'TabData_1016_OnActorDamageToCure::InSource' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorDamageToCure, InTarget) == 0x000008, "Member 'TabData_1016_OnActorDamageToCure::InTarget' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorDamageToCure, AbilityID) == 0x000010, "Member 'TabData_1016_OnActorDamageToCure::AbilityID' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorDamageToCure, Value) == 0x000014, "Member 'TabData_1016_OnActorDamageToCure::Value' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorDamageToCure, DamageValue) == 0x000018, "Member 'TabData_1016_OnActorDamageToCure::DamageValue' has a wrong offset!");

// Function Hero_1016.TabData_1016.OnActorTakeHealth
// 0x0030 (0x0030 - 0x0000)
struct TabData_1016_OnActorTakeHealth final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1016_OnActorTakeHealth) == 0x000008, "Wrong alignment on TabData_1016_OnActorTakeHealth");
static_assert(sizeof(TabData_1016_OnActorTakeHealth) == 0x000030, "Wrong size on TabData_1016_OnActorTakeHealth");
static_assert(offsetof(TabData_1016_OnActorTakeHealth, InInstigator) == 0x000000, "Member 'TabData_1016_OnActorTakeHealth::InInstigator' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorTakeHealth, InTarget) == 0x000008, "Member 'TabData_1016_OnActorTakeHealth::InTarget' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorTakeHealth, ModifierParameterHandle) == 0x000010, "Member 'TabData_1016_OnActorTakeHealth::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(TabData_1016_OnActorTakeHealth, ExtraData) == 0x000028, "Member 'TabData_1016_OnActorTakeHealth::ExtraData' has a wrong offset!");

}

