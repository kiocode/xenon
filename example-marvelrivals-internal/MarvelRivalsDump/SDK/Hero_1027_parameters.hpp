#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1027

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Hero_1027_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function Hero_1027.Projectile_10271101.GetProjectileRadius
// 0x0004 (0x0004 - 0x0000)
struct Projectile_10271101_GetProjectileRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_10271101_GetProjectileRadius) == 0x000004, "Wrong alignment on Projectile_10271101_GetProjectileRadius");
static_assert(sizeof(Projectile_10271101_GetProjectileRadius) == 0x000004, "Wrong size on Projectile_10271101_GetProjectileRadius");
static_assert(offsetof(Projectile_10271101_GetProjectileRadius, ReturnValue) == 0x000000, "Member 'Projectile_10271101_GetProjectileRadius::ReturnValue' has a wrong offset!");

// Function Hero_1027.Projectile_10271101.IsProjectileInterrupted
// 0x0001 (0x0001 - 0x0000)
struct Projectile_10271101_IsProjectileInterrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_10271101_IsProjectileInterrupted) == 0x000001, "Wrong alignment on Projectile_10271101_IsProjectileInterrupted");
static_assert(sizeof(Projectile_10271101_IsProjectileInterrupted) == 0x000001, "Wrong size on Projectile_10271101_IsProjectileInterrupted");
static_assert(offsetof(Projectile_10271101_IsProjectileInterrupted, ReturnValue) == 0x000000, "Member 'Projectile_10271101_IsProjectileInterrupted::ReturnValue' has a wrong offset!");

// Function Hero_1027.Projectile_10271101.IsProjectileOffCenter
// 0x0001 (0x0001 - 0x0000)
struct Projectile_10271101_IsProjectileOffCenter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_10271101_IsProjectileOffCenter) == 0x000001, "Wrong alignment on Projectile_10271101_IsProjectileOffCenter");
static_assert(sizeof(Projectile_10271101_IsProjectileOffCenter) == 0x000001, "Wrong size on Projectile_10271101_IsProjectileOffCenter");
static_assert(offsetof(Projectile_10271101_IsProjectileOffCenter, ReturnValue) == 0x000000, "Member 'Projectile_10271101_IsProjectileOffCenter::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Projectile_Loop_10271101.GetPrickleVineTrans
// 0x0090 (0x0090 - 0x0000)
struct Cue_Projectile_Loop_10271101_GetPrickleVineTrans final
{
public:
	class AMarvelBaseCharacter*                   InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10271101*                   InProjectile;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0030(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans) == 0x000010, "Wrong alignment on Cue_Projectile_Loop_10271101_GetPrickleVineTrans");
static_assert(sizeof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans) == 0x000090, "Wrong size on Cue_Projectile_Loop_10271101_GetPrickleVineTrans");
static_assert(offsetof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans, InCharacter) == 0x000000, "Member 'Cue_Projectile_Loop_10271101_GetPrickleVineTrans::InCharacter' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans, InProjectile) == 0x000008, "Member 'Cue_Projectile_Loop_10271101_GetPrickleVineTrans::InProjectile' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans, SourceLocation) == 0x000010, "Member 'Cue_Projectile_Loop_10271101_GetPrickleVineTrans::SourceLocation' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_GetPrickleVineTrans, TargetTransform) == 0x000030, "Member 'Cue_Projectile_Loop_10271101_GetPrickleVineTrans::TargetTransform' has a wrong offset!");

// Function Hero_1027.Cue_Projectile_Loop_10271101.ShouldSetParameterWhenDissolving
// 0x0010 (0x0010 - 0x0000)
struct Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving) == 0x000004, "Wrong alignment on Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving");
static_assert(sizeof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving) == 0x000010, "Wrong size on Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving");
static_assert(offsetof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving, ParameterName) == 0x000000, "Member 'Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving::ParameterName' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving, ReturnValue) == 0x00000C, "Member 'Cue_Projectile_Loop_10271101_ShouldSetParameterWhenDissolving::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Projectile_Loop_10271101.ShouldSetParameterWhenGrowing
// 0x0010 (0x0010 - 0x0000)
struct Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing) == 0x000004, "Wrong alignment on Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing");
static_assert(sizeof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing) == 0x000010, "Wrong size on Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing");
static_assert(offsetof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing, ParameterName) == 0x000000, "Member 'Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing::ParameterName' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing, ReturnValue) == 0x00000C, "Member 'Cue_Projectile_Loop_10271101_ShouldSetParameterWhenGrowing::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Projectile_Loop_10271101.UpdatePrickleVineFX
// 0x0010 (0x0010 - 0x0000)
struct Cue_Projectile_Loop_10271101_UpdatePrickleVineFX final
{
public:
	class AMarvelBaseCharacter*                   InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectile_10271101*                   InProjectile;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Projectile_Loop_10271101_UpdatePrickleVineFX) == 0x000008, "Wrong alignment on Cue_Projectile_Loop_10271101_UpdatePrickleVineFX");
static_assert(sizeof(Cue_Projectile_Loop_10271101_UpdatePrickleVineFX) == 0x000010, "Wrong size on Cue_Projectile_Loop_10271101_UpdatePrickleVineFX");
static_assert(offsetof(Cue_Projectile_Loop_10271101_UpdatePrickleVineFX, InCharacter) == 0x000000, "Member 'Cue_Projectile_Loop_10271101_UpdatePrickleVineFX::InCharacter' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10271101_UpdatePrickleVineFX, InProjectile) == 0x000008, "Member 'Cue_Projectile_Loop_10271101_UpdatePrickleVineFX::InProjectile' has a wrong offset!");

// Function Hero_1027.Projectile_10273101.GetProjectileRandSeed
// 0x0004 (0x0004 - 0x0000)
struct Projectile_10273101_GetProjectileRandSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_10273101_GetProjectileRandSeed) == 0x000004, "Wrong alignment on Projectile_10273101_GetProjectileRandSeed");
static_assert(sizeof(Projectile_10273101_GetProjectileRandSeed) == 0x000004, "Wrong size on Projectile_10273101_GetProjectileRandSeed");
static_assert(offsetof(Projectile_10273101_GetProjectileRandSeed, ReturnValue) == 0x000000, "Member 'Projectile_10273101_GetProjectileRandSeed::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.AddSuccessorBuildingPlace
// 0x0240 (0x0240 - 0x0000)
struct MarvelWallBuildingActor_AddSuccessorBuildingPlace final
{
public:
	struct FFindBuildingPlace                     InBuildingPlace;                                   // 0x0000(0x0240)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_AddSuccessorBuildingPlace) == 0x000010, "Wrong alignment on MarvelWallBuildingActor_AddSuccessorBuildingPlace");
static_assert(sizeof(MarvelWallBuildingActor_AddSuccessorBuildingPlace) == 0x000240, "Wrong size on MarvelWallBuildingActor_AddSuccessorBuildingPlace");
static_assert(offsetof(MarvelWallBuildingActor_AddSuccessorBuildingPlace, InBuildingPlace) == 0x000000, "Member 'MarvelWallBuildingActor_AddSuccessorBuildingPlace::InBuildingPlace' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.InitializeWallBuildingData
// 0x0180 (0x0180 - 0x0000)
struct MarvelWallBuildingActor_InitializeWallBuildingData final
{
public:
	EWallBuildingMode                             InWallBuildingMode;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InHitResult;                                       // 0x0008(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0178(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_InitializeWallBuildingData) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_InitializeWallBuildingData");
static_assert(sizeof(MarvelWallBuildingActor_InitializeWallBuildingData) == 0x000180, "Wrong size on MarvelWallBuildingActor_InitializeWallBuildingData");
static_assert(offsetof(MarvelWallBuildingActor_InitializeWallBuildingData, InWallBuildingMode) == 0x000000, "Member 'MarvelWallBuildingActor_InitializeWallBuildingData::InWallBuildingMode' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_InitializeWallBuildingData, InHitResult) == 0x000008, "Member 'MarvelWallBuildingActor_InitializeWallBuildingData::InHitResult' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_InitializeWallBuildingData, ReturnValue) == 0x000178, "Member 'MarvelWallBuildingActor_InitializeWallBuildingData::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnApplyDamage
// 0x0028 (0x0028 - 0x0000)
struct MarvelWallBuildingActor_OnApplyDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnApplyDamage) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnApplyDamage");
static_assert(sizeof(MarvelWallBuildingActor_OnApplyDamage) == 0x000028, "Wrong size on MarvelWallBuildingActor_OnApplyDamage");
static_assert(offsetof(MarvelWallBuildingActor_OnApplyDamage, InSourceAvatar) == 0x000000, "Member 'MarvelWallBuildingActor_OnApplyDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_OnApplyDamage, InTargetAvatar) == 0x000008, "Member 'MarvelWallBuildingActor_OnApplyDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_OnApplyDamage, ModifierParameterHandle) == 0x000010, "Member 'MarvelWallBuildingActor_OnApplyDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnCharacterRegisterApplyDamage
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_OnCharacterRegisterApplyDamage final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnCharacterRegisterApplyDamage) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnCharacterRegisterApplyDamage");
static_assert(sizeof(MarvelWallBuildingActor_OnCharacterRegisterApplyDamage) == 0x000008, "Wrong size on MarvelWallBuildingActor_OnCharacterRegisterApplyDamage");
static_assert(offsetof(MarvelWallBuildingActor_OnCharacterRegisterApplyDamage, InActor) == 0x000000, "Member 'MarvelWallBuildingActor_OnCharacterRegisterApplyDamage::InActor' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnCharacterUnregisterApplyDamage
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage");
static_assert(sizeof(MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage) == 0x000008, "Wrong size on MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage");
static_assert(offsetof(MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage, InActor) == 0x000000, "Member 'MarvelWallBuildingActor_OnCharacterUnregisterApplyDamage::InActor' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnPivotComponentCollisionChange
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_OnPivotComponentCollisionChange final
{
public:
	class UPrimitiveComponent*                    InAttachParent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnPivotComponentCollisionChange) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnPivotComponentCollisionChange");
static_assert(sizeof(MarvelWallBuildingActor_OnPivotComponentCollisionChange) == 0x000008, "Wrong size on MarvelWallBuildingActor_OnPivotComponentCollisionChange");
static_assert(offsetof(MarvelWallBuildingActor_OnPivotComponentCollisionChange, InAttachParent) == 0x000000, "Member 'MarvelWallBuildingActor_OnPivotComponentCollisionChange::InAttachParent' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnPivotDestructibleFracture
// 0x0028 (0x0028 - 0x0000)
struct MarvelWallBuildingActor_OnPivotDestructibleFracture final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactPoint;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnPivotDestructibleFracture) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnPivotDestructibleFracture");
static_assert(sizeof(MarvelWallBuildingActor_OnPivotDestructibleFracture) == 0x000028, "Wrong size on MarvelWallBuildingActor_OnPivotDestructibleFracture");
static_assert(offsetof(MarvelWallBuildingActor_OnPivotDestructibleFracture, BoneName) == 0x000000, "Member 'MarvelWallBuildingActor_OnPivotDestructibleFracture::BoneName' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_OnPivotDestructibleFracture, ImpactPoint) == 0x000010, "Member 'MarvelWallBuildingActor_OnPivotDestructibleFracture::ImpactPoint' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnRelevantSummonedEndTask
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_OnRelevantSummonedEndTask final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnRelevantSummonedEndTask) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnRelevantSummonedEndTask");
static_assert(sizeof(MarvelWallBuildingActor_OnRelevantSummonedEndTask) == 0x000008, "Wrong size on MarvelWallBuildingActor_OnRelevantSummonedEndTask");
static_assert(offsetof(MarvelWallBuildingActor_OnRelevantSummonedEndTask, InActor) == 0x000000, "Member 'MarvelWallBuildingActor_OnRelevantSummonedEndTask::InActor' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.OnSuccessorWallSpawnSuccess
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess final
{
public:
	class AActor*                                 SpawnActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess");
static_assert(sizeof(MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess) == 0x000008, "Wrong size on MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess");
static_assert(offsetof(MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess, SpawnActor) == 0x000000, "Member 'MarvelWallBuildingActor_OnSuccessorWallSpawnSuccess::SpawnActor' has a wrong offset!");

// DelegateFunction Hero_1027.MarvelWallBuildingActor.OnWallBooleanStateChange_GameThread__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature");
static_assert(sizeof(MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature) == 0x000001, "Wrong size on MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature");
static_assert(offsetof(MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature, bNewState) == 0x000000, "Member 'MarvelWallBuildingActor_OnWallBooleanStateChange_GameThread__DelegateSignature::bNewState' has a wrong offset!");

// DelegateFunction Hero_1027.MarvelWallBuildingActor.OnWallHealthStateChange__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature final
{
public:
	EWallHealthState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallHealthState                              OldState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature");
static_assert(sizeof(MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature) == 0x000002, "Wrong size on MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature");
static_assert(offsetof(MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature, NewState) == 0x000000, "Member 'MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature::NewState' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature, OldState) == 0x000001, "Member 'MarvelWallBuildingActor_OnWallHealthStateChange__DelegateSignature::OldState' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.SetFullBoxEnabled
// 0x0002 (0x0002 - 0x0000)
struct MarvelWallBuildingActor_SetFullBoxEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_SetFullBoxEnabled) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_SetFullBoxEnabled");
static_assert(sizeof(MarvelWallBuildingActor_SetFullBoxEnabled) == 0x000002, "Wrong size on MarvelWallBuildingActor_SetFullBoxEnabled");
static_assert(offsetof(MarvelWallBuildingActor_SetFullBoxEnabled, bEnable) == 0x000000, "Member 'MarvelWallBuildingActor_SetFullBoxEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetFullBoxEnabled, ReturnValue) == 0x000001, "Member 'MarvelWallBuildingActor_SetFullBoxEnabled::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.SetFullBoxScale
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_SetFullBoxScale final
{
public:
	float                                         PlankScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_SetFullBoxScale) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_SetFullBoxScale");
static_assert(sizeof(MarvelWallBuildingActor_SetFullBoxScale) == 0x000008, "Wrong size on MarvelWallBuildingActor_SetFullBoxScale");
static_assert(offsetof(MarvelWallBuildingActor_SetFullBoxScale, PlankScale) == 0x000000, "Member 'MarvelWallBuildingActor_SetFullBoxScale::PlankScale' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetFullBoxScale, ReturnValue) == 0x000004, "Member 'MarvelWallBuildingActor_SetFullBoxScale::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.SetPlankEnabled
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_SetPlankEnabled final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_SetPlankEnabled) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_SetPlankEnabled");
static_assert(sizeof(MarvelWallBuildingActor_SetPlankEnabled) == 0x000008, "Wrong size on MarvelWallBuildingActor_SetPlankEnabled");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankEnabled, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_SetPlankEnabled::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankEnabled, bEnable) == 0x000004, "Member 'MarvelWallBuildingActor_SetPlankEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankEnabled, ReturnValue) == 0x000005, "Member 'MarvelWallBuildingActor_SetPlankEnabled::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.SetPlankScale
// 0x000C (0x000C - 0x0000)
struct MarvelWallBuildingActor_SetPlankScale final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlankScale;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_SetPlankScale) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_SetPlankScale");
static_assert(sizeof(MarvelWallBuildingActor_SetPlankScale) == 0x00000C, "Wrong size on MarvelWallBuildingActor_SetPlankScale");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankScale, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_SetPlankScale::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankScale, PlankScale) == 0x000004, "Member 'MarvelWallBuildingActor_SetPlankScale::PlankScale' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_SetPlankScale, ReturnValue) == 0x000008, "Member 'MarvelWallBuildingActor_SetPlankScale::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.CanBuildingOnEdges
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_CanBuildingOnEdges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_CanBuildingOnEdges) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_CanBuildingOnEdges");
static_assert(sizeof(MarvelWallBuildingActor_CanBuildingOnEdges) == 0x000001, "Wrong size on MarvelWallBuildingActor_CanBuildingOnEdges");
static_assert(offsetof(MarvelWallBuildingActor_CanBuildingOnEdges, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_CanBuildingOnEdges::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetCentricLeftPlankID
// 0x0004 (0x0004 - 0x0000)
struct MarvelWallBuildingActor_GetCentricLeftPlankID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetCentricLeftPlankID) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetCentricLeftPlankID");
static_assert(sizeof(MarvelWallBuildingActor_GetCentricLeftPlankID) == 0x000004, "Wrong size on MarvelWallBuildingActor_GetCentricLeftPlankID");
static_assert(offsetof(MarvelWallBuildingActor_GetCentricLeftPlankID, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetCentricLeftPlankID::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetCentricRightPlankID
// 0x0004 (0x0004 - 0x0000)
struct MarvelWallBuildingActor_GetCentricRightPlankID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetCentricRightPlankID) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetCentricRightPlankID");
static_assert(sizeof(MarvelWallBuildingActor_GetCentricRightPlankID) == 0x000004, "Wrong size on MarvelWallBuildingActor_GetCentricRightPlankID");
static_assert(offsetof(MarvelWallBuildingActor_GetCentricRightPlankID, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetCentricRightPlankID::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetChildrenWallActors
// 0x0018 (0x0018 - 0x0000)
struct MarvelWallBuildingActor_GetChildrenWallActors final
{
public:
	bool                                          bIncludeAllDescendants;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarvelWallBuildingActor*>       ChildrenWalls;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetChildrenWallActors) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetChildrenWallActors");
static_assert(sizeof(MarvelWallBuildingActor_GetChildrenWallActors) == 0x000018, "Wrong size on MarvelWallBuildingActor_GetChildrenWallActors");
static_assert(offsetof(MarvelWallBuildingActor_GetChildrenWallActors, bIncludeAllDescendants) == 0x000000, "Member 'MarvelWallBuildingActor_GetChildrenWallActors::bIncludeAllDescendants' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetChildrenWallActors, ChildrenWalls) == 0x000008, "Member 'MarvelWallBuildingActor_GetChildrenWallActors::ChildrenWalls' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetDependentWallActors
// 0x0010 (0x0010 - 0x0000)
struct MarvelWallBuildingActor_GetDependentWallActors final
{
public:
	TArray<class AMarvelWallBuildingActor*>       DependentWalls;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetDependentWallActors) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetDependentWallActors");
static_assert(sizeof(MarvelWallBuildingActor_GetDependentWallActors) == 0x000010, "Wrong size on MarvelWallBuildingActor_GetDependentWallActors");
static_assert(offsetof(MarvelWallBuildingActor_GetDependentWallActors, DependentWalls) == 0x000000, "Member 'MarvelWallBuildingActor_GetDependentWallActors::DependentWalls' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetFullBoxEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_GetFullBoxEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetFullBoxEnabled) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_GetFullBoxEnabled");
static_assert(sizeof(MarvelWallBuildingActor_GetFullBoxEnabled) == 0x000001, "Wrong size on MarvelWallBuildingActor_GetFullBoxEnabled");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxEnabled, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetFullBoxEnabled::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetFullBoxExtent
// 0x0020 (0x0020 - 0x0000)
struct MarvelWallBuildingActor_GetFullBoxExtent final
{
public:
	struct FVector                                OutPlankExtent;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetFullBoxExtent) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetFullBoxExtent");
static_assert(sizeof(MarvelWallBuildingActor_GetFullBoxExtent) == 0x000020, "Wrong size on MarvelWallBuildingActor_GetFullBoxExtent");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxExtent, OutPlankExtent) == 0x000000, "Member 'MarvelWallBuildingActor_GetFullBoxExtent::OutPlankExtent' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxExtent, ReturnValue) == 0x000018, "Member 'MarvelWallBuildingActor_GetFullBoxExtent::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetFullBoxLength
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_GetFullBoxLength final
{
public:
	float                                         OutPlankLength;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetFullBoxLength) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetFullBoxLength");
static_assert(sizeof(MarvelWallBuildingActor_GetFullBoxLength) == 0x000008, "Wrong size on MarvelWallBuildingActor_GetFullBoxLength");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxLength, OutPlankLength) == 0x000000, "Member 'MarvelWallBuildingActor_GetFullBoxLength::OutPlankLength' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxLength, ReturnValue) == 0x000004, "Member 'MarvelWallBuildingActor_GetFullBoxLength::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetFullBoxScale
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_GetFullBoxScale final
{
public:
	float                                         OutPlankScale;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetFullBoxScale) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetFullBoxScale");
static_assert(sizeof(MarvelWallBuildingActor_GetFullBoxScale) == 0x000008, "Wrong size on MarvelWallBuildingActor_GetFullBoxScale");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxScale, OutPlankScale) == 0x000000, "Member 'MarvelWallBuildingActor_GetFullBoxScale::OutPlankScale' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetFullBoxScale, ReturnValue) == 0x000004, "Member 'MarvelWallBuildingActor_GetFullBoxScale::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetLeftmostPlankID
// 0x0004 (0x0004 - 0x0000)
struct MarvelWallBuildingActor_GetLeftmostPlankID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetLeftmostPlankID) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetLeftmostPlankID");
static_assert(sizeof(MarvelWallBuildingActor_GetLeftmostPlankID) == 0x000004, "Wrong size on MarvelWallBuildingActor_GetLeftmostPlankID");
static_assert(offsetof(MarvelWallBuildingActor_GetLeftmostPlankID, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetLeftmostPlankID::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetParentWallActor
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_GetParentWallActor final
{
public:
	class AMarvelWallBuildingActor*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetParentWallActor) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetParentWallActor");
static_assert(sizeof(MarvelWallBuildingActor_GetParentWallActor) == 0x000008, "Wrong size on MarvelWallBuildingActor_GetParentWallActor");
static_assert(offsetof(MarvelWallBuildingActor_GetParentWallActor, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetParentWallActor::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankCollider
// 0x0010 (0x0010 - 0x0000)
struct MarvelWallBuildingActor_GetPlankCollider final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankCollider) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetPlankCollider");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankCollider) == 0x000010, "Wrong size on MarvelWallBuildingActor_GetPlankCollider");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankCollider, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankCollider::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankCollider, ReturnValue) == 0x000008, "Member 'MarvelWallBuildingActor_GetPlankCollider::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankColliders
// 0x0010 (0x0010 - 0x0000)
struct MarvelWallBuildingActor_GetPlankColliders final
{
public:
	TArray<class UBoxComponent*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankColliders) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetPlankColliders");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankColliders) == 0x000010, "Wrong size on MarvelWallBuildingActor_GetPlankColliders");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankColliders, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankColliders::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankEnabled
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_GetPlankEnabled final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankEnabled) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetPlankEnabled");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankEnabled) == 0x000008, "Wrong size on MarvelWallBuildingActor_GetPlankEnabled");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankEnabled, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankEnabled::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankEnabled, ReturnValue) == 0x000004, "Member 'MarvelWallBuildingActor_GetPlankEnabled::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankExtent
// 0x0028 (0x0028 - 0x0000)
struct MarvelWallBuildingActor_GetPlankExtent final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPlankExtent;                                    // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankExtent) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetPlankExtent");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankExtent) == 0x000028, "Wrong size on MarvelWallBuildingActor_GetPlankExtent");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankExtent, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankExtent::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankExtent, OutPlankExtent) == 0x000008, "Member 'MarvelWallBuildingActor_GetPlankExtent::OutPlankExtent' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankExtent, ReturnValue) == 0x000020, "Member 'MarvelWallBuildingActor_GetPlankExtent::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankLength
// 0x000C (0x000C - 0x0000)
struct MarvelWallBuildingActor_GetPlankLength final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPlankLength;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankLength) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetPlankLength");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankLength) == 0x00000C, "Wrong size on MarvelWallBuildingActor_GetPlankLength");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankLength, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankLength::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankLength, OutPlankLength) == 0x000004, "Member 'MarvelWallBuildingActor_GetPlankLength::OutPlankLength' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankLength, ReturnValue) == 0x000008, "Member 'MarvelWallBuildingActor_GetPlankLength::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetPlankScale
// 0x000C (0x000C - 0x0000)
struct MarvelWallBuildingActor_GetPlankScale final
{
public:
	int32                                         PlankID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPlankScale;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWallBuildingActor_GetPlankScale) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetPlankScale");
static_assert(sizeof(MarvelWallBuildingActor_GetPlankScale) == 0x00000C, "Wrong size on MarvelWallBuildingActor_GetPlankScale");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankScale, PlankID) == 0x000000, "Member 'MarvelWallBuildingActor_GetPlankScale::PlankID' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankScale, OutPlankScale) == 0x000004, "Member 'MarvelWallBuildingActor_GetPlankScale::OutPlankScale' has a wrong offset!");
static_assert(offsetof(MarvelWallBuildingActor_GetPlankScale, ReturnValue) == 0x000008, "Member 'MarvelWallBuildingActor_GetPlankScale::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetRightmostPlankID
// 0x0004 (0x0004 - 0x0000)
struct MarvelWallBuildingActor_GetRightmostPlankID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetRightmostPlankID) == 0x000004, "Wrong alignment on MarvelWallBuildingActor_GetRightmostPlankID");
static_assert(sizeof(MarvelWallBuildingActor_GetRightmostPlankID) == 0x000004, "Wrong size on MarvelWallBuildingActor_GetRightmostPlankID");
static_assert(offsetof(MarvelWallBuildingActor_GetRightmostPlankID, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetRightmostPlankID::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetWallBuildingAbilityConfig
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingActor_GetWallBuildingAbilityConfig final
{
public:
	class UMarvelWallBuildingAbilityConfig*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetWallBuildingAbilityConfig) == 0x000008, "Wrong alignment on MarvelWallBuildingActor_GetWallBuildingAbilityConfig");
static_assert(sizeof(MarvelWallBuildingActor_GetWallBuildingAbilityConfig) == 0x000008, "Wrong size on MarvelWallBuildingActor_GetWallBuildingAbilityConfig");
static_assert(offsetof(MarvelWallBuildingActor_GetWallBuildingAbilityConfig, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetWallBuildingAbilityConfig::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.GetWallBuildingMode
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_GetWallBuildingMode final
{
public:
	EWallBuildingMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_GetWallBuildingMode) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_GetWallBuildingMode");
static_assert(sizeof(MarvelWallBuildingActor_GetWallBuildingMode) == 0x000001, "Wrong size on MarvelWallBuildingActor_GetWallBuildingMode");
static_assert(offsetof(MarvelWallBuildingActor_GetWallBuildingMode, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_GetWallBuildingMode::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.HasEverParentWallActor
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_HasEverParentWallActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_HasEverParentWallActor) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_HasEverParentWallActor");
static_assert(sizeof(MarvelWallBuildingActor_HasEverParentWallActor) == 0x000001, "Wrong size on MarvelWallBuildingActor_HasEverParentWallActor");
static_assert(offsetof(MarvelWallBuildingActor_HasEverParentWallActor, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_HasEverParentWallActor::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.HasFinishedBuilding
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_HasFinishedBuilding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_HasFinishedBuilding) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_HasFinishedBuilding");
static_assert(sizeof(MarvelWallBuildingActor_HasFinishedBuilding) == 0x000001, "Wrong size on MarvelWallBuildingActor_HasFinishedBuilding");
static_assert(offsetof(MarvelWallBuildingActor_HasFinishedBuilding, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_HasFinishedBuilding::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.IsWallActivating
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_IsWallActivating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_IsWallActivating) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_IsWallActivating");
static_assert(sizeof(MarvelWallBuildingActor_IsWallActivating) == 0x000001, "Wrong size on MarvelWallBuildingActor_IsWallActivating");
static_assert(offsetof(MarvelWallBuildingActor_IsWallActivating, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_IsWallActivating::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.IsWallPreviewVisible
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_IsWallPreviewVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_IsWallPreviewVisible) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_IsWallPreviewVisible");
static_assert(sizeof(MarvelWallBuildingActor_IsWallPreviewVisible) == 0x000001, "Wrong size on MarvelWallBuildingActor_IsWallPreviewVisible");
static_assert(offsetof(MarvelWallBuildingActor_IsWallPreviewVisible, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_IsWallPreviewVisible::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.IsWallScaleApproved
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_IsWallScaleApproved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_IsWallScaleApproved) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_IsWallScaleApproved");
static_assert(sizeof(MarvelWallBuildingActor_IsWallScaleApproved) == 0x000001, "Wrong size on MarvelWallBuildingActor_IsWallScaleApproved");
static_assert(offsetof(MarvelWallBuildingActor_IsWallScaleApproved, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_IsWallScaleApproved::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingActor.IsWallScaleFull
// 0x0001 (0x0001 - 0x0000)
struct MarvelWallBuildingActor_IsWallScaleFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingActor_IsWallScaleFull) == 0x000001, "Wrong alignment on MarvelWallBuildingActor_IsWallScaleFull");
static_assert(sizeof(MarvelWallBuildingActor_IsWallScaleFull) == 0x000001, "Wrong size on MarvelWallBuildingActor_IsWallScaleFull");
static_assert(offsetof(MarvelWallBuildingActor_IsWallScaleFull, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingActor_IsWallScaleFull::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelSummonedComp_WallBuilding.GetWallBuildingAbilityConfig
// 0x0008 (0x0008 - 0x0000)
struct MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig final
{
public:
	class UMarvelWallBuildingAbilityConfig*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig) == 0x000008, "Wrong alignment on MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig");
static_assert(sizeof(MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig) == 0x000008, "Wrong size on MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig");
static_assert(offsetof(MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig, ReturnValue) == 0x000000, "Member 'MarvelSummonedComp_WallBuilding_GetWallBuildingAbilityConfig::ReturnValue' has a wrong offset!");

// Function Hero_1027.Summoned_10274101_AnimInstance.OnWallActivateStateChange
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10274101_AnimInstance_OnWallActivateStateChange final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10274101_AnimInstance_OnWallActivateStateChange) == 0x000001, "Wrong alignment on Summoned_10274101_AnimInstance_OnWallActivateStateChange");
static_assert(sizeof(Summoned_10274101_AnimInstance_OnWallActivateStateChange) == 0x000001, "Wrong size on Summoned_10274101_AnimInstance_OnWallActivateStateChange");
static_assert(offsetof(Summoned_10274101_AnimInstance_OnWallActivateStateChange, bNewState) == 0x000000, "Member 'Summoned_10274101_AnimInstance_OnWallActivateStateChange::bNewState' has a wrong offset!");

// Function Hero_1027.Summoned_10274101_AnimInstance.SetBindSummonerState
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10274101_AnimInstance_SetBindSummonerState final
{
public:
	class AMarvelWallBuildingActor*               InWallActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBindState;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10274101_AnimInstance_SetBindSummonerState) == 0x000008, "Wrong alignment on Summoned_10274101_AnimInstance_SetBindSummonerState");
static_assert(sizeof(Summoned_10274101_AnimInstance_SetBindSummonerState) == 0x000010, "Wrong size on Summoned_10274101_AnimInstance_SetBindSummonerState");
static_assert(offsetof(Summoned_10274101_AnimInstance_SetBindSummonerState, InWallActor) == 0x000000, "Member 'Summoned_10274101_AnimInstance_SetBindSummonerState::InWallActor' has a wrong offset!");
static_assert(offsetof(Summoned_10274101_AnimInstance_SetBindSummonerState, bBindState) == 0x000008, "Member 'Summoned_10274101_AnimInstance_SetBindSummonerState::bBindState' has a wrong offset!");

// Function Hero_1027.MarvelWallBuildingAbilityConfig.GetWallActorCDO
// 0x0008 (0x0008 - 0x0000)
struct MarvelWallBuildingAbilityConfig_GetWallActorCDO final
{
public:
	class AMarvelWallBuildingActor*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelWallBuildingAbilityConfig_GetWallActorCDO) == 0x000008, "Wrong alignment on MarvelWallBuildingAbilityConfig_GetWallActorCDO");
static_assert(sizeof(MarvelWallBuildingAbilityConfig_GetWallActorCDO) == 0x000008, "Wrong size on MarvelWallBuildingAbilityConfig_GetWallActorCDO");
static_assert(offsetof(MarvelWallBuildingAbilityConfig_GetWallActorCDO, ReturnValue) == 0x000000, "Member 'MarvelWallBuildingAbilityConfig_GetWallActorCDO::ReturnValue' has a wrong offset!");

// Function Hero_1027.Ability_102741.K2_CommitCustomAbilityCost
// 0x0004 (0x0004 - 0x0000)
struct Ability_102741_K2_CommitCustomAbilityCost final
{
public:
	int32                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_K2_CommitCustomAbilityCost) == 0x000004, "Wrong alignment on Ability_102741_K2_CommitCustomAbilityCost");
static_assert(sizeof(Ability_102741_K2_CommitCustomAbilityCost) == 0x000004, "Wrong size on Ability_102741_K2_CommitCustomAbilityCost");
static_assert(offsetof(Ability_102741_K2_CommitCustomAbilityCost, Multiplier) == 0x000000, "Member 'Ability_102741_K2_CommitCustomAbilityCost::Multiplier' has a wrong offset!");

// DelegateFunction Hero_1027.Ability_102741.OnNumOwnedWallsChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Ability_102741_OnNumOwnedWallsChanged__DelegateSignature final
{
public:
	int32                                         NumWalls;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWalls;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_OnNumOwnedWallsChanged__DelegateSignature) == 0x000004, "Wrong alignment on Ability_102741_OnNumOwnedWallsChanged__DelegateSignature");
static_assert(sizeof(Ability_102741_OnNumOwnedWallsChanged__DelegateSignature) == 0x000008, "Wrong size on Ability_102741_OnNumOwnedWallsChanged__DelegateSignature");
static_assert(offsetof(Ability_102741_OnNumOwnedWallsChanged__DelegateSignature, NumWalls) == 0x000000, "Member 'Ability_102741_OnNumOwnedWallsChanged__DelegateSignature::NumWalls' has a wrong offset!");
static_assert(offsetof(Ability_102741_OnNumOwnedWallsChanged__DelegateSignature, MaxWalls) == 0x000004, "Member 'Ability_102741_OnNumOwnedWallsChanged__DelegateSignature::MaxWalls' has a wrong offset!");

// Function Hero_1027.Ability_102741.OnOwnedWallActorEndTask
// 0x0008 (0x0008 - 0x0000)
struct Ability_102741_OnOwnedWallActorEndTask final
{
public:
	class AActor*                                 InWallActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_OnOwnedWallActorEndTask) == 0x000008, "Wrong alignment on Ability_102741_OnOwnedWallActorEndTask");
static_assert(sizeof(Ability_102741_OnOwnedWallActorEndTask) == 0x000008, "Wrong size on Ability_102741_OnOwnedWallActorEndTask");
static_assert(offsetof(Ability_102741_OnOwnedWallActorEndTask, InWallActor) == 0x000000, "Member 'Ability_102741_OnOwnedWallActorEndTask::InWallActor' has a wrong offset!");

// DelegateFunction Hero_1027.Ability_102741.OnWallBuildingModeChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Ability_102741_OnWallBuildingModeChanged__DelegateSignature final
{
public:
	EWallBuildingMode                             InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_OnWallBuildingModeChanged__DelegateSignature) == 0x000001, "Wrong alignment on Ability_102741_OnWallBuildingModeChanged__DelegateSignature");
static_assert(sizeof(Ability_102741_OnWallBuildingModeChanged__DelegateSignature) == 0x000001, "Wrong size on Ability_102741_OnWallBuildingModeChanged__DelegateSignature");
static_assert(offsetof(Ability_102741_OnWallBuildingModeChanged__DelegateSignature, InMode) == 0x000000, "Member 'Ability_102741_OnWallBuildingModeChanged__DelegateSignature::InMode' has a wrong offset!");

// Function Hero_1027.Ability_102741.SetWallBuildingMode
// 0x0001 (0x0001 - 0x0000)
struct Ability_102741_SetWallBuildingMode final
{
public:
	EWallBuildingMode                             InBuildingMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_SetWallBuildingMode) == 0x000001, "Wrong alignment on Ability_102741_SetWallBuildingMode");
static_assert(sizeof(Ability_102741_SetWallBuildingMode) == 0x000001, "Wrong size on Ability_102741_SetWallBuildingMode");
static_assert(offsetof(Ability_102741_SetWallBuildingMode, InBuildingMode) == 0x000000, "Member 'Ability_102741_SetWallBuildingMode::InBuildingMode' has a wrong offset!");

// Function Hero_1027.Ability_102741.GetMaxOwnedWalls
// 0x0004 (0x0004 - 0x0000)
struct Ability_102741_GetMaxOwnedWalls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_GetMaxOwnedWalls) == 0x000004, "Wrong alignment on Ability_102741_GetMaxOwnedWalls");
static_assert(sizeof(Ability_102741_GetMaxOwnedWalls) == 0x000004, "Wrong size on Ability_102741_GetMaxOwnedWalls");
static_assert(offsetof(Ability_102741_GetMaxOwnedWalls, ReturnValue) == 0x000000, "Member 'Ability_102741_GetMaxOwnedWalls::ReturnValue' has a wrong offset!");

// Function Hero_1027.Ability_102741.GetNumOwnedWalls
// 0x0004 (0x0004 - 0x0000)
struct Ability_102741_GetNumOwnedWalls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_GetNumOwnedWalls) == 0x000004, "Wrong alignment on Ability_102741_GetNumOwnedWalls");
static_assert(sizeof(Ability_102741_GetNumOwnedWalls) == 0x000004, "Wrong size on Ability_102741_GetNumOwnedWalls");
static_assert(offsetof(Ability_102741_GetNumOwnedWalls, ReturnValue) == 0x000000, "Member 'Ability_102741_GetNumOwnedWalls::ReturnValue' has a wrong offset!");

// Function Hero_1027.Ability_102741.GetWallBuildingMode
// 0x0001 (0x0001 - 0x0000)
struct Ability_102741_GetWallBuildingMode final
{
public:
	EWallBuildingMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102741_GetWallBuildingMode) == 0x000001, "Wrong alignment on Ability_102741_GetWallBuildingMode");
static_assert(sizeof(Ability_102741_GetWallBuildingMode) == 0x000001, "Wrong size on Ability_102741_GetWallBuildingMode");
static_assert(offsetof(Ability_102741_GetWallBuildingMode, ReturnValue) == 0x000000, "Member 'Ability_102741_GetWallBuildingMode::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_TraceActor_10274101.OnWallPreviewStateChange
// 0x0001 (0x0001 - 0x0000)
struct Cue_TraceActor_10274101_OnWallPreviewStateChange final
{
public:
	EWallPreviewState                             InPreviewState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_TraceActor_10274101_OnWallPreviewStateChange) == 0x000001, "Wrong alignment on Cue_TraceActor_10274101_OnWallPreviewStateChange");
static_assert(sizeof(Cue_TraceActor_10274101_OnWallPreviewStateChange) == 0x000001, "Wrong size on Cue_TraceActor_10274101_OnWallPreviewStateChange");
static_assert(offsetof(Cue_TraceActor_10274101_OnWallPreviewStateChange, InPreviewState) == 0x000000, "Member 'Cue_TraceActor_10274101_OnWallPreviewStateChange::InPreviewState' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.GetUIWidget
// 0x0008 (0x0008 - 0x0000)
struct Cue_Summoner_Loop_10274101_GetUIWidget final
{
public:
	class UMarvelUserWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_GetUIWidget) == 0x000008, "Wrong alignment on Cue_Summoner_Loop_10274101_GetUIWidget");
static_assert(sizeof(Cue_Summoner_Loop_10274101_GetUIWidget) == 0x000008, "Wrong size on Cue_Summoner_Loop_10274101_GetUIWidget");
static_assert(offsetof(Cue_Summoner_Loop_10274101_GetUIWidget, ReturnValue) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_GetUIWidget::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.OnEnhanceStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10274101_OnEnhanceStateChanged final
{
public:
	bool                                          bIsEnhanced;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_OnEnhanceStateChanged) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10274101_OnEnhanceStateChanged");
static_assert(sizeof(Cue_Summoner_Loop_10274101_OnEnhanceStateChanged) == 0x000001, "Wrong size on Cue_Summoner_Loop_10274101_OnEnhanceStateChanged");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnEnhanceStateChanged, bIsEnhanced) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_OnEnhanceStateChanged::bIsEnhanced' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.OnTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct Cue_Summoner_Loop_10274101_OnTakeDamage final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InSourceAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_OnTakeDamage) == 0x000008, "Wrong alignment on Cue_Summoner_Loop_10274101_OnTakeDamage");
static_assert(sizeof(Cue_Summoner_Loop_10274101_OnTakeDamage) == 0x000028, "Wrong size on Cue_Summoner_Loop_10274101_OnTakeDamage");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnTakeDamage, InSource) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_OnTakeDamage::InSource' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnTakeDamage, InSourceAvatar) == 0x000008, "Member 'Cue_Summoner_Loop_10274101_OnTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'Cue_Summoner_Loop_10274101_OnTakeDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.OnWallActivateStateChange_ThreadSafe
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe");
static_assert(sizeof(Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe) == 0x000001, "Wrong size on Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe, bNewState) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_OnWallActivateStateChange_ThreadSafe::bNewState' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.OnWallAttackStart
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10274101_OnWallAttackStart final
{
public:
	bool                                          bAttackFront;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_OnWallAttackStart) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10274101_OnWallAttackStart");
static_assert(sizeof(Cue_Summoner_Loop_10274101_OnWallAttackStart) == 0x000001, "Wrong size on Cue_Summoner_Loop_10274101_OnWallAttackStart");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnWallAttackStart, bAttackFront) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_OnWallAttackStart::bAttackFront' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.OnWallHealthStateChange
// 0x0002 (0x0002 - 0x0000)
struct Cue_Summoner_Loop_10274101_OnWallHealthStateChange final
{
public:
	EWallHealthState                              NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallHealthState                              OldState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_OnWallHealthStateChange) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10274101_OnWallHealthStateChange");
static_assert(sizeof(Cue_Summoner_Loop_10274101_OnWallHealthStateChange) == 0x000002, "Wrong size on Cue_Summoner_Loop_10274101_OnWallHealthStateChange");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnWallHealthStateChange, NewState) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_OnWallHealthStateChange::NewState' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10274101_OnWallHealthStateChange, OldState) == 0x000001, "Member 'Cue_Summoner_Loop_10274101_OnWallHealthStateChange::OldState' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10274101.ComputeClipLength
// 0x0008 (0x0008 - 0x0000)
struct Cue_Summoner_Loop_10274101_ComputeClipLength final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10274101_ComputeClipLength) == 0x000004, "Wrong alignment on Cue_Summoner_Loop_10274101_ComputeClipLength");
static_assert(sizeof(Cue_Summoner_Loop_10274101_ComputeClipLength) == 0x000008, "Wrong size on Cue_Summoner_Loop_10274101_ComputeClipLength");
static_assert(offsetof(Cue_Summoner_Loop_10274101_ComputeClipLength, InScale) == 0x000000, "Member 'Cue_Summoner_Loop_10274101_ComputeClipLength::InScale' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10274101_ComputeClipLength, ReturnValue) == 0x000004, "Member 'Cue_Summoner_Loop_10274101_ComputeClipLength::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelSummonedAbilityInterface.BindSummonedChangeDelegate
// 0x0014 (0x0014 - 0x0000)
struct MarvelSummonedAbilityInterface_BindSummonedChangeDelegate final
{
public:
	TDelegate<void(class AActor* InActor, bool bIsAdd)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSummonedAbilityInterface_BindSummonedChangeDelegate) == 0x000004, "Wrong alignment on MarvelSummonedAbilityInterface_BindSummonedChangeDelegate");
static_assert(sizeof(MarvelSummonedAbilityInterface_BindSummonedChangeDelegate) == 0x000014, "Wrong size on MarvelSummonedAbilityInterface_BindSummonedChangeDelegate");
static_assert(offsetof(MarvelSummonedAbilityInterface_BindSummonedChangeDelegate, InDelegate) == 0x000000, "Member 'MarvelSummonedAbilityInterface_BindSummonedChangeDelegate::InDelegate' has a wrong offset!");

// Function Hero_1027.MarvelSummonedAbilityInterface.GetOnSummonedChangeDelegate
// 0x0010 (0x0010 - 0x0000)
struct MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate final
{
public:
	FMulticastInlineDelegateProperty_             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate) == 0x000008, "Wrong alignment on MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate");
static_assert(sizeof(MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate) == 0x000010, "Wrong size on MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate");
static_assert(offsetof(MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate, ReturnValue) == 0x000000, "Member 'MarvelSummonedAbilityInterface_GetOnSummonedChangeDelegate::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelSummonedAbilityInterface.UnBindSummonedChangeDelegate
// 0x0014 (0x0014 - 0x0000)
struct MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate final
{
public:
	TDelegate<void(class AActor* InActor, bool bIsAdd)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate) == 0x000004, "Wrong alignment on MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate");
static_assert(sizeof(MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate) == 0x000014, "Wrong size on MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate");
static_assert(offsetof(MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate, InDelegate) == 0x000000, "Member 'MarvelSummonedAbilityInterface_UnBindSummonedChangeDelegate::InDelegate' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTargetActor_WallBuilding.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged");
static_assert(sizeof(MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged) == 0x000001, "Wrong size on MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged");
static_assert(offsetof(MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'MarvelAbilityTargetActor_WallBuilding_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// DelegateFunction Hero_1027.MarvelAbilityTargetActor_WallBuilding.OnWallPreviewStateChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature final
{
public:
	EWallPreviewState                             InPreviewState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature) == 0x000001, "Wrong alignment on MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature");
static_assert(sizeof(MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature) == 0x000001, "Wrong size on MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature");
static_assert(offsetof(MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature, InPreviewState) == 0x000000, "Member 'MarvelAbilityTargetActor_WallBuilding_OnWallPreviewStateChange__DelegateSignature::InPreviewState' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.FindBuildingLoc
// 0x0018 (0x0018 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc final
{
public:
	class UMarvelGameplayAbility*                 OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelAbilityTargetActor_WallBuilding> TraceActorClass_0;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_FindBuildingLoc*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc) == 0x000008, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc) == 0x000018, "Wrong size on MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc, OwningAbility) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc, TraceActorClass_0) == 0x000008, "Member 'MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc::TraceActorClass_0' has a wrong offset!");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc, ReturnValue) == 0x000010, "Member 'MarvelAbilityTask_FindBuildingLoc_FindBuildingLoc::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.SetBuildingMode
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_SetBuildingMode final
{
public:
	EWallBuildingMode                             InBuildingMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_SetBuildingMode) == 0x000001, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_SetBuildingMode");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_SetBuildingMode) == 0x000001, "Wrong size on MarvelAbilityTask_FindBuildingLoc_SetBuildingMode");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_SetBuildingMode, InBuildingMode) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_SetBuildingMode::InBuildingMode' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.SetHasConfirmed
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed final
{
public:
	bool                                          bInHasConfirmed;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed) == 0x000001, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed) == 0x000001, "Wrong size on MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed, bInHasConfirmed) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_SetHasConfirmed::bInHasConfirmed' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.SetIsConfirmingStage
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage) == 0x000001, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage) == 0x000001, "Wrong size on MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage, bNewState) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_SetIsConfirmingStage::bNewState' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.GetFindBuildingPlaces
// 0x0018 (0x0018 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces final
{
public:
	TArray<struct FFindBuildingPlace>             OutPlaces;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces) == 0x000008, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces) == 0x000018, "Wrong size on MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces, OutPlaces) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces::OutPlaces' has a wrong offset!");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces, ReturnValue) == 0x000010, "Member 'MarvelAbilityTask_FindBuildingLoc_GetFindBuildingPlaces::ReturnValue' has a wrong offset!");

// Function Hero_1027.MarvelAbilityTask_FindBuildingLoc.HasFindBuildingPlaces
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces) == 0x000001, "Wrong alignment on MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces");
static_assert(sizeof(MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces) == 0x000001, "Wrong size on MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces");
static_assert(offsetof(MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces, ReturnValue) == 0x000000, "Member 'MarvelAbilityTask_FindBuildingLoc_HasFindBuildingPlaces::ReturnValue' has a wrong offset!");

// Function Hero_1027.Ability_102742.GetSelectTarget
// 0x0008 (0x0008 - 0x0000)
struct Ability_102742_GetSelectTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102742_GetSelectTarget) == 0x000008, "Wrong alignment on Ability_102742_GetSelectTarget");
static_assert(sizeof(Ability_102742_GetSelectTarget) == 0x000008, "Wrong size on Ability_102742_GetSelectTarget");
static_assert(offsetof(Ability_102742_GetSelectTarget, ReturnValue) == 0x000000, "Member 'Ability_102742_GetSelectTarget::ReturnValue' has a wrong offset!");

// Function Hero_1027.Ability_102742.VerifyPrimaryTarget
// 0x0010 (0x0010 - 0x0000)
struct Ability_102742_VerifyPrimaryTarget final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_102742_VerifyPrimaryTarget) == 0x000008, "Wrong alignment on Ability_102742_VerifyPrimaryTarget");
static_assert(sizeof(Ability_102742_VerifyPrimaryTarget) == 0x000010, "Wrong size on Ability_102742_VerifyPrimaryTarget");
static_assert(offsetof(Ability_102742_VerifyPrimaryTarget, InTarget) == 0x000000, "Member 'Ability_102742_VerifyPrimaryTarget::InTarget' has a wrong offset!");
static_assert(offsetof(Ability_102742_VerifyPrimaryTarget, ReturnValue) == 0x000008, "Member 'Ability_102742_VerifyPrimaryTarget::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Scope_Loop_10274301.CreateAuraPlantFX
// 0x00B0 (0x00B0 - 0x0000)
struct Cue_Scope_Loop_10274301_CreateAuraPlantFX final
{
public:
	struct FAuraPlantActiveFXSpec                 OutActiveFXSpec;                                   // 0x0000(0x0070)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                InOrigin;                                          // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         FXAsset;                                           // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0090(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Scope_Loop_10274301_CreateAuraPlantFX) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10274301_CreateAuraPlantFX");
static_assert(sizeof(Cue_Scope_Loop_10274301_CreateAuraPlantFX) == 0x0000B0, "Wrong size on Cue_Scope_Loop_10274301_CreateAuraPlantFX");
static_assert(offsetof(Cue_Scope_Loop_10274301_CreateAuraPlantFX, OutActiveFXSpec) == 0x000000, "Member 'Cue_Scope_Loop_10274301_CreateAuraPlantFX::OutActiveFXSpec' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10274301_CreateAuraPlantFX, InOrigin) == 0x000070, "Member 'Cue_Scope_Loop_10274301_CreateAuraPlantFX::InOrigin' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10274301_CreateAuraPlantFX, FXAsset) == 0x000088, "Member 'Cue_Scope_Loop_10274301_CreateAuraPlantFX::FXAsset' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10274301_CreateAuraPlantFX, InLocation) == 0x000090, "Member 'Cue_Scope_Loop_10274301_CreateAuraPlantFX::InLocation' has a wrong offset!");
static_assert(offsetof(Cue_Scope_Loop_10274301_CreateAuraPlantFX, ReturnValue) == 0x0000A8, "Member 'Cue_Scope_Loop_10274301_CreateAuraPlantFX::ReturnValue' has a wrong offset!");

// Function Hero_1027.Cue_Scope_Loop_10274301.FXBeginFadeOut
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_10274301_FXBeginFadeOut final
{
public:
	class UFXSystemComponent*                     FXComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10274301_FXBeginFadeOut) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10274301_FXBeginFadeOut");
static_assert(sizeof(Cue_Scope_Loop_10274301_FXBeginFadeOut) == 0x000008, "Wrong size on Cue_Scope_Loop_10274301_FXBeginFadeOut");
static_assert(offsetof(Cue_Scope_Loop_10274301_FXBeginFadeOut, FXComponent) == 0x000000, "Member 'Cue_Scope_Loop_10274301_FXBeginFadeOut::FXComponent' has a wrong offset!");

// Function Hero_1027.Cue_Scope_Loop_10274301.OnBaseActorEndTask
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_10274301_OnBaseActorEndTask final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10274301_OnBaseActorEndTask) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10274301_OnBaseActorEndTask");
static_assert(sizeof(Cue_Scope_Loop_10274301_OnBaseActorEndTask) == 0x000008, "Wrong size on Cue_Scope_Loop_10274301_OnBaseActorEndTask");
static_assert(offsetof(Cue_Scope_Loop_10274301_OnBaseActorEndTask, InActor) == 0x000000, "Member 'Cue_Scope_Loop_10274301_OnBaseActorEndTask::InActor' has a wrong offset!");

// Function Hero_1027.Cue_Scope_Loop_10274301.OnClientPlayerViewSideChange
// 0x0001 (0x0001 - 0x0000)
struct Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange) == 0x000001, "Wrong alignment on Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange");
static_assert(sizeof(Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange) == 0x000001, "Wrong size on Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange");
static_assert(offsetof(Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange, InViewSide) == 0x000000, "Member 'Cue_Scope_Loop_10274301_OnClientPlayerViewSideChange::InViewSide' has a wrong offset!");

// Function Hero_1027.Cue_Scope_Loop_10274301.OnFXFadeOutEnd
// 0x0008 (0x0008 - 0x0000)
struct Cue_Scope_Loop_10274301_OnFXFadeOutEnd final
{
public:
	class UFXSystemComponent*                     FXComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Scope_Loop_10274301_OnFXFadeOutEnd) == 0x000008, "Wrong alignment on Cue_Scope_Loop_10274301_OnFXFadeOutEnd");
static_assert(sizeof(Cue_Scope_Loop_10274301_OnFXFadeOutEnd) == 0x000008, "Wrong size on Cue_Scope_Loop_10274301_OnFXFadeOutEnd");
static_assert(offsetof(Cue_Scope_Loop_10274301_OnFXFadeOutEnd, FXComponent) == 0x000000, "Member 'Cue_Scope_Loop_10274301_OnFXFadeOutEnd::FXComponent' has a wrong offset!");

// Function Hero_1027.Cue_Summoner_Loop_10275101.OnWallDefenceApply
// 0x0008 (0x0008 - 0x0000)
struct Cue_Summoner_Loop_10275101_OnWallDefenceApply final
{
public:
	struct FWallDefendNotify                      NewWallDefendNotify;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10275101_OnWallDefenceApply) == 0x000004, "Wrong alignment on Cue_Summoner_Loop_10275101_OnWallDefenceApply");
static_assert(sizeof(Cue_Summoner_Loop_10275101_OnWallDefenceApply) == 0x000008, "Wrong size on Cue_Summoner_Loop_10275101_OnWallDefenceApply");
static_assert(offsetof(Cue_Summoner_Loop_10275101_OnWallDefenceApply, NewWallDefendNotify) == 0x000000, "Member 'Cue_Summoner_Loop_10275101_OnWallDefenceApply::NewWallDefendNotify' has a wrong offset!");

// Function Hero_1027.BuffAbility_ForceMoveTo_10276103.OnDashAbilityFinish
// 0x0001 (0x0001 - 0x0000)
struct BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish final
{
public:
	EDashStopReason                               Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish) == 0x000001, "Wrong alignment on BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish");
static_assert(sizeof(BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish) == 0x000001, "Wrong size on BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish");
static_assert(offsetof(BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish, Reason) == 0x000000, "Member 'BuffAbility_ForceMoveTo_10276103_OnDashAbilityFinish::Reason' has a wrong offset!");

// Function Hero_1027.Cue_Buff_10276103.OnTargetCharacterTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Cue_Buff_10276103_OnTargetCharacterTagUpdated final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Buff_10276103_OnTargetCharacterTagUpdated) == 0x000004, "Wrong alignment on Cue_Buff_10276103_OnTargetCharacterTagUpdated");
static_assert(sizeof(Cue_Buff_10276103_OnTargetCharacterTagUpdated) == 0x000010, "Wrong size on Cue_Buff_10276103_OnTargetCharacterTagUpdated");
static_assert(offsetof(Cue_Buff_10276103_OnTargetCharacterTagUpdated, Tag) == 0x000000, "Member 'Cue_Buff_10276103_OnTargetCharacterTagUpdated::Tag' has a wrong offset!");
static_assert(offsetof(Cue_Buff_10276103_OnTargetCharacterTagUpdated, bTagExists) == 0x00000C, "Member 'Cue_Buff_10276103_OnTargetCharacterTagUpdated::bTagExists' has a wrong offset!");

// Function Hero_1027.EpicMomentAction_1027.OnGameplayEffectAppliedToTarget
// 0x0018 (0x0018 - 0x0000)
struct EpicMomentAction_1027_OnGameplayEffectAppliedToTarget final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpecStackHandle         GameplayEffectSpecHandle;                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveGameplayEffectHandle;                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1027_OnGameplayEffectAppliedToTarget) == 0x000008, "Wrong alignment on EpicMomentAction_1027_OnGameplayEffectAppliedToTarget");
static_assert(sizeof(EpicMomentAction_1027_OnGameplayEffectAppliedToTarget) == 0x000018, "Wrong size on EpicMomentAction_1027_OnGameplayEffectAppliedToTarget");
static_assert(offsetof(EpicMomentAction_1027_OnGameplayEffectAppliedToTarget, ASC) == 0x000000, "Member 'EpicMomentAction_1027_OnGameplayEffectAppliedToTarget::ASC' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1027_OnGameplayEffectAppliedToTarget, GameplayEffectSpecHandle) == 0x000008, "Member 'EpicMomentAction_1027_OnGameplayEffectAppliedToTarget::GameplayEffectSpecHandle' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1027_OnGameplayEffectAppliedToTarget, ActiveGameplayEffectHandle) == 0x000010, "Member 'EpicMomentAction_1027_OnGameplayEffectAppliedToTarget::ActiveGameplayEffectHandle' has a wrong offset!");

// Function Hero_1027.GrootChildActor.OnPlayerViewSideChanged
// 0x0001 (0x0001 - 0x0000)
struct GrootChildActor_OnPlayerViewSideChanged final
{
public:
	EClientPlayerViewSide                         InViewSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrootChildActor_OnPlayerViewSideChanged) == 0x000001, "Wrong alignment on GrootChildActor_OnPlayerViewSideChanged");
static_assert(sizeof(GrootChildActor_OnPlayerViewSideChanged) == 0x000001, "Wrong size on GrootChildActor_OnPlayerViewSideChanged");
static_assert(offsetof(GrootChildActor_OnPlayerViewSideChanged, InViewSide) == 0x000000, "Member 'GrootChildActor_OnPlayerViewSideChanged::InViewSide' has a wrong offset!");

// Function Hero_1027.TabData_1027.OnActorTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct TabData_1027_OnActorTakeDamage final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1027_OnActorTakeDamage) == 0x000008, "Wrong alignment on TabData_1027_OnActorTakeDamage");
static_assert(sizeof(TabData_1027_OnActorTakeDamage) == 0x000030, "Wrong size on TabData_1027_OnActorTakeDamage");
static_assert(offsetof(TabData_1027_OnActorTakeDamage, Instigator) == 0x000000, "Member 'TabData_1027_OnActorTakeDamage::Instigator' has a wrong offset!");
static_assert(offsetof(TabData_1027_OnActorTakeDamage, Target) == 0x000008, "Member 'TabData_1027_OnActorTakeDamage::Target' has a wrong offset!");
static_assert(offsetof(TabData_1027_OnActorTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'TabData_1027_OnActorTakeDamage::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(TabData_1027_OnActorTakeDamage, ExtraData) == 0x000028, "Member 'TabData_1027_OnActorTakeDamage::ExtraData' has a wrong offset!");

// Function Hero_1027.WallBuildingStatics.CalcBuildingEdgeByLoc3
// 0x00C0 (0x00C0 - 0x0000)
struct WallBuildingStatics_CalcBuildingEdgeByLoc3 final
{
public:
	EWallBuildingEdge                             OutBuildingEdge;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWallExtend;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InWallTransform;                                   // 0x0040(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ErrorTolerance;                                    // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WallBuildingStatics_CalcBuildingEdgeByLoc3) == 0x000010, "Wrong alignment on WallBuildingStatics_CalcBuildingEdgeByLoc3");
static_assert(sizeof(WallBuildingStatics_CalcBuildingEdgeByLoc3) == 0x0000C0, "Wrong size on WallBuildingStatics_CalcBuildingEdgeByLoc3");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, OutBuildingEdge) == 0x000000, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::OutBuildingEdge' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, InLocation) == 0x000008, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::InLocation' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, InWallExtend) == 0x000020, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::InWallExtend' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, InWallTransform) == 0x000040, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::InWallTransform' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, ErrorTolerance) == 0x0000A0, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc3, ReturnValue) == 0x0000B0, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc3::ReturnValue' has a wrong offset!");

// Function Hero_1027.WallBuildingStatics.CalcBuildingEdgeByLoc4
// 0x00C0 (0x00C0 - 0x0000)
struct WallBuildingStatics_CalcBuildingEdgeByLoc4 final
{
public:
	EWallBuildingEdge                             OutBuildingEdge;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallBuildingMode                             InBuildingMode;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InWallExtend;                                      // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InWallTransform;                                   // 0x0040(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ErrorTolerance;                                    // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WallBuildingStatics_CalcBuildingEdgeByLoc4) == 0x000010, "Wrong alignment on WallBuildingStatics_CalcBuildingEdgeByLoc4");
static_assert(sizeof(WallBuildingStatics_CalcBuildingEdgeByLoc4) == 0x0000C0, "Wrong size on WallBuildingStatics_CalcBuildingEdgeByLoc4");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, OutBuildingEdge) == 0x000000, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::OutBuildingEdge' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, InLocation) == 0x000008, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::InLocation' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, InBuildingMode) == 0x000020, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::InBuildingMode' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, InWallExtend) == 0x000028, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::InWallExtend' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, InWallTransform) == 0x000040, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::InWallTransform' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, ErrorTolerance) == 0x0000A0, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(WallBuildingStatics_CalcBuildingEdgeByLoc4, ReturnValue) == 0x0000B0, "Member 'WallBuildingStatics_CalcBuildingEdgeByLoc4::ReturnValue' has a wrong offset!");

}

