#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIParticle

#include "Basic.hpp"

#include "UIParticle_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UIParticle.UIParticle
// 0x0030 (0x01E8 - 0x01B8)
class UUIParticle final : public UWidget
{
public:
	class UUIParticleAsset*                       Asset;                                             // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x01D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x16];                                     // 0x01D2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticle">();
	}
	static class UUIParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticle>();
	}
};
//static_assert(alignof(UUIParticle) == 0x000008, "Wrong alignment on UUIParticle");
//static_assert(sizeof(UUIParticle) == 0x0001E8, "Wrong size on UUIParticle");
//static_assert(offsetof(UUIParticle, Asset) == 0x0001B8, "Member 'UUIParticle::Asset' has a wrong offset!");
//static_assert(offsetof(UUIParticle, EventOnEnd) == 0x0001C0, "Member 'UUIParticle::EventOnEnd' has a wrong offset!");
//static_assert(offsetof(UUIParticle, IsPlaying) == 0x0001D1, "Member 'UUIParticle::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleAsset
// 0x0010 (0x0040 - 0x0030)
class UUIParticleAsset final : public UObject
{
public:
	TArray<struct FUIParticleEmitterInfo>         Emitters;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleAsset">();
	}
	static class UUIParticleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleAsset>();
	}
};
//static_assert(alignof(UUIParticleAsset) == 0x000008, "Wrong alignment on UUIParticleAsset");
//static_assert(sizeof(UUIParticleAsset) == 0x000040, "Wrong size on UUIParticleAsset");
//static_assert(offsetof(UUIParticleAsset, Emitters) == 0x000030, "Member 'UUIParticleAsset::Emitters' has a wrong offset!");

// Class UIParticle.UIParticleEmitter
// 0x0030 (0x01E8 - 0x01B8)
class UUIParticleEmitter final : public UWidget
{
public:
	class UUIParticleEmitterAsset*                Asset;                                             // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x01D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x16];                                     // 0x01D2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitter">();
	}
	static class UUIParticleEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitter>();
	}
};
//static_assert(alignof(UUIParticleEmitter) == 0x000008, "Wrong alignment on UUIParticleEmitter");
//static_assert(sizeof(UUIParticleEmitter) == 0x0001E8, "Wrong size on UUIParticleEmitter");
//static_assert(offsetof(UUIParticleEmitter, Asset) == 0x0001B8, "Member 'UUIParticleEmitter::Asset' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitter, EventOnEnd) == 0x0001C0, "Member 'UUIParticleEmitter::EventOnEnd' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitter, IsPlaying) == 0x0001D1, "Member 'UUIParticleEmitter::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleEmitterAsset
// 0xD6E8 (0xD718 - 0x0030)
class UUIParticleEmitterAsset final : public UObject
{
public:
	EEmitterType                                  EmitterType;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitSeconds;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    MaxParticleCount;                                  // 0x0038(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SpawnParticlePerSecond;                            // 0x0828(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    ParticleEmitAngle;                                 // 0x1018(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FRange_Vector2D                        EmitPosRange;                                      // 0x1808(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPosotion_Vector2DCurve                EmitPosition;                                      // 0x1828(0x0FE0)(Edit, NativeAccessSpecifierPublic)
	bool                                          AutoEmitPosRange;                                  // 0x2808(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoScale;                                         // 0x2809(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleByX;                                          // 0x280A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280B[0x5];                                     // 0x280B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesignSize;                                        // 0x2810(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPositionType                                 PositionType;                                      // 0x2820(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2821[0x7];                                     // 0x2821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    LifeSpan;                                          // 0x2828(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Size;                                              // 0x3018(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Pivot;                                             // 0x3808(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationStart;                                     // 0x3FF8(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationSpeed;                                     // 0x47E8(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Color;                                             // 0x4FD8(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                ResourceObject;                                    // 0x57C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotationFollowSpeed;                               // 0x57D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSeparateSize;                                   // 0x57D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57D2[0x6];                                     // 0x57D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    Gravity;                                           // 0x57D8(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    StartSpeed;                                        // 0x5FC8(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    AirResistance;                                     // 0x67B8(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RadialAcceleration;                                // 0x6FA8(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    TangentialAcceleration;                            // 0x7798(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Radius;                                            // 0x7F88(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DegreePerSecond;                                   // 0x8778(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionX;                                         // 0x8F68(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionY;                                         // 0x9758(0x07F0)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChildEmitter>                  ChildrenEmitters;                                  // 0x9F48(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParams;                                      // 0x9F58(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParamsWhenStart;                             // 0x9F68(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EParticleDrawEffect                           DrawEffect;                                        // 0x9F78(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedDirection;                      // 0x9F79(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F7A[0x6];                                     // 0x9F7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedDirection;                         // 0x9F80(0x07F0)(Edit, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedVertical;                       // 0xA770(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A771[0x7];                                     // 0xA771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedVertical;                          // 0xA778(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DirectionScale;                                    // 0xAF68(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    VerticalDirectionScale;                            // 0xB758(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionStart;                                // 0xBF48(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionSpeed;                                // 0xC738(0x07F0)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionRange;                                // 0xCF28(0x07F0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitterAsset">();
	}
	static class UUIParticleEmitterAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitterAsset>();
	}
};
//static_assert(alignof(UUIParticleEmitterAsset) == 0x000008, "Wrong alignment on UUIParticleEmitterAsset");
//static_assert(sizeof(UUIParticleEmitterAsset) == 0x00D718, "Wrong size on UUIParticleEmitterAsset");
//static_assert(offsetof(UUIParticleEmitterAsset, EmitterType) == 0x000030, "Member 'UUIParticleEmitterAsset::EmitterType' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, EmitSeconds) == 0x000034, "Member 'UUIParticleEmitterAsset::EmitSeconds' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, MaxParticleCount) == 0x000038, "Member 'UUIParticleEmitterAsset::MaxParticleCount' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, SpawnParticlePerSecond) == 0x000828, "Member 'UUIParticleEmitterAsset::SpawnParticlePerSecond' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ParticleEmitAngle) == 0x001018, "Member 'UUIParticleEmitterAsset::ParticleEmitAngle' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, EmitPosRange) == 0x001808, "Member 'UUIParticleEmitterAsset::EmitPosRange' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, EmitPosition) == 0x001828, "Member 'UUIParticleEmitterAsset::EmitPosition' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, AutoEmitPosRange) == 0x002808, "Member 'UUIParticleEmitterAsset::AutoEmitPosRange' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, AutoScale) == 0x002809, "Member 'UUIParticleEmitterAsset::AutoScale' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ScaleByX) == 0x00280A, "Member 'UUIParticleEmitterAsset::ScaleByX' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, DesignSize) == 0x002810, "Member 'UUIParticleEmitterAsset::DesignSize' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, PositionType) == 0x002820, "Member 'UUIParticleEmitterAsset::PositionType' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, LifeSpan) == 0x002828, "Member 'UUIParticleEmitterAsset::LifeSpan' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, Size) == 0x003018, "Member 'UUIParticleEmitterAsset::Size' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, Pivot) == 0x003808, "Member 'UUIParticleEmitterAsset::Pivot' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, RotationStart) == 0x003FF8, "Member 'UUIParticleEmitterAsset::RotationStart' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, RotationSpeed) == 0x0047E8, "Member 'UUIParticleEmitterAsset::RotationSpeed' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, Color) == 0x004FD8, "Member 'UUIParticleEmitterAsset::Color' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ResourceObject) == 0x0057C8, "Member 'UUIParticleEmitterAsset::ResourceObject' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, RotationFollowSpeed) == 0x0057D0, "Member 'UUIParticleEmitterAsset::RotationFollowSpeed' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, UseSeparateSize) == 0x0057D1, "Member 'UUIParticleEmitterAsset::UseSeparateSize' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, Gravity) == 0x0057D8, "Member 'UUIParticleEmitterAsset::Gravity' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, StartSpeed) == 0x005FC8, "Member 'UUIParticleEmitterAsset::StartSpeed' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, AirResistance) == 0x0067B8, "Member 'UUIParticleEmitterAsset::AirResistance' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, RadialAcceleration) == 0x006FA8, "Member 'UUIParticleEmitterAsset::RadialAcceleration' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, TangentialAcceleration) == 0x007798, "Member 'UUIParticleEmitterAsset::TangentialAcceleration' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, Radius) == 0x007F88, "Member 'UUIParticleEmitterAsset::Radius' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, DegreePerSecond) == 0x008778, "Member 'UUIParticleEmitterAsset::DegreePerSecond' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, PositionX) == 0x008F68, "Member 'UUIParticleEmitterAsset::PositionX' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, PositionY) == 0x009758, "Member 'UUIParticleEmitterAsset::PositionY' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ChildrenEmitters) == 0x009F48, "Member 'UUIParticleEmitterAsset::ChildrenEmitters' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ScalarParams) == 0x009F58, "Member 'UUIParticleEmitterAsset::ScalarParams' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ScalarParamsWhenStart) == 0x009F68, "Member 'UUIParticleEmitterAsset::ScalarParamsWhenStart' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, DrawEffect) == 0x009F78, "Member 'UUIParticleEmitterAsset::DrawEffect' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedDirection) == 0x009F79, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedDirection' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedDirection) == 0x009F80, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedDirection' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedVertical) == 0x00A770, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedVertical' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedVertical) == 0x00A778, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedVertical' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, DirectionScale) == 0x00AF68, "Member 'UUIParticleEmitterAsset::DirectionScale' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, VerticalDirectionScale) == 0x00B758, "Member 'UUIParticleEmitterAsset::VerticalDirectionScale' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionStart) == 0x00BF48, "Member 'UUIParticleEmitterAsset::SineDirectionStart' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionSpeed) == 0x00C738, "Member 'UUIParticleEmitterAsset::SineDirectionSpeed' has a wrong offset!");
//static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionRange) == 0x00CF28, "Member 'UUIParticleEmitterAsset::SineDirectionRange' has a wrong offset!");

}

