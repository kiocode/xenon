#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RemoteControlCommon

#include "Basic.hpp"


namespace SDK
{

// Enum RemoteControlCommon.ERCProtocolBinding
// NumValues: 0x0003
enum class ERCProtocolBinding : uint8
{
	Added                                    = 0,
	Removed                                  = 1,
	ERCProtocolBinding_MAX                   = 2,
};

// Enum RemoteControlCommon.ERCMask
// NumValues: 0x0006
enum class ERCMask : uint8
{
	NoMask                                   = 0,
	MaskA                                    = 1,
	MaskB                                    = 2,
	MaskC                                    = 4,
	MaskD                                    = 8,
	ERCMask_MAX                              = 9,
};

// ScriptStruct RemoteControlCommon.RCPropertyContainerKey
// 0x000C (0x000C - 0x0000)
struct FRCPropertyContainerKey final
{
public:
	class FName                                   ValueTypeName;                                     // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRCPropertyContainerKey) == 0x000004, "Wrong alignment on FRCPropertyContainerKey");
//static_assert(sizeof(FRCPropertyContainerKey) == 0x00000C, "Wrong size on FRCPropertyContainerKey");
//static_assert(offsetof(FRCPropertyContainerKey, ValueTypeName) == 0x000000, "Member 'FRCPropertyContainerKey::ValueTypeName' has a wrong offset!");

// ScriptStruct RemoteControlCommon.RCNetworkAddress
// 0x0004 (0x0004 - 0x0000)
struct FRCNetworkAddress final
{
public:
	uint8                                         ClassA;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClassB;                                            // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClassC;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClassD;                                            // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRCNetworkAddress) == 0x000001, "Wrong alignment on FRCNetworkAddress");
//static_assert(sizeof(FRCNetworkAddress) == 0x000004, "Wrong size on FRCNetworkAddress");
//static_assert(offsetof(FRCNetworkAddress, ClassA) == 0x000000, "Member 'FRCNetworkAddress::ClassA' has a wrong offset!");
//static_assert(offsetof(FRCNetworkAddress, ClassB) == 0x000001, "Member 'FRCNetworkAddress::ClassB' has a wrong offset!");
//static_assert(offsetof(FRCNetworkAddress, ClassC) == 0x000002, "Member 'FRCNetworkAddress::ClassC' has a wrong offset!");
//static_assert(offsetof(FRCNetworkAddress, ClassD) == 0x000003, "Member 'FRCNetworkAddress::ClassD' has a wrong offset!");

// ScriptStruct RemoteControlCommon.RCNetworkAddressRange
// 0x0008 (0x0008 - 0x0000)
struct FRCNetworkAddressRange final
{
public:
	struct FRCNetworkAddress                      LowerBound;                                        // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCNetworkAddress                      UpperBound;                                        // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRCNetworkAddressRange) == 0x000001, "Wrong alignment on FRCNetworkAddressRange");
//static_assert(sizeof(FRCNetworkAddressRange) == 0x000008, "Wrong size on FRCNetworkAddressRange");
//static_assert(offsetof(FRCNetworkAddressRange, LowerBound) == 0x000000, "Member 'FRCNetworkAddressRange::LowerBound' has a wrong offset!");
//static_assert(offsetof(FRCNetworkAddressRange, UpperBound) == 0x000004, "Member 'FRCNetworkAddressRange::UpperBound' has a wrong offset!");

// ScriptStruct RemoteControlCommon.RCPassphrase
// 0x0020 (0x0020 - 0x0000)
struct FRCPassphrase final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Passphrase;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FRCPassphrase) == 0x000008, "Wrong alignment on FRCPassphrase");
//static_assert(sizeof(FRCPassphrase) == 0x000020, "Wrong size on FRCPassphrase");
//static_assert(offsetof(FRCPassphrase, Identifier) == 0x000000, "Member 'FRCPassphrase::Identifier' has a wrong offset!");
//static_assert(offsetof(FRCPassphrase, Passphrase) == 0x000010, "Member 'FRCPassphrase::Passphrase' has a wrong offset!");

}

