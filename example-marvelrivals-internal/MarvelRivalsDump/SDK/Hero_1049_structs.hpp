#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1049

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"


namespace SDK
{

// Enum Hero_1049.EAbilityStatus_104981
// NumValues: 0x0007
enum class EAbilityStatus_104981 : uint8
{
	NONE                                     = 0,
	Raising                                  = 1,
	WaitingToConfirm                         = 2,
	Dashing                                  = 3,
	EndState                                 = 4,
	CollideKnockDown                         = 5,
	EAbilityStatus_MAX                       = 6,
};

// Enum Hero_1049.ERushState_104951
// NumValues: 0x0005
enum class ERushState_104951 : uint8
{
	Start_104951                             = 0,
	Loop_104951                              = 1,
	End_104951                               = 2,
	None_104951                              = 3,
	ERushState_MAX                           = 4,
};

// Enum Hero_1049.EWolverineSynergyState
// NumValues: 0x0006
enum class EWolverineSynergyState : uint8
{
	FlyingToTarget                           = 0,
	FlyingToTargetFailed                     = 1,
	AttachToTarget                           = 2,
	DetachFromTarget                         = 3,
	NoCoop                                   = 4,
	EWolverineSynergyState_MAX               = 5,
};

// Enum Hero_1049.EBindReduceCDMethod_104901
// NumValues: 0x0003
enum class EBindReduceCDMethod_104901 : uint8
{
	JoinKill                                 = 0,
	DirectKill                               = 1,
	EBindReduceCDMethod_MAX                  = 2,
};

// Enum Hero_1049.ERushState_104971
// NumValues: 0x0005
enum class ERushState_104971 : uint8
{
	Start_104971                             = 0,
	Loop_104971                              = 1,
	End_104971                               = 2,
	None_104971                              = 3,
	ERushState_MAX                           = 4,
};

// Enum Hero_1049.ETriggerSpecialLeftTime
// NumValues: 0x0003
enum class ETriggerSpecialLeftTime : uint8
{
	OnActivated                              = 0,
	OnEnterEndState                          = 1,
	ETriggerSpecialLeftTime_MAX              = 2,
};

// ScriptStruct Hero_1049.RageInfo_104921
// 0x001C (0x001C - 0x0000)
struct FRageInfo_104921 final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OwnerRequiredTag;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RageValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRageInfo_104921) == 0x000004, "Wrong alignment on FRageInfo_104921");
static_assert(sizeof(FRageInfo_104921) == 0x00001C, "Wrong size on FRageInfo_104921");
static_assert(offsetof(FRageInfo_104921, AbilityTag) == 0x000000, "Member 'FRageInfo_104921::AbilityTag' has a wrong offset!");
static_assert(offsetof(FRageInfo_104921, OwnerRequiredTag) == 0x00000C, "Member 'FRageInfo_104921::OwnerRequiredTag' has a wrong offset!");
static_assert(offsetof(FRageInfo_104921, RageValue) == 0x000018, "Member 'FRageInfo_104921::RageValue' has a wrong offset!");

// ScriptStruct Hero_1049.SpecialMeshHideBoneSetting
// 0x0010 (0x0010 - 0x0000)
struct FSpecialMeshHideBoneSetting final
{
public:
	TArray<class FName>                           HiddenBones;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialMeshHideBoneSetting) == 0x000008, "Wrong alignment on FSpecialMeshHideBoneSetting");
static_assert(sizeof(FSpecialMeshHideBoneSetting) == 0x000010, "Wrong size on FSpecialMeshHideBoneSetting");
static_assert(offsetof(FSpecialMeshHideBoneSetting, HiddenBones) == 0x000000, "Member 'FSpecialMeshHideBoneSetting::HiddenBones' has a wrong offset!");

// ScriptStruct Hero_1049.Cue_NiagaraAsset_WolverineHit
// 0x0010 (0x0030 - 0x0020)
struct FCue_NiagaraAsset_WolverineHit final : public FCue_NiagaraAsset_Hit
{
public:
	class UNiagaraSystem*                         HitCharacterNiagaraFullAnger;                      // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         HitSceneNiagaraFullAnger;                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCue_NiagaraAsset_WolverineHit) == 0x000008, "Wrong alignment on FCue_NiagaraAsset_WolverineHit");
static_assert(sizeof(FCue_NiagaraAsset_WolverineHit) == 0x000030, "Wrong size on FCue_NiagaraAsset_WolverineHit");
static_assert(offsetof(FCue_NiagaraAsset_WolverineHit, HitCharacterNiagaraFullAnger) == 0x000020, "Member 'FCue_NiagaraAsset_WolverineHit::HitCharacterNiagaraFullAnger' has a wrong offset!");
static_assert(offsetof(FCue_NiagaraAsset_WolverineHit, HitSceneNiagaraFullAnger) == 0x000028, "Member 'FCue_NiagaraAsset_WolverineHit::HitSceneNiagaraFullAnger' has a wrong offset!");

// ScriptStruct Hero_1049.WolverineShiftJumpParam
// 0x0058 (0x0058 - 0x0000)
struct FWolverineShiftJumpParam final
{
public:
	float                                         JumpPitchMin;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchMax;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPitchOffset;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpUpGravityScale;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownGravityScale;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBlockGravityScale;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocitySize;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceMoveSpeed;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAimDirectionFactor;                         // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelerationDirectionFactor;                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityAxisScale;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterHitGravityScale;                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterHitAcceleration;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterHitVelocitySize;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterHitAccelerationDirectionFactor;               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWolverineShiftJumpParam) == 0x000008, "Wrong alignment on FWolverineShiftJumpParam");
static_assert(sizeof(FWolverineShiftJumpParam) == 0x000058, "Wrong size on FWolverineShiftJumpParam");
static_assert(offsetof(FWolverineShiftJumpParam, JumpPitchMin) == 0x000000, "Member 'FWolverineShiftJumpParam::JumpPitchMin' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, JumpPitchMax) == 0x000004, "Member 'FWolverineShiftJumpParam::JumpPitchMax' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, JumpPitchOffset) == 0x000008, "Member 'FWolverineShiftJumpParam::JumpPitchOffset' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, JumpUpGravityScale) == 0x00000C, "Member 'FWolverineShiftJumpParam::JumpUpGravityScale' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, JumpDownGravityScale) == 0x000010, "Member 'FWolverineShiftJumpParam::JumpDownGravityScale' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, JumpBlockGravityScale) == 0x000014, "Member 'FWolverineShiftJumpParam::JumpBlockGravityScale' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, MaxAcceleration) == 0x000018, "Member 'FWolverineShiftJumpParam::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, MaxVelocitySize) == 0x00001C, "Member 'FWolverineShiftJumpParam::MaxVelocitySize' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, ForceMoveSpeed) == 0x000020, "Member 'FWolverineShiftJumpParam::ForceMoveSpeed' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, bEnableAimDirectionFactor) == 0x000024, "Member 'FWolverineShiftJumpParam::bEnableAimDirectionFactor' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, AccelerationDirectionFactor) == 0x000028, "Member 'FWolverineShiftJumpParam::AccelerationDirectionFactor' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, VelocityAxisScale) == 0x000030, "Member 'FWolverineShiftJumpParam::VelocityAxisScale' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, AfterHitGravityScale) == 0x000048, "Member 'FWolverineShiftJumpParam::AfterHitGravityScale' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, AfterHitAcceleration) == 0x00004C, "Member 'FWolverineShiftJumpParam::AfterHitAcceleration' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, AfterHitVelocitySize) == 0x000050, "Member 'FWolverineShiftJumpParam::AfterHitVelocitySize' has a wrong offset!");
static_assert(offsetof(FWolverineShiftJumpParam, AfterHitAccelerationDirectionFactor) == 0x000054, "Member 'FWolverineShiftJumpParam::AfterHitAccelerationDirectionFactor' has a wrong offset!");

// ScriptStruct Hero_1049.WolverineSynergyRideAnimationData
// 0x00A0 (0x00A0 - 0x0000)
struct FWolverineSynergyRideAnimationData final
{
public:
	TMap<class FName, class UAnimSequence*>       SynergyRideLoopAnimations;                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UAnimSequence*>       SynergyRideGatherAnimations;                       // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWolverineSynergyRideAnimationData) == 0x000008, "Wrong alignment on FWolverineSynergyRideAnimationData");
static_assert(sizeof(FWolverineSynergyRideAnimationData) == 0x0000A0, "Wrong size on FWolverineSynergyRideAnimationData");
static_assert(offsetof(FWolverineSynergyRideAnimationData, SynergyRideLoopAnimations) == 0x000000, "Member 'FWolverineSynergyRideAnimationData::SynergyRideLoopAnimations' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimationData, SynergyRideGatherAnimations) == 0x000050, "Member 'FWolverineSynergyRideAnimationData::SynergyRideGatherAnimations' has a wrong offset!");

// ScriptStruct Hero_1049.WolverineSynergyRideAnimBlendData
// 0x0038 (0x0038 - 0x0000)
struct FWolverineSynergyRideAnimBlendData final
{
public:
	class FName                                   Animation_0_Name;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Animation_1_Name;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Animation_0;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Animation_1;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Animation_0_Position;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Animation_1_Position;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseZeroBuffer;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWolverineSynergyRideAnimBlendData) == 0x000008, "Wrong alignment on FWolverineSynergyRideAnimBlendData");
static_assert(sizeof(FWolverineSynergyRideAnimBlendData) == 0x000038, "Wrong size on FWolverineSynergyRideAnimBlendData");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_0_Name) == 0x000000, "Member 'FWolverineSynergyRideAnimBlendData::Animation_0_Name' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_1_Name) == 0x00000C, "Member 'FWolverineSynergyRideAnimBlendData::Animation_1_Name' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_0) == 0x000018, "Member 'FWolverineSynergyRideAnimBlendData::Animation_0' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_1) == 0x000020, "Member 'FWolverineSynergyRideAnimBlendData::Animation_1' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_0_Position) == 0x000028, "Member 'FWolverineSynergyRideAnimBlendData::Animation_0_Position' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, Animation_1_Position) == 0x00002C, "Member 'FWolverineSynergyRideAnimBlendData::Animation_1_Position' has a wrong offset!");
static_assert(offsetof(FWolverineSynergyRideAnimBlendData, bUseZeroBuffer) == 0x000030, "Member 'FWolverineSynergyRideAnimBlendData::bUseZeroBuffer' has a wrong offset!");

// ScriptStruct Hero_1049.WolverineSynergyAnimationRatioSpeedUpInfo
// 0x0050 (0x0050 - 0x0000)
struct FWolverineSynergyAnimationRatioSpeedUpInfo final
{
public:
	TSet<class FName>                             AnimationNames;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWolverineSynergyAnimationRatioSpeedUpInfo) == 0x000008, "Wrong alignment on FWolverineSynergyAnimationRatioSpeedUpInfo");
static_assert(sizeof(FWolverineSynergyAnimationRatioSpeedUpInfo) == 0x000050, "Wrong size on FWolverineSynergyAnimationRatioSpeedUpInfo");
static_assert(offsetof(FWolverineSynergyAnimationRatioSpeedUpInfo, AnimationNames) == 0x000000, "Member 'FWolverineSynergyAnimationRatioSpeedUpInfo::AnimationNames' has a wrong offset!");

}

