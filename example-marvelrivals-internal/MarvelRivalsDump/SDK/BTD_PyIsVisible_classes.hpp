#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_PyIsVisible

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "PyBTNodeBase_classes.hpp"


namespace SDK
{

// PythonClass BTD_PyIsVisible.BTD_PyIsVisible
// 0x0048 (0x0100 - 0x00B8)
class UBTD_PyIsVisible : public UBTDecorator_PyBase
{
public:
	struct FBlackboardKeySelector                 InCheckTarget;                                     // 0x00B8(0x0030)(Edit, NativeAccessSpecifierPublic)
	bool                                          ShouldCheckGunLine;                                // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyCheckGunLineForRangeHero;                      // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GunLineRightOffsetRatio;                           // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunLineUpOffsetRatio;                              // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldCheckByTrace;                                // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisionRange;                                       // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTargetExtent;                                   // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceType;                                         // 0x00FD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTD_PyIsVisible">();
	}
	static class UBTD_PyIsVisible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_PyIsVisible>();
	}
};
//static_assert(alignof(UBTD_PyIsVisible) == 0x000008, "Wrong alignment on UBTD_PyIsVisible");
//static_assert(sizeof(UBTD_PyIsVisible) == 0x000100, "Wrong size on UBTD_PyIsVisible");
//static_assert(offsetof(UBTD_PyIsVisible, InCheckTarget) == 0x0000B8, "Member 'UBTD_PyIsVisible::InCheckTarget' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, ShouldCheckGunLine) == 0x0000E8, "Member 'UBTD_PyIsVisible::ShouldCheckGunLine' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, OnlyCheckGunLineForRangeHero) == 0x0000E9, "Member 'UBTD_PyIsVisible::OnlyCheckGunLineForRangeHero' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, GunLineRightOffsetRatio) == 0x0000EC, "Member 'UBTD_PyIsVisible::GunLineRightOffsetRatio' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, GunLineUpOffsetRatio) == 0x0000F0, "Member 'UBTD_PyIsVisible::GunLineUpOffsetRatio' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, ShouldCheckByTrace) == 0x0000F4, "Member 'UBTD_PyIsVisible::ShouldCheckByTrace' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, VisionRange) == 0x0000F8, "Member 'UBTD_PyIsVisible::VisionRange' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, UseTargetExtent) == 0x0000FC, "Member 'UBTD_PyIsVisible::UseTargetExtent' has a wrong offset!");
//static_assert(offsetof(UBTD_PyIsVisible, TraceType) == 0x0000FD, "Member 'UBTD_PyIsVisible::TraceType' has a wrong offset!");

}

