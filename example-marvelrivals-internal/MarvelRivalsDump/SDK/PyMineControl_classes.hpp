#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMineControl

#include "Basic.hpp"

#include "PyControl_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyMineControl.PyMineControl
// 0x0170 (0x08C8 - 0x0758)
class APyMineControl : public APyControl
{
public:
	float                                         CurCostSpeed;                                      // 0x0758(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurChargeSpeed;                                    // 0x075C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurNum;                                            // 0x0760(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNum;                                            // 0x0764(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOver;                                            // 0x0768(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRunning;                                         // 0x0769(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76A[0x6];                                      // 0x076A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            CostSpeedMap;                                      // 0x0770(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ChargeSpeed;                                       // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SettleInterval;                                    // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLimit;                                          // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeactivateOnRunOut;                                // 0x07CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PausedWhenFighting;                                // 0x07CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PillageModeEnabled;                                // 0x07CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CF[0x1];                                      // 0x07CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, float>                            PillageSpeedMap;                                   // 0x07D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ResetPillageStageOnOwnerChanged;                   // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_821[0x3];                                      // 0x0821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PillageMaxTime;                                    // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, class APyLevelSummoned_200009*>   Time2PillageMachine;                               // 0x0828(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOnStorageNumChanged;                       // 0x0878(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOnStorageNumRunOut;                        // 0x0888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOnMineDeactivated;                         // 0x0898(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOnPillageStageChanged;                     // 0x08A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchOnPillageFinished;                         // 0x08B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void DispatchOnStorageNumChanged__DelegateSignature(class APyControl* Mine_obj, float Cur_num, float Changed_num);
	void DispatchOnStorageNumRunOut__DelegateSignature(class APyControl* Mine_obj);
	void DispatchOnMineDeactivated__DelegateSignature(class APyControl* Mine_obj);
	void DispatchOnPillageStageChanged__DelegateSignature(class APyControl* Mine_obj, int32 Stage);
	void DispatchOnPillageFinished__DelegateSignature(class APyControl* Mine_obj);
	void SetUIName(const class FString& Name_0);
	void SetSceneHUDName(const class FString& Name_0);
	float GetLastLeaveTime();
	void SetSceneHUDVisible(bool Visible, bool With_normal_ui);
	void S_Initialize();
	void Update();
	void ReceiveInit();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnRep_CurCostSpeed();
	void OnRep_CurChargeSpeed();
	void OnRep_CurNum();
	void OnRep_MaxNum();
	void OnRep_IsOver();
	void OnRep_IsRunning();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyMineControl">();
	}
	static class APyMineControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyMineControl>();
	}
};
static_assert(alignof(APyMineControl) == 0x000008, "Wrong alignment on APyMineControl");
static_assert(sizeof(APyMineControl) == 0x0008C8, "Wrong size on APyMineControl");
static_assert(offsetof(APyMineControl, CurCostSpeed) == 0x000758, "Member 'APyMineControl::CurCostSpeed' has a wrong offset!");
static_assert(offsetof(APyMineControl, CurChargeSpeed) == 0x00075C, "Member 'APyMineControl::CurChargeSpeed' has a wrong offset!");
static_assert(offsetof(APyMineControl, CurNum) == 0x000760, "Member 'APyMineControl::CurNum' has a wrong offset!");
static_assert(offsetof(APyMineControl, MaxNum) == 0x000764, "Member 'APyMineControl::MaxNum' has a wrong offset!");
static_assert(offsetof(APyMineControl, IsOver) == 0x000768, "Member 'APyMineControl::IsOver' has a wrong offset!");
static_assert(offsetof(APyMineControl, IsRunning) == 0x000769, "Member 'APyMineControl::IsRunning' has a wrong offset!");
static_assert(offsetof(APyMineControl, CostSpeedMap) == 0x000770, "Member 'APyMineControl::CostSpeedMap' has a wrong offset!");
static_assert(offsetof(APyMineControl, ChargeSpeed) == 0x0007C0, "Member 'APyMineControl::ChargeSpeed' has a wrong offset!");
static_assert(offsetof(APyMineControl, SettleInterval) == 0x0007C4, "Member 'APyMineControl::SettleInterval' has a wrong offset!");
static_assert(offsetof(APyMineControl, MaxLimit) == 0x0007C8, "Member 'APyMineControl::MaxLimit' has a wrong offset!");
static_assert(offsetof(APyMineControl, DeactivateOnRunOut) == 0x0007CC, "Member 'APyMineControl::DeactivateOnRunOut' has a wrong offset!");
static_assert(offsetof(APyMineControl, PausedWhenFighting) == 0x0007CD, "Member 'APyMineControl::PausedWhenFighting' has a wrong offset!");
static_assert(offsetof(APyMineControl, PillageModeEnabled) == 0x0007CE, "Member 'APyMineControl::PillageModeEnabled' has a wrong offset!");
static_assert(offsetof(APyMineControl, PillageSpeedMap) == 0x0007D0, "Member 'APyMineControl::PillageSpeedMap' has a wrong offset!");
static_assert(offsetof(APyMineControl, ResetPillageStageOnOwnerChanged) == 0x000820, "Member 'APyMineControl::ResetPillageStageOnOwnerChanged' has a wrong offset!");
static_assert(offsetof(APyMineControl, PillageMaxTime) == 0x000824, "Member 'APyMineControl::PillageMaxTime' has a wrong offset!");
static_assert(offsetof(APyMineControl, Time2PillageMachine) == 0x000828, "Member 'APyMineControl::Time2PillageMachine' has a wrong offset!");
static_assert(offsetof(APyMineControl, DispatchOnStorageNumChanged) == 0x000878, "Member 'APyMineControl::DispatchOnStorageNumChanged' has a wrong offset!");
static_assert(offsetof(APyMineControl, DispatchOnStorageNumRunOut) == 0x000888, "Member 'APyMineControl::DispatchOnStorageNumRunOut' has a wrong offset!");
static_assert(offsetof(APyMineControl, DispatchOnMineDeactivated) == 0x000898, "Member 'APyMineControl::DispatchOnMineDeactivated' has a wrong offset!");
static_assert(offsetof(APyMineControl, DispatchOnPillageStageChanged) == 0x0008A8, "Member 'APyMineControl::DispatchOnPillageStageChanged' has a wrong offset!");
static_assert(offsetof(APyMineControl, DispatchOnPillageFinished) == 0x0008B8, "Member 'APyMineControl::DispatchOnPillageFinished' has a wrong offset!");

}

