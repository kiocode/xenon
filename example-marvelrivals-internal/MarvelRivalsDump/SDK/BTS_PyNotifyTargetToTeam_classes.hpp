#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_PyNotifyTargetToTeam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PyBTNodeBase_classes.hpp"


namespace SDK
{

// PythonClass BTS_PyNotifyTargetToTeam.BTS_PyNotifyTargetToTeam_Base
// 0x0020 (0x00C8 - 0x00A8)
#pragma pack(push, 0x1)
class alignas(0x08) UBTS_PyNotifyTargetToTeam_Base : public UBTService_PyBase
{
public:
	float                                         NotifyStrength;                                    // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyRange;                                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableDebug;                                       // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugDrawColor;                                    // 0x00B4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTS_PyNotifyTargetToTeam_Base">();
	}
	static class UBTS_PyNotifyTargetToTeam_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_PyNotifyTargetToTeam_Base>();
	}
};
#pragma pack(pop)
//static_assert(alignof(UBTS_PyNotifyTargetToTeam_Base) == 0x000008, "Wrong alignment on UBTS_PyNotifyTargetToTeam_Base");
//static_assert(sizeof(UBTS_PyNotifyTargetToTeam_Base) == 0x0000C8, "Wrong size on UBTS_PyNotifyTargetToTeam_Base");
//static_assert(offsetof(UBTS_PyNotifyTargetToTeam_Base, NotifyStrength) == 0x0000A8, "Member 'UBTS_PyNotifyTargetToTeam_Base::NotifyStrength' has a wrong offset!");
//static_assert(offsetof(UBTS_PyNotifyTargetToTeam_Base, NotifyRange) == 0x0000AC, "Member 'UBTS_PyNotifyTargetToTeam_Base::NotifyRange' has a wrong offset!");
//static_assert(offsetof(UBTS_PyNotifyTargetToTeam_Base, EnableDebug) == 0x0000B0, "Member 'UBTS_PyNotifyTargetToTeam_Base::EnableDebug' has a wrong offset!");
//static_assert(offsetof(UBTS_PyNotifyTargetToTeam_Base, DebugDrawColor) == 0x0000B4, "Member 'UBTS_PyNotifyTargetToTeam_Base::DebugDrawColor' has a wrong offset!");

// PythonClass BTS_PyNotifyTargetToTeam.BTS_PyNotifySelfWhenInjured
// 0x0000 (0x00C8 - 0x00C8)
class UBTS_PyNotifySelfWhenInjured : public UBTS_PyNotifyTargetToTeam_Base
{
public:
	float                                         HealthThreshold;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTS_PyNotifySelfWhenInjured">();
	}
	static class UBTS_PyNotifySelfWhenInjured* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_PyNotifySelfWhenInjured>();
	}
};
//static_assert(alignof(UBTS_PyNotifySelfWhenInjured) == 0x000008, "Wrong alignment on UBTS_PyNotifySelfWhenInjured");
//static_assert(sizeof(UBTS_PyNotifySelfWhenInjured) == 0x0000C8, "Wrong size on UBTS_PyNotifySelfWhenInjured");
//static_assert(offsetof(UBTS_PyNotifySelfWhenInjured, HealthThreshold) == 0x0000C4, "Member 'UBTS_PyNotifySelfWhenInjured::HealthThreshold' has a wrong offset!");

// PythonClass BTS_PyNotifyTargetToTeam.BTS_PyNotifyNearByEnemyWhenTakeDamage
// 0x0008 (0x00D0 - 0x00C8)
class UBTS_PyNotifyNearByEnemyWhenTakeDamage : public UBTS_PyNotifyTargetToTeam_Base
{
public:
	float                                         EnemyNearbyRange;                                  // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldCheckBattleScore;                            // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyNotifyWhenSelfIsSupport;                       // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPawnTakingDamage(class AActor* SourceAvatar, class AActor* TargetAvatar, const struct FAttributeModifierHandle& ModifierParamsHandle);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTS_PyNotifyNearByEnemyWhenTakeDamage">();
	}
	static class UBTS_PyNotifyNearByEnemyWhenTakeDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_PyNotifyNearByEnemyWhenTakeDamage>();
	}
};
//static_assert(alignof(UBTS_PyNotifyNearByEnemyWhenTakeDamage) == 0x000008, "Wrong alignment on UBTS_PyNotifyNearByEnemyWhenTakeDamage");
//static_assert(sizeof(UBTS_PyNotifyNearByEnemyWhenTakeDamage) == 0x0000D0, "Wrong size on UBTS_PyNotifyNearByEnemyWhenTakeDamage");
//static_assert(offsetof(UBTS_PyNotifyNearByEnemyWhenTakeDamage, EnemyNearbyRange) == 0x0000C4, "Member 'UBTS_PyNotifyNearByEnemyWhenTakeDamage::EnemyNearbyRange' has a wrong offset!");
//static_assert(offsetof(UBTS_PyNotifyNearByEnemyWhenTakeDamage, ShouldCheckBattleScore) == 0x0000C8, "Member 'UBTS_PyNotifyNearByEnemyWhenTakeDamage::ShouldCheckBattleScore' has a wrong offset!");
//static_assert(offsetof(UBTS_PyNotifyNearByEnemyWhenTakeDamage, OnlyNotifyWhenSelfIsSupport) == 0x0000C9, "Member 'UBTS_PyNotifyNearByEnemyWhenTakeDamage::OnlyNotifyWhenSelfIsSupport' has a wrong offset!");

}

