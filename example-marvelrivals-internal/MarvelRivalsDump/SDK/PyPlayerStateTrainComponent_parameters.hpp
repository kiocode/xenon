#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyPlayerStateTrainComponent

#include "Basic.hpp"

#include "MarvelLevel_structs.hpp"
#include "Python_enums_structs.hpp"


namespace SDK::Params
{

// DelegateFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.TrainEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_TrainEnd__DelegateSignature final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_TrainEnd__DelegateSignature) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_TrainEnd__DelegateSignature");
static_assert(sizeof(PyPlayerStateTrainComponent_TrainEnd__DelegateSignature) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_TrainEnd__DelegateSignature");
static_assert(offsetof(PyPlayerStateTrainComponent_TrainEnd__DelegateSignature, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_TrainEnd__DelegateSignature::Action' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_TrainEnd__DelegateSignature, UID) == 0x000004, "Member 'PyPlayerStateTrainComponent_TrainEnd__DelegateSignature::UID' has a wrong offset!");

// DelegateFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.DelayQuickTrainEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UID;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature");
static_assert(sizeof(PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature");
static_assert(offsetof(PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature::Action' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature, UID) == 0x000004, "Member 'PyPlayerStateTrainComponent_DelayQuickTrainEnd__DelegateSignature::UID' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.notify_train_delay
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Notify_train_delay final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Notify_train_delay) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Notify_train_delay");
static_assert(sizeof(PyPlayerStateTrainComponent_Notify_train_delay) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Notify_train_delay");
static_assert(offsetof(PyPlayerStateTrainComponent_Notify_train_delay, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_Notify_train_delay::Action' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Notify_train_delay, Delay) == 0x000004, "Member 'PyPlayerStateTrainComponent_Notify_train_delay::Delay' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.notify_train_delay_end
// 0x0001 (0x0001 - 0x0000)
struct PyPlayerStateTrainComponent_Notify_train_delay_end final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Notify_train_delay_end) == 0x000001, "Wrong alignment on PyPlayerStateTrainComponent_Notify_train_delay_end");
static_assert(sizeof(PyPlayerStateTrainComponent_Notify_train_delay_end) == 0x000001, "Wrong size on PyPlayerStateTrainComponent_Notify_train_delay_end");
static_assert(offsetof(PyPlayerStateTrainComponent_Notify_train_delay_end, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_Notify_train_delay_end::Action' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.train_tips
// 0x0018 (0x0018 - 0x0000)
struct PyPlayerStateTrainComponent_Train_tips final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	ETipsPriority                                 Priority;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Train_tips) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Train_tips");
static_assert(sizeof(PyPlayerStateTrainComponent_Train_tips) == 0x000018, "Wrong size on PyPlayerStateTrainComponent_Train_tips");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_tips, Text) == 0x000000, "Member 'PyPlayerStateTrainComponent_Train_tips::Text' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_tips, Priority) == 0x000010, "Member 'PyPlayerStateTrainComponent_Train_tips::Priority' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.train_tips_bykey
// 0x0028 (0x0028 - 0x0000)
struct PyPlayerStateTrainComponent_Train_tips_bykey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         Replace_list;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	ETipsPriority                                 Priority;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Train_tips_bykey) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Train_tips_bykey");
static_assert(sizeof(PyPlayerStateTrainComponent_Train_tips_bykey) == 0x000028, "Wrong size on PyPlayerStateTrainComponent_Train_tips_bykey");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_tips_bykey, Key) == 0x000000, "Member 'PyPlayerStateTrainComponent_Train_tips_bykey::Key' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_tips_bykey, Replace_list) == 0x000010, "Member 'PyPlayerStateTrainComponent_Train_tips_bykey::Replace_list' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_tips_bykey, Priority) == 0x000020, "Member 'PyPlayerStateTrainComponent_Train_tips_bykey::Priority' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.train_holder_tips
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Train_holder_tips final
{
public:
	int32                                         Holder_uid;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETipsPriority                                 Priority;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Train_holder_tips) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Train_holder_tips");
static_assert(sizeof(PyPlayerStateTrainComponent_Train_holder_tips) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Train_holder_tips");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_holder_tips, Holder_uid) == 0x000000, "Member 'PyPlayerStateTrainComponent_Train_holder_tips::Holder_uid' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Train_holder_tips, Priority) == 0x000004, "Member 'PyPlayerStateTrainComponent_Train_holder_tips::Priority' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.formal_start_trace_train
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Formal_start_trace_train final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Select_hero;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Formal_start_trace_train) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Formal_start_trace_train");
static_assert(sizeof(PyPlayerStateTrainComponent_Formal_start_trace_train) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Formal_start_trace_train");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_trace_train, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_Formal_start_trace_train::Action' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_trace_train, Select_hero) == 0x000004, "Member 'PyPlayerStateTrainComponent_Formal_start_trace_train::Select_hero' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.formal_start_fixedtarget_train
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Formal_start_fixedtarget_train final
{
public:
	int32                                         Select_hero;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShootingDis                                  Select_dis;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Formal_start_fixedtarget_train) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Formal_start_fixedtarget_train");
static_assert(sizeof(PyPlayerStateTrainComponent_Formal_start_fixedtarget_train) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Formal_start_fixedtarget_train");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_fixedtarget_train, Select_hero) == 0x000000, "Member 'PyPlayerStateTrainComponent_Formal_start_fixedtarget_train::Select_hero' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_fixedtarget_train, Select_dis) == 0x000004, "Member 'PyPlayerStateTrainComponent_Formal_start_fixedtarget_train::Select_dis' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.formal_start_movingtarget_train
// 0x0010 (0x0010 - 0x0000)
struct PyPlayerStateTrainComponent_Formal_start_movingtarget_train final
{
public:
	int32                                         Select_hero;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShootingDis                                  Select_dis;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target_speed;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Target_type;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Formal_start_movingtarget_train");
static_assert(sizeof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train) == 0x000010, "Wrong size on PyPlayerStateTrainComponent_Formal_start_movingtarget_train");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train, Select_hero) == 0x000000, "Member 'PyPlayerStateTrainComponent_Formal_start_movingtarget_train::Select_hero' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train, Select_dis) == 0x000004, "Member 'PyPlayerStateTrainComponent_Formal_start_movingtarget_train::Select_dis' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train, Target_speed) == 0x000008, "Member 'PyPlayerStateTrainComponent_Formal_start_movingtarget_train::Target_speed' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_movingtarget_train, Target_type) == 0x00000C, "Member 'PyPlayerStateTrainComponent_Formal_start_movingtarget_train::Target_type' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.formal_start_melee_train
// 0x000C (0x000C - 0x0000)
struct PyPlayerStateTrainComponent_Formal_start_melee_train final
{
public:
	ETrainAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Select_hero;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETrainAIModeType                              Move_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Formal_start_melee_train) == 0x000004, "Wrong alignment on PyPlayerStateTrainComponent_Formal_start_melee_train");
static_assert(sizeof(PyPlayerStateTrainComponent_Formal_start_melee_train) == 0x00000C, "Wrong size on PyPlayerStateTrainComponent_Formal_start_melee_train");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_melee_train, Action) == 0x000000, "Member 'PyPlayerStateTrainComponent_Formal_start_melee_train::Action' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_melee_train, Select_hero) == 0x000004, "Member 'PyPlayerStateTrainComponent_Formal_start_melee_train::Select_hero' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Formal_start_melee_train, Move_type) == 0x000008, "Member 'PyPlayerStateTrainComponent_Formal_start_melee_train::Move_type' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.set_not_cd
// 0x0001 (0x0001 - 0x0000)
struct PyPlayerStateTrainComponent_Set_not_cd final
{
public:
	bool                                          No_cd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Set_not_cd) == 0x000001, "Wrong alignment on PyPlayerStateTrainComponent_Set_not_cd");
static_assert(sizeof(PyPlayerStateTrainComponent_Set_not_cd) == 0x000001, "Wrong size on PyPlayerStateTrainComponent_Set_not_cd");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_not_cd, No_cd) == 0x000000, "Member 'PyPlayerStateTrainComponent_Set_not_cd::No_cd' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.set_friend_harm
// 0x0001 (0x0001 - 0x0000)
struct PyPlayerStateTrainComponent_Set_friend_harm final
{
public:
	bool                                          No_cd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Set_friend_harm) == 0x000001, "Wrong alignment on PyPlayerStateTrainComponent_Set_friend_harm");
static_assert(sizeof(PyPlayerStateTrainComponent_Set_friend_harm) == 0x000001, "Wrong size on PyPlayerStateTrainComponent_Set_friend_harm");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_friend_harm, No_cd) == 0x000000, "Member 'PyPlayerStateTrainComponent_Set_friend_harm::No_cd' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.spawn_train_entry_ai
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Spawn_train_entry_ai final
{
public:
	class APyAISpawnActor*                        Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Spawn_train_entry_ai) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Spawn_train_entry_ai");
static_assert(sizeof(PyPlayerStateTrainComponent_Spawn_train_entry_ai) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Spawn_train_entry_ai");
static_assert(offsetof(PyPlayerStateTrainComponent_Spawn_train_entry_ai, Spawner) == 0x000000, "Member 'PyPlayerStateTrainComponent_Spawn_train_entry_ai::Spawner' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.destroy_train_entry_ai
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Destroy_train_entry_ai final
{
public:
	class APyAISpawnActor*                        Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Destroy_train_entry_ai) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Destroy_train_entry_ai");
static_assert(sizeof(PyPlayerStateTrainComponent_Destroy_train_entry_ai) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Destroy_train_entry_ai");
static_assert(offsetof(PyPlayerStateTrainComponent_Destroy_train_entry_ai, Spawner) == 0x000000, "Member 'PyPlayerStateTrainComponent_Destroy_train_entry_ai::Spawner' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.set_entry_play_state
// 0x0010 (0x0010 - 0x0000)
struct PyPlayerStateTrainComponent_Set_entry_play_state final
{
public:
	class AActor*                                 Entry_controller;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_playing;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Set_entry_play_state) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Set_entry_play_state");
static_assert(sizeof(PyPlayerStateTrainComponent_Set_entry_play_state) == 0x000010, "Wrong size on PyPlayerStateTrainComponent_Set_entry_play_state");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_entry_play_state, Entry_controller) == 0x000000, "Member 'PyPlayerStateTrainComponent_Set_entry_play_state::Entry_controller' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_entry_play_state, Is_playing) == 0x000008, "Member 'PyPlayerStateTrainComponent_Set_entry_play_state::Is_playing' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.trigger_entry_chaos_destruction
// 0x0018 (0x0018 - 0x0000)
struct PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction final
{
public:
	class AActor*                                 Entry_controller;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Actor_name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction");
static_assert(sizeof(PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction) == 0x000018, "Wrong size on PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction");
static_assert(offsetof(PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction, Entry_controller) == 0x000000, "Member 'PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction::Entry_controller' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction, Actor_name) == 0x000008, "Member 'PyPlayerStateTrainComponent_Trigger_entry_chaos_destruction::Actor_name' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.trigger_entry_chaos_recovery
// 0x0018 (0x0018 - 0x0000)
struct PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery final
{
public:
	class AActor*                                 Entry_controller;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Actor_name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery");
static_assert(sizeof(PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery) == 0x000018, "Wrong size on PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery");
static_assert(offsetof(PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery, Entry_controller) == 0x000000, "Member 'PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery::Entry_controller' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery, Actor_name) == 0x000008, "Member 'PyPlayerStateTrainComponent_Trigger_entry_chaos_recovery::Actor_name' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.start_limit_time_train
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_Start_limit_time_train final
{
public:
	class AActor*                                 Limit_time_train_computer;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_Start_limit_time_train) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Start_limit_time_train");
static_assert(sizeof(PyPlayerStateTrainComponent_Start_limit_time_train) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_Start_limit_time_train");
static_assert(offsetof(PyPlayerStateTrainComponent_Start_limit_time_train, Limit_time_train_computer) == 0x000000, "Member 'PyPlayerStateTrainComponent_Start_limit_time_train::Limit_time_train_computer' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.set_limit_time_train_config
// 0x0028 (0x0028 - 0x0000)
struct PyPlayerStateTrainComponent_Set_limit_time_train_config final
{
public:
	class AActor*                                 Limit_time_train_computer;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Key_list;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 Value_list;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyPlayerStateTrainComponent_Set_limit_time_train_config) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_Set_limit_time_train_config");
static_assert(sizeof(PyPlayerStateTrainComponent_Set_limit_time_train_config) == 0x000028, "Wrong size on PyPlayerStateTrainComponent_Set_limit_time_train_config");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_limit_time_train_config, Limit_time_train_computer) == 0x000000, "Member 'PyPlayerStateTrainComponent_Set_limit_time_train_config::Limit_time_train_computer' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_limit_time_train_config, Key_list) == 0x000008, "Member 'PyPlayerStateTrainComponent_Set_limit_time_train_config::Key_list' has a wrong offset!");
static_assert(offsetof(PyPlayerStateTrainComponent_Set_limit_time_train_config, Value_list) == 0x000018, "Member 'PyPlayerStateTrainComponent_Set_limit_time_train_config::Value_list' has a wrong offset!");

// PythonFunction PyPlayerStateTrainComponent.PyPlayerStateTrainComponent.on_teleport_player_to_train_area
// 0x0008 (0x0008 - 0x0000)
struct PyPlayerStateTrainComponent_On_teleport_player_to_train_area final
{
public:
	class AActor*                                 Train_computer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPlayerStateTrainComponent_On_teleport_player_to_train_area) == 0x000008, "Wrong alignment on PyPlayerStateTrainComponent_On_teleport_player_to_train_area");
static_assert(sizeof(PyPlayerStateTrainComponent_On_teleport_player_to_train_area) == 0x000008, "Wrong size on PyPlayerStateTrainComponent_On_teleport_player_to_train_area");
static_assert(offsetof(PyPlayerStateTrainComponent_On_teleport_player_to_train_area, Train_computer) == 0x000000, "Member 'PyPlayerStateTrainComponent_On_teleport_player_to_train_area::Train_computer' has a wrong offset!");

}

