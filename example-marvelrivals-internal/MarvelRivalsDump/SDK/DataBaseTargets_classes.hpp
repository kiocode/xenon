#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataBaseTargets

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass DataBaseTargets.PyDataBaseTarget
// 0x0000 (0x0030 - 0x0030)
class UPyDataBaseTarget : public UDataBaseTarget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyDataBaseTarget">();
	}
	static class UPyDataBaseTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyDataBaseTarget>();
	}
};
static_assert(alignof(UPyDataBaseTarget) == 0x000008, "Wrong alignment on UPyDataBaseTarget");
static_assert(sizeof(UPyDataBaseTarget) == 0x000030, "Wrong size on UPyDataBaseTarget");

// PythonClass DataBaseTargets.DataPlayerTarget
// 0x0000 (0x0030 - 0x0030)
class UDataPlayerTarget final : public UPyDataBaseTarget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataPlayerTarget">();
	}
	static class UDataPlayerTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataPlayerTarget>();
	}
};
static_assert(alignof(UDataPlayerTarget) == 0x000008, "Wrong alignment on UDataPlayerTarget");
static_assert(sizeof(UDataPlayerTarget) == 0x000030, "Wrong size on UDataPlayerTarget");

// PythonClass DataBaseTargets.DataBaseRoleTarget
// 0x0010 (0x0040 - 0x0030)
class UDataBaseRoleTarget final : public UPyDataBaseTarget
{
public:
	TArray<EHeroRole>                             LimitRole;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseRoleTarget">();
	}
	static class UDataBaseRoleTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseRoleTarget>();
	}
};
static_assert(alignof(UDataBaseRoleTarget) == 0x000008, "Wrong alignment on UDataBaseRoleTarget");
static_assert(sizeof(UDataBaseRoleTarget) == 0x000040, "Wrong size on UDataBaseRoleTarget");
static_assert(offsetof(UDataBaseRoleTarget, LimitRole) == 0x000030, "Member 'UDataBaseRoleTarget::LimitRole' has a wrong offset!");

// PythonClass DataBaseTargets.DataBaseWorldTarget
// 0x0000 (0x0030 - 0x0030)
class UDataBaseWorldTarget final : public UPyDataBaseTarget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseWorldTarget">();
	}
	static class UDataBaseWorldTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseWorldTarget>();
	}
};
static_assert(alignof(UDataBaseWorldTarget) == 0x000008, "Wrong alignment on UDataBaseWorldTarget");
static_assert(sizeof(UDataBaseWorldTarget) == 0x000030, "Wrong size on UDataBaseWorldTarget");

// PythonClass DataBaseTargets.DataBaseHeroTarget
// 0x0008 (0x0038 - 0x0030)
class UDataBaseHeroTarget final : public UPyDataBaseTarget
{
public:
	int32                                         HeroID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetTargetHeroIDs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseHeroTarget">();
	}
	static class UDataBaseHeroTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseHeroTarget>();
	}
};
static_assert(alignof(UDataBaseHeroTarget) == 0x000008, "Wrong alignment on UDataBaseHeroTarget");
static_assert(sizeof(UDataBaseHeroTarget) == 0x000038, "Wrong size on UDataBaseHeroTarget");
static_assert(offsetof(UDataBaseHeroTarget, HeroID) == 0x000030, "Member 'UDataBaseHeroTarget::HeroID' has a wrong offset!");

// PythonClass DataBaseTargets.DataBaseHeroTargetList
// 0x0010 (0x0040 - 0x0030)
class UDataBaseHeroTargetList final : public UPyDataBaseTarget
{
public:
	TArray<int32>                                 HeroIDList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	TSet<class FString> GetTargetHeroIDs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseHeroTargetList">();
	}
	static class UDataBaseHeroTargetList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseHeroTargetList>();
	}
};
static_assert(alignof(UDataBaseHeroTargetList) == 0x000008, "Wrong alignment on UDataBaseHeroTargetList");
static_assert(sizeof(UDataBaseHeroTargetList) == 0x000040, "Wrong size on UDataBaseHeroTargetList");
static_assert(offsetof(UDataBaseHeroTargetList, HeroIDList) == 0x000030, "Member 'UDataBaseHeroTargetList::HeroIDList' has a wrong offset!");

}

