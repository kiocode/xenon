#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyPayload

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyPayload.PyCue_Level_100003.WhileActive
// 0x01C8 (0x01C8 - 0x0000)
struct PyCue_Level_100003_WhileActive final
{
public:
	class AActor*                                 PayloadActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100003_WhileActive) == 0x000008, "Wrong alignment on PyCue_Level_100003_WhileActive");
static_assert(sizeof(PyCue_Level_100003_WhileActive) == 0x0001C8, "Wrong size on PyCue_Level_100003_WhileActive");
static_assert(offsetof(PyCue_Level_100003_WhileActive, PayloadActor) == 0x000000, "Member 'PyCue_Level_100003_WhileActive::PayloadActor' has a wrong offset!");
static_assert(offsetof(PyCue_Level_100003_WhileActive, Parameters) == 0x000008, "Member 'PyCue_Level_100003_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(PyCue_Level_100003_WhileActive, ReturnValue) == 0x0001C0, "Member 'PyCue_Level_100003_WhileActive::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyCue_Level_100003.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct PyCue_Level_100003_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100003_ReceiveEndPlay) == 0x000001, "Wrong alignment on PyCue_Level_100003_ReceiveEndPlay");
static_assert(sizeof(PyCue_Level_100003_ReceiveEndPlay) == 0x000001, "Wrong size on PyCue_Level_100003_ReceiveEndPlay");
static_assert(offsetof(PyCue_Level_100003_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'PyCue_Level_100003_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// PythonFunction PyPayload.PyCue_Level_100003.OnPayloadScopeVisible
// 0x0001 (0x0001 - 0x0000)
struct PyCue_Level_100003_OnPayloadScopeVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100003_OnPayloadScopeVisible) == 0x000001, "Wrong alignment on PyCue_Level_100003_OnPayloadScopeVisible");
static_assert(sizeof(PyCue_Level_100003_OnPayloadScopeVisible) == 0x000001, "Wrong size on PyCue_Level_100003_OnPayloadScopeVisible");
static_assert(offsetof(PyCue_Level_100003_OnPayloadScopeVisible, IsVisible) == 0x000000, "Member 'PyCue_Level_100003_OnPayloadScopeVisible::IsVisible' has a wrong offset!");

// PythonFunction PyPayload.PyCue_Level_100003.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PyCue_Level_100003_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyCue_Level_100003_ReceiveTick) == 0x000004, "Wrong alignment on PyCue_Level_100003_ReceiveTick");
static_assert(sizeof(PyCue_Level_100003_ReceiveTick) == 0x000004, "Wrong size on PyCue_Level_100003_ReceiveTick");
static_assert(offsetof(PyCue_Level_100003_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PyCue_Level_100003_ReceiveTick::DeltaSeconds' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.OccupyProgressChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_OccupyProgressChanged__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_OccupyProgressChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyPayload_OccupyProgressChanged__DelegateSignature");
static_assert(sizeof(PyPayload_OccupyProgressChanged__DelegateSignature) == 0x000010, "Wrong size on PyPayload_OccupyProgressChanged__DelegateSignature");
static_assert(offsetof(PyPayload_OccupyProgressChanged__DelegateSignature, Control_base) == 0x000000, "Member 'PyPayload_OccupyProgressChanged__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyPayload_OccupyProgressChanged__DelegateSignature, Progress) == 0x000008, "Member 'PyPayload_OccupyProgressChanged__DelegateSignature::Progress' has a wrong offset!");
static_assert(offsetof(PyPayload_OccupyProgressChanged__DelegateSignature, Speed) == 0x00000C, "Member 'PyPayload_OccupyProgressChanged__DelegateSignature::Speed' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.PayloadOwnerSideChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_PayloadOwnerSideChanged__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                Owner_side;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_PayloadOwnerSideChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyPayload_PayloadOwnerSideChanged__DelegateSignature");
static_assert(sizeof(PyPayload_PayloadOwnerSideChanged__DelegateSignature) == 0x000010, "Wrong size on PyPayload_PayloadOwnerSideChanged__DelegateSignature");
static_assert(offsetof(PyPayload_PayloadOwnerSideChanged__DelegateSignature, Control_base) == 0x000000, "Member 'PyPayload_PayloadOwnerSideChanged__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyPayload_PayloadOwnerSideChanged__DelegateSignature, Owner_side) == 0x000008, "Member 'PyPayload_PayloadOwnerSideChanged__DelegateSignature::Owner_side' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.PayloadOccupySideChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_PayloadOccupySideChanged__DelegateSignature final
{
public:
	class AActor*                                 Control_base;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOwnershipType                                Occupy_side;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_PayloadOccupySideChanged__DelegateSignature) == 0x000008, "Wrong alignment on PyPayload_PayloadOccupySideChanged__DelegateSignature");
static_assert(sizeof(PyPayload_PayloadOccupySideChanged__DelegateSignature) == 0x000010, "Wrong size on PyPayload_PayloadOccupySideChanged__DelegateSignature");
static_assert(offsetof(PyPayload_PayloadOccupySideChanged__DelegateSignature, Control_base) == 0x000000, "Member 'PyPayload_PayloadOccupySideChanged__DelegateSignature::Control_base' has a wrong offset!");
static_assert(offsetof(PyPayload_PayloadOccupySideChanged__DelegateSignature, Occupy_side) == 0x000008, "Member 'PyPayload_PayloadOccupySideChanged__DelegateSignature::Occupy_side' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.RouteIndexDispatcher__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_RouteIndexDispatcher__DelegateSignature final
{
public:
	class AActor*                                 Payload;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_RouteIndexDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on PyPayload_RouteIndexDispatcher__DelegateSignature");
static_assert(sizeof(PyPayload_RouteIndexDispatcher__DelegateSignature) == 0x000010, "Wrong size on PyPayload_RouteIndexDispatcher__DelegateSignature");
static_assert(offsetof(PyPayload_RouteIndexDispatcher__DelegateSignature, Payload) == 0x000000, "Member 'PyPayload_RouteIndexDispatcher__DelegateSignature::Payload' has a wrong offset!");
static_assert(offsetof(PyPayload_RouteIndexDispatcher__DelegateSignature, Index_0) == 0x000008, "Member 'PyPayload_RouteIndexDispatcher__DelegateSignature::Index_0' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.DispatcherProgressInfoChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PyPayload_DispatcherProgressInfoChange__DelegateSignature final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_DispatcherProgressInfoChange__DelegateSignature) == 0x000004, "Wrong alignment on PyPayload_DispatcherProgressInfoChange__DelegateSignature");
static_assert(sizeof(PyPayload_DispatcherProgressInfoChange__DelegateSignature) == 0x000008, "Wrong size on PyPayload_DispatcherProgressInfoChange__DelegateSignature");
static_assert(offsetof(PyPayload_DispatcherProgressInfoChange__DelegateSignature, Progress) == 0x000000, "Member 'PyPayload_DispatcherProgressInfoChange__DelegateSignature::Progress' has a wrong offset!");
static_assert(offsetof(PyPayload_DispatcherProgressInfoChange__DelegateSignature, Speed) == 0x000004, "Member 'PyPayload_DispatcherProgressInfoChange__DelegateSignature::Speed' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.BroadcastRouteChange
// 0x0002 (0x0002 - 0x0000)
struct PyPayload_BroadcastRouteChange final
{
public:
	bool                                          ReachEndPoint;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HaveNextRoute;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_BroadcastRouteChange) == 0x000001, "Wrong alignment on PyPayload_BroadcastRouteChange");
static_assert(sizeof(PyPayload_BroadcastRouteChange) == 0x000002, "Wrong size on PyPayload_BroadcastRouteChange");
static_assert(offsetof(PyPayload_BroadcastRouteChange, ReachEndPoint) == 0x000000, "Member 'PyPayload_BroadcastRouteChange::ReachEndPoint' has a wrong offset!");
static_assert(offsetof(PyPayload_BroadcastRouteChange, HaveNextRoute) == 0x000001, "Member 'PyPayload_BroadcastRouteChange::HaveNextRoute' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.DispatchOnRouteIndexChanged
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_DispatchOnRouteIndexChanged final
{
public:
	class UObject*                                TaskOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         Magnitude;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_DispatchOnRouteIndexChanged) == 0x000008, "Wrong alignment on PyPayload_DispatchOnRouteIndexChanged");
static_assert(sizeof(PyPayload_DispatchOnRouteIndexChanged) == 0x000010, "Wrong size on PyPayload_DispatchOnRouteIndexChanged");
static_assert(offsetof(PyPayload_DispatchOnRouteIndexChanged, TaskOwner) == 0x000000, "Member 'PyPayload_DispatchOnRouteIndexChanged::TaskOwner' has a wrong offset!");
static_assert(offsetof(PyPayload_DispatchOnRouteIndexChanged, Magnitude) == 0x000008, "Member 'PyPayload_DispatchOnRouteIndexChanged::Magnitude' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_ReceiveEndPlay) == 0x000001, "Wrong alignment on PyPayload_ReceiveEndPlay");
static_assert(sizeof(PyPayload_ReceiveEndPlay) == 0x000001, "Wrong size on PyPayload_ReceiveEndPlay");
static_assert(offsetof(PyPayload_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'PyPayload_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetOwnerSide
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_GetOwnerSide final
{
public:
	EOwnershipType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_GetOwnerSide) == 0x000001, "Wrong alignment on PyPayload_GetOwnerSide");
static_assert(sizeof(PyPayload_GetOwnerSide) == 0x000001, "Wrong size on PyPayload_GetOwnerSide");
static_assert(offsetof(PyPayload_GetOwnerSide, ReturnValue) == 0x000000, "Member 'PyPayload_GetOwnerSide::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.BSetOccupySpeed
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_BSetOccupySpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_BSetOccupySpeed) == 0x000004, "Wrong alignment on PyPayload_BSetOccupySpeed");
static_assert(sizeof(PyPayload_BSetOccupySpeed) == 0x000004, "Wrong size on PyPayload_BSetOccupySpeed");
static_assert(offsetof(PyPayload_BSetOccupySpeed, Speed) == 0x000000, "Member 'PyPayload_BSetOccupySpeed::Speed' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetTraceList
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_GetTraceList final
{
public:
	TArray<class APyPayloadTrace*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(PyPayload_GetTraceList) == 0x000008, "Wrong alignment on PyPayload_GetTraceList");
static_assert(sizeof(PyPayload_GetTraceList) == 0x000010, "Wrong size on PyPayload_GetTraceList");
static_assert(offsetof(PyPayload_GetTraceList, ReturnValue) == 0x000000, "Member 'PyPayload_GetTraceList::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetCurrSplineIndex
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_GetCurrSplineIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_GetCurrSplineIndex) == 0x000004, "Wrong alignment on PyPayload_GetCurrSplineIndex");
static_assert(sizeof(PyPayload_GetCurrSplineIndex) == 0x000004, "Wrong size on PyPayload_GetCurrSplineIndex");
static_assert(offsetof(PyPayload_GetCurrSplineIndex, ReturnValue) == 0x000000, "Member 'PyPayload_GetCurrSplineIndex::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetTraceListForBake
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_GetTraceListForBake final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(PyPayload_GetTraceListForBake) == 0x000008, "Wrong alignment on PyPayload_GetTraceListForBake");
static_assert(sizeof(PyPayload_GetTraceListForBake) == 0x000010, "Wrong size on PyPayload_GetTraceListForBake");
static_assert(offsetof(PyPayload_GetTraceListForBake, ReturnValue) == 0x000000, "Member 'PyPayload_GetTraceListForBake::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.PayloadEndFight
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_PayloadEndFight final
{
public:
	EBattleSide                                   Win_side;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_PayloadEndFight) == 0x000001, "Wrong alignment on PyPayload_PayloadEndFight");
static_assert(sizeof(PyPayload_PayloadEndFight) == 0x000001, "Wrong size on PyPayload_PayloadEndFight");
static_assert(offsetof(PyPayload_PayloadEndFight, Win_side) == 0x000000, "Member 'PyPayload_PayloadEndFight::Win_side' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.TriggerEventPoint__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct PyPayload_TriggerEventPoint__DelegateSignature final
{
public:
	struct FEventPointConfig                      Event_point;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyPayload_TriggerEventPoint__DelegateSignature) == 0x000008, "Wrong alignment on PyPayload_TriggerEventPoint__DelegateSignature");
static_assert(sizeof(PyPayload_TriggerEventPoint__DelegateSignature) == 0x000078, "Wrong size on PyPayload_TriggerEventPoint__DelegateSignature");
static_assert(offsetof(PyPayload_TriggerEventPoint__DelegateSignature, Event_point) == 0x000000, "Member 'PyPayload_TriggerEventPoint__DelegateSignature::Event_point' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.SetTraceList
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_SetTraceList final
{
public:
	TArray<class APyPayloadTrace*>                Trace_list;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PyPayload_SetTraceList) == 0x000008, "Wrong alignment on PyPayload_SetTraceList");
static_assert(sizeof(PyPayload_SetTraceList) == 0x000010, "Wrong size on PyPayload_SetTraceList");
static_assert(offsetof(PyPayload_SetTraceList, Trace_list) == 0x000000, "Member 'PyPayload_SetTraceList::Trace_list' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.OnRemainingTimeChange
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_OnRemainingTimeChange final
{
public:
	float                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_OnRemainingTimeChange) == 0x000004, "Wrong alignment on PyPayload_OnRemainingTimeChange");
static_assert(sizeof(PyPayload_OnRemainingTimeChange) == 0x000004, "Wrong size on PyPayload_OnRemainingTimeChange");
static_assert(offsetof(PyPayload_OnRemainingTimeChange, RemainingTime) == 0x000000, "Member 'PyPayload_OnRemainingTimeChange::RemainingTime' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.S_on_player_enter_camp
// 0x0008 (0x0008 - 0x0000)
struct PyPayload_S_on_player_enter_camp final
{
public:
	class AActor*                                 Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_S_on_player_enter_camp) == 0x000008, "Wrong alignment on PyPayload_S_on_player_enter_camp");
static_assert(sizeof(PyPayload_S_on_player_enter_camp) == 0x000008, "Wrong size on PyPayload_S_on_player_enter_camp");
static_assert(offsetof(PyPayload_S_on_player_enter_camp, Char) == 0x000000, "Member 'PyPayload_S_on_player_enter_camp::Char' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.S_on_player_exit_camp
// 0x0008 (0x0008 - 0x0000)
struct PyPayload_S_on_player_exit_camp final
{
public:
	class AActor*                                 Char;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_S_on_player_exit_camp) == 0x000008, "Wrong alignment on PyPayload_S_on_player_exit_camp");
static_assert(sizeof(PyPayload_S_on_player_exit_camp) == 0x000008, "Wrong size on PyPayload_S_on_player_exit_camp");
static_assert(offsetof(PyPayload_S_on_player_exit_camp, Char) == 0x000000, "Member 'PyPayload_S_on_player_exit_camp::Char' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.IsAttackInsideRecently
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_IsAttackInsideRecently final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_IsAttackInsideRecently) == 0x000001, "Wrong alignment on PyPayload_IsAttackInsideRecently");
static_assert(sizeof(PyPayload_IsAttackInsideRecently) == 0x000001, "Wrong size on PyPayload_IsAttackInsideRecently");
static_assert(offsetof(PyPayload_IsAttackInsideRecently, ReturnValue) == 0x000000, "Member 'PyPayload_IsAttackInsideRecently::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.IsDefendInsideRecently
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_IsDefendInsideRecently final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_IsDefendInsideRecently) == 0x000001, "Wrong alignment on PyPayload_IsDefendInsideRecently");
static_assert(sizeof(PyPayload_IsDefendInsideRecently) == 0x000001, "Wrong size on PyPayload_IsDefendInsideRecently");
static_assert(offsetof(PyPayload_IsDefendInsideRecently, ReturnValue) == 0x000000, "Member 'PyPayload_IsDefendInsideRecently::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.SetProgressSpeed
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_SetProgressSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_SetProgressSpeed) == 0x000004, "Wrong alignment on PyPayload_SetProgressSpeed");
static_assert(sizeof(PyPayload_SetProgressSpeed) == 0x000004, "Wrong size on PyPayload_SetProgressSpeed");
static_assert(offsetof(PyPayload_SetProgressSpeed, Speed) == 0x000000, "Member 'PyPayload_SetProgressSpeed::Speed' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetCurTraceName
// 0x0010 (0x0010 - 0x0000)
struct PyPayload_GetCurTraceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_GetCurTraceName) == 0x000008, "Wrong alignment on PyPayload_GetCurTraceName");
static_assert(sizeof(PyPayload_GetCurTraceName) == 0x000010, "Wrong size on PyPayload_GetCurTraceName");
static_assert(offsetof(PyPayload_GetCurTraceName, ReturnValue) == 0x000000, "Member 'PyPayload_GetCurTraceName::ReturnValue' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetEscortProgress
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_GetEscortProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_GetEscortProgress) == 0x000004, "Wrong alignment on PyPayload_GetEscortProgress");
static_assert(sizeof(PyPayload_GetEscortProgress) == 0x000004, "Wrong size on PyPayload_GetEscortProgress");
static_assert(offsetof(PyPayload_GetEscortProgress, ReturnValue) == 0x000000, "Member 'PyPayload_GetEscortProgress::ReturnValue' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.OnlyAttackIn__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_OnlyAttackIn__DelegateSignature final
{
public:
	int32                                         AttackCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_OnlyAttackIn__DelegateSignature) == 0x000004, "Wrong alignment on PyPayload_OnlyAttackIn__DelegateSignature");
static_assert(sizeof(PyPayload_OnlyAttackIn__DelegateSignature) == 0x000004, "Wrong size on PyPayload_OnlyAttackIn__DelegateSignature");
static_assert(offsetof(PyPayload_OnlyAttackIn__DelegateSignature, AttackCount) == 0x000000, "Member 'PyPayload_OnlyAttackIn__DelegateSignature::AttackCount' has a wrong offset!");

// DelegateFunction PyPayload.PyPayload.OnlyDefendIn__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct PyPayload_OnlyDefendIn__DelegateSignature final
{
public:
	int32                                         DefendCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_OnlyDefendIn__DelegateSignature) == 0x000004, "Wrong alignment on PyPayload_OnlyDefendIn__DelegateSignature");
static_assert(sizeof(PyPayload_OnlyDefendIn__DelegateSignature) == 0x000004, "Wrong size on PyPayload_OnlyDefendIn__DelegateSignature");
static_assert(offsetof(PyPayload_OnlyDefendIn__DelegateSignature, DefendCount) == 0x000000, "Member 'PyPayload_OnlyDefendIn__DelegateSignature::DefendCount' has a wrong offset!");

// PythonFunction PyPayload.PyPayload.GetType
// 0x0001 (0x0001 - 0x0000)
struct PyPayload_GetType final
{
public:
	EControlPointType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyPayload_GetType) == 0x000001, "Wrong alignment on PyPayload_GetType");
static_assert(sizeof(PyPayload_GetType) == 0x000001, "Wrong size on PyPayload_GetType");
static_assert(offsetof(PyPayload_GetType, ReturnValue) == 0x000000, "Member 'PyPayload_GetType::ReturnValue' has a wrong offset!");

}

