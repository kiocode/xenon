#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_104131

#include "Basic.hpp"

#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Hero_1041_classes.hpp"


namespace SDK
{

// PythonClass PyAbility_104131.PyEffectiveComponent_10413101
// 0x0000 (0x1C00 - 0x1C00)
class UPyEffectiveComponent_10413101 final : public UMarvelAgentEffectiveComponent
{
public:
	TArray<struct FHitResult> K2_OnPreApplyContainer(const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyEffectiveComponent_10413101">();
	}
	static class UPyEffectiveComponent_10413101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyEffectiveComponent_10413101>();
	}
};
static_assert(alignof(UPyEffectiveComponent_10413101) == 0x000010, "Wrong alignment on UPyEffectiveComponent_10413101");
static_assert(sizeof(UPyEffectiveComponent_10413101) == 0x001C00, "Wrong size on UPyEffectiveComponent_10413101");

// PythonClass PyAbility_104131.PyProjectile_10413102
// 0x0010 (0x3060 - 0x3050)
class APyProjectile_10413102 : public AMarvelAbilityTargetActor_Projectile
{
public:
	class UProjectileHomingComponent*             HomingComponent;                                   // 0x3050(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRealHit;                                         // 0x3058(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void K2_OnInitializeData();
	void K2_OnBeginAgentTask();
	void K2_OnEndAgentTask();
	void OnBackwardProjectileStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyProjectile_10413102">();
	}
	static class APyProjectile_10413102* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyProjectile_10413102>();
	}
};
static_assert(alignof(APyProjectile_10413102) == 0x000010, "Wrong alignment on APyProjectile_10413102");
static_assert(sizeof(APyProjectile_10413102) == 0x003060, "Wrong size on APyProjectile_10413102");
static_assert(offsetof(APyProjectile_10413102, HomingComponent) == 0x003050, "Member 'APyProjectile_10413102::HomingComponent' has a wrong offset!");
static_assert(offsetof(APyProjectile_10413102, IsRealHit) == 0x003058, "Member 'APyProjectile_10413102::IsRealHit' has a wrong offset!");

// PythonClass PyAbility_104131.PyCue_Projectile_Loop_10413102
// 0x0008 (0x0DB8 - 0x0DB0)
class APyCue_Projectile_Loop_10413102 final : public AMarvelCueNotify_Projectile
{
public:
	int32                                         RealHitAudioID;                                    // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotRealHitAudioID;                                 // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCue_Projectile_Loop_10413102">();
	}
	static class APyCue_Projectile_Loop_10413102* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCue_Projectile_Loop_10413102>();
	}
};
static_assert(alignof(APyCue_Projectile_Loop_10413102) == 0x000008, "Wrong alignment on APyCue_Projectile_Loop_10413102");
static_assert(sizeof(APyCue_Projectile_Loop_10413102) == 0x000DB8, "Wrong size on APyCue_Projectile_Loop_10413102");
static_assert(offsetof(APyCue_Projectile_Loop_10413102, RealHitAudioID) == 0x000DB0, "Member 'APyCue_Projectile_Loop_10413102::RealHitAudioID' has a wrong offset!");
static_assert(offsetof(APyCue_Projectile_Loop_10413102, NotRealHitAudioID) == 0x000DB4, "Member 'APyCue_Projectile_Loop_10413102::NotRealHitAudioID' has a wrong offset!");

// PythonClass PyAbility_104131.PyProjectile_10413101
// 0x0020 (0x3070 - 0x3050)
class APyProjectile_10413101 : public AMarvelAbilityTargetActor_Projectile
{
public:
	float                                         AccumulateTime;                                    // 0x3050(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3054[0x4];                                     // 0x3054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APyProjectile_10413102*                 BackProjectile;                                    // 0x3058(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRealHit;                                         // 0x3060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void K2_OnInitializeData();
	void K2_OnBeginAgentTask();
	void OnProjectileStop();
	void K2_OnEndAgentTask();
	void K2_OnProcessHit(const struct FHitResult& ImpactResult);
	void K2_OnRecycleAgentTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyProjectile_10413101">();
	}
	static class APyProjectile_10413101* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyProjectile_10413101>();
	}
};
static_assert(alignof(APyProjectile_10413101) == 0x000010, "Wrong alignment on APyProjectile_10413101");
static_assert(sizeof(APyProjectile_10413101) == 0x003070, "Wrong size on APyProjectile_10413101");
static_assert(offsetof(APyProjectile_10413101, AccumulateTime) == 0x003050, "Member 'APyProjectile_10413101::AccumulateTime' has a wrong offset!");
static_assert(offsetof(APyProjectile_10413101, BackProjectile) == 0x003058, "Member 'APyProjectile_10413101::BackProjectile' has a wrong offset!");
static_assert(offsetof(APyProjectile_10413101, IsRealHit) == 0x003060, "Member 'APyProjectile_10413101::IsRealHit' has a wrong offset!");

// PythonClass PyAbility_104131.PyConfig_104131
// 0x0160 (0x0270 - 0x0110)
class UPyConfig_104131 final : public UConfig_104131
{
public:
	float                                         MinHoldTime;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AccumulateCurve;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecycleProjectileMaxSpeed;                         // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecycleProjectileMinSpeed;                         // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAccelerationMagnitude;                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FXDisplayTime;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MissileOwnedTag;                                   // 0x0130(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0198(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoredTags;                                       // 0x0200(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SubDragScopeID;                                    // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_104131">();
	}
	static class UPyConfig_104131* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_104131>();
	}
};
static_assert(alignof(UPyConfig_104131) == 0x000008, "Wrong alignment on UPyConfig_104131");
static_assert(sizeof(UPyConfig_104131) == 0x000270, "Wrong size on UPyConfig_104131");
static_assert(offsetof(UPyConfig_104131, MinHoldTime) == 0x000110, "Member 'UPyConfig_104131::MinHoldTime' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, AccumulateCurve) == 0x000118, "Member 'UPyConfig_104131::AccumulateCurve' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, RecycleProjectileMaxSpeed) == 0x000120, "Member 'UPyConfig_104131::RecycleProjectileMaxSpeed' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, RecycleProjectileMinSpeed) == 0x000124, "Member 'UPyConfig_104131::RecycleProjectileMinSpeed' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, HomingAccelerationMagnitude) == 0x000128, "Member 'UPyConfig_104131::HomingAccelerationMagnitude' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, FXDisplayTime) == 0x00012C, "Member 'UPyConfig_104131::FXDisplayTime' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, MissileOwnedTag) == 0x000130, "Member 'UPyConfig_104131::MissileOwnedTag' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, RequiredTags) == 0x000198, "Member 'UPyConfig_104131::RequiredTags' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, IgnoredTags) == 0x000200, "Member 'UPyConfig_104131::IgnoredTags' has a wrong offset!");
static_assert(offsetof(UPyConfig_104131, SubDragScopeID) == 0x000268, "Member 'UPyConfig_104131::SubDragScopeID' has a wrong offset!");

// PythonClass PyAbility_104131.PyAbility_104131
// 0x0028 (0x2790 - 0x2768)
class UPyAbility_104131 : public UAbility_104131
{
public:
	class APyProjectile_10413101*                 LaunchProjectile;                                  // 0x2768(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbilityIsRealHit;                                  // 0x2770(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2771[0x7];                                     // 0x2771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_NetworkSyncPointWithPayload* NetSyncTask;                                       // 0x2778(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTriggerAbility;                                  // 0x2780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnTriggerAbility__DelegateSignature();
	void BeginPlay();
	bool CanActivate();
	void K2_ActivateGameplay();
	void OnPressCancle(float Useless);
	void K2_TriggerGameplay(float HoldTime);
	void K2_MaxHoldTimeGameplay(float HoldTime);
	void MissileEventNotify();
	void HandleAnimSocketInfo(int32 SocketId, const struct FMarvelAbilitySocketInfo& SocketInfo);
	void BreakEventNotify();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnWaitServerSyncOvertime();
	void OnNetSync(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnProjectileTaskSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void BackwardProjectileSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void K2_EnterEndSection();
	void OnBackProjectileEndTask(class AActor* Projectile);
	void NativeOnMontageCompleted(const class FString& Tag);
	void NativeOnMontageBlendOut(const class FString& Tag);
	void NativeOnMontageInterrupted(const class FString& Tag);
	void NativeOnMontageCancelled(const class FString& Tag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_104131">();
	}
	static class UPyAbility_104131* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_104131>();
	}
};
static_assert(alignof(UPyAbility_104131) == 0x000008, "Wrong alignment on UPyAbility_104131");
static_assert(sizeof(UPyAbility_104131) == 0x002790, "Wrong size on UPyAbility_104131");
static_assert(offsetof(UPyAbility_104131, LaunchProjectile) == 0x002768, "Member 'UPyAbility_104131::LaunchProjectile' has a wrong offset!");
static_assert(offsetof(UPyAbility_104131, AbilityIsRealHit) == 0x002770, "Member 'UPyAbility_104131::AbilityIsRealHit' has a wrong offset!");
static_assert(offsetof(UPyAbility_104131, NetSyncTask) == 0x002778, "Member 'UPyAbility_104131::NetSyncTask' has a wrong offset!");
static_assert(offsetof(UPyAbility_104131, OnTriggerAbility) == 0x002780, "Member 'UPyAbility_104131::OnTriggerAbility' has a wrong offset!");

// PythonClass PyAbility_104131.PyUIController_104131
// 0x0000 (0x0C78 - 0x0C78)
class UPyUIController_104131 final : public UUIController_104131
{
public:
	void SetAbility(int32 InAbilityId, class UGameplayAbility* InAbility);
	void Destruct();
	void PlayWarningAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyUIController_104131">();
	}
	static class UPyUIController_104131* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyUIController_104131>();
	}
};
static_assert(alignof(UPyUIController_104131) == 0x000008, "Wrong alignment on UPyUIController_104131");
static_assert(sizeof(UPyUIController_104131) == 0x000C78, "Wrong size on UPyUIController_104131");

}

