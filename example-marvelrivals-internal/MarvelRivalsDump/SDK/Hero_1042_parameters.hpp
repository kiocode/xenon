#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1042

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hero_1042_structs.hpp"
#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Hero_1042.Summoned_10424101.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424101_GetCurrentState final
{
public:
	EState_10424101                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424101_GetCurrentState) == 0x000001, "Wrong alignment on Summoned_10424101_GetCurrentState");
static_assert(sizeof(Summoned_10424101_GetCurrentState) == 0x000001, "Wrong size on Summoned_10424101_GetCurrentState");
static_assert(offsetof(Summoned_10424101_GetCurrentState, ReturnValue) == 0x000000, "Member 'Summoned_10424101_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.IsConfigValid
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424102_IsConfigValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_IsConfigValid) == 0x000001, "Wrong alignment on Summoned_10424102_IsConfigValid");
static_assert(sizeof(Summoned_10424102_IsConfigValid) == 0x000001, "Wrong size on Summoned_10424102_IsConfigValid");
static_assert(offsetof(Summoned_10424102_IsConfigValid, ReturnValue) == 0x000000, "Member 'Summoned_10424102_IsConfigValid::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.MulticastLaunch
// 0x0030 (0x0030 - 0x0000)
struct Summoned_10424102_MulticastLaunch final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_MulticastLaunch) == 0x000008, "Wrong alignment on Summoned_10424102_MulticastLaunch");
static_assert(sizeof(Summoned_10424102_MulticastLaunch) == 0x000030, "Wrong size on Summoned_10424102_MulticastLaunch");
static_assert(offsetof(Summoned_10424102_MulticastLaunch, StartLocation) == 0x000000, "Member 'Summoned_10424102_MulticastLaunch::StartLocation' has a wrong offset!");
static_assert(offsetof(Summoned_10424102_MulticastLaunch, Velocity) == 0x000018, "Member 'Summoned_10424102_MulticastLaunch::Velocity' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.MulticastRegisterSpider
// 0x0028 (0x0028 - 0x0000)
struct Summoned_10424102_MulticastRegisterSpider final
{
public:
	struct FSpiderSpawnInfo                       SpawnInfo;                                         // 0x0000(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_MulticastRegisterSpider) == 0x000008, "Wrong alignment on Summoned_10424102_MulticastRegisterSpider");
static_assert(sizeof(Summoned_10424102_MulticastRegisterSpider) == 0x000028, "Wrong size on Summoned_10424102_MulticastRegisterSpider");
static_assert(offsetof(Summoned_10424102_MulticastRegisterSpider, SpawnInfo) == 0x000000, "Member 'Summoned_10424102_MulticastRegisterSpider::SpawnInfo' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.OnSpiderMovingStateChange
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424102_OnSpiderMovingStateChange final
{
public:
	bool                                          bNewIsMoving;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_OnSpiderMovingStateChange) == 0x000001, "Wrong alignment on Summoned_10424102_OnSpiderMovingStateChange");
static_assert(sizeof(Summoned_10424102_OnSpiderMovingStateChange) == 0x000001, "Wrong size on Summoned_10424102_OnSpiderMovingStateChange");
static_assert(offsetof(Summoned_10424102_OnSpiderMovingStateChange, bNewIsMoving) == 0x000000, "Member 'Summoned_10424102_OnSpiderMovingStateChange::bNewIsMoving' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.OnSpiderProjectileStop
// 0x0170 (0x0170 - 0x0000)
struct Summoned_10424102_OnSpiderProjectileStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_OnSpiderProjectileStop) == 0x000008, "Wrong alignment on Summoned_10424102_OnSpiderProjectileStop");
static_assert(sizeof(Summoned_10424102_OnSpiderProjectileStop) == 0x000170, "Wrong size on Summoned_10424102_OnSpiderProjectileStop");
static_assert(offsetof(Summoned_10424102_OnSpiderProjectileStop, ImpactResult) == 0x000000, "Member 'Summoned_10424102_OnSpiderProjectileStop::ImpactResult' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.ServerSetWeb
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10424102_ServerSetWeb final
{
public:
	class ASummoned_10424103*                     InWeb;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNodeIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10424102_ServerSetWeb) == 0x000008, "Wrong alignment on Summoned_10424102_ServerSetWeb");
static_assert(sizeof(Summoned_10424102_ServerSetWeb) == 0x000010, "Wrong size on Summoned_10424102_ServerSetWeb");
static_assert(offsetof(Summoned_10424102_ServerSetWeb, InWeb) == 0x000000, "Member 'Summoned_10424102_ServerSetWeb::InWeb' has a wrong offset!");
static_assert(offsetof(Summoned_10424102_ServerSetWeb, InNodeIndex) == 0x000008, "Member 'Summoned_10424102_ServerSetWeb::InNodeIndex' has a wrong offset!");

// Function Hero_1042.Summoned_10424102.GetSpiderEntity
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10424102_GetSpiderEntity final
{
public:
	class UMarvelSpiderEntity*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424102_GetSpiderEntity) == 0x000008, "Wrong alignment on Summoned_10424102_GetSpiderEntity");
static_assert(sizeof(Summoned_10424102_GetSpiderEntity) == 0x000008, "Wrong size on Summoned_10424102_GetSpiderEntity");
static_assert(offsetof(Summoned_10424102_GetSpiderEntity, ReturnValue) == 0x000000, "Member 'Summoned_10424102_GetSpiderEntity::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetGenMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10424103_GetGenMeshComponent final
{
public:
	class UMarvelGenMeshComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_GetGenMeshComponent) == 0x000008, "Wrong alignment on Summoned_10424103_GetGenMeshComponent");
static_assert(sizeof(Summoned_10424103_GetGenMeshComponent) == 0x000008, "Wrong size on Summoned_10424103_GetGenMeshComponent");
static_assert(offsetof(Summoned_10424103_GetGenMeshComponent, ReturnValue) == 0x000000, "Member 'Summoned_10424103_GetGenMeshComponent::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetPyramidMeshVertices
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10424103_GetPyramidMeshVertices final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_GetPyramidMeshVertices) == 0x000008, "Wrong alignment on Summoned_10424103_GetPyramidMeshVertices");
static_assert(sizeof(Summoned_10424103_GetPyramidMeshVertices) == 0x000010, "Wrong size on Summoned_10424103_GetPyramidMeshVertices");
static_assert(offsetof(Summoned_10424103_GetPyramidMeshVertices, Vertices) == 0x000000, "Member 'Summoned_10424103_GetPyramidMeshVertices::Vertices' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetWebCentralLocation
// 0x0020 (0x0020 - 0x0000)
struct Summoned_10424103_GetWebCentralLocation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10424103_GetWebCentralLocation) == 0x000008, "Wrong alignment on Summoned_10424103_GetWebCentralLocation");
static_assert(sizeof(Summoned_10424103_GetWebCentralLocation) == 0x000020, "Wrong size on Summoned_10424103_GetWebCentralLocation");
static_assert(offsetof(Summoned_10424103_GetWebCentralLocation, OutLocation) == 0x000000, "Member 'Summoned_10424103_GetWebCentralLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(Summoned_10424103_GetWebCentralLocation, ReturnValue) == 0x000018, "Member 'Summoned_10424103_GetWebCentralLocation::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetWebMaxOffsetDistance
// 0x0004 (0x0004 - 0x0000)
struct Summoned_10424103_GetWebMaxOffsetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_GetWebMaxOffsetDistance) == 0x000004, "Wrong alignment on Summoned_10424103_GetWebMaxOffsetDistance");
static_assert(sizeof(Summoned_10424103_GetWebMaxOffsetDistance) == 0x000004, "Wrong size on Summoned_10424103_GetWebMaxOffsetDistance");
static_assert(offsetof(Summoned_10424103_GetWebMaxOffsetDistance, ReturnValue) == 0x000000, "Member 'Summoned_10424103_GetWebMaxOffsetDistance::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetWebValidNodesNum
// 0x0004 (0x0004 - 0x0000)
struct Summoned_10424103_GetWebValidNodesNum final
{
public:
	int32                                         OutNum;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_GetWebValidNodesNum) == 0x000004, "Wrong alignment on Summoned_10424103_GetWebValidNodesNum");
static_assert(sizeof(Summoned_10424103_GetWebValidNodesNum) == 0x000004, "Wrong size on Summoned_10424103_GetWebValidNodesNum");
static_assert(offsetof(Summoned_10424103_GetWebValidNodesNum, OutNum) == 0x000000, "Member 'Summoned_10424103_GetWebValidNodesNum::OutNum' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.OnGenMeshRespawnMove
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_OnGenMeshRespawnMove final
{
public:
	bool                                          bIsReform;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_OnGenMeshRespawnMove) == 0x000001, "Wrong alignment on Summoned_10424103_OnGenMeshRespawnMove");
static_assert(sizeof(Summoned_10424103_OnGenMeshRespawnMove) == 0x000001, "Wrong size on Summoned_10424103_OnGenMeshRespawnMove");
static_assert(offsetof(Summoned_10424103_OnGenMeshRespawnMove, bIsReform) == 0x000000, "Member 'Summoned_10424103_OnGenMeshRespawnMove::bIsReform' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.OnGenMeshSpawnFinished
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_OnGenMeshSpawnFinished final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_OnGenMeshSpawnFinished) == 0x000001, "Wrong alignment on Summoned_10424103_OnGenMeshSpawnFinished");
static_assert(sizeof(Summoned_10424103_OnGenMeshSpawnFinished) == 0x000001, "Wrong size on Summoned_10424103_OnGenMeshSpawnFinished");
static_assert(offsetof(Summoned_10424103_OnGenMeshSpawnFinished, bSuccess) == 0x000000, "Member 'Summoned_10424103_OnGenMeshSpawnFinished::bSuccess' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.SetIsLinkChar
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_SetIsLinkChar final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_SetIsLinkChar) == 0x000001, "Wrong alignment on Summoned_10424103_SetIsLinkChar");
static_assert(sizeof(Summoned_10424103_SetIsLinkChar) == 0x000001, "Wrong size on Summoned_10424103_SetIsLinkChar");
static_assert(offsetof(Summoned_10424103_SetIsLinkChar, NewState) == 0x000000, "Member 'Summoned_10424103_SetIsLinkChar::NewState' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.SetIsWebReleased
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_SetIsWebReleased final
{
public:
	bool                                          bNewIsReleased;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_SetIsWebReleased) == 0x000001, "Wrong alignment on Summoned_10424103_SetIsWebReleased");
static_assert(sizeof(Summoned_10424103_SetIsWebReleased) == 0x000001, "Wrong size on Summoned_10424103_SetIsWebReleased");
static_assert(offsetof(Summoned_10424103_SetIsWebReleased, bNewIsReleased) == 0x000000, "Member 'Summoned_10424103_SetIsWebReleased::bNewIsReleased' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.SetIsWebSpawned
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_SetIsWebSpawned final
{
public:
	bool                                          bNewIsSpawned;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_SetIsWebSpawned) == 0x000001, "Wrong alignment on Summoned_10424103_SetIsWebSpawned");
static_assert(sizeof(Summoned_10424103_SetIsWebSpawned) == 0x000001, "Wrong size on Summoned_10424103_SetIsWebSpawned");
static_assert(offsetof(Summoned_10424103_SetIsWebSpawned, bNewIsSpawned) == 0x000000, "Member 'Summoned_10424103_SetIsWebSpawned::bNewIsSpawned' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.ShouldMoveWithBase
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_ShouldMoveWithBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_ShouldMoveWithBase) == 0x000001, "Wrong alignment on Summoned_10424103_ShouldMoveWithBase");
static_assert(sizeof(Summoned_10424103_ShouldMoveWithBase) == 0x000001, "Wrong size on Summoned_10424103_ShouldMoveWithBase");
static_assert(offsetof(Summoned_10424103_ShouldMoveWithBase, ReturnValue) == 0x000000, "Member 'Summoned_10424103_ShouldMoveWithBase::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.SpawnPyramidActor
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_SpawnPyramidActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_SpawnPyramidActor) == 0x000001, "Wrong alignment on Summoned_10424103_SpawnPyramidActor");
static_assert(sizeof(Summoned_10424103_SpawnPyramidActor) == 0x000001, "Wrong size on Summoned_10424103_SpawnPyramidActor");
static_assert(offsetof(Summoned_10424103_SpawnPyramidActor, ReturnValue) == 0x000000, "Member 'Summoned_10424103_SpawnPyramidActor::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.GetWebEntity
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10424103_GetWebEntity final
{
public:
	class UMarvelWebEntity*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_GetWebEntity) == 0x000008, "Wrong alignment on Summoned_10424103_GetWebEntity");
static_assert(sizeof(Summoned_10424103_GetWebEntity) == 0x000008, "Wrong size on Summoned_10424103_GetWebEntity");
static_assert(offsetof(Summoned_10424103_GetWebEntity, ReturnValue) == 0x000000, "Member 'Summoned_10424103_GetWebEntity::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.IsWebActive
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_IsWebActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_IsWebActive) == 0x000001, "Wrong alignment on Summoned_10424103_IsWebActive");
static_assert(sizeof(Summoned_10424103_IsWebActive) == 0x000001, "Wrong size on Summoned_10424103_IsWebActive");
static_assert(offsetof(Summoned_10424103_IsWebActive, ReturnValue) == 0x000000, "Member 'Summoned_10424103_IsWebActive::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.IsWebReleased
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_IsWebReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_IsWebReleased) == 0x000001, "Wrong alignment on Summoned_10424103_IsWebReleased");
static_assert(sizeof(Summoned_10424103_IsWebReleased) == 0x000001, "Wrong size on Summoned_10424103_IsWebReleased");
static_assert(offsetof(Summoned_10424103_IsWebReleased, ReturnValue) == 0x000000, "Member 'Summoned_10424103_IsWebReleased::ReturnValue' has a wrong offset!");

// Function Hero_1042.Summoned_10424103.IsWebSpawned
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10424103_IsWebSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10424103_IsWebSpawned) == 0x000001, "Wrong alignment on Summoned_10424103_IsWebSpawned");
static_assert(sizeof(Summoned_10424103_IsWebSpawned) == 0x000001, "Wrong size on Summoned_10424103_IsWebSpawned");
static_assert(offsetof(Summoned_10424103_IsWebSpawned, ReturnValue) == 0x000000, "Member 'Summoned_10424103_IsWebSpawned::ReturnValue' has a wrong offset!");

// Function Hero_1042.TraceComponent_10424103.OnPreOutTraceResults
// 0x0178 (0x0178 - 0x0000)
struct TraceComponent_10424103_OnPreOutTraceResults final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0170(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceComponent_10424103_OnPreOutTraceResults) == 0x000008, "Wrong alignment on TraceComponent_10424103_OnPreOutTraceResults");
static_assert(sizeof(TraceComponent_10424103_OnPreOutTraceResults) == 0x000178, "Wrong size on TraceComponent_10424103_OnPreOutTraceResults");
static_assert(offsetof(TraceComponent_10424103_OnPreOutTraceResults, Hit) == 0x000000, "Member 'TraceComponent_10424103_OnPreOutTraceResults::Hit' has a wrong offset!");
static_assert(offsetof(TraceComponent_10424103_OnPreOutTraceResults, ReturnValue) == 0x000170, "Member 'TraceComponent_10424103_OnPreOutTraceResults::ReturnValue' has a wrong offset!");

// Function Hero_1042.TraceComponent_10420102.FindNearestLinkedWeb
// 0x0018 (0x0018 - 0x0000)
struct TraceComponent_10420102_FindNearestLinkedWeb final
{
public:
	class AMarvelBaseCharacter*                   TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutNearestIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelWebEntity*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceComponent_10420102_FindNearestLinkedWeb) == 0x000008, "Wrong alignment on TraceComponent_10420102_FindNearestLinkedWeb");
static_assert(sizeof(TraceComponent_10420102_FindNearestLinkedWeb) == 0x000018, "Wrong size on TraceComponent_10420102_FindNearestLinkedWeb");
static_assert(offsetof(TraceComponent_10420102_FindNearestLinkedWeb, TargetActor) == 0x000000, "Member 'TraceComponent_10420102_FindNearestLinkedWeb::TargetActor' has a wrong offset!");
static_assert(offsetof(TraceComponent_10420102_FindNearestLinkedWeb, OutNearestIndex) == 0x000008, "Member 'TraceComponent_10420102_FindNearestLinkedWeb::OutNearestIndex' has a wrong offset!");
static_assert(offsetof(TraceComponent_10420102_FindNearestLinkedWeb, ReturnValue) == 0x000010, "Member 'TraceComponent_10420102_FindNearestLinkedWeb::ReturnValue' has a wrong offset!");

// Function Hero_1042.EffectiveComponent_10420102.FindNearestLinkedWeb
// 0x0028 (0x0028 - 0x0000)
struct EffectiveComponent_10420102_FindNearestLinkedWeb final
{
public:
	struct FVector                                TargetActor;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutNearestIndex;                                   // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelWebEntity*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectiveComponent_10420102_FindNearestLinkedWeb) == 0x000008, "Wrong alignment on EffectiveComponent_10420102_FindNearestLinkedWeb");
static_assert(sizeof(EffectiveComponent_10420102_FindNearestLinkedWeb) == 0x000028, "Wrong size on EffectiveComponent_10420102_FindNearestLinkedWeb");
static_assert(offsetof(EffectiveComponent_10420102_FindNearestLinkedWeb, TargetActor) == 0x000000, "Member 'EffectiveComponent_10420102_FindNearestLinkedWeb::TargetActor' has a wrong offset!");
static_assert(offsetof(EffectiveComponent_10420102_FindNearestLinkedWeb, OutNearestIndex) == 0x000018, "Member 'EffectiveComponent_10420102_FindNearestLinkedWeb::OutNearestIndex' has a wrong offset!");
static_assert(offsetof(EffectiveComponent_10420102_FindNearestLinkedWeb, ReturnValue) == 0x000020, "Member 'EffectiveComponent_10420102_FindNearestLinkedWeb::ReturnValue' has a wrong offset!");

// Function Hero_1042.Cue_Summoner_Loop_10424105.OnDissolveUpdate
// 0x001C (0x001C - 0x0000)
struct Cue_Summoner_Loop_10424105_OnDissolveUpdate final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10424105_OnDissolveUpdate) == 0x000004, "Wrong alignment on Cue_Summoner_Loop_10424105_OnDissolveUpdate");
static_assert(sizeof(Cue_Summoner_Loop_10424105_OnDissolveUpdate) == 0x00001C, "Wrong size on Cue_Summoner_Loop_10424105_OnDissolveUpdate");
static_assert(offsetof(Cue_Summoner_Loop_10424105_OnDissolveUpdate, TrackName) == 0x000000, "Member 'Cue_Summoner_Loop_10424105_OnDissolveUpdate::TrackName' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10424105_OnDissolveUpdate, PropertyName) == 0x00000C, "Member 'Cue_Summoner_Loop_10424105_OnDissolveUpdate::PropertyName' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10424105_OnDissolveUpdate, OutValue) == 0x000018, "Member 'Cue_Summoner_Loop_10424105_OnDissolveUpdate::OutValue' has a wrong offset!");

// Function Hero_1042.Cue_Summoner_Loop_10424105.OnWebLinkedChanged
// 0x0001 (0x0001 - 0x0000)
struct Cue_Summoner_Loop_10424105_OnWebLinkedChanged final
{
public:
	bool                                          bIsLinked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Summoner_Loop_10424105_OnWebLinkedChanged) == 0x000001, "Wrong alignment on Cue_Summoner_Loop_10424105_OnWebLinkedChanged");
static_assert(sizeof(Cue_Summoner_Loop_10424105_OnWebLinkedChanged) == 0x000001, "Wrong size on Cue_Summoner_Loop_10424105_OnWebLinkedChanged");
static_assert(offsetof(Cue_Summoner_Loop_10424105_OnWebLinkedChanged, bIsLinked) == 0x000000, "Member 'Cue_Summoner_Loop_10424105_OnWebLinkedChanged::bIsLinked' has a wrong offset!");

// Function Hero_1042.SummonedComp_10425101.ChangeHiddenCount
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10425101_ChangeHiddenCount final
{
public:
	bool                                          bIsHidden;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniqID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10425101_ChangeHiddenCount) == 0x000004, "Wrong alignment on SummonedComp_10425101_ChangeHiddenCount");
static_assert(sizeof(SummonedComp_10425101_ChangeHiddenCount) == 0x000008, "Wrong size on SummonedComp_10425101_ChangeHiddenCount");
static_assert(offsetof(SummonedComp_10425101_ChangeHiddenCount, bIsHidden) == 0x000000, "Member 'SummonedComp_10425101_ChangeHiddenCount::bIsHidden' has a wrong offset!");
static_assert(offsetof(SummonedComp_10425101_ChangeHiddenCount, UniqID) == 0x000004, "Member 'SummonedComp_10425101_ChangeHiddenCount::UniqID' has a wrong offset!");

// Function Hero_1042.SummonedComp_10425101.OnScopeTraceResult
// 0x0010 (0x0010 - 0x0000)
struct SummonedComp_10425101_OnScopeTraceResult final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10425101_OnScopeTraceResult) == 0x000008, "Wrong alignment on SummonedComp_10425101_OnScopeTraceResult");
static_assert(sizeof(SummonedComp_10425101_OnScopeTraceResult) == 0x000010, "Wrong size on SummonedComp_10425101_OnScopeTraceResult");
static_assert(offsetof(SummonedComp_10425101_OnScopeTraceResult, HitResults) == 0x000000, "Member 'SummonedComp_10425101_OnScopeTraceResult::HitResults' has a wrong offset!");

// Function Hero_1042.SummonedComp_10425101.SetCollisionMaskFilter
// 0x0001 (0x0001 - 0x0000)
struct SummonedComp_10425101_SetCollisionMaskFilter final
{
public:
	bool                                          bIsHidden;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10425101_SetCollisionMaskFilter) == 0x000001, "Wrong alignment on SummonedComp_10425101_SetCollisionMaskFilter");
static_assert(sizeof(SummonedComp_10425101_SetCollisionMaskFilter) == 0x000001, "Wrong size on SummonedComp_10425101_SetCollisionMaskFilter");
static_assert(offsetof(SummonedComp_10425101_SetCollisionMaskFilter, bIsHidden) == 0x000000, "Member 'SummonedComp_10425101_SetCollisionMaskFilter::bIsHidden' has a wrong offset!");

// Function Hero_1042.Ability_104261.BindPortalEndDelegate
// 0x0010 (0x0010 - 0x0000)
struct Ability_104261_BindPortalEndDelegate final
{
public:
	class APortalViewActor*                       InPortal;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104261_BindPortalEndDelegate) == 0x000008, "Wrong alignment on Ability_104261_BindPortalEndDelegate");
static_assert(sizeof(Ability_104261_BindPortalEndDelegate) == 0x000010, "Wrong size on Ability_104261_BindPortalEndDelegate");
static_assert(offsetof(Ability_104261_BindPortalEndDelegate, InPortal) == 0x000000, "Member 'Ability_104261_BindPortalEndDelegate::InPortal' has a wrong offset!");
static_assert(offsetof(Ability_104261_BindPortalEndDelegate, bBind) == 0x000008, "Member 'Ability_104261_BindPortalEndDelegate::bBind' has a wrong offset!");

// Function Hero_1042.Ability_104261.GetCurrentTimelineIndex
// 0x0004 (0x0004 - 0x0000)
struct Ability_104261_GetCurrentTimelineIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_GetCurrentTimelineIndex) == 0x000004, "Wrong alignment on Ability_104261_GetCurrentTimelineIndex");
static_assert(sizeof(Ability_104261_GetCurrentTimelineIndex) == 0x000004, "Wrong size on Ability_104261_GetCurrentTimelineIndex");
static_assert(offsetof(Ability_104261_GetCurrentTimelineIndex, ReturnValue) == 0x000000, "Member 'Ability_104261_GetCurrentTimelineIndex::ReturnValue' has a wrong offset!");

// Function Hero_1042.Ability_104261.GetDashDeltaLength
// 0x0004 (0x0004 - 0x0000)
struct Ability_104261_GetDashDeltaLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_GetDashDeltaLength) == 0x000004, "Wrong alignment on Ability_104261_GetDashDeltaLength");
static_assert(sizeof(Ability_104261_GetDashDeltaLength) == 0x000004, "Wrong size on Ability_104261_GetDashDeltaLength");
static_assert(offsetof(Ability_104261_GetDashDeltaLength, ReturnValue) == 0x000000, "Member 'Ability_104261_GetDashDeltaLength::ReturnValue' has a wrong offset!");

// Function Hero_1042.Ability_104261.GetSilkLengthState
// 0x0008 (0x0008 - 0x0000)
struct Ability_104261_GetSilkLengthState final
{
public:
	int32                                         OutStage;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutProgress;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_GetSilkLengthState) == 0x000004, "Wrong alignment on Ability_104261_GetSilkLengthState");
static_assert(sizeof(Ability_104261_GetSilkLengthState) == 0x000008, "Wrong size on Ability_104261_GetSilkLengthState");
static_assert(offsetof(Ability_104261_GetSilkLengthState, OutStage) == 0x000000, "Member 'Ability_104261_GetSilkLengthState::OutStage' has a wrong offset!");
static_assert(offsetof(Ability_104261_GetSilkLengthState, OutProgress) == 0x000004, "Member 'Ability_104261_GetSilkLengthState::OutProgress' has a wrong offset!");

// Function Hero_1042.Ability_104261.IsInLinkableRange
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_IsInLinkableRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_IsInLinkableRange) == 0x000001, "Wrong alignment on Ability_104261_IsInLinkableRange");
static_assert(sizeof(Ability_104261_IsInLinkableRange) == 0x000001, "Wrong size on Ability_104261_IsInLinkableRange");
static_assert(offsetof(Ability_104261_IsInLinkableRange, ReturnValue) == 0x000000, "Member 'Ability_104261_IsInLinkableRange::ReturnValue' has a wrong offset!");

// Function Hero_1042.Ability_104261.IsTargetBlocked
// 0x0010 (0x0010 - 0x0000)
struct Ability_104261_IsTargetBlocked final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_104261_IsTargetBlocked) == 0x000008, "Wrong alignment on Ability_104261_IsTargetBlocked");
static_assert(sizeof(Ability_104261_IsTargetBlocked) == 0x000010, "Wrong size on Ability_104261_IsTargetBlocked");
static_assert(offsetof(Ability_104261_IsTargetBlocked, Target) == 0x000000, "Member 'Ability_104261_IsTargetBlocked::Target' has a wrong offset!");
static_assert(offsetof(Ability_104261_IsTargetBlocked, ReturnValue) == 0x000008, "Member 'Ability_104261_IsTargetBlocked::ReturnValue' has a wrong offset!");

// Function Hero_1042.Ability_104261.OnDashFinished
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_OnDashFinished final
{
public:
	EDashStopReason                               Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_OnDashFinished) == 0x000001, "Wrong alignment on Ability_104261_OnDashFinished");
static_assert(sizeof(Ability_104261_OnDashFinished) == 0x000001, "Wrong size on Ability_104261_OnDashFinished");
static_assert(offsetof(Ability_104261_OnDashFinished, Reason) == 0x000000, "Member 'Ability_104261_OnDashFinished::Reason' has a wrong offset!");

// Function Hero_1042.Ability_104261.OnGameplayActorRemoved
// 0x0008 (0x0008 - 0x0000)
struct Ability_104261_OnGameplayActorRemoved final
{
public:
	class AActor*                                 GameplayActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_OnGameplayActorRemoved) == 0x000008, "Wrong alignment on Ability_104261_OnGameplayActorRemoved");
static_assert(sizeof(Ability_104261_OnGameplayActorRemoved) == 0x000008, "Wrong size on Ability_104261_OnGameplayActorRemoved");
static_assert(offsetof(Ability_104261_OnGameplayActorRemoved, GameplayActor) == 0x000000, "Member 'Ability_104261_OnGameplayActorRemoved::GameplayActor' has a wrong offset!");

// Function Hero_1042.Ability_104261.OnLinkStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_OnLinkStateChanged final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_OnLinkStateChanged) == 0x000001, "Wrong alignment on Ability_104261_OnLinkStateChanged");
static_assert(sizeof(Ability_104261_OnLinkStateChanged) == 0x000001, "Wrong size on Ability_104261_OnLinkStateChanged");
static_assert(offsetof(Ability_104261_OnLinkStateChanged, bNewState) == 0x000000, "Member 'Ability_104261_OnLinkStateChanged::bNewState' has a wrong offset!");

// Function Hero_1042.Ability_104261.OnMovementPreUpdate
// 0x0004 (0x0004 - 0x0000)
struct Ability_104261_OnMovementPreUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_OnMovementPreUpdate) == 0x000004, "Wrong alignment on Ability_104261_OnMovementPreUpdate");
static_assert(sizeof(Ability_104261_OnMovementPreUpdate) == 0x000004, "Wrong size on Ability_104261_OnMovementPreUpdate");
static_assert(offsetof(Ability_104261_OnMovementPreUpdate, DeltaSeconds) == 0x000000, "Member 'Ability_104261_OnMovementPreUpdate::DeltaSeconds' has a wrong offset!");

// Function Hero_1042.Ability_104261.OnPortalSegmentsEnd
// 0x0008 (0x0008 - 0x0000)
struct Ability_104261_OnPortalSegmentsEnd final
{
public:
	class AActor*                                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_OnPortalSegmentsEnd) == 0x000008, "Wrong alignment on Ability_104261_OnPortalSegmentsEnd");
static_assert(sizeof(Ability_104261_OnPortalSegmentsEnd) == 0x000008, "Wrong size on Ability_104261_OnPortalSegmentsEnd");
static_assert(offsetof(Ability_104261_OnPortalSegmentsEnd, Value) == 0x000000, "Member 'Ability_104261_OnPortalSegmentsEnd::Value' has a wrong offset!");

// Function Hero_1042.Ability_104261.Server_StartDash
// 0x0070 (0x0070 - 0x0000)
struct Ability_104261_Server_StartDash final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashDuration;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        InSegment;                                         // 0x0020(0x0050)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_Server_StartDash) == 0x000008, "Wrong alignment on Ability_104261_Server_StartDash");
static_assert(sizeof(Ability_104261_Server_StartDash) == 0x000070, "Wrong size on Ability_104261_Server_StartDash");
static_assert(offsetof(Ability_104261_Server_StartDash, TargetPosition) == 0x000000, "Member 'Ability_104261_Server_StartDash::TargetPosition' has a wrong offset!");
static_assert(offsetof(Ability_104261_Server_StartDash, MaxSpeed) == 0x000018, "Member 'Ability_104261_Server_StartDash::MaxSpeed' has a wrong offset!");
static_assert(offsetof(Ability_104261_Server_StartDash, DashDuration) == 0x00001C, "Member 'Ability_104261_Server_StartDash::DashDuration' has a wrong offset!");
static_assert(offsetof(Ability_104261_Server_StartDash, InSegment) == 0x000020, "Member 'Ability_104261_Server_StartDash::InSegment' has a wrong offset!");

// Function Hero_1042.Ability_104261.SetCobweb
// 0x0008 (0x0008 - 0x0000)
struct Ability_104261_SetCobweb final
{
public:
	class AActor*                                 InCobWeb;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_SetCobweb) == 0x000008, "Wrong alignment on Ability_104261_SetCobweb");
static_assert(sizeof(Ability_104261_SetCobweb) == 0x000008, "Wrong size on Ability_104261_SetCobweb");
static_assert(offsetof(Ability_104261_SetCobweb, InCobWeb) == 0x000000, "Member 'Ability_104261_SetCobweb::InCobWeb' has a wrong offset!");

// Function Hero_1042.Ability_104261.SetLinkState
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_SetLinkState final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_SetLinkState) == 0x000001, "Wrong alignment on Ability_104261_SetLinkState");
static_assert(sizeof(Ability_104261_SetLinkState) == 0x000001, "Wrong size on Ability_104261_SetLinkState");
static_assert(offsetof(Ability_104261_SetLinkState, bNewState) == 0x000000, "Member 'Ability_104261_SetLinkState::bNewState' has a wrong offset!");

// Function Hero_1042.Ability_104261.SetPortalSegments
// 0x0050 (0x0050 - 0x0000)
struct Ability_104261_SetPortalSegments final
{
public:
	struct FPortalSegments                        InSegments;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_SetPortalSegments) == 0x000008, "Wrong alignment on Ability_104261_SetPortalSegments");
static_assert(sizeof(Ability_104261_SetPortalSegments) == 0x000050, "Wrong size on Ability_104261_SetPortalSegments");
static_assert(offsetof(Ability_104261_SetPortalSegments, InSegments) == 0x000000, "Member 'Ability_104261_SetPortalSegments::InSegments' has a wrong offset!");

// Function Hero_1042.Ability_104261.StartDash
// 0x0070 (0x0070 - 0x0000)
struct Ability_104261_StartDash final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashDuration;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        InSegment;                                         // 0x0020(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_StartDash) == 0x000008, "Wrong alignment on Ability_104261_StartDash");
static_assert(sizeof(Ability_104261_StartDash) == 0x000070, "Wrong size on Ability_104261_StartDash");
static_assert(offsetof(Ability_104261_StartDash, TargetPosition) == 0x000000, "Member 'Ability_104261_StartDash::TargetPosition' has a wrong offset!");
static_assert(offsetof(Ability_104261_StartDash, MaxSpeed) == 0x000018, "Member 'Ability_104261_StartDash::MaxSpeed' has a wrong offset!");
static_assert(offsetof(Ability_104261_StartDash, DashDuration) == 0x00001C, "Member 'Ability_104261_StartDash::DashDuration' has a wrong offset!");
static_assert(offsetof(Ability_104261_StartDash, InSegment) == 0x000020, "Member 'Ability_104261_StartDash::InSegment' has a wrong offset!");

// Function Hero_1042.Ability_104261.TraceForCobweb
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_TraceForCobweb final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_TraceForCobweb) == 0x000001, "Wrong alignment on Ability_104261_TraceForCobweb");
static_assert(sizeof(Ability_104261_TraceForCobweb) == 0x000001, "Wrong size on Ability_104261_TraceForCobweb");
static_assert(offsetof(Ability_104261_TraceForCobweb, ReturnValue) == 0x000000, "Member 'Ability_104261_TraceForCobweb::ReturnValue' has a wrong offset!");

// Function Hero_1042.Ability_104261.UpdateFallingFrictionAndDeceleration
// 0x0001 (0x0001 - 0x0000)
struct Ability_104261_UpdateFallingFrictionAndDeceleration final
{
public:
	bool                                          bHasSpeedDown;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104261_UpdateFallingFrictionAndDeceleration) == 0x000001, "Wrong alignment on Ability_104261_UpdateFallingFrictionAndDeceleration");
static_assert(sizeof(Ability_104261_UpdateFallingFrictionAndDeceleration) == 0x000001, "Wrong size on Ability_104261_UpdateFallingFrictionAndDeceleration");
static_assert(offsetof(Ability_104261_UpdateFallingFrictionAndDeceleration, bHasSpeedDown) == 0x000000, "Member 'Ability_104261_UpdateFallingFrictionAndDeceleration::bHasSpeedDown' has a wrong offset!");

// Function Hero_1042.Cue_Ability_Loop_10426101.GetOwnerAbility
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_10426101_GetOwnerAbility final
{
public:
	class UMarvelGameplayAbility*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10426101_GetOwnerAbility) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10426101_GetOwnerAbility");
static_assert(sizeof(Cue_Ability_Loop_10426101_GetOwnerAbility) == 0x000008, "Wrong size on Cue_Ability_Loop_10426101_GetOwnerAbility");
static_assert(offsetof(Cue_Ability_Loop_10426101_GetOwnerAbility, ReturnValue) == 0x000000, "Member 'Cue_Ability_Loop_10426101_GetOwnerAbility::ReturnValue' has a wrong offset!");

// Function Hero_1042.Cue_AbilityLoop_10427101.SetDisappearFXState
// 0x0001 (0x0001 - 0x0000)
struct Cue_AbilityLoop_10427101_SetDisappearFXState final
{
public:
	bool                                          NewStat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_10427101_SetDisappearFXState) == 0x000001, "Wrong alignment on Cue_AbilityLoop_10427101_SetDisappearFXState");
static_assert(sizeof(Cue_AbilityLoop_10427101_SetDisappearFXState) == 0x000001, "Wrong size on Cue_AbilityLoop_10427101_SetDisappearFXState");
static_assert(offsetof(Cue_AbilityLoop_10427101_SetDisappearFXState, NewStat) == 0x000000, "Member 'Cue_AbilityLoop_10427101_SetDisappearFXState::NewStat' has a wrong offset!");

// Function Hero_1042.Cue_AbilityLoop_10427101.SetIsFullyArmed
// 0x0001 (0x0001 - 0x0000)
struct Cue_AbilityLoop_10427101_SetIsFullyArmed final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_10427101_SetIsFullyArmed) == 0x000001, "Wrong alignment on Cue_AbilityLoop_10427101_SetIsFullyArmed");
static_assert(sizeof(Cue_AbilityLoop_10427101_SetIsFullyArmed) == 0x000001, "Wrong size on Cue_AbilityLoop_10427101_SetIsFullyArmed");
static_assert(offsetof(Cue_AbilityLoop_10427101_SetIsFullyArmed, NewState) == 0x000000, "Member 'Cue_AbilityLoop_10427101_SetIsFullyArmed::NewState' has a wrong offset!");

// Function Hero_1042.Widget_10427101.UpdateRunSpeedLine
// 0x0001 (0x0001 - 0x0000)
struct Widget_10427101_UpdateRunSpeedLine final
{
public:
	bool                                          bIsRunState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Widget_10427101_UpdateRunSpeedLine) == 0x000001, "Wrong alignment on Widget_10427101_UpdateRunSpeedLine");
static_assert(sizeof(Widget_10427101_UpdateRunSpeedLine) == 0x000001, "Wrong size on Widget_10427101_UpdateRunSpeedLine");
static_assert(offsetof(Widget_10427101_UpdateRunSpeedLine, bIsRunState) == 0x000000, "Member 'Widget_10427101_UpdateRunSpeedLine::bIsRunState' has a wrong offset!");

// Function Hero_1042.EpicMomentAction_1042.OnActorAbilityCancel
// 0x0028 (0x0028 - 0x0000)
struct EpicMomentAction_1042_OnActorAbilityCancel final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1042_OnActorAbilityCancel) == 0x000008, "Wrong alignment on EpicMomentAction_1042_OnActorAbilityCancel");
static_assert(sizeof(EpicMomentAction_1042_OnActorAbilityCancel) == 0x000028, "Wrong size on EpicMomentAction_1042_OnActorAbilityCancel");
static_assert(offsetof(EpicMomentAction_1042_OnActorAbilityCancel, Source) == 0x000000, "Member 'EpicMomentAction_1042_OnActorAbilityCancel::Source' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorAbilityCancel, AbilityID) == 0x000008, "Member 'EpicMomentAction_1042_OnActorAbilityCancel::AbilityID' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorAbilityCancel, SessionID) == 0x000010, "Member 'EpicMomentAction_1042_OnActorAbilityCancel::SessionID' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorAbilityCancel, SourceAbility) == 0x000020, "Member 'EpicMomentAction_1042_OnActorAbilityCancel::SourceAbility' has a wrong offset!");

// Function Hero_1042.EpicMomentAction_1042.OnActorTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct EpicMomentAction_1042_OnActorTakeDamage final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicMomentAction_1042_OnActorTakeDamage) == 0x000008, "Wrong alignment on EpicMomentAction_1042_OnActorTakeDamage");
static_assert(sizeof(EpicMomentAction_1042_OnActorTakeDamage) == 0x000030, "Wrong size on EpicMomentAction_1042_OnActorTakeDamage");
static_assert(offsetof(EpicMomentAction_1042_OnActorTakeDamage, Instigator) == 0x000000, "Member 'EpicMomentAction_1042_OnActorTakeDamage::Instigator' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorTakeDamage, Target) == 0x000008, "Member 'EpicMomentAction_1042_OnActorTakeDamage::Target' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'EpicMomentAction_1042_OnActorTakeDamage::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnActorTakeDamage, ExtraData) == 0x000028, "Member 'EpicMomentAction_1042_OnActorTakeDamage::ExtraData' has a wrong offset!");

// Function Hero_1042.EpicMomentAction_1042.OnProjectileBegin
// 0x0060 (0x0060 - 0x0000)
struct EpicMomentAction_1042_OnProjectileBegin final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Projectile;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0018(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1042_OnProjectileBegin) == 0x000008, "Wrong alignment on EpicMomentAction_1042_OnProjectileBegin");
static_assert(sizeof(EpicMomentAction_1042_OnProjectileBegin) == 0x000060, "Wrong size on EpicMomentAction_1042_OnProjectileBegin");
static_assert(offsetof(EpicMomentAction_1042_OnProjectileBegin, SourceActor) == 0x000000, "Member 'EpicMomentAction_1042_OnProjectileBegin::SourceActor' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnProjectileBegin, SourceAbility) == 0x000008, "Member 'EpicMomentAction_1042_OnProjectileBegin::SourceAbility' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnProjectileBegin, Projectile) == 0x000010, "Member 'EpicMomentAction_1042_OnProjectileBegin::Projectile' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1042_OnProjectileBegin, GenerateInfo) == 0x000018, "Member 'EpicMomentAction_1042_OnProjectileBegin::GenerateInfo' has a wrong offset!");

// Function Hero_1042.EpicMomentAction_1042.OnProjectileHit
// 0x0170 (0x0170 - 0x0000)
struct EpicMomentAction_1042_OnProjectileHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1042_OnProjectileHit) == 0x000008, "Wrong alignment on EpicMomentAction_1042_OnProjectileHit");
static_assert(sizeof(EpicMomentAction_1042_OnProjectileHit) == 0x000170, "Wrong size on EpicMomentAction_1042_OnProjectileHit");
static_assert(offsetof(EpicMomentAction_1042_OnProjectileHit, Hit) == 0x000000, "Member 'EpicMomentAction_1042_OnProjectileHit::Hit' has a wrong offset!");

// Function Hero_1042.MarvelWebEntity.FindNearestNodeLocation
// 0x0028 (0x0028 - 0x0000)
struct MarvelWebEntity_FindNearestNodeLocation final
{
public:
	class AMarvelBaseCharacter*                   OtherChar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NodeLoc;                                           // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWebEntity_FindNearestNodeLocation) == 0x000008, "Wrong alignment on MarvelWebEntity_FindNearestNodeLocation");
static_assert(sizeof(MarvelWebEntity_FindNearestNodeLocation) == 0x000028, "Wrong size on MarvelWebEntity_FindNearestNodeLocation");
static_assert(offsetof(MarvelWebEntity_FindNearestNodeLocation, OtherChar) == 0x000000, "Member 'MarvelWebEntity_FindNearestNodeLocation::OtherChar' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_FindNearestNodeLocation, NodeLoc) == 0x000008, "Member 'MarvelWebEntity_FindNearestNodeLocation::NodeLoc' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_FindNearestNodeLocation, ReturnValue) == 0x000020, "Member 'MarvelWebEntity_FindNearestNodeLocation::ReturnValue' has a wrong offset!");

// Function Hero_1042.MarvelWebEntity.IsOverlapping
// 0x0020 (0x0020 - 0x0000)
struct MarvelWebEntity_IsOverlapping final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWebEntity_IsOverlapping) == 0x000008, "Wrong alignment on MarvelWebEntity_IsOverlapping");
static_assert(sizeof(MarvelWebEntity_IsOverlapping) == 0x000020, "Wrong size on MarvelWebEntity_IsOverlapping");
static_assert(offsetof(MarvelWebEntity_IsOverlapping, Point) == 0x000000, "Member 'MarvelWebEntity_IsOverlapping::Point' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_IsOverlapping, Radius) == 0x000018, "Member 'MarvelWebEntity_IsOverlapping::Radius' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_IsOverlapping, ReturnValue) == 0x00001C, "Member 'MarvelWebEntity_IsOverlapping::ReturnValue' has a wrong offset!");

// Function Hero_1042.MarvelWebEntity.IsReachingCharacter
// 0x0018 (0x0018 - 0x0000)
struct MarvelWebEntity_IsReachingCharacter final
{
public:
	class AMarvelBaseCharacter*                   OtherChar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectDist;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectAngle;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelWebEntity_IsReachingCharacter) == 0x000008, "Wrong alignment on MarvelWebEntity_IsReachingCharacter");
static_assert(sizeof(MarvelWebEntity_IsReachingCharacter) == 0x000018, "Wrong size on MarvelWebEntity_IsReachingCharacter");
static_assert(offsetof(MarvelWebEntity_IsReachingCharacter, OtherChar) == 0x000000, "Member 'MarvelWebEntity_IsReachingCharacter::OtherChar' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_IsReachingCharacter, DetectDist) == 0x000008, "Member 'MarvelWebEntity_IsReachingCharacter::DetectDist' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_IsReachingCharacter, DetectAngle) == 0x00000C, "Member 'MarvelWebEntity_IsReachingCharacter::DetectAngle' has a wrong offset!");
static_assert(offsetof(MarvelWebEntity_IsReachingCharacter, ReturnValue) == 0x000010, "Member 'MarvelWebEntity_IsReachingCharacter::ReturnValue' has a wrong offset!");

// Function Hero_1042.MarvelSpiderEntity.GetTargetChar
// 0x0008 (0x0008 - 0x0000)
struct MarvelSpiderEntity_GetTargetChar final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSpiderEntity_GetTargetChar) == 0x000008, "Wrong alignment on MarvelSpiderEntity_GetTargetChar");
static_assert(sizeof(MarvelSpiderEntity_GetTargetChar) == 0x000008, "Wrong size on MarvelSpiderEntity_GetTargetChar");
static_assert(offsetof(MarvelSpiderEntity_GetTargetChar, ReturnValue) == 0x000000, "Member 'MarvelSpiderEntity_GetTargetChar::ReturnValue' has a wrong offset!");

// Function Hero_1042.MarvelSpiderAndWebManager.GetWebEntity
// 0x0010 (0x0010 - 0x0000)
struct MarvelSpiderAndWebManager_GetWebEntity final
{
public:
	class AMarvelGenMeshActor*                    InWebActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelWebEntity*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSpiderAndWebManager_GetWebEntity) == 0x000008, "Wrong alignment on MarvelSpiderAndWebManager_GetWebEntity");
static_assert(sizeof(MarvelSpiderAndWebManager_GetWebEntity) == 0x000010, "Wrong size on MarvelSpiderAndWebManager_GetWebEntity");
static_assert(offsetof(MarvelSpiderAndWebManager_GetWebEntity, InWebActor) == 0x000000, "Member 'MarvelSpiderAndWebManager_GetWebEntity::InWebActor' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_GetWebEntity, ReturnValue) == 0x000008, "Member 'MarvelSpiderAndWebManager_GetWebEntity::ReturnValue' has a wrong offset!");

// Function Hero_1042.MarvelSpiderAndWebManager.MulticastSetSpiderTarget
// 0x00C0 (0x00C0 - 0x0000)
struct MarvelSpiderAndWebManager_MulticastSetSpiderTarget final
{
public:
	class AActor*                                 SpiderOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachedWebOwner;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelWebNode                         InNode;                                            // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   InChar;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NextWebOwner;                                      // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelWebNode                         InNextWebNode;                                     // 0x0070(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget) == 0x000008, "Wrong alignment on MarvelSpiderAndWebManager_MulticastSetSpiderTarget");
static_assert(sizeof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget) == 0x0000C0, "Wrong size on MarvelSpiderAndWebManager_MulticastSetSpiderTarget");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, SpiderOwner) == 0x000000, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::SpiderOwner' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, AttachedWebOwner) == 0x000008, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::AttachedWebOwner' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, InNode) == 0x000010, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::InNode' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, InChar) == 0x000060, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::InChar' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, NextWebOwner) == 0x000068, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::NextWebOwner' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_MulticastSetSpiderTarget, InNextWebNode) == 0x000070, "Member 'MarvelSpiderAndWebManager_MulticastSetSpiderTarget::InNextWebNode' has a wrong offset!");

// Function Hero_1042.MarvelSpiderAndWebManager.OnSpawnCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarvelSpiderAndWebManager_OnSpawnCharacter final
{
public:
	class AMarvelBaseCharacter*                   InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  SpawnMethod;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarvelSpiderAndWebManager_OnSpawnCharacter) == 0x000008, "Wrong alignment on MarvelSpiderAndWebManager_OnSpawnCharacter");
static_assert(sizeof(MarvelSpiderAndWebManager_OnSpawnCharacter) == 0x000010, "Wrong size on MarvelSpiderAndWebManager_OnSpawnCharacter");
static_assert(offsetof(MarvelSpiderAndWebManager_OnSpawnCharacter, InCharacter) == 0x000000, "Member 'MarvelSpiderAndWebManager_OnSpawnCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(MarvelSpiderAndWebManager_OnSpawnCharacter, SpawnMethod) == 0x000008, "Member 'MarvelSpiderAndWebManager_OnSpawnCharacter::SpawnMethod' has a wrong offset!");

// Function Hero_1042.MarvelSpiderAndWebManager.OnViewTargetChange
// 0x0008 (0x0008 - 0x0000)
struct MarvelSpiderAndWebManager_OnViewTargetChange final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelSpiderAndWebManager_OnViewTargetChange) == 0x000008, "Wrong alignment on MarvelSpiderAndWebManager_OnViewTargetChange");
static_assert(sizeof(MarvelSpiderAndWebManager_OnViewTargetChange) == 0x000008, "Wrong size on MarvelSpiderAndWebManager_OnViewTargetChange");
static_assert(offsetof(MarvelSpiderAndWebManager_OnViewTargetChange, ViewTarget) == 0x000000, "Member 'MarvelSpiderAndWebManager_OnViewTargetChange::ViewTarget' has a wrong offset!");

// Function Hero_1042.PeniParkerAnimInstance.RelevantUltimateArmedNode
// 0x0020 (0x0020 - 0x0000)
struct PeniParkerAnimInstance_RelevantUltimateArmedNode final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerAnimInstance_RelevantUltimateArmedNode) == 0x000008, "Wrong alignment on PeniParkerAnimInstance_RelevantUltimateArmedNode");
static_assert(sizeof(PeniParkerAnimInstance_RelevantUltimateArmedNode) == 0x000020, "Wrong size on PeniParkerAnimInstance_RelevantUltimateArmedNode");
static_assert(offsetof(PeniParkerAnimInstance_RelevantUltimateArmedNode, Context) == 0x000000, "Member 'PeniParkerAnimInstance_RelevantUltimateArmedNode::Context' has a wrong offset!");
static_assert(offsetof(PeniParkerAnimInstance_RelevantUltimateArmedNode, Node) == 0x000010, "Member 'PeniParkerAnimInstance_RelevantUltimateArmedNode::Node' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.BeginAimState
// 0x0008 (0x0008 - 0x0000)
struct PeniParkerCharacter_BeginAimState final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityCombo;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_BeginAimState) == 0x000004, "Wrong alignment on PeniParkerCharacter_BeginAimState");
static_assert(sizeof(PeniParkerCharacter_BeginAimState) == 0x000008, "Wrong size on PeniParkerCharacter_BeginAimState");
static_assert(offsetof(PeniParkerCharacter_BeginAimState, AbilityID) == 0x000000, "Member 'PeniParkerCharacter_BeginAimState::AbilityID' has a wrong offset!");
static_assert(offsetof(PeniParkerCharacter_BeginAimState, AbilityCombo) == 0x000004, "Member 'PeniParkerCharacter_BeginAimState::AbilityCombo' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.GetSilkDashing
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerCharacter_GetSilkDashing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_GetSilkDashing) == 0x000001, "Wrong alignment on PeniParkerCharacter_GetSilkDashing");
static_assert(sizeof(PeniParkerCharacter_GetSilkDashing) == 0x000001, "Wrong size on PeniParkerCharacter_GetSilkDashing");
static_assert(offsetof(PeniParkerCharacter_GetSilkDashing, ReturnValue) == 0x000000, "Member 'PeniParkerCharacter_GetSilkDashing::ReturnValue' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.IsSpawnWebBySeparateFrame
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerCharacter_IsSpawnWebBySeparateFrame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_IsSpawnWebBySeparateFrame) == 0x000001, "Wrong alignment on PeniParkerCharacter_IsSpawnWebBySeparateFrame");
static_assert(sizeof(PeniParkerCharacter_IsSpawnWebBySeparateFrame) == 0x000001, "Wrong size on PeniParkerCharacter_IsSpawnWebBySeparateFrame");
static_assert(offsetof(PeniParkerCharacter_IsSpawnWebBySeparateFrame, ReturnValue) == 0x000000, "Member 'PeniParkerCharacter_IsSpawnWebBySeparateFrame::ReturnValue' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.OnAbilityActivate
// 0x0004 (0x0004 - 0x0000)
struct PeniParkerCharacter_OnAbilityActivate final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_OnAbilityActivate) == 0x000004, "Wrong alignment on PeniParkerCharacter_OnAbilityActivate");
static_assert(sizeof(PeniParkerCharacter_OnAbilityActivate) == 0x000004, "Wrong size on PeniParkerCharacter_OnAbilityActivate");
static_assert(offsetof(PeniParkerCharacter_OnAbilityActivate, AbilityID) == 0x000000, "Member 'PeniParkerCharacter_OnAbilityActivate::AbilityID' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.OnAbilityInitialize
// 0x0004 (0x0004 - 0x0000)
struct PeniParkerCharacter_OnAbilityInitialize final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_OnAbilityInitialize) == 0x000004, "Wrong alignment on PeniParkerCharacter_OnAbilityInitialize");
static_assert(sizeof(PeniParkerCharacter_OnAbilityInitialize) == 0x000004, "Wrong size on PeniParkerCharacter_OnAbilityInitialize");
static_assert(offsetof(PeniParkerCharacter_OnAbilityInitialize, AbilityID) == 0x000000, "Member 'PeniParkerCharacter_OnAbilityInitialize::AbilityID' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.OnDashStart
// 0x0018 (0x0018 - 0x0000)
struct PeniParkerCharacter_OnDashStart final
{
public:
	struct FVector                                InDirection;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_OnDashStart) == 0x000008, "Wrong alignment on PeniParkerCharacter_OnDashStart");
static_assert(sizeof(PeniParkerCharacter_OnDashStart) == 0x000018, "Wrong size on PeniParkerCharacter_OnDashStart");
static_assert(offsetof(PeniParkerCharacter_OnDashStart, InDirection) == 0x000000, "Member 'PeniParkerCharacter_OnDashStart::InDirection' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.SetAimState
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerCharacter_SetAimState final
{
public:
	bool                                          bInAimState_0;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_SetAimState) == 0x000001, "Wrong alignment on PeniParkerCharacter_SetAimState");
static_assert(sizeof(PeniParkerCharacter_SetAimState) == 0x000001, "Wrong size on PeniParkerCharacter_SetAimState");
static_assert(offsetof(PeniParkerCharacter_SetAimState, bInAimState_0) == 0x000000, "Member 'PeniParkerCharacter_SetAimState::bInAimState_0' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.SetAnimSpecialState
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerCharacter_SetAnimSpecialState final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_SetAnimSpecialState) == 0x000001, "Wrong alignment on PeniParkerCharacter_SetAnimSpecialState");
static_assert(sizeof(PeniParkerCharacter_SetAnimSpecialState) == 0x000001, "Wrong size on PeniParkerCharacter_SetAnimSpecialState");
static_assert(offsetof(PeniParkerCharacter_SetAnimSpecialState, NewState) == 0x000000, "Member 'PeniParkerCharacter_SetAnimSpecialState::NewState' has a wrong offset!");

// Function Hero_1042.PeniParkerCharacter.SetSpecialState
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerCharacter_SetSpecialState final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerCharacter_SetSpecialState) == 0x000001, "Wrong alignment on PeniParkerCharacter_SetSpecialState");
static_assert(sizeof(PeniParkerCharacter_SetSpecialState) == 0x000001, "Wrong size on PeniParkerCharacter_SetSpecialState");
static_assert(offsetof(PeniParkerCharacter_SetSpecialState, NewState) == 0x000000, "Member 'PeniParkerCharacter_SetSpecialState::NewState' has a wrong offset!");

// Function Hero_1042.PeniParkerChildActor.HideForearmBone
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerChildActor_HideForearmBone final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerChildActor_HideForearmBone) == 0x000001, "Wrong alignment on PeniParkerChildActor_HideForearmBone");
static_assert(sizeof(PeniParkerChildActor_HideForearmBone) == 0x000001, "Wrong size on PeniParkerChildActor_HideForearmBone");
static_assert(offsetof(PeniParkerChildActor_HideForearmBone, NewState) == 0x000000, "Member 'PeniParkerChildActor_HideForearmBone::NewState' has a wrong offset!");

// Function Hero_1042.PeniParkerChildActor.HideSpiderLegMesh
// 0x0001 (0x0001 - 0x0000)
struct PeniParkerChildActor_HideSpiderLegMesh final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerChildActor_HideSpiderLegMesh) == 0x000001, "Wrong alignment on PeniParkerChildActor_HideSpiderLegMesh");
static_assert(sizeof(PeniParkerChildActor_HideSpiderLegMesh) == 0x000001, "Wrong size on PeniParkerChildActor_HideSpiderLegMesh");
static_assert(offsetof(PeniParkerChildActor_HideSpiderLegMesh, NewState) == 0x000000, "Member 'PeniParkerChildActor_HideSpiderLegMesh::NewState' has a wrong offset!");

// Function Hero_1042.PeniParkerChildActor.PlaySpiderLegAnimation
// 0x0008 (0x0008 - 0x0000)
struct PeniParkerChildActor_PlaySpiderLegAnimation final
{
public:
	class UAnimationAsset*                        Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PeniParkerChildActor_PlaySpiderLegAnimation) == 0x000008, "Wrong alignment on PeniParkerChildActor_PlaySpiderLegAnimation");
static_assert(sizeof(PeniParkerChildActor_PlaySpiderLegAnimation) == 0x000008, "Wrong size on PeniParkerChildActor_PlaySpiderLegAnimation");
static_assert(offsetof(PeniParkerChildActor_PlaySpiderLegAnimation, Animation) == 0x000000, "Member 'PeniParkerChildActor_PlaySpiderLegAnimation::Animation' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.BeginAimState
// 0x0008 (0x0008 - 0x0000)
struct FormalPeniParkerChildActor_BeginAimState final
{
public:
	int32                                         ActivateAbilityID;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityCombo;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_BeginAimState) == 0x000004, "Wrong alignment on FormalPeniParkerChildActor_BeginAimState");
static_assert(sizeof(FormalPeniParkerChildActor_BeginAimState) == 0x000008, "Wrong size on FormalPeniParkerChildActor_BeginAimState");
static_assert(offsetof(FormalPeniParkerChildActor_BeginAimState, ActivateAbilityID) == 0x000000, "Member 'FormalPeniParkerChildActor_BeginAimState::ActivateAbilityID' has a wrong offset!");
static_assert(offsetof(FormalPeniParkerChildActor_BeginAimState, AbilityCombo) == 0x000004, "Member 'FormalPeniParkerChildActor_BeginAimState::AbilityCombo' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.FormalHideDownSpiderLegMesh
// 0x0001 (0x0001 - 0x0000)
struct FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh) == 0x000001, "Wrong alignment on FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh");
static_assert(sizeof(FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh) == 0x000001, "Wrong size on FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh");
static_assert(offsetof(FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh, NewState) == 0x000000, "Member 'FormalPeniParkerChildActor_FormalHideDownSpiderLegMesh::NewState' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.FormalHideUpperSpiderLegMesh
// 0x0001 (0x0001 - 0x0000)
struct FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh) == 0x000001, "Wrong alignment on FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh");
static_assert(sizeof(FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh) == 0x000001, "Wrong size on FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh");
static_assert(offsetof(FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh, NewState) == 0x000000, "Member 'FormalPeniParkerChildActor_FormalHideUpperSpiderLegMesh::NewState' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.OnArmedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FormalPeniParkerChildActor_OnArmedStateChanged final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_OnArmedStateChanged) == 0x000001, "Wrong alignment on FormalPeniParkerChildActor_OnArmedStateChanged");
static_assert(sizeof(FormalPeniParkerChildActor_OnArmedStateChanged) == 0x000001, "Wrong size on FormalPeniParkerChildActor_OnArmedStateChanged");
static_assert(offsetof(FormalPeniParkerChildActor_OnArmedStateChanged, NewState) == 0x000000, "Member 'FormalPeniParkerChildActor_OnArmedStateChanged::NewState' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.OnBlockAimTagsUpdate
// 0x0010 (0x0010 - 0x0000)
struct FormalPeniParkerChildActor_OnBlockAimTagsUpdate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FormalPeniParkerChildActor_OnBlockAimTagsUpdate) == 0x000004, "Wrong alignment on FormalPeniParkerChildActor_OnBlockAimTagsUpdate");
static_assert(sizeof(FormalPeniParkerChildActor_OnBlockAimTagsUpdate) == 0x000010, "Wrong size on FormalPeniParkerChildActor_OnBlockAimTagsUpdate");
static_assert(offsetof(FormalPeniParkerChildActor_OnBlockAimTagsUpdate, Tag) == 0x000000, "Member 'FormalPeniParkerChildActor_OnBlockAimTagsUpdate::Tag' has a wrong offset!");
static_assert(offsetof(FormalPeniParkerChildActor_OnBlockAimTagsUpdate, TagExists) == 0x00000C, "Member 'FormalPeniParkerChildActor_OnBlockAimTagsUpdate::TagExists' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.OnMeshVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FormalPeniParkerChildActor_OnMeshVisibilityChanged final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_OnMeshVisibilityChanged) == 0x000001, "Wrong alignment on FormalPeniParkerChildActor_OnMeshVisibilityChanged");
static_assert(sizeof(FormalPeniParkerChildActor_OnMeshVisibilityChanged) == 0x000001, "Wrong size on FormalPeniParkerChildActor_OnMeshVisibilityChanged");
static_assert(offsetof(FormalPeniParkerChildActor_OnMeshVisibilityChanged, bNewHidden) == 0x000000, "Member 'FormalPeniParkerChildActor_OnMeshVisibilityChanged::bNewHidden' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.PlayBeginAimAnimation
// 0x0004 (0x0004 - 0x0000)
struct FormalPeniParkerChildActor_PlayBeginAimAnimation final
{
public:
	int32                                         AnimationCombo;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FormalPeniParkerChildActor_PlayBeginAimAnimation) == 0x000004, "Wrong alignment on FormalPeniParkerChildActor_PlayBeginAimAnimation");
static_assert(sizeof(FormalPeniParkerChildActor_PlayBeginAimAnimation) == 0x000004, "Wrong size on FormalPeniParkerChildActor_PlayBeginAimAnimation");
static_assert(offsetof(FormalPeniParkerChildActor_PlayBeginAimAnimation, AnimationCombo) == 0x000000, "Member 'FormalPeniParkerChildActor_PlayBeginAimAnimation::AnimationCombo' has a wrong offset!");

// Function Hero_1042.FormalPeniParkerChildActor.PlayShoulderGunMeshAnimation
// 0x0010 (0x0010 - 0x0000)
struct FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation final
{
public:
	class UAnimationAsset*                        Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRight;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation) == 0x000008, "Wrong alignment on FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation");
static_assert(sizeof(FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation) == 0x000010, "Wrong size on FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation");
static_assert(offsetof(FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation, Animation) == 0x000000, "Member 'FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation::Animation' has a wrong offset!");
static_assert(offsetof(FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation, bIsRight) == 0x000008, "Member 'FormalPeniParkerChildActor_PlayShoulderGunMeshAnimation::bIsRight' has a wrong offset!");

// Function Hero_1042.SpiderLegAnimInstance_104271.OnArmedStateChange
// 0x0001 (0x0001 - 0x0000)
struct SpiderLegAnimInstance_104271_OnArmedStateChange final
{
public:
	bool                                          bIsArmed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiderLegAnimInstance_104271_OnArmedStateChange) == 0x000001, "Wrong alignment on SpiderLegAnimInstance_104271_OnArmedStateChange");
static_assert(sizeof(SpiderLegAnimInstance_104271_OnArmedStateChange) == 0x000001, "Wrong size on SpiderLegAnimInstance_104271_OnArmedStateChange");
static_assert(offsetof(SpiderLegAnimInstance_104271_OnArmedStateChange, bIsArmed) == 0x000000, "Member 'SpiderLegAnimInstance_104271_OnArmedStateChange::bIsArmed' has a wrong offset!");

// Function Hero_1042.SpiderLegAnimInstance_104271.OnOwnerActivateAbility
// 0x0004 (0x0004 - 0x0000)
struct SpiderLegAnimInstance_104271_OnOwnerActivateAbility final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiderLegAnimInstance_104271_OnOwnerActivateAbility) == 0x000004, "Wrong alignment on SpiderLegAnimInstance_104271_OnOwnerActivateAbility");
static_assert(sizeof(SpiderLegAnimInstance_104271_OnOwnerActivateAbility) == 0x000004, "Wrong size on SpiderLegAnimInstance_104271_OnOwnerActivateAbility");
static_assert(offsetof(SpiderLegAnimInstance_104271_OnOwnerActivateAbility, AbilityID) == 0x000000, "Member 'SpiderLegAnimInstance_104271_OnOwnerActivateAbility::AbilityID' has a wrong offset!");

// Function Hero_1042.SpiderLegAnimInstance_104271.OnSweepAbilityActivate
// 0x0001 (0x0001 - 0x0000)
struct SpiderLegAnimInstance_104271_OnSweepAbilityActivate final
{
public:
	ESweepSpiderLeg_104275                        SweepSpiderLeg;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiderLegAnimInstance_104271_OnSweepAbilityActivate) == 0x000001, "Wrong alignment on SpiderLegAnimInstance_104271_OnSweepAbilityActivate");
static_assert(sizeof(SpiderLegAnimInstance_104271_OnSweepAbilityActivate) == 0x000001, "Wrong size on SpiderLegAnimInstance_104271_OnSweepAbilityActivate");
static_assert(offsetof(SpiderLegAnimInstance_104271_OnSweepAbilityActivate, SweepSpiderLeg) == 0x000000, "Member 'SpiderLegAnimInstance_104271_OnSweepAbilityActivate::SweepSpiderLeg' has a wrong offset!");

// Function Hero_1042.SpiderLegAnimInstance_104271.OnTurnInPlaceStarted
// 0x0008 (0x0008 - 0x0000)
struct SpiderLegAnimInstance_104271_OnTurnInPlaceStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiderLegAnimInstance_104271_OnTurnInPlaceStarted) == 0x000008, "Wrong alignment on SpiderLegAnimInstance_104271_OnTurnInPlaceStarted");
static_assert(sizeof(SpiderLegAnimInstance_104271_OnTurnInPlaceStarted) == 0x000008, "Wrong size on SpiderLegAnimInstance_104271_OnTurnInPlaceStarted");
static_assert(offsetof(SpiderLegAnimInstance_104271_OnTurnInPlaceStarted, Montage) == 0x000000, "Member 'SpiderLegAnimInstance_104271_OnTurnInPlaceStarted::Montage' has a wrong offset!");

}

