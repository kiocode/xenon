#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyAbility_133

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// PythonClass PyAbility_133.PyProjectile_13301
// 0x0000 (0x3050 - 0x3050)
class APyProjectile_13301 : public AMarvelAbilityTargetActor_Projectile
{
public:
	void K2_OnBeginAgentTask();
	void K2_OnEndAgentTask();
	void K2_OnProcessHit(const struct FHitResult& Hit);
	void K2_OnFlyOverMaxDistance(const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyProjectile_13301">();
	}
	static class APyProjectile_13301* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyProjectile_13301>();
	}
};
static_assert(alignof(APyProjectile_13301) == 0x000010, "Wrong alignment on APyProjectile_13301");
static_assert(sizeof(APyProjectile_13301) == 0x003050, "Wrong size on APyProjectile_13301");

// PythonClass PyAbility_133.PyConfig_133
// 0x4498 (0x4530 - 0x0098)
#pragma pack(push, 0x1)
class alignas(0x10) UPyConfig_133 : public UMarvelAbilityConfig
{
public:
	float                                         PullForceScale;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinClampVelocityToAddRopeForce;                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClampVelocityToAddRopeForce;                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedRopeLengthToCalPull;                      // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedPullRopeLength;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeLengthToStartReduceForce;                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxReduceForceScale;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceForceValueWhenNoStrech;                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleToAddVelocityForce;                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwingAngleToAddVelocityForce;                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOfVelocityForce;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOfCameraForce;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CameraForceScaleCurve;                             // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset_SpecialMove;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime_BeforeSpecialMove;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime_AfterSpecialMove;                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlightToRunTime;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo_SpecialMove;                              // 0x00E0(0x0BA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo_SpecialMoveSecond;                        // 0x0C88(0x0BA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxHeightAboveGroundToSomersault;                  // 0x1830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForbidRollWhenOnEdgeOffCliff;                      // 0x1834(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1835[0x3];                                     // 0x1835(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToEdgeOffCliff;                            // 0x1838(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183C[0x4];                                     // 0x183C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocityWhenOnEdgeOffCliff;                  // 0x1840(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1858[0x8];                                     // 0x1858(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContextForEdgeOfCliff;                        // 0x1860(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SwingPointMakeUpCurve;                             // 0x27F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPointMakeUpFactor;                            // 0x27F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27FC[0x4];                                     // 0x27FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       DashInfo;                                          // 0x2800(0x0BA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DelayTimeToDash;                                   // 0x33A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustSwingInitDirectionToCamera;                  // 0x33AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33AD[0x3];                                     // 0x33AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngleCanAdjust;                                 // 0x33B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWallTiltAngleForSingleHandSwing;                // 0x33B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityOfSpinSwing;                            // 0x33B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleForSpinSwing;                         // 0x33BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectSwingAngleForSpinSwing;                      // 0x33C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdAngleToStopSwing;                         // 0x33C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocityOverMaxAngle;                        // 0x33C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LaunchVelocityIsOverride;                          // 0x33E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33E1[0x3];                                     // 0x33E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTimeToLaunch;                                 // 0x33E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScaleWhenLaunch;                            // 0x33E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScaleApplyDuration;                         // 0x33EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdSpeedToStopSwing;                         // 0x33F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedOfSwing;                                   // 0x33F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilitiesToblockWhenLowSwing;                      // 0x33F8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilitiesToCancelWhenSwing;                        // 0x3460(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          EnableDebugDrawCapsule;                            // 0x34C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C9[0x7];                                     // 0x34C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_Swinging_Down;                        // 0x34D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraInterp*                          CameraInterp_Swinging_Down_RightHand;              // 0x34D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeToPlaySwingingDownCameraInterp;           // 0x34E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E4[0x4];                                     // 0x34E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_Swinging_Up;                          // 0x34E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraInterp*                          CameraInterp_Swinging_Up_RightHand;                // 0x34F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleToPlaySwingUpCameraEffect;            // 0x34F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34FC[0x4];                                     // 0x34FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         CameraShakeClass_Swinging;                         // 0x3500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraInterp*                          CameraInterp_LowSwinging;                          // 0x3508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraInterp*                          CameraInterp_RopeBreaking;                         // 0x3510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraInterpDuration_RopeBreaking;                 // 0x3518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351C[0x4];                                     // 0x351C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_RopeBreaking_FOV;                     // 0x3520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraInterpDuration_RopeBreaking_FOV;             // 0x3528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_352C[0x4];                                     // 0x352C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleSwingConfig                     SimpleSwingParams;                                 // 0x3530(0x0FD0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStateChangedTaskParam                 ActiveUserSetting;                                 // 0x4500(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyConfig_133">();
	}
	static class UPyConfig_133* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyConfig_133>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPyConfig_133) == 0x000010, "Wrong alignment on UPyConfig_133");
static_assert(sizeof(UPyConfig_133) == 0x004530, "Wrong size on UPyConfig_133");
static_assert(offsetof(UPyConfig_133, PullForceScale) == 0x000098, "Member 'UPyConfig_133::PullForceScale' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinClampVelocityToAddRopeForce) == 0x00009C, "Member 'UPyConfig_133::MinClampVelocityToAddRopeForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MaxClampVelocityToAddRopeForce) == 0x0000A0, "Member 'UPyConfig_133::MaxClampVelocityToAddRopeForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, bUseFixedRopeLengthToCalPull) == 0x0000A4, "Member 'UPyConfig_133::bUseFixedRopeLengthToCalPull' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, FixedPullRopeLength) == 0x0000A8, "Member 'UPyConfig_133::FixedPullRopeLength' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, RopeLengthToStartReduceForce) == 0x0000AC, "Member 'UPyConfig_133::RopeLengthToStartReduceForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MaxReduceForceScale) == 0x0000B0, "Member 'UPyConfig_133::MaxReduceForceScale' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ReduceForceValueWhenNoStrech) == 0x0000B4, "Member 'UPyConfig_133::ReduceForceValueWhenNoStrech' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinSwingAngleToAddVelocityForce) == 0x0000B8, "Member 'UPyConfig_133::MinSwingAngleToAddVelocityForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MaxSwingAngleToAddVelocityForce) == 0x0000BC, "Member 'UPyConfig_133::MaxSwingAngleToAddVelocityForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ValueOfVelocityForce) == 0x0000C0, "Member 'UPyConfig_133::ValueOfVelocityForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ValueOfCameraForce) == 0x0000C4, "Member 'UPyConfig_133::ValueOfCameraForce' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraForceScaleCurve) == 0x0000C8, "Member 'UPyConfig_133::CameraForceScaleCurve' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, HeightOffset_SpecialMove) == 0x0000D0, "Member 'UPyConfig_133::HeightOffset_SpecialMove' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DelayTime_BeforeSpecialMove) == 0x0000D4, "Member 'UPyConfig_133::DelayTime_BeforeSpecialMove' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DelayTime_AfterSpecialMove) == 0x0000D8, "Member 'UPyConfig_133::DelayTime_AfterSpecialMove' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, FlightToRunTime) == 0x0000DC, "Member 'UPyConfig_133::FlightToRunTime' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DashInfo_SpecialMove) == 0x0000E0, "Member 'UPyConfig_133::DashInfo_SpecialMove' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DashInfo_SpecialMoveSecond) == 0x000C88, "Member 'UPyConfig_133::DashInfo_SpecialMoveSecond' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MaxHeightAboveGroundToSomersault) == 0x001830, "Member 'UPyConfig_133::MaxHeightAboveGroundToSomersault' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ForbidRollWhenOnEdgeOffCliff) == 0x001834, "Member 'UPyConfig_133::ForbidRollWhenOnEdgeOffCliff' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DistanceToEdgeOffCliff) == 0x001838, "Member 'UPyConfig_133::DistanceToEdgeOffCliff' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, LaunchVelocityWhenOnEdgeOffCliff) == 0x001840, "Member 'UPyConfig_133::LaunchVelocityWhenOnEdgeOffCliff' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, TraceContextForEdgeOfCliff) == 0x001860, "Member 'UPyConfig_133::TraceContextForEdgeOfCliff' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, SwingPointMakeUpCurve) == 0x0027F0, "Member 'UPyConfig_133::SwingPointMakeUpCurve' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, SwingPointMakeUpFactor) == 0x0027F8, "Member 'UPyConfig_133::SwingPointMakeUpFactor' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DashInfo) == 0x002800, "Member 'UPyConfig_133::DashInfo' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DelayTimeToDash) == 0x0033A8, "Member 'UPyConfig_133::DelayTimeToDash' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, AdjustSwingInitDirectionToCamera) == 0x0033AC, "Member 'UPyConfig_133::AdjustSwingInitDirectionToCamera' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MaxAngleCanAdjust) == 0x0033B0, "Member 'UPyConfig_133::MaxAngleCanAdjust' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinWallTiltAngleForSingleHandSwing) == 0x0033B4, "Member 'UPyConfig_133::MinWallTiltAngleForSingleHandSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ProbabilityOfSpinSwing) == 0x0033B8, "Member 'UPyConfig_133::ProbabilityOfSpinSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinSwingAngleForSpinSwing) == 0x0033BC, "Member 'UPyConfig_133::MinSwingAngleForSpinSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ExpectSwingAngleForSpinSwing) == 0x0033C0, "Member 'UPyConfig_133::ExpectSwingAngleForSpinSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ThresholdAngleToStopSwing) == 0x0033C4, "Member 'UPyConfig_133::ThresholdAngleToStopSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, LaunchVelocityOverMaxAngle) == 0x0033C8, "Member 'UPyConfig_133::LaunchVelocityOverMaxAngle' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, LaunchVelocityIsOverride) == 0x0033E0, "Member 'UPyConfig_133::LaunchVelocityIsOverride' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DelayTimeToLaunch) == 0x0033E4, "Member 'UPyConfig_133::DelayTimeToLaunch' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, GravityScaleWhenLaunch) == 0x0033E8, "Member 'UPyConfig_133::GravityScaleWhenLaunch' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, GravityScaleApplyDuration) == 0x0033EC, "Member 'UPyConfig_133::GravityScaleApplyDuration' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ThresholdSpeedToStopSwing) == 0x0033F0, "Member 'UPyConfig_133::ThresholdSpeedToStopSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinSpeedOfSwing) == 0x0033F4, "Member 'UPyConfig_133::MinSpeedOfSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, AbilitiesToblockWhenLowSwing) == 0x0033F8, "Member 'UPyConfig_133::AbilitiesToblockWhenLowSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, AbilitiesToCancelWhenSwing) == 0x003460, "Member 'UPyConfig_133::AbilitiesToCancelWhenSwing' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, EnableDebugDrawCapsule) == 0x0034C8, "Member 'UPyConfig_133::EnableDebugDrawCapsule' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_Swinging_Down) == 0x0034D0, "Member 'UPyConfig_133::CameraInterp_Swinging_Down' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_Swinging_Down_RightHand) == 0x0034D8, "Member 'UPyConfig_133::CameraInterp_Swinging_Down_RightHand' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, DelayTimeToPlaySwingingDownCameraInterp) == 0x0034E0, "Member 'UPyConfig_133::DelayTimeToPlaySwingingDownCameraInterp' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_Swinging_Up) == 0x0034E8, "Member 'UPyConfig_133::CameraInterp_Swinging_Up' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_Swinging_Up_RightHand) == 0x0034F0, "Member 'UPyConfig_133::CameraInterp_Swinging_Up_RightHand' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, MinSwingAngleToPlaySwingUpCameraEffect) == 0x0034F8, "Member 'UPyConfig_133::MinSwingAngleToPlaySwingUpCameraEffect' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraShakeClass_Swinging) == 0x003500, "Member 'UPyConfig_133::CameraShakeClass_Swinging' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_LowSwinging) == 0x003508, "Member 'UPyConfig_133::CameraInterp_LowSwinging' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_RopeBreaking) == 0x003510, "Member 'UPyConfig_133::CameraInterp_RopeBreaking' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterpDuration_RopeBreaking) == 0x003518, "Member 'UPyConfig_133::CameraInterpDuration_RopeBreaking' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterp_RopeBreaking_FOV) == 0x003520, "Member 'UPyConfig_133::CameraInterp_RopeBreaking_FOV' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, CameraInterpDuration_RopeBreaking_FOV) == 0x003528, "Member 'UPyConfig_133::CameraInterpDuration_RopeBreaking_FOV' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, SimpleSwingParams) == 0x003530, "Member 'UPyConfig_133::SimpleSwingParams' has a wrong offset!");
static_assert(offsetof(UPyConfig_133, ActiveUserSetting) == 0x004500, "Member 'UPyConfig_133::ActiveUserSetting' has a wrong offset!");

// PythonClass PyAbility_133.PyAbility_133
// 0x0020 (0x2828 - 0x2808)
class UPyAbility_133 : public UAbility_133
{
public:
	FMulticastInlineDelegateProperty_             Delegate_ProjetileHitDispatcher;                   // 0x2808(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Delegate_ProjetileFlyOverMaxDistanceDispatcher;    // 0x2818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void BeginPlay();
	void EndPlay();
	bool CanActivate();
	bool TryMakeTriggerContext(struct FGameplayEventData& EventData);
	void K2_ActivateAbility();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnTaskTick(float DeltaTime);
	void OnJumpPress(float TimeWaited);
	void NativeOnMontageCompleted(const class FString& Tag);
	void OnSwingingEnd(ESwingEndReason InEndReason);
	void StartIntoSwingingLoopState();
	void Delegate_ProjetileHitDispatcher__DelegateSignature(const struct FHitResult& InHitResult);
	void Delegate_ProjetileFlyOverMaxDistanceDispatcher__DelegateSignature();
	void K2_OnServerReceiveClientMissileData(const struct FHitResult& InHitResult, bool bNeedSpecialMove, bool bIsHitGround);
	void K2_OnServerReceiveClientFlyOverMaxDistance();
	void OnServerExpired();
	void K2_OnNetSyncOnEdgeOffCliff(const struct FGameplayAbilityTargetDataHandle& Data);
	void ApplySpecialMove();
	void OnSpecialMoveFinish(EDashStopReason Reason);
	void OnTimeToEndAbility();
	void OnTimeToCancelAbility();
	void OnSpecialMoveFinishSecond(EDashStopReason Reason);
	void NetMulticast_SetSwingParams(bool IsLeftHandShoot);
	void K2_ReadySimpleSwing(const struct FSwingInfo& InSwingInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyAbility_133">();
	}
	static class UPyAbility_133* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyAbility_133>();
	}
};
static_assert(alignof(UPyAbility_133) == 0x000008, "Wrong alignment on UPyAbility_133");
static_assert(sizeof(UPyAbility_133) == 0x002828, "Wrong size on UPyAbility_133");
static_assert(offsetof(UPyAbility_133, Delegate_ProjetileHitDispatcher) == 0x002808, "Member 'UPyAbility_133::Delegate_ProjetileHitDispatcher' has a wrong offset!");
static_assert(offsetof(UPyAbility_133, Delegate_ProjetileFlyOverMaxDistanceDispatcher) == 0x002818, "Member 'UPyAbility_133::Delegate_ProjetileFlyOverMaxDistanceDispatcher' has a wrong offset!");

}

