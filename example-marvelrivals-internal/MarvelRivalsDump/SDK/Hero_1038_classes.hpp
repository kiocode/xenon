#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1038

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeclarativeUnreal_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Engine_structs.hpp"
#include "Hero_1038_structs.hpp"


namespace SDK
{

// Class Hero_1038.Config_103811
// 0x0020 (0x00B8 - 0x0098)
class UConfig_103811 final : public UMarvelAbilityConfig
{
public:
	float                                         ChargeEnergy;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargedAbilityID;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAimOffsetAngle;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeLoseTraceTarget;                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CanAbsorbEnergySummonedTag;                        // 0x00A8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCharHigherPriority;                             // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_103811">();
	}
	static class UConfig_103811* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_103811>();
	}
};
static_assert(alignof(UConfig_103811) == 0x000008, "Wrong alignment on UConfig_103811");
static_assert(sizeof(UConfig_103811) == 0x0000B8, "Wrong size on UConfig_103811");
static_assert(offsetof(UConfig_103811, ChargeEnergy) == 0x000098, "Member 'UConfig_103811::ChargeEnergy' has a wrong offset!");
static_assert(offsetof(UConfig_103811, ChargedAbilityID) == 0x00009C, "Member 'UConfig_103811::ChargedAbilityID' has a wrong offset!");
static_assert(offsetof(UConfig_103811, MaxAimOffsetAngle) == 0x0000A0, "Member 'UConfig_103811::MaxAimOffsetAngle' has a wrong offset!");
static_assert(offsetof(UConfig_103811, DelayTimeLoseTraceTarget) == 0x0000A4, "Member 'UConfig_103811::DelayTimeLoseTraceTarget' has a wrong offset!");
static_assert(offsetof(UConfig_103811, CanAbsorbEnergySummonedTag) == 0x0000A8, "Member 'UConfig_103811::CanAbsorbEnergySummonedTag' has a wrong offset!");
static_assert(offsetof(UConfig_103811, bIsCharHigherPriority) == 0x0000B4, "Member 'UConfig_103811::bIsCharHigherPriority' has a wrong offset!");

// Class Hero_1038.TraceComponent_10381101
// 0x1120 (0x2830 - 0x1710)
class UTraceComponent_10381101 final : public UMarvelAgentTraceComponent
{
public:
	class UMarvelGameplayAbility*                 AbilityToBeCharged;                                // 0x1708(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 OwnAbility;                                        // 0x1710(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_103811*                         Config;                                            // 0x1718(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   InstigatorChar;                                    // 0x1720(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             KeepedTarget;                                      // 0x1728(0x0170)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         KeepedTargetTracedTime;                            // 0x1898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189C[0x4];                                     // 0x189C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             VerifyContext;                                     // 0x18A0(0x0F90)(ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void OnAbilityInit(int32 AbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10381101">();
	}
	static class UTraceComponent_10381101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10381101>();
	}
};
static_assert(alignof(UTraceComponent_10381101) == 0x000010, "Wrong alignment on UTraceComponent_10381101");
static_assert(sizeof(UTraceComponent_10381101) == 0x002830, "Wrong size on UTraceComponent_10381101");
static_assert(offsetof(UTraceComponent_10381101, AbilityToBeCharged) == 0x001708, "Member 'UTraceComponent_10381101::AbilityToBeCharged' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, OwnAbility) == 0x001710, "Member 'UTraceComponent_10381101::OwnAbility' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, Config) == 0x001718, "Member 'UTraceComponent_10381101::Config' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, InstigatorChar) == 0x001720, "Member 'UTraceComponent_10381101::InstigatorChar' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, KeepedTarget) == 0x001728, "Member 'UTraceComponent_10381101::KeepedTarget' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, KeepedTargetTracedTime) == 0x001898, "Member 'UTraceComponent_10381101::KeepedTargetTracedTime' has a wrong offset!");
static_assert(offsetof(UTraceComponent_10381101, VerifyContext) == 0x0018A0, "Member 'UTraceComponent_10381101::VerifyContext' has a wrong offset!");

// Class Hero_1038.Cue_Scope_Loop_10381101
// 0x1200 (0x1F70 - 0x0D70)
class ACue_Scope_Loop_10381101 final : public AMarvelCueNotify_Scope
{
public:
	class UNiagaraComponent*                      LoopLineFXSystemComp;                              // 0x0D70(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      HandFXSystemComp;                                  // 0x0D78(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      ArmFXSystemComp;                                   // 0x0D80(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      HitFXSystemComp;                                   // 0x0D88(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 KeepedTargetActor;                                 // 0x0D90(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             KeepHitResult;                                     // 0x0D98(0x0170)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F08[0x18];                                     // 0x0F08(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             VerifyTraceContext;                                // 0x0F20(0x0F90)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   InstigatorChar;                                    // 0x1EB0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x1EB8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelAbilityTargetActor_Scope*        OwnerScope;                                        // 0x1EC0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 LastBeHittingTarget;                               // 0x1EC8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED0[0x28];                                    // 0x1ED0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         LoopLineFXSystemAsset;                             // 0x1EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         HitFXSystemAsset;                                  // 0x1F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         HandFXSystemAsset;                                 // 0x1F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         ArmFXSystemAsset;                                  // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LineAttachSocketName;                              // 0x1F18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HandAttachSocketName;                              // 0x1F24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ArmAttachSocketName;                               // 0x1F30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HitAttachSocketName;                               // 0x1F3C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LengthPerSegment;                                  // 0x1F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LineFXSourceBendingFactor;                         // 0x1F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LineFXTargetBendingFactor;                         // 0x1F50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoopAudioIDWithoutTarget;                          // 0x1F54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoopAudioIDWithTarget;                             // 0x1F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BeHittingStartAudioID;                             // 0x1F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BeHittingLoopAudioID;                              // 0x1F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BeHittingEndAudioID;                               // 0x1F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FXDissolveDeltaTime;                               // 0x1F68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F6C[0x4];                                     // 0x1F6C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentCollisionChanged(class UPrimitiveComponent* ChangedComponent);
	void OnGetInstigator(class AActor* InstigatorActor);
	void OnTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTraceHitResult(class UObject* TraceSource, const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_10381101">();
	}
	static class ACue_Scope_Loop_10381101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_10381101>();
	}
};
static_assert(alignof(ACue_Scope_Loop_10381101) == 0x000010, "Wrong alignment on ACue_Scope_Loop_10381101");
static_assert(sizeof(ACue_Scope_Loop_10381101) == 0x001F70, "Wrong size on ACue_Scope_Loop_10381101");
static_assert(offsetof(ACue_Scope_Loop_10381101, LoopLineFXSystemComp) == 0x000D70, "Member 'ACue_Scope_Loop_10381101::LoopLineFXSystemComp' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HandFXSystemComp) == 0x000D78, "Member 'ACue_Scope_Loop_10381101::HandFXSystemComp' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, ArmFXSystemComp) == 0x000D80, "Member 'ACue_Scope_Loop_10381101::ArmFXSystemComp' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HitFXSystemComp) == 0x000D88, "Member 'ACue_Scope_Loop_10381101::HitFXSystemComp' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, KeepedTargetActor) == 0x000D90, "Member 'ACue_Scope_Loop_10381101::KeepedTargetActor' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, KeepHitResult) == 0x000D98, "Member 'ACue_Scope_Loop_10381101::KeepHitResult' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, VerifyTraceContext) == 0x000F20, "Member 'ACue_Scope_Loop_10381101::VerifyTraceContext' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, InstigatorChar) == 0x001EB0, "Member 'ACue_Scope_Loop_10381101::InstigatorChar' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, TraceComponent) == 0x001EB8, "Member 'ACue_Scope_Loop_10381101::TraceComponent' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, OwnerScope) == 0x001EC0, "Member 'ACue_Scope_Loop_10381101::OwnerScope' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LastBeHittingTarget) == 0x001EC8, "Member 'ACue_Scope_Loop_10381101::LastBeHittingTarget' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LoopLineFXSystemAsset) == 0x001EF8, "Member 'ACue_Scope_Loop_10381101::LoopLineFXSystemAsset' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HitFXSystemAsset) == 0x001F00, "Member 'ACue_Scope_Loop_10381101::HitFXSystemAsset' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HandFXSystemAsset) == 0x001F08, "Member 'ACue_Scope_Loop_10381101::HandFXSystemAsset' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, ArmFXSystemAsset) == 0x001F10, "Member 'ACue_Scope_Loop_10381101::ArmFXSystemAsset' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LineAttachSocketName) == 0x001F18, "Member 'ACue_Scope_Loop_10381101::LineAttachSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HandAttachSocketName) == 0x001F24, "Member 'ACue_Scope_Loop_10381101::HandAttachSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, ArmAttachSocketName) == 0x001F30, "Member 'ACue_Scope_Loop_10381101::ArmAttachSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, HitAttachSocketName) == 0x001F3C, "Member 'ACue_Scope_Loop_10381101::HitAttachSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LengthPerSegment) == 0x001F48, "Member 'ACue_Scope_Loop_10381101::LengthPerSegment' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LineFXSourceBendingFactor) == 0x001F4C, "Member 'ACue_Scope_Loop_10381101::LineFXSourceBendingFactor' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LineFXTargetBendingFactor) == 0x001F50, "Member 'ACue_Scope_Loop_10381101::LineFXTargetBendingFactor' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LoopAudioIDWithoutTarget) == 0x001F54, "Member 'ACue_Scope_Loop_10381101::LoopAudioIDWithoutTarget' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, LoopAudioIDWithTarget) == 0x001F58, "Member 'ACue_Scope_Loop_10381101::LoopAudioIDWithTarget' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, BeHittingStartAudioID) == 0x001F5C, "Member 'ACue_Scope_Loop_10381101::BeHittingStartAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, BeHittingLoopAudioID) == 0x001F60, "Member 'ACue_Scope_Loop_10381101::BeHittingLoopAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, BeHittingEndAudioID) == 0x001F64, "Member 'ACue_Scope_Loop_10381101::BeHittingEndAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10381101, FXDissolveDeltaTime) == 0x001F68, "Member 'ACue_Scope_Loop_10381101::FXDissolveDeltaTime' has a wrong offset!");

// Class Hero_1038.Config_103831
// 0x0008 (0x00A0 - 0x0098)
class UConfig_103831 final : public UMarvelAbilityConfig
{
public:
	float                                         ProjectileManualExplodeInterval;                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_103831">();
	}
	static class UConfig_103831* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_103831>();
	}
};
static_assert(alignof(UConfig_103831) == 0x000008, "Wrong alignment on UConfig_103831");
static_assert(sizeof(UConfig_103831) == 0x0000A0, "Wrong size on UConfig_103831");
static_assert(offsetof(UConfig_103831, ProjectileManualExplodeInterval) == 0x000098, "Member 'UConfig_103831::ProjectileManualExplodeInterval' has a wrong offset!");

// Class Hero_1038.Ability_103831
// 0x0008 (0x2590 - 0x2588)
class UAbility_103831 : public UAbility_108
{
public:
	bool                                          HasProjectileEnd;                                  // 0x2588(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2589[0x7];                                     // 0x2589(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_103831">();
	}
	static class UAbility_103831* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_103831>();
	}
};
static_assert(alignof(UAbility_103831) == 0x000008, "Wrong alignment on UAbility_103831");
static_assert(sizeof(UAbility_103831) == 0x002590, "Wrong size on UAbility_103831");
static_assert(offsetof(UAbility_103831, HasProjectileEnd) == 0x002588, "Member 'UAbility_103831::HasProjectileEnd' has a wrong offset!");

// Class Hero_1038.UIController_103831
// 0x0038 (0x0C98 - 0x0C60)
class UUIController_103831 final : public UUIC_Ability
{
public:
	uint8                                         Pad_C60[0x18];                                     // 0x0C60(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0C78(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C90[0x8];                                      // 0x0C90(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTagUpdate(const struct FGameplayTag& TagUpdated, bool TagExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_103831">();
	}
	static class UUIController_103831* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_103831>();
	}
};
static_assert(alignof(UUIController_103831) == 0x000008, "Wrong alignment on UUIController_103831");
static_assert(sizeof(UUIController_103831) == 0x000C98, "Wrong size on UUIController_103831");
static_assert(offsetof(UUIController_103831, TimerHandle) == 0x000C78, "Member 'UUIController_103831::TimerHandle' has a wrong offset!");

// Class Hero_1038.Cue_Buff_10384101
// 0x0058 (0x1090 - 0x1038)
class ACue_Buff_10384101 : public AMarvelCueNotify_Buff
{
public:
	float                                         EnterStealthTimeOther;                             // 0x1038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FXSocketName;                                      // 0x103C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x1048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AScarletWitchChildActor*                OwningChildActor;                                  // 0x1050(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      DissolveFXComp;                                    // 0x1058(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      TrailFXComp;                                       // 0x1060(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1068[0x28];                                    // 0x1068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnViewingSideChanged(EClientPlayerViewSide InViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_10384101">();
	}
	static class ACue_Buff_10384101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_10384101>();
	}
};
static_assert(alignof(ACue_Buff_10384101) == 0x000008, "Wrong alignment on ACue_Buff_10384101");
static_assert(sizeof(ACue_Buff_10384101) == 0x001090, "Wrong size on ACue_Buff_10384101");
static_assert(offsetof(ACue_Buff_10384101, EnterStealthTimeOther) == 0x001038, "Member 'ACue_Buff_10384101::EnterStealthTimeOther' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10384101, FXSocketName) == 0x00103C, "Member 'ACue_Buff_10384101::FXSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10384101, OwnerCharacter) == 0x001048, "Member 'ACue_Buff_10384101::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10384101, OwningChildActor) == 0x001050, "Member 'ACue_Buff_10384101::OwningChildActor' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10384101, DissolveFXComp) == 0x001058, "Member 'ACue_Buff_10384101::DissolveFXComp' has a wrong offset!");
static_assert(offsetof(ACue_Buff_10384101, TrailFXComp) == 0x001060, "Member 'ACue_Buff_10384101::TrailFXComp' has a wrong offset!");

// Class Hero_1038.Cue_Ability_Loop_10385101
// 0x01A0 (0x0FF0 - 0x0E50)
class ACue_Ability_Loop_10385101 : public AMarvelCueNotify_Ability
{
public:
	TMap<class FName, class UCurveFloat*>         GlassBrokenConfig;                                 // 0x0E50(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         HueSeparateConfig;                                 // 0x0EA0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GlassBrokenMaterial;                               // 0x0EF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HueSeparateMaterial;                               // 0x0EF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         ExplodeFXAsset;                                    // 0x0F00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffset;                                        // 0x0F0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyParamName;                                    // 0x0F10(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAnimCurvesToOverlayMaterial;                 // 0x0F1C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1D[0x3];                                      // 0x0F1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             AnimCurveMaterialSlotNames;                        // 0x0F20(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0F70(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelHitEffectComponent*              HitEffectComponent;                                // 0x0F78(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               GlassBrokenMI;                                     // 0x0F80(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               HueSeparateMI;                                     // 0x0F88(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F90[0x30];                                     // 0x0F90(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EClientPlayerViewSide InViewSide)> ViewSideDelegate;                                  // 0x0FC0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FD4[0x1C];                                     // 0x0FD4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelfViewSideChanged(EClientPlayerViewSide ViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10385101">();
	}
	static class ACue_Ability_Loop_10385101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10385101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10385101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10385101");
static_assert(sizeof(ACue_Ability_Loop_10385101) == 0x000FF0, "Wrong size on ACue_Ability_Loop_10385101");
static_assert(offsetof(ACue_Ability_Loop_10385101, GlassBrokenConfig) == 0x000E50, "Member 'ACue_Ability_Loop_10385101::GlassBrokenConfig' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, HueSeparateConfig) == 0x000EA0, "Member 'ACue_Ability_Loop_10385101::HueSeparateConfig' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, GlassBrokenMaterial) == 0x000EF0, "Member 'ACue_Ability_Loop_10385101::GlassBrokenMaterial' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, HueSeparateMaterial) == 0x000EF8, "Member 'ACue_Ability_Loop_10385101::HueSeparateMaterial' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, ExplodeFXAsset) == 0x000F00, "Member 'ACue_Ability_Loop_10385101::ExplodeFXAsset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, DeltaTime) == 0x000F08, "Member 'ACue_Ability_Loop_10385101::DeltaTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, TimeOffset) == 0x000F0C, "Member 'ACue_Ability_Loop_10385101::TimeOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, EnemyParamName) == 0x000F10, "Member 'ACue_Ability_Loop_10385101::EnemyParamName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, bApplyAnimCurvesToOverlayMaterial) == 0x000F1C, "Member 'ACue_Ability_Loop_10385101::bApplyAnimCurvesToOverlayMaterial' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, AnimCurveMaterialSlotNames) == 0x000F20, "Member 'ACue_Ability_Loop_10385101::AnimCurveMaterialSlotNames' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, OwnerCharacter) == 0x000F70, "Member 'ACue_Ability_Loop_10385101::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, HitEffectComponent) == 0x000F78, "Member 'ACue_Ability_Loop_10385101::HitEffectComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, GlassBrokenMI) == 0x000F80, "Member 'ACue_Ability_Loop_10385101::GlassBrokenMI' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, HueSeparateMI) == 0x000F88, "Member 'ACue_Ability_Loop_10385101::HueSeparateMI' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10385101, ViewSideDelegate) == 0x000FC0, "Member 'ACue_Ability_Loop_10385101::ViewSideDelegate' has a wrong offset!");

// Class Hero_1038.Cue_Ability_Loop_10386301
// 0x0020 (0x0E70 - 0x0E50)
class ACue_Ability_Loop_10386301 final : public AMarvelCueNotify_Ability
{
public:
	class UFXSystemAsset*                         FXAsset;                                           // 0x0E50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     FxComp;                                            // 0x0E58(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x0E60(0x0010)(Transient, NativeAccessSpecifierPublic)

public:
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10386301">();
	}
	static class ACue_Ability_Loop_10386301* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10386301>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10386301) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10386301");
static_assert(sizeof(ACue_Ability_Loop_10386301) == 0x000E70, "Wrong size on ACue_Ability_Loop_10386301");
static_assert(offsetof(ACue_Ability_Loop_10386301, FXAsset) == 0x000E50, "Member 'ACue_Ability_Loop_10386301::FXAsset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10386301, FxComp) == 0x000E58, "Member 'ACue_Ability_Loop_10386301::FxComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10386301, DeclarePlayerViewSideHolder) == 0x000E60, "Member 'ACue_Ability_Loop_10386301::DeclarePlayerViewSideHolder' has a wrong offset!");

// Class Hero_1038.UIController_103871
// 0x0030 (0x0C90 - 0x0C60)
class UUIController_103871 final : public UUIC_Ability
{
public:
	uint8                                         Pad_C60[0x18];                                     // 0x0C60(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0C78(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnTagUpdate(const struct FGameplayTag& TagUpdated, bool TagExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_103871">();
	}
	static class UUIController_103871* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_103871>();
	}
};
static_assert(alignof(UUIController_103871) == 0x000008, "Wrong alignment on UUIController_103871");
static_assert(sizeof(UUIController_103871) == 0x000C90, "Wrong size on UUIController_103871");
static_assert(offsetof(UUIController_103871, TimerHandle) == 0x000C78, "Member 'UUIController_103871::TimerHandle' has a wrong offset!");

// Class Hero_1038.Cue_Ability_Loop_10387101
// 0x0108 (0x0F58 - 0x0E50)
class ACue_Ability_Loop_10387101 final : public AMarvelCueNotify_Ability
{
public:
	class FName                                   LeftHandSocketName;                                // 0x0E50(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightHandSocketName;                               // 0x0E5C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkirtSocketName;                                   // 0x0E68(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E74[0x4];                                      // 0x0E74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFXConfig_103871>               HandFXConfig;                                      // 0x0E78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      LeftHandFX;                                        // 0x0E88(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RightHandFX;                                       // 0x0E90(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      SkirtFXComp;                                       // 0x0E98(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0EA0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA8[0xB0];                                     // 0x0EA8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerTagUpdate(const struct FGameplayTag& Tag, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10387101">();
	}
	static class ACue_Ability_Loop_10387101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10387101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10387101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10387101");
static_assert(sizeof(ACue_Ability_Loop_10387101) == 0x000F58, "Wrong size on ACue_Ability_Loop_10387101");
static_assert(offsetof(ACue_Ability_Loop_10387101, LeftHandSocketName) == 0x000E50, "Member 'ACue_Ability_Loop_10387101::LeftHandSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, RightHandSocketName) == 0x000E5C, "Member 'ACue_Ability_Loop_10387101::RightHandSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, SkirtSocketName) == 0x000E68, "Member 'ACue_Ability_Loop_10387101::SkirtSocketName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, HandFXConfig) == 0x000E78, "Member 'ACue_Ability_Loop_10387101::HandFXConfig' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, LeftHandFX) == 0x000E88, "Member 'ACue_Ability_Loop_10387101::LeftHandFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, RightHandFX) == 0x000E90, "Member 'ACue_Ability_Loop_10387101::RightHandFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, SkirtFXComp) == 0x000E98, "Member 'ACue_Ability_Loop_10387101::SkirtFXComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10387101, OwnerCharacter) == 0x000EA0, "Member 'ACue_Ability_Loop_10387101::OwnerCharacter' has a wrong offset!");

// Class Hero_1038.ScarletWitchAnimInstance
// 0x0060 (0x0970 - 0x0910)
class UScarletWitchAnimInstance final : public UMarvelAnimInstance
{
public:
	class UPhysicsWeaponData*                     PhysicsWeaponData_R;                               // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsWeaponData*                     PhysicsWeaponData_L;                               // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportStart;                                    // 0x0920(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInTeleport;                                       // 0x0921(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTeleportEnd;                                      // 0x0922(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_923[0x1];                                      // 0x0923(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportDirection;                                 // 0x0924(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TeleportSpeed;                                     // 0x0928(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSlowFall;                                       // 0x092C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsWeaponData*                     NowPhysicsData;                                    // 0x0930(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_938[0x38];                                     // 0x0938(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTeleportAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchAnimInstance">();
	}
	static class UScarletWitchAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScarletWitchAnimInstance>();
	}
};
static_assert(alignof(UScarletWitchAnimInstance) == 0x000010, "Wrong alignment on UScarletWitchAnimInstance");
static_assert(sizeof(UScarletWitchAnimInstance) == 0x000970, "Wrong size on UScarletWitchAnimInstance");
static_assert(offsetof(UScarletWitchAnimInstance, PhysicsWeaponData_R) == 0x000910, "Member 'UScarletWitchAnimInstance::PhysicsWeaponData_R' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, PhysicsWeaponData_L) == 0x000918, "Member 'UScarletWitchAnimInstance::PhysicsWeaponData_L' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, bTeleportStart) == 0x000920, "Member 'UScarletWitchAnimInstance::bTeleportStart' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, bInTeleport) == 0x000921, "Member 'UScarletWitchAnimInstance::bInTeleport' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, bTeleportEnd) == 0x000922, "Member 'UScarletWitchAnimInstance::bTeleportEnd' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, TeleportDirection) == 0x000924, "Member 'UScarletWitchAnimInstance::TeleportDirection' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, TeleportSpeed) == 0x000928, "Member 'UScarletWitchAnimInstance::TeleportSpeed' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, bIsSlowFall) == 0x00092C, "Member 'UScarletWitchAnimInstance::bIsSlowFall' has a wrong offset!");
static_assert(offsetof(UScarletWitchAnimInstance, NowPhysicsData) == 0x000930, "Member 'UScarletWitchAnimInstance::NowPhysicsData' has a wrong offset!");

// Class Hero_1038.ScarletWitchCharacter
// 0x0010 (0x1820 - 0x1810)
class AScarletWitchCharacter : public AMarvelBaseCharacter
{
public:
	class UScarletWitchMoveLogicBaseComponent*    ScarletWitchMoveLogic;                             // 0x1810(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1818[0x8];                                     // 0x1818(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchCharacter">();
	}
	static class AScarletWitchCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScarletWitchCharacter>();
	}
};
static_assert(alignof(AScarletWitchCharacter) == 0x000010, "Wrong alignment on AScarletWitchCharacter");
static_assert(sizeof(AScarletWitchCharacter) == 0x001820, "Wrong size on AScarletWitchCharacter");
static_assert(offsetof(AScarletWitchCharacter, ScarletWitchMoveLogic) == 0x001810, "Member 'AScarletWitchCharacter::ScarletWitchMoveLogic' has a wrong offset!");

// Class Hero_1038.ScarletWitchChildActor
// 0x00D8 (0x0B38 - 0x0A60)
class AScarletWitchChildActor : public AMarvelCharacterChildActor
{
public:
	TArray<struct FMaterialFadeInfo_103871>       MaterialFadeInfo;                                  // 0x0A60(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         HairMaterialSlot;                                  // 0x0A70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairSlotSuffix;                                    // 0x0A74(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHairFade;                                   // 0x0A80(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ShiftOverlayMaterial;                              // 0x0A88(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureParamNames;                                 // 0x0A90(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         EnterStealthInitialValue;                          // 0x0AA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitStealthInitialValue;                           // 0x0AA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterStealthTime;                                  // 0x0AA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitStealthTime;                                   // 0x0AAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterStealthTimeOther;                             // 0x0AB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitStealthTimeOther;                              // 0x0AB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnterParamName;                                    // 0x0AB8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExitParamName;                                     // 0x0AC4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleportStart;                                    // 0x0AD0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInTeleport;                                       // 0x0AD1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSlowFall;                                       // 0x0AD2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD3[0x5];                                      // 0x0AD3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurrentFadeCurve;                                  // 0x0AD8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0AE0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwningMeshComp;                                    // 0x0AE8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AF0[0x48];                                     // 0x0AF0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchChildActor">();
	}
	static class AScarletWitchChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScarletWitchChildActor>();
	}
};
static_assert(alignof(AScarletWitchChildActor) == 0x000008, "Wrong alignment on AScarletWitchChildActor");
static_assert(sizeof(AScarletWitchChildActor) == 0x000B38, "Wrong size on AScarletWitchChildActor");
static_assert(offsetof(AScarletWitchChildActor, MaterialFadeInfo) == 0x000A60, "Member 'AScarletWitchChildActor::MaterialFadeInfo' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, HairMaterialSlot) == 0x000A70, "Member 'AScarletWitchChildActor::HairMaterialSlot' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, HairSlotSuffix) == 0x000A74, "Member 'AScarletWitchChildActor::HairSlotSuffix' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, bEnableHairFade) == 0x000A80, "Member 'AScarletWitchChildActor::bEnableHairFade' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, ShiftOverlayMaterial) == 0x000A88, "Member 'AScarletWitchChildActor::ShiftOverlayMaterial' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, TextureParamNames) == 0x000A90, "Member 'AScarletWitchChildActor::TextureParamNames' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, EnterStealthInitialValue) == 0x000AA0, "Member 'AScarletWitchChildActor::EnterStealthInitialValue' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, ExitStealthInitialValue) == 0x000AA4, "Member 'AScarletWitchChildActor::ExitStealthInitialValue' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, EnterStealthTime) == 0x000AA8, "Member 'AScarletWitchChildActor::EnterStealthTime' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, ExitStealthTime) == 0x000AAC, "Member 'AScarletWitchChildActor::ExitStealthTime' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, EnterStealthTimeOther) == 0x000AB0, "Member 'AScarletWitchChildActor::EnterStealthTimeOther' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, ExitStealthTimeOther) == 0x000AB4, "Member 'AScarletWitchChildActor::ExitStealthTimeOther' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, EnterParamName) == 0x000AB8, "Member 'AScarletWitchChildActor::EnterParamName' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, ExitParamName) == 0x000AC4, "Member 'AScarletWitchChildActor::ExitParamName' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, bTeleportStart) == 0x000AD0, "Member 'AScarletWitchChildActor::bTeleportStart' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, bInTeleport) == 0x000AD1, "Member 'AScarletWitchChildActor::bInTeleport' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, bIsSlowFall) == 0x000AD2, "Member 'AScarletWitchChildActor::bIsSlowFall' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, CurrentFadeCurve) == 0x000AD8, "Member 'AScarletWitchChildActor::CurrentFadeCurve' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, OwnerCharacter) == 0x000AE0, "Member 'AScarletWitchChildActor::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(AScarletWitchChildActor, OwningMeshComp) == 0x000AE8, "Member 'AScarletWitchChildActor::OwningMeshComp' has a wrong offset!");

// Class Hero_1038.ScarletWitchAudioComponent
// 0x0000 (0x0C90 - 0x0C90)
class UScarletWitchAudioComponent final : public UCharacterAudioComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchAudioComponent">();
	}
	static class UScarletWitchAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScarletWitchAudioComponent>();
	}
};
static_assert(alignof(UScarletWitchAudioComponent) == 0x000008, "Wrong alignment on UScarletWitchAudioComponent");
static_assert(sizeof(UScarletWitchAudioComponent) == 0x000C90, "Wrong size on UScarletWitchAudioComponent");

// Class Hero_1038.ScarletWitchMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UScarletWitchMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchMoveLogicBaseComponent">();
	}
	static class UScarletWitchMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScarletWitchMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UScarletWitchMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UScarletWitchMoveLogicBaseComponent");
static_assert(sizeof(UScarletWitchMoveLogicBaseComponent) == 0x0003F0, "Wrong size on UScarletWitchMoveLogicBaseComponent");

// Class Hero_1038.ScarletWitchMovementComponent
// 0x0000 (0x1B60 - 0x1B60)
class UScarletWitchMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScarletWitchMovementComponent">();
	}
	static class UScarletWitchMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScarletWitchMovementComponent>();
	}
};
static_assert(alignof(UScarletWitchMovementComponent) == 0x000010, "Wrong alignment on UScarletWitchMovementComponent");
static_assert(sizeof(UScarletWitchMovementComponent) == 0x001B60, "Wrong size on UScarletWitchMovementComponent");

// Class Hero_1038.TabData_1038
// 0x0000 (0x0050 - 0x0050)
class UTabData_1038 final : public UHeroTabDataBase
{
public:
	void OnAbilityUse(const struct FActionLogAbilityRecord& Record);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TabData_1038">();
	}
	static class UTabData_1038* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTabData_1038>();
	}
};
static_assert(alignof(UTabData_1038) == 0x000008, "Wrong alignment on UTabData_1038");
static_assert(sizeof(UTabData_1038) == 0x000050, "Wrong size on UTabData_1038");

}

