#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelLevel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "MarvelLevel_structs.hpp"


namespace SDK::Params
{

// Function MarvelLevel.EnvironmentGlobalActor.ChangeQuality
// 0x0001 (0x0001 - 0x0000)
struct EnvironmentGlobalActor_ChangeQuality final
{
public:
	bool                                          IsHighQuality;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGlobalActor_ChangeQuality) == 0x000001, "Wrong alignment on EnvironmentGlobalActor_ChangeQuality");
static_assert(sizeof(EnvironmentGlobalActor_ChangeQuality) == 0x000001, "Wrong size on EnvironmentGlobalActor_ChangeQuality");
static_assert(offsetof(EnvironmentGlobalActor_ChangeQuality, IsHighQuality) == 0x000000, "Member 'EnvironmentGlobalActor_ChangeQuality::IsHighQuality' has a wrong offset!");

// Function MarvelLevel.FillColorBox.GeneratePaintSceneRebuildData
// 0x0028 (0x0028 - 0x0000)
struct FillColorBox_GeneratePaintSceneRebuildData final
{
public:
	struct FPaintSceneReconnectRebuildData        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FillColorBox_GeneratePaintSceneRebuildData) == 0x000008, "Wrong alignment on FillColorBox_GeneratePaintSceneRebuildData");
static_assert(sizeof(FillColorBox_GeneratePaintSceneRebuildData) == 0x000028, "Wrong size on FillColorBox_GeneratePaintSceneRebuildData");
static_assert(offsetof(FillColorBox_GeneratePaintSceneRebuildData, ReturnValue) == 0x000000, "Member 'FillColorBox_GeneratePaintSceneRebuildData::ReturnValue' has a wrong offset!");

// Function MarvelLevel.FillColorBox.GetItemsState
// 0x0018 (0x0018 - 0x0000)
struct FillColorBox_GetItemsState final
{
public:
	int32                                         InArrayLength;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FillColorBox_GetItemsState) == 0x000008, "Wrong alignment on FillColorBox_GetItemsState");
static_assert(sizeof(FillColorBox_GetItemsState) == 0x000018, "Wrong size on FillColorBox_GetItemsState");
static_assert(offsetof(FillColorBox_GetItemsState, InArrayLength) == 0x000000, "Member 'FillColorBox_GetItemsState::InArrayLength' has a wrong offset!");
static_assert(offsetof(FillColorBox_GetItemsState, ReturnValue) == 0x000008, "Member 'FillColorBox_GetItemsState::ReturnValue' has a wrong offset!");

// Function MarvelLevel.FillColorBox.InitializeItems
// 0x0004 (0x0004 - 0x0000)
struct FillColorBox_InitializeItems final
{
public:
	int32                                         InArrayLength;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FillColorBox_InitializeItems) == 0x000004, "Wrong alignment on FillColorBox_InitializeItems");
static_assert(sizeof(FillColorBox_InitializeItems) == 0x000004, "Wrong size on FillColorBox_InitializeItems");
static_assert(offsetof(FillColorBox_InitializeItems, InArrayLength) == 0x000000, "Member 'FillColorBox_InitializeItems::InArrayLength' has a wrong offset!");

// Function MarvelLevel.FillColorBox.UpdateItemState
// 0x0018 (0x0018 - 0x0000)
struct FillColorBox_UpdateItemState final
{
public:
	TArray<int32>                                 ArrayIndexList;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NewState;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FillColorBox_UpdateItemState) == 0x000008, "Wrong alignment on FillColorBox_UpdateItemState");
static_assert(sizeof(FillColorBox_UpdateItemState) == 0x000018, "Wrong size on FillColorBox_UpdateItemState");
static_assert(offsetof(FillColorBox_UpdateItemState, ArrayIndexList) == 0x000000, "Member 'FillColorBox_UpdateItemState::ArrayIndexList' has a wrong offset!");
static_assert(offsetof(FillColorBox_UpdateItemState, NewState) == 0x000010, "Member 'FillColorBox_UpdateItemState::NewState' has a wrong offset!");

// Function MarvelLevel.FillColorPoint.FillColor
// 0x0001 (0x0001 - 0x0000)
struct FillColorPoint_FillColor final
{
public:
	EBattleSide                                   BattleSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FillColorPoint_FillColor) == 0x000001, "Wrong alignment on FillColorPoint_FillColor");
static_assert(sizeof(FillColorPoint_FillColor) == 0x000001, "Wrong size on FillColorPoint_FillColor");
static_assert(offsetof(FillColorPoint_FillColor, BattleSide) == 0x000000, "Member 'FillColorPoint_FillColor::BattleSide' has a wrong offset!");

// Function MarvelLevel.LevelAudioActor.PyGetDefaultAkComponent
// 0x0008 (0x0008 - 0x0000)
struct LevelAudioActor_PyGetDefaultAkComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelAudioActor_PyGetDefaultAkComponent) == 0x000008, "Wrong alignment on LevelAudioActor_PyGetDefaultAkComponent");
static_assert(sizeof(LevelAudioActor_PyGetDefaultAkComponent) == 0x000008, "Wrong size on LevelAudioActor_PyGetDefaultAkComponent");
static_assert(offsetof(LevelAudioActor_PyGetDefaultAkComponent, ReturnValue) == 0x000000, "Member 'LevelAudioActor_PyGetDefaultAkComponent::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelCustomEventSubsystem.GetLevelCustomEventSubsystem
// 0x0010 (0x0010 - 0x0000)
struct LevelCustomEventSubsystem_GetLevelCustomEventSubsystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelCustomEventSubsystem*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelCustomEventSubsystem_GetLevelCustomEventSubsystem) == 0x000008, "Wrong alignment on LevelCustomEventSubsystem_GetLevelCustomEventSubsystem");
static_assert(sizeof(LevelCustomEventSubsystem_GetLevelCustomEventSubsystem) == 0x000010, "Wrong size on LevelCustomEventSubsystem_GetLevelCustomEventSubsystem");
static_assert(offsetof(LevelCustomEventSubsystem_GetLevelCustomEventSubsystem, WorldContextObject) == 0x000000, "Member 'LevelCustomEventSubsystem_GetLevelCustomEventSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelCustomEventSubsystem_GetLevelCustomEventSubsystem, ReturnValue) == 0x000008, "Member 'LevelCustomEventSubsystem_GetLevelCustomEventSubsystem::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.DestroyWorldNetDrive
// 0x0008 (0x0008 - 0x0000)
struct LevelFunctionLibrary_DestroyWorldNetDrive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFunctionLibrary_DestroyWorldNetDrive) == 0x000008, "Wrong alignment on LevelFunctionLibrary_DestroyWorldNetDrive");
static_assert(sizeof(LevelFunctionLibrary_DestroyWorldNetDrive) == 0x000008, "Wrong size on LevelFunctionLibrary_DestroyWorldNetDrive");
static_assert(offsetof(LevelFunctionLibrary_DestroyWorldNetDrive, WorldContextObject) == 0x000000, "Member 'LevelFunctionLibrary_DestroyWorldNetDrive::WorldContextObject' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.DestroyWorldNetDriver
// 0x0008 (0x0008 - 0x0000)
struct LevelFunctionLibrary_DestroyWorldNetDriver final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFunctionLibrary_DestroyWorldNetDriver) == 0x000008, "Wrong alignment on LevelFunctionLibrary_DestroyWorldNetDriver");
static_assert(sizeof(LevelFunctionLibrary_DestroyWorldNetDriver) == 0x000008, "Wrong size on LevelFunctionLibrary_DestroyWorldNetDriver");
static_assert(offsetof(LevelFunctionLibrary_DestroyWorldNetDriver, WorldContextObject) == 0x000000, "Member 'LevelFunctionLibrary_DestroyWorldNetDriver::WorldContextObject' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.FindDeathCollectionIndex
// 0x0010 (0x0010 - 0x0000)
struct LevelFunctionLibrary_FindDeathCollectionIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelFunctionLibrary_FindDeathCollectionIndex) == 0x000008, "Wrong alignment on LevelFunctionLibrary_FindDeathCollectionIndex");
static_assert(sizeof(LevelFunctionLibrary_FindDeathCollectionIndex) == 0x000010, "Wrong size on LevelFunctionLibrary_FindDeathCollectionIndex");
static_assert(offsetof(LevelFunctionLibrary_FindDeathCollectionIndex, WorldContextObject) == 0x000000, "Member 'LevelFunctionLibrary_FindDeathCollectionIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_FindDeathCollectionIndex, ReturnValue) == 0x000008, "Member 'LevelFunctionLibrary_FindDeathCollectionIndex::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.GetAllActorsWithTagInWorld
// 0x0068 (0x0068 - 0x0000)
struct LevelFunctionLibrary_GetAllActorsWithTagInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FActorsWithSameOneTag> OutActors;                                         // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFunctionLibrary_GetAllActorsWithTagInWorld) == 0x000008, "Wrong alignment on LevelFunctionLibrary_GetAllActorsWithTagInWorld");
static_assert(sizeof(LevelFunctionLibrary_GetAllActorsWithTagInWorld) == 0x000068, "Wrong size on LevelFunctionLibrary_GetAllActorsWithTagInWorld");
static_assert(offsetof(LevelFunctionLibrary_GetAllActorsWithTagInWorld, WorldContextObject) == 0x000000, "Member 'LevelFunctionLibrary_GetAllActorsWithTagInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_GetAllActorsWithTagInWorld, Tags) == 0x000008, "Member 'LevelFunctionLibrary_GetAllActorsWithTagInWorld::Tags' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_GetAllActorsWithTagInWorld, OutActors) == 0x000018, "Member 'LevelFunctionLibrary_GetAllActorsWithTagInWorld::OutActors' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.GetSequenceLength
// 0x0010 (0x0010 - 0x0000)
struct LevelFunctionLibrary_GetSequenceLength final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelFunctionLibrary_GetSequenceLength) == 0x000008, "Wrong alignment on LevelFunctionLibrary_GetSequenceLength");
static_assert(sizeof(LevelFunctionLibrary_GetSequenceLength) == 0x000010, "Wrong size on LevelFunctionLibrary_GetSequenceLength");
static_assert(offsetof(LevelFunctionLibrary_GetSequenceLength, LevelSequence) == 0x000000, "Member 'LevelFunctionLibrary_GetSequenceLength::LevelSequence' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_GetSequenceLength, ReturnValue) == 0x000008, "Member 'LevelFunctionLibrary_GetSequenceLength::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.GetSequencePlayerCurrentTime
// 0x0010 (0x0010 - 0x0000)
struct LevelFunctionLibrary_GetSequencePlayerCurrentTime final
{
public:
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelFunctionLibrary_GetSequencePlayerCurrentTime) == 0x000008, "Wrong alignment on LevelFunctionLibrary_GetSequencePlayerCurrentTime");
static_assert(sizeof(LevelFunctionLibrary_GetSequencePlayerCurrentTime) == 0x000010, "Wrong size on LevelFunctionLibrary_GetSequencePlayerCurrentTime");
static_assert(offsetof(LevelFunctionLibrary_GetSequencePlayerCurrentTime, LevelSequencePlayer) == 0x000000, "Member 'LevelFunctionLibrary_GetSequencePlayerCurrentTime::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_GetSequencePlayerCurrentTime, ReturnValue) == 0x000008, "Member 'LevelFunctionLibrary_GetSequencePlayerCurrentTime::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.LevelSetClientTravel
// 0x0018 (0x0018 - 0x0000)
struct LevelFunctionLibrary_LevelSetClientTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextURLString;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFunctionLibrary_LevelSetClientTravel) == 0x000008, "Wrong alignment on LevelFunctionLibrary_LevelSetClientTravel");
static_assert(sizeof(LevelFunctionLibrary_LevelSetClientTravel) == 0x000018, "Wrong size on LevelFunctionLibrary_LevelSetClientTravel");
static_assert(offsetof(LevelFunctionLibrary_LevelSetClientTravel, WorldContextObject) == 0x000000, "Member 'LevelFunctionLibrary_LevelSetClientTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_LevelSetClientTravel, NextURLString) == 0x000008, "Member 'LevelFunctionLibrary_LevelSetClientTravel::NextURLString' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.MeshData
// 0x0018 (0x0018 - 0x0000)
struct LevelFunctionLibrary_MeshData final
{
public:
	const class UStaticMeshComponent*             StaticMeshComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFunctionLibrary_MeshData) == 0x000008, "Wrong alignment on LevelFunctionLibrary_MeshData");
static_assert(sizeof(LevelFunctionLibrary_MeshData) == 0x000018, "Wrong size on LevelFunctionLibrary_MeshData");
static_assert(offsetof(LevelFunctionLibrary_MeshData, StaticMeshComponent) == 0x000000, "Member 'LevelFunctionLibrary_MeshData::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_MeshData, ReturnValue) == 0x000008, "Member 'LevelFunctionLibrary_MeshData::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelFunctionLibrary.SequencePlayerJumpTo
// 0x0010 (0x0010 - 0x0000)
struct LevelFunctionLibrary_SequencePlayerJumpTo final
{
public:
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelFunctionLibrary_SequencePlayerJumpTo) == 0x000008, "Wrong alignment on LevelFunctionLibrary_SequencePlayerJumpTo");
static_assert(sizeof(LevelFunctionLibrary_SequencePlayerJumpTo) == 0x000010, "Wrong size on LevelFunctionLibrary_SequencePlayerJumpTo");
static_assert(offsetof(LevelFunctionLibrary_SequencePlayerJumpTo, LevelSequencePlayer) == 0x000000, "Member 'LevelFunctionLibrary_SequencePlayerJumpTo::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(LevelFunctionLibrary_SequencePlayerJumpTo, TargetTime) == 0x000008, "Member 'LevelFunctionLibrary_SequencePlayerJumpTo::TargetTime' has a wrong offset!");

// Function MarvelLevel.LevelGravityElevator.GetPathVelocity
// 0x0058 (0x0058 - 0x0000)
struct LevelGravityElevator_GetPathVelocity final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    UpdatedComponent;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGravity;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelGravityElevator_GetPathVelocity) == 0x000008, "Wrong alignment on LevelGravityElevator_GetPathVelocity");
static_assert(sizeof(LevelGravityElevator_GetPathVelocity) == 0x000058, "Wrong size on LevelGravityElevator_GetPathVelocity");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, InVelocity) == 0x000000, "Member 'LevelGravityElevator_GetPathVelocity::InVelocity' has a wrong offset!");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, UpdatedComponent) == 0x000018, "Member 'LevelGravityElevator_GetPathVelocity::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, InGravity) == 0x000020, "Member 'LevelGravityElevator_GetPathVelocity::InGravity' has a wrong offset!");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, DeltaTime) == 0x000038, "Member 'LevelGravityElevator_GetPathVelocity::DeltaTime' has a wrong offset!");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, MovementMode) == 0x00003C, "Member 'LevelGravityElevator_GetPathVelocity::MovementMode' has a wrong offset!");
static_assert(offsetof(LevelGravityElevator_GetPathVelocity, ReturnValue) == 0x000040, "Member 'LevelGravityElevator_GetPathVelocity::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelGravityZoneEffectTemplate.IsDispelledByAbility
// 0x0070 (0x0070 - 0x0000)
struct LevelGravityZoneEffectTemplate_IsDispelledByAbility final
{
public:
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelGravityZoneEffectTemplate_IsDispelledByAbility) == 0x000008, "Wrong alignment on LevelGravityZoneEffectTemplate_IsDispelledByAbility");
static_assert(sizeof(LevelGravityZoneEffectTemplate_IsDispelledByAbility) == 0x000070, "Wrong size on LevelGravityZoneEffectTemplate_IsDispelledByAbility");
static_assert(offsetof(LevelGravityZoneEffectTemplate_IsDispelledByAbility, AbilityTags) == 0x000000, "Member 'LevelGravityZoneEffectTemplate_IsDispelledByAbility::AbilityTags' has a wrong offset!");
static_assert(offsetof(LevelGravityZoneEffectTemplate_IsDispelledByAbility, ReturnValue) == 0x000068, "Member 'LevelGravityZoneEffectTemplate_IsDispelledByAbility::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelStaticMeshActor.MeshData
// 0x0018 (0x0018 - 0x0000)
struct LevelStaticMeshActor_MeshData final
{
public:
	const class UStaticMeshComponent*             StaticMeshComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelStaticMeshActor_MeshData) == 0x000008, "Wrong alignment on LevelStaticMeshActor_MeshData");
static_assert(sizeof(LevelStaticMeshActor_MeshData) == 0x000018, "Wrong size on LevelStaticMeshActor_MeshData");
static_assert(offsetof(LevelStaticMeshActor_MeshData, StaticMeshComponent) == 0x000000, "Member 'LevelStaticMeshActor_MeshData::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(LevelStaticMeshActor_MeshData, ReturnValue) == 0x000008, "Member 'LevelStaticMeshActor_MeshData::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelTransportPipe.GetKnockUp
// 0x0058 (0x0058 - 0x0000)
struct LevelTransportPipe_GetKnockUp final
{
public:
	struct FPhysicForceMove                       OutPhysicKnockUp;                                  // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelTransportPipe_GetKnockUp) == 0x000008, "Wrong alignment on LevelTransportPipe_GetKnockUp");
static_assert(sizeof(LevelTransportPipe_GetKnockUp) == 0x000058, "Wrong size on LevelTransportPipe_GetKnockUp");
static_assert(offsetof(LevelTransportPipe_GetKnockUp, OutPhysicKnockUp) == 0x000000, "Member 'LevelTransportPipe_GetKnockUp::OutPhysicKnockUp' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetKnockUp, ReturnValue) == 0x000050, "Member 'LevelTransportPipe_GetKnockUp::ReturnValue' has a wrong offset!");

// Function MarvelLevel.LevelTransportPipe.GetPathVelocity
// 0x0058 (0x0058 - 0x0000)
struct LevelTransportPipe_GetPathVelocity final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    UpdatedComponent;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGravity;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 MovementMode;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelTransportPipe_GetPathVelocity) == 0x000008, "Wrong alignment on LevelTransportPipe_GetPathVelocity");
static_assert(sizeof(LevelTransportPipe_GetPathVelocity) == 0x000058, "Wrong size on LevelTransportPipe_GetPathVelocity");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, InVelocity) == 0x000000, "Member 'LevelTransportPipe_GetPathVelocity::InVelocity' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, UpdatedComponent) == 0x000018, "Member 'LevelTransportPipe_GetPathVelocity::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, InGravity) == 0x000020, "Member 'LevelTransportPipe_GetPathVelocity::InGravity' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, DeltaTime) == 0x000038, "Member 'LevelTransportPipe_GetPathVelocity::DeltaTime' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, MovementMode) == 0x00003C, "Member 'LevelTransportPipe_GetPathVelocity::MovementMode' has a wrong offset!");
static_assert(offsetof(LevelTransportPipe_GetPathVelocity, ReturnValue) == 0x000040, "Member 'LevelTransportPipe_GetPathVelocity::ReturnValue' has a wrong offset!");

// Function MarvelLevel.MarvelLevelAnimActionComponent.OnApplyHit
// 0x0008 (0x0008 - 0x0000)
struct MarvelLevelAnimActionComponent_OnApplyHit final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelLevelAnimActionComponent_OnApplyHit) == 0x000008, "Wrong alignment on MarvelLevelAnimActionComponent_OnApplyHit");
static_assert(sizeof(MarvelLevelAnimActionComponent_OnApplyHit) == 0x000008, "Wrong size on MarvelLevelAnimActionComponent_OnApplyHit");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnApplyHit, InSourceAvatar) == 0x000000, "Member 'MarvelLevelAnimActionComponent_OnApplyHit::InSourceAvatar' has a wrong offset!");

// Function MarvelLevel.MarvelLevelAnimActionComponent.OnLinkGCBreak
// 0x0078 (0x0078 - 0x0000)
struct MarvelLevelAnimActionComponent_OnLinkGCBreak final
{
public:
	struct FChaosBreakEvent                       BreakEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelLevelAnimActionComponent_OnLinkGCBreak) == 0x000008, "Wrong alignment on MarvelLevelAnimActionComponent_OnLinkGCBreak");
static_assert(sizeof(MarvelLevelAnimActionComponent_OnLinkGCBreak) == 0x000078, "Wrong size on MarvelLevelAnimActionComponent_OnLinkGCBreak");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnLinkGCBreak, BreakEvent) == 0x000000, "Member 'MarvelLevelAnimActionComponent_OnLinkGCBreak::BreakEvent' has a wrong offset!");

// Function MarvelLevel.MarvelLevelAnimActionComponent.OnLinkGCIgnoreBreak
// 0x0008 (0x0008 - 0x0000)
struct MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak) == 0x000004, "Wrong alignment on MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak");
static_assert(sizeof(MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak) == 0x000008, "Wrong size on MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak, Index_0) == 0x000000, "Member 'MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak::Index_0' has a wrong offset!");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak, ServerTime) == 0x000004, "Member 'MarvelLevelAnimActionComponent_OnLinkGCIgnoreBreak::ServerTime' has a wrong offset!");

// Function MarvelLevel.MarvelLevelAnimActionComponent.OnMovementBaseChanged
// 0x0178 (0x0178 - 0x0000)
struct MarvelLevelAnimActionComponent_OnMovementBaseChanged final
{
public:
	class UPrimitiveComponent*                    NewBase;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             FloorHitResult;                                    // 0x0008(0x0170)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelLevelAnimActionComponent_OnMovementBaseChanged) == 0x000008, "Wrong alignment on MarvelLevelAnimActionComponent_OnMovementBaseChanged");
static_assert(sizeof(MarvelLevelAnimActionComponent_OnMovementBaseChanged) == 0x000178, "Wrong size on MarvelLevelAnimActionComponent_OnMovementBaseChanged");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnMovementBaseChanged, NewBase) == 0x000000, "Member 'MarvelLevelAnimActionComponent_OnMovementBaseChanged::NewBase' has a wrong offset!");
static_assert(offsetof(MarvelLevelAnimActionComponent_OnMovementBaseChanged, FloorHitResult) == 0x000008, "Member 'MarvelLevelAnimActionComponent_OnMovementBaseChanged::FloorHitResult' has a wrong offset!");

// Function MarvelLevel.PlayerStateTrainComponent.OnActorDeath
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateTrainComponent_OnActorDeath final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateTrainComponent_OnActorDeath) == 0x000008, "Wrong alignment on PlayerStateTrainComponent_OnActorDeath");
static_assert(sizeof(PlayerStateTrainComponent_OnActorDeath) == 0x000030, "Wrong size on PlayerStateTrainComponent_OnActorDeath");
static_assert(offsetof(PlayerStateTrainComponent_OnActorDeath, Source) == 0x000000, "Member 'PlayerStateTrainComponent_OnActorDeath::Source' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorDeath, Target) == 0x000008, "Member 'PlayerStateTrainComponent_OnActorDeath::Target' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorDeath, ModifierParameterHandle) == 0x000010, "Member 'PlayerStateTrainComponent_OnActorDeath::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorDeath, ExtraData) == 0x000028, "Member 'PlayerStateTrainComponent_OnActorDeath::ExtraData' has a wrong offset!");

// Function MarvelLevel.PlayerStateTrainComponent.OnActorTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateTrainComponent_OnActorTakeDamage final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateTrainComponent_OnActorTakeDamage) == 0x000008, "Wrong alignment on PlayerStateTrainComponent_OnActorTakeDamage");
static_assert(sizeof(PlayerStateTrainComponent_OnActorTakeDamage) == 0x000030, "Wrong size on PlayerStateTrainComponent_OnActorTakeDamage");
static_assert(offsetof(PlayerStateTrainComponent_OnActorTakeDamage, InInstigator) == 0x000000, "Member 'PlayerStateTrainComponent_OnActorTakeDamage::InInstigator' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorTakeDamage, InTarget) == 0x000008, "Member 'PlayerStateTrainComponent_OnActorTakeDamage::InTarget' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'PlayerStateTrainComponent_OnActorTakeDamage::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnActorTakeDamage, ExtraData) == 0x000028, "Member 'PlayerStateTrainComponent_OnActorTakeDamage::ExtraData' has a wrong offset!");

// Function MarvelLevel.PlayerStateTrainComponent.OnTargetActorRecycleAgentTask
// 0x0068 (0x0068 - 0x0000)
struct PlayerStateTrainComponent_OnTargetActorRecycleAgentTask final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEndAgentTaskInfo                      EndAgentTaskInfo;                                  // 0x0058(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask) == 0x000008, "Wrong alignment on PlayerStateTrainComponent_OnTargetActorRecycleAgentTask");
static_assert(sizeof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask) == 0x000068, "Wrong size on PlayerStateTrainComponent_OnTargetActorRecycleAgentTask");
static_assert(offsetof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask, Source) == 0x000000, "Member 'PlayerStateTrainComponent_OnTargetActorRecycleAgentTask::Source' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask, SourceAbility) == 0x000008, "Member 'PlayerStateTrainComponent_OnTargetActorRecycleAgentTask::SourceAbility' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask, GenerateInfo) == 0x000010, "Member 'PlayerStateTrainComponent_OnTargetActorRecycleAgentTask::GenerateInfo' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnTargetActorRecycleAgentTask, EndAgentTaskInfo) == 0x000058, "Member 'PlayerStateTrainComponent_OnTargetActorRecycleAgentTask::EndAgentTaskInfo' has a wrong offset!");

// Function MarvelLevel.PlayerStateTrainComponent.OnWeaponAmmoUse
// 0x0018 (0x0018 - 0x0000)
struct PlayerStateTrainComponent_OnWeaponAmmoUse final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCritHit;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0016(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateTrainComponent_OnWeaponAmmoUse) == 0x000008, "Wrong alignment on PlayerStateTrainComponent_OnWeaponAmmoUse");
static_assert(sizeof(PlayerStateTrainComponent_OnWeaponAmmoUse) == 0x000018, "Wrong size on PlayerStateTrainComponent_OnWeaponAmmoUse");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, Source) == 0x000000, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::Source' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, Target) == 0x000008, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::Target' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, AbilityID) == 0x000010, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::AbilityID' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, bHit) == 0x000014, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::bHit' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, bIsCritHit) == 0x000015, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::bIsCritHit' has a wrong offset!");
static_assert(offsetof(PlayerStateTrainComponent_OnWeaponAmmoUse, ExtraData) == 0x000016, "Member 'PlayerStateTrainComponent_OnWeaponAmmoUse::ExtraData' has a wrong offset!");

// Function MarvelLevel.SpringFestivalStatComponent.AddPlayerStat
// 0x000C (0x000C - 0x0000)
struct SpringFestivalStatComponent_AddPlayerStat final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringFestivalStatComponent_AddPlayerStat) == 0x000004, "Wrong alignment on SpringFestivalStatComponent_AddPlayerStat");
static_assert(sizeof(SpringFestivalStatComponent_AddPlayerStat) == 0x00000C, "Wrong size on SpringFestivalStatComponent_AddPlayerStat");
static_assert(offsetof(SpringFestivalStatComponent_AddPlayerStat, UID) == 0x000000, "Member 'SpringFestivalStatComponent_AddPlayerStat::UID' has a wrong offset!");
static_assert(offsetof(SpringFestivalStatComponent_AddPlayerStat, StatIndex) == 0x000004, "Member 'SpringFestivalStatComponent_AddPlayerStat::StatIndex' has a wrong offset!");
static_assert(offsetof(SpringFestivalStatComponent_AddPlayerStat, Value) == 0x000008, "Member 'SpringFestivalStatComponent_AddPlayerStat::Value' has a wrong offset!");

// Function MarvelLevel.SpringFestivalStatComponent.RegisterPlayerStat
// 0x0008 (0x0008 - 0x0000)
struct SpringFestivalStatComponent_RegisterPlayerStat final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringFestivalStatComponent_RegisterPlayerStat) == 0x000004, "Wrong alignment on SpringFestivalStatComponent_RegisterPlayerStat");
static_assert(sizeof(SpringFestivalStatComponent_RegisterPlayerStat) == 0x000008, "Wrong size on SpringFestivalStatComponent_RegisterPlayerStat");
static_assert(offsetof(SpringFestivalStatComponent_RegisterPlayerStat, UID) == 0x000000, "Member 'SpringFestivalStatComponent_RegisterPlayerStat::UID' has a wrong offset!");
static_assert(offsetof(SpringFestivalStatComponent_RegisterPlayerStat, StatCount) == 0x000004, "Member 'SpringFestivalStatComponent_RegisterPlayerStat::StatCount' has a wrong offset!");

// Function MarvelLevel.SpringFestivalStatComponent.SetPlayerStat
// 0x000C (0x000C - 0x0000)
struct SpringFestivalStatComponent_SetPlayerStat final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringFestivalStatComponent_SetPlayerStat) == 0x000004, "Wrong alignment on SpringFestivalStatComponent_SetPlayerStat");
static_assert(sizeof(SpringFestivalStatComponent_SetPlayerStat) == 0x00000C, "Wrong size on SpringFestivalStatComponent_SetPlayerStat");
static_assert(offsetof(SpringFestivalStatComponent_SetPlayerStat, UID) == 0x000000, "Member 'SpringFestivalStatComponent_SetPlayerStat::UID' has a wrong offset!");
static_assert(offsetof(SpringFestivalStatComponent_SetPlayerStat, StatIndex) == 0x000004, "Member 'SpringFestivalStatComponent_SetPlayerStat::StatIndex' has a wrong offset!");
static_assert(offsetof(SpringFestivalStatComponent_SetPlayerStat, Value) == 0x000008, "Member 'SpringFestivalStatComponent_SetPlayerStat::Value' has a wrong offset!");

// Function MarvelLevel.SpringFestivalStatComponent.UnregisterPlayerStat
// 0x0004 (0x0004 - 0x0000)
struct SpringFestivalStatComponent_UnregisterPlayerStat final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpringFestivalStatComponent_UnregisterPlayerStat) == 0x000004, "Wrong alignment on SpringFestivalStatComponent_UnregisterPlayerStat");
static_assert(sizeof(SpringFestivalStatComponent_UnregisterPlayerStat) == 0x000004, "Wrong size on SpringFestivalStatComponent_UnregisterPlayerStat");
static_assert(offsetof(SpringFestivalStatComponent_UnregisterPlayerStat, UID) == 0x000000, "Member 'SpringFestivalStatComponent_UnregisterPlayerStat::UID' has a wrong offset!");

// Function MarvelLevel.Summoned_20020001.K2_SetReplicatingMovement
// 0x0001 (0x0001 - 0x0000)
struct Summoned_20020001_K2_SetReplicatingMovement final
{
public:
	bool                                          NewReplicate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_20020001_K2_SetReplicatingMovement) == 0x000001, "Wrong alignment on Summoned_20020001_K2_SetReplicatingMovement");
static_assert(sizeof(Summoned_20020001_K2_SetReplicatingMovement) == 0x000001, "Wrong size on Summoned_20020001_K2_SetReplicatingMovement");
static_assert(offsetof(Summoned_20020001_K2_SetReplicatingMovement, NewReplicate) == 0x000000, "Member 'Summoned_20020001_K2_SetReplicatingMovement::NewReplicate' has a wrong offset!");

// Function MarvelLevel.TurnOnLevelTimerNode.TurnOnLevelTimer
// 0x0030 (0x0030 - 0x0000)
struct TurnOnLevelTimerNode_TurnOnLevelTimer final
{
public:
	const class UActorComponent*                  WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTurnOnLevelTimerNode*                  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurnOnLevelTimerNode_TurnOnLevelTimer) == 0x000008, "Wrong alignment on TurnOnLevelTimerNode_TurnOnLevelTimer");
static_assert(sizeof(TurnOnLevelTimerNode_TurnOnLevelTimer) == 0x000030, "Wrong size on TurnOnLevelTimerNode_TurnOnLevelTimer");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, WorldContextObject) == 0x000000, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, Name_0) == 0x000008, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::Name_0' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, DelayTime) == 0x000018, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::DelayTime' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, bLooping) == 0x00001C, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::bLooping' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, LoopTime) == 0x000020, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::LoopTime' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_TurnOnLevelTimer, ReturnValue) == 0x000028, "Member 'TurnOnLevelTimerNode_TurnOnLevelTimer::ReturnValue' has a wrong offset!");

// Function MarvelLevel.TurnOnLevelTimerNode.OnGSEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TurnOnLevelTimerNode_OnGSEndPlay final
{
public:
	class AActor*                                 InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TurnOnLevelTimerNode_OnGSEndPlay) == 0x000008, "Wrong alignment on TurnOnLevelTimerNode_OnGSEndPlay");
static_assert(sizeof(TurnOnLevelTimerNode_OnGSEndPlay) == 0x000010, "Wrong size on TurnOnLevelTimerNode_OnGSEndPlay");
static_assert(offsetof(TurnOnLevelTimerNode_OnGSEndPlay, InSource) == 0x000000, "Member 'TurnOnLevelTimerNode_OnGSEndPlay::InSource' has a wrong offset!");
static_assert(offsetof(TurnOnLevelTimerNode_OnGSEndPlay, Reason) == 0x000008, "Member 'TurnOnLevelTimerNode_OnGSEndPlay::Reason' has a wrong offset!");

}

