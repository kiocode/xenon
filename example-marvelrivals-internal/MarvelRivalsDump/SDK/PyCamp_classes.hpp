#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyCamp

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyCamp.PyCamp
// 0x0110 (0x0620 - 0x0510)
class APyCamp : public AControlPointBase
{
public:
	EBattleSide                                   WinnerSide;                                        // 0x0510(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnershipType                                HolderSide;                                        // 0x0511(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECampState                                    CampState;                                         // 0x0512(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_513[0x5];                                      // 0x0513(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InsideCharList;                                    // 0x0518(0x0010)(BlueprintVisible, Net, RepNotify, NativeAccessSpecifierPublic)
	TMap<EBattleSide, int32>                      TeamCountDict;                                     // 0x0528(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         BluePlayerCount;                                   // 0x0578(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedPlayerCount;                                    // 0x057C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisibleInPrepare;                                // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateInterval;                                    // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UNLOCK_TIME;                                       // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CueTag;                                            // 0x058C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CueBiasLocation;                                   // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInterval;                                      // 0x05B0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalTriggerTime;                                  // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalTimeInterval;                                // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortTimeInterval;                                 // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchCampBlockOccupying;                        // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchCampPlayerChanged;                         // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VHolderSideDispatcher;                             // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchCampStateChange;                           // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchClientCampPlayerChanged;                   // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherClientProgressSpeed;                     // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void DispatchCampBlockOccupying__DelegateSignature(class AActor* Camp, float block_time);
	void DispatchCampPlayerChanged__DelegateSignature(class AActor* Camp);
	void VHolderSideDispatcher__DelegateSignature(class AActor* Camp, EOwnershipType Hold_side);
	void DispatchCampStateChange__DelegateSignature(ECampState Camp_state);
	void DispatchClientCampPlayerChanged__DelegateSignature(class AActor* Camp);
	void DispatcherClientProgressSpeed__DelegateSignature(float Speed);
	void ReceiveInit();
	void ReceiveBeginPlay();
	void OnRep_TimeInterval();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RewindForReplayForPy();
	void Update();
	void S_Initialize();
	void S_Activate();
	void S_on_player_enter_camp(class AActor* Char);
	void S_on_player_exit_camp(class AActor* Char);
	void OnRep_CampState();
	void OnRep_HolderSide();
	void OnRep_InsideCharList();
	void OnRep_BluePlayerCount();
	void OnRep_RedPlayerCount();
	float GetUpdateDeltaSeconds();
	void C_on_player_enter_camp(class AActor* Char);
	void C_on_player_exit_camp(class AActor* Char);
	int32 GetBattleSideCount(EBattleSide battle_side);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCamp">();
	}
	static class APyCamp* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyCamp>();
	}
};
static_assert(alignof(APyCamp) == 0x000008, "Wrong alignment on APyCamp");
static_assert(sizeof(APyCamp) == 0x000620, "Wrong size on APyCamp");
static_assert(offsetof(APyCamp, WinnerSide) == 0x000510, "Member 'APyCamp::WinnerSide' has a wrong offset!");
static_assert(offsetof(APyCamp, HolderSide) == 0x000511, "Member 'APyCamp::HolderSide' has a wrong offset!");
static_assert(offsetof(APyCamp, CampState) == 0x000512, "Member 'APyCamp::CampState' has a wrong offset!");
static_assert(offsetof(APyCamp, InsideCharList) == 0x000518, "Member 'APyCamp::InsideCharList' has a wrong offset!");
static_assert(offsetof(APyCamp, TeamCountDict) == 0x000528, "Member 'APyCamp::TeamCountDict' has a wrong offset!");
static_assert(offsetof(APyCamp, BluePlayerCount) == 0x000578, "Member 'APyCamp::BluePlayerCount' has a wrong offset!");
static_assert(offsetof(APyCamp, RedPlayerCount) == 0x00057C, "Member 'APyCamp::RedPlayerCount' has a wrong offset!");
static_assert(offsetof(APyCamp, IsVisibleInPrepare) == 0x000580, "Member 'APyCamp::IsVisibleInPrepare' has a wrong offset!");
static_assert(offsetof(APyCamp, UpdateInterval) == 0x000584, "Member 'APyCamp::UpdateInterval' has a wrong offset!");
static_assert(offsetof(APyCamp, UNLOCK_TIME) == 0x000588, "Member 'APyCamp::UNLOCK_TIME' has a wrong offset!");
static_assert(offsetof(APyCamp, CueTag) == 0x00058C, "Member 'APyCamp::CueTag' has a wrong offset!");
static_assert(offsetof(APyCamp, CueBiasLocation) == 0x000598, "Member 'APyCamp::CueBiasLocation' has a wrong offset!");
static_assert(offsetof(APyCamp, TimeInterval) == 0x0005B0, "Member 'APyCamp::TimeInterval' has a wrong offset!");
static_assert(offsetof(APyCamp, FinalTriggerTime) == 0x0005B4, "Member 'APyCamp::FinalTriggerTime' has a wrong offset!");
static_assert(offsetof(APyCamp, NormalTimeInterval) == 0x0005B8, "Member 'APyCamp::NormalTimeInterval' has a wrong offset!");
static_assert(offsetof(APyCamp, ShortTimeInterval) == 0x0005BC, "Member 'APyCamp::ShortTimeInterval' has a wrong offset!");
static_assert(offsetof(APyCamp, DispatchCampBlockOccupying) == 0x0005C0, "Member 'APyCamp::DispatchCampBlockOccupying' has a wrong offset!");
static_assert(offsetof(APyCamp, DispatchCampPlayerChanged) == 0x0005D0, "Member 'APyCamp::DispatchCampPlayerChanged' has a wrong offset!");
static_assert(offsetof(APyCamp, VHolderSideDispatcher) == 0x0005E0, "Member 'APyCamp::VHolderSideDispatcher' has a wrong offset!");
static_assert(offsetof(APyCamp, DispatchCampStateChange) == 0x0005F0, "Member 'APyCamp::DispatchCampStateChange' has a wrong offset!");
static_assert(offsetof(APyCamp, DispatchClientCampPlayerChanged) == 0x000600, "Member 'APyCamp::DispatchClientCampPlayerChanged' has a wrong offset!");
static_assert(offsetof(APyCamp, DispatcherClientProgressSpeed) == 0x000610, "Member 'APyCamp::DispatcherClientProgressSpeed' has a wrong offset!");

}

