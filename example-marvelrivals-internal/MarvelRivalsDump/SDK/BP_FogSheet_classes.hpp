#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FogSheet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FogSheet.BP_FogSheet_C
// 0x00E0 (0x0570 - 0x0490)
class ABP_FogSheet_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0490(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    FogSheet;                                          // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceConstant*              FogSheetMasterMaterial;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FogSheetMID;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x04B0(0x0010)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brightness;                                        // 0x04C0(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x04D0(0x0018)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity;                                           // 0x04E8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DepthFadeDistance;                                 // 0x04F0(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoiseProjectionDistance;                           // 0x04F8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoiseSize;                                         // 0x0500(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PanningSpeed;                                      // 0x0508(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeDistance;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               NoiseTex;                                          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SpeedXY;                                           // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Translucency_Sort;                                 // 0x0530(0x0004)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInvertMask;                                     // 0x0534(0x0001)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UseRemap;                                          // 0x0538(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Remap_Min;                                         // 0x0540(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Remap_Max;                                         // 0x0548(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceConstant*              FogSheetMasterMaterial_NoFogInfluence;             // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseUVSample;                                       // 0x0558(0x0001)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoInfluenceByFog;                                  // 0x0559(0x0001)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeforeDof;                                         // 0x055B(0x0001)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              FogSheetMaterialBeforeDof;                         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FogMesh;                                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void TODStart();
	void TODEnd();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_FogSheet(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FogSheet_C">();
	}
	static class ABP_FogSheet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FogSheet_C>();
	}
};
//static_assert(alignof(ABP_FogSheet_C) == 0x000008, "Wrong alignment on ABP_FogSheet_C");
//static_assert(sizeof(ABP_FogSheet_C) == 0x000570, "Wrong size on ABP_FogSheet_C");
//static_assert(offsetof(ABP_FogSheet_C, UberGraphFrame) == 0x000490, "Member 'ABP_FogSheet_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogSheet) == 0x000498, "Member 'ABP_FogSheet_C::FogSheet' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogSheetMasterMaterial) == 0x0004A0, "Member 'ABP_FogSheet_C::FogSheetMasterMaterial' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogSheetMID) == 0x0004A8, "Member 'ABP_FogSheet_C::FogSheetMID' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Color) == 0x0004B0, "Member 'ABP_FogSheet_C::Color' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Brightness) == 0x0004C0, "Member 'ABP_FogSheet_C::Brightness' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, ParticleSystem) == 0x0004C8, "Member 'ABP_FogSheet_C::ParticleSystem' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Size) == 0x0004D0, "Member 'ABP_FogSheet_C::Size' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Opacity) == 0x0004E8, "Member 'ABP_FogSheet_C::Opacity' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, DepthFadeDistance) == 0x0004F0, "Member 'ABP_FogSheet_C::DepthFadeDistance' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, NoiseProjectionDistance) == 0x0004F8, "Member 'ABP_FogSheet_C::NoiseProjectionDistance' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, NoiseSize) == 0x000500, "Member 'ABP_FogSheet_C::NoiseSize' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, PanningSpeed) == 0x000508, "Member 'ABP_FogSheet_C::PanningSpeed' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FadeDistance) == 0x000510, "Member 'ABP_FogSheet_C::FadeDistance' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, NoiseTex) == 0x000518, "Member 'ABP_FogSheet_C::NoiseTex' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, SpeedXY) == 0x000520, "Member 'ABP_FogSheet_C::SpeedXY' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Translucency_Sort) == 0x000530, "Member 'ABP_FogSheet_C::Translucency_Sort' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, UseInvertMask) == 0x000534, "Member 'ABP_FogSheet_C::UseInvertMask' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, UseRemap) == 0x000538, "Member 'ABP_FogSheet_C::UseRemap' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Remap_Min) == 0x000540, "Member 'ABP_FogSheet_C::Remap_Min' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Remap_Max) == 0x000548, "Member 'ABP_FogSheet_C::Remap_Max' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogSheetMasterMaterial_NoFogInfluence) == 0x000550, "Member 'ABP_FogSheet_C::FogSheetMasterMaterial_NoFogInfluence' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, UseUVSample) == 0x000558, "Member 'ABP_FogSheet_C::UseUVSample' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, NoInfluenceByFog) == 0x000559, "Member 'ABP_FogSheet_C::NoInfluenceByFog' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, Changed) == 0x00055A, "Member 'ABP_FogSheet_C::Changed' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, BeforeDof) == 0x00055B, "Member 'ABP_FogSheet_C::BeforeDof' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogSheetMaterialBeforeDof) == 0x000560, "Member 'ABP_FogSheet_C::FogSheetMaterialBeforeDof' has a wrong offset!");
//static_assert(offsetof(ABP_FogSheet_C, FogMesh) == 0x000568, "Member 'ABP_FogSheet_C::FogMesh' has a wrong offset!");

}

