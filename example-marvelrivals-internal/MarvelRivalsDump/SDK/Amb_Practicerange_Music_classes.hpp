#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Amb_Practicerange_Music

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Amb_Practicerange_Music.Amb_Practicerange_Music_C
// 0x0148 (0x05D8 - 0x0490)
class AAmb_Practicerange_Music_C final : public AActor
{
public:
	class USphereComponent*                       Sphere38;                                          // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere37;                                          // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere36;                                          // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere35;                                          // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere34;                                          // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere33;                                          // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere32;                                          // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere31;                                          // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere30;                                          // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere29;                                          // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere28;                                          // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere27;                                          // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere26;                                          // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere25;                                          // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere24;                                          // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere23;                                          // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere22;                                          // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere21;                                          // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere20;                                          // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere19;                                          // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere18;                                          // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere17;                                          // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere16;                                          // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere15;                                          // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere14;                                          // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere13;                                          // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere12;                                          // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere11;                                          // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere10;                                          // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere9;                                           // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere8;                                           // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere7;                                           // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere6;                                           // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere5;                                           // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere4;                                           // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere3;                                           // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere2;                                           // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMultiPositionComponent*                MultiPosition;                                     // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Amb_Practicerange_Music_C">();
	}
	static class AAmb_Practicerange_Music_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmb_Practicerange_Music_C>();
	}
};
////static_assert(alignof(AAmb_Practicerange_Music_C) == 0x000008, "Wrong alignment on AAmb_Practicerange_Music_C");
////static_assert(sizeof(AAmb_Practicerange_Music_C) == 0x0005D8, "Wrong size on AAmb_Practicerange_Music_C");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere38) == 0x000490, "Member 'AAmb_Practicerange_Music_C::Sphere38' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere37) == 0x000498, "Member 'AAmb_Practicerange_Music_C::Sphere37' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere36) == 0x0004A0, "Member 'AAmb_Practicerange_Music_C::Sphere36' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere35) == 0x0004A8, "Member 'AAmb_Practicerange_Music_C::Sphere35' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere34) == 0x0004B0, "Member 'AAmb_Practicerange_Music_C::Sphere34' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere33) == 0x0004B8, "Member 'AAmb_Practicerange_Music_C::Sphere33' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere32) == 0x0004C0, "Member 'AAmb_Practicerange_Music_C::Sphere32' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere31) == 0x0004C8, "Member 'AAmb_Practicerange_Music_C::Sphere31' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere30) == 0x0004D0, "Member 'AAmb_Practicerange_Music_C::Sphere30' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere29) == 0x0004D8, "Member 'AAmb_Practicerange_Music_C::Sphere29' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere28) == 0x0004E0, "Member 'AAmb_Practicerange_Music_C::Sphere28' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere27) == 0x0004E8, "Member 'AAmb_Practicerange_Music_C::Sphere27' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere26) == 0x0004F0, "Member 'AAmb_Practicerange_Music_C::Sphere26' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere25) == 0x0004F8, "Member 'AAmb_Practicerange_Music_C::Sphere25' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere24) == 0x000500, "Member 'AAmb_Practicerange_Music_C::Sphere24' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere23) == 0x000508, "Member 'AAmb_Practicerange_Music_C::Sphere23' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere22) == 0x000510, "Member 'AAmb_Practicerange_Music_C::Sphere22' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere21) == 0x000518, "Member 'AAmb_Practicerange_Music_C::Sphere21' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere20) == 0x000520, "Member 'AAmb_Practicerange_Music_C::Sphere20' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere19) == 0x000528, "Member 'AAmb_Practicerange_Music_C::Sphere19' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere18) == 0x000530, "Member 'AAmb_Practicerange_Music_C::Sphere18' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere17) == 0x000538, "Member 'AAmb_Practicerange_Music_C::Sphere17' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere16) == 0x000540, "Member 'AAmb_Practicerange_Music_C::Sphere16' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere15) == 0x000548, "Member 'AAmb_Practicerange_Music_C::Sphere15' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere14) == 0x000550, "Member 'AAmb_Practicerange_Music_C::Sphere14' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere13) == 0x000558, "Member 'AAmb_Practicerange_Music_C::Sphere13' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere12) == 0x000560, "Member 'AAmb_Practicerange_Music_C::Sphere12' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere11) == 0x000568, "Member 'AAmb_Practicerange_Music_C::Sphere11' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere10) == 0x000570, "Member 'AAmb_Practicerange_Music_C::Sphere10' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere9) == 0x000578, "Member 'AAmb_Practicerange_Music_C::Sphere9' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere8) == 0x000580, "Member 'AAmb_Practicerange_Music_C::Sphere8' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere7) == 0x000588, "Member 'AAmb_Practicerange_Music_C::Sphere7' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere6) == 0x000590, "Member 'AAmb_Practicerange_Music_C::Sphere6' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere5) == 0x000598, "Member 'AAmb_Practicerange_Music_C::Sphere5' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere4) == 0x0005A0, "Member 'AAmb_Practicerange_Music_C::Sphere4' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere3) == 0x0005A8, "Member 'AAmb_Practicerange_Music_C::Sphere3' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere2) == 0x0005B0, "Member 'AAmb_Practicerange_Music_C::Sphere2' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere1) == 0x0005B8, "Member 'AAmb_Practicerange_Music_C::Sphere1' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, Sphere) == 0x0005C0, "Member 'AAmb_Practicerange_Music_C::Sphere' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, MultiPosition) == 0x0005C8, "Member 'AAmb_Practicerange_Music_C::MultiPosition' has a wrong offset!");
////static_assert(offsetof(AAmb_Practicerange_Music_C, DefaultSceneRoot) == 0x0005D0, "Member 'AAmb_Practicerange_Music_C::DefaultSceneRoot' has a wrong offset!");

}

