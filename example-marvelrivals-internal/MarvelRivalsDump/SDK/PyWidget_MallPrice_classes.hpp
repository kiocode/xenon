#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyWidget_MallPrice

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "PyMarvelUserWidget_classes.hpp"


namespace SDK
{

// PythonClass PyWidget_MallPrice.PyWidget_MallPrice
// 0x0220 (0x0810 - 0x05F0)
#pragma pack(push, 0x1)
class alignas(0x10) UPyWidget_MallPrice : public UPyMarvelUserWidget
{
public:
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            PriceIcon;                                         // 0x05F0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         PriceText;                                         // 0x06C0(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         PriceTextLower;                                    // 0x0728(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalPrice;                                     // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPrice;                                     // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawRedNumberIfNoEnoughMoney;                      // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_799[0x3];                                      // 0x0799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorNotEnoughMoney;                               // 0x079C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorEnoughMoney;                                  // 0x07B0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorOrigPrice;                                    // 0x07C4(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          NeedOverride_ColorOldPrice;                        // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D9[0x3];                                      // 0x07D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorOldPrice;                                     // 0x07DC(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PriceType;                                         // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ViewNotEnoughMoney;                                // 0x07F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Need_Custom_Old_Price_Padding;                     // 0x07F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F6[0x2];                                      // 0x07F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding_Of_Old_Price;                              // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_MallPrice">();
	}
	static class UPyWidget_MallPrice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_MallPrice>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPyWidget_MallPrice) == 0x000010, "Wrong alignment on UPyWidget_MallPrice");
static_assert(sizeof(UPyWidget_MallPrice) == 0x000810, "Wrong size on UPyWidget_MallPrice");
static_assert(offsetof(UPyWidget_MallPrice, PriceIcon) == 0x0005F0, "Member 'UPyWidget_MallPrice::PriceIcon' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, PriceText) == 0x0006C0, "Member 'UPyWidget_MallPrice::PriceText' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, PriceTextLower) == 0x000728, "Member 'UPyWidget_MallPrice::PriceTextLower' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, OriginalPrice) == 0x000790, "Member 'UPyWidget_MallPrice::OriginalPrice' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, DiscountPrice) == 0x000794, "Member 'UPyWidget_MallPrice::DiscountPrice' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, DrawRedNumberIfNoEnoughMoney) == 0x000798, "Member 'UPyWidget_MallPrice::DrawRedNumberIfNoEnoughMoney' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, ColorNotEnoughMoney) == 0x00079C, "Member 'UPyWidget_MallPrice::ColorNotEnoughMoney' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, ColorEnoughMoney) == 0x0007B0, "Member 'UPyWidget_MallPrice::ColorEnoughMoney' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, ColorOrigPrice) == 0x0007C4, "Member 'UPyWidget_MallPrice::ColorOrigPrice' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, NeedOverride_ColorOldPrice) == 0x0007D8, "Member 'UPyWidget_MallPrice::NeedOverride_ColorOldPrice' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, ColorOldPrice) == 0x0007DC, "Member 'UPyWidget_MallPrice::ColorOldPrice' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, PriceType) == 0x0007F0, "Member 'UPyWidget_MallPrice::PriceType' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, ViewNotEnoughMoney) == 0x0007F4, "Member 'UPyWidget_MallPrice::ViewNotEnoughMoney' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, Need_Custom_Old_Price_Padding) == 0x0007F5, "Member 'UPyWidget_MallPrice::Need_Custom_Old_Price_Padding' has a wrong offset!");
static_assert(offsetof(UPyWidget_MallPrice, Padding_Of_Old_Price) == 0x0007F8, "Member 'UPyWidget_MallPrice::Padding_Of_Old_Price' has a wrong offset!");

}

