#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1023

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hero_1023_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Hero_1023.Projectile_102322.OnTreatingActivate
// 0x0001 (0x0001 - 0x0000)
struct Projectile_102322_OnTreatingActivate final
{
public:
	bool                                          bInActivate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_102322_OnTreatingActivate) == 0x000001, "Wrong alignment on Projectile_102322_OnTreatingActivate");
static_assert(sizeof(Projectile_102322_OnTreatingActivate) == 0x000001, "Wrong size on Projectile_102322_OnTreatingActivate");
static_assert(offsetof(Projectile_102322_OnTreatingActivate, bInActivate) == 0x000000, "Member 'Projectile_102322_OnTreatingActivate::bInActivate' has a wrong offset!");

// Function Hero_1023.Projectile_102322.SetBrakingState
// 0x0001 (0x0001 - 0x0000)
struct Projectile_102322_SetBrakingState final
{
public:
	bool                                          bInState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_102322_SetBrakingState) == 0x000001, "Wrong alignment on Projectile_102322_SetBrakingState");
static_assert(sizeof(Projectile_102322_SetBrakingState) == 0x000001, "Wrong size on Projectile_102322_SetBrakingState");
static_assert(offsetof(Projectile_102322_SetBrakingState, bInState) == 0x000000, "Member 'Projectile_102322_SetBrakingState::bInState' has a wrong offset!");

// Function Hero_1023.Projectile_102322.SetTreatingState
// 0x0001 (0x0001 - 0x0000)
struct Projectile_102322_SetTreatingState final
{
public:
	bool                                          bInState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_102322_SetTreatingState) == 0x000001, "Wrong alignment on Projectile_102322_SetTreatingState");
static_assert(sizeof(Projectile_102322_SetTreatingState) == 0x000001, "Wrong size on Projectile_102322_SetTreatingState");
static_assert(offsetof(Projectile_102322_SetTreatingState, bInState) == 0x000000, "Member 'Projectile_102322_SetTreatingState::bInState' has a wrong offset!");

// Function Hero_1023.Cue_Projectile_Loop_10232201.OnBounceBegin
// 0x0048 (0x0048 - 0x0000)
struct Cue_Projectile_Loop_10232201_OnBounceBegin final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceDir;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReflexDir;                                         // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Projectile_Loop_10232201_OnBounceBegin) == 0x000008, "Wrong alignment on Cue_Projectile_Loop_10232201_OnBounceBegin");
static_assert(sizeof(Cue_Projectile_Loop_10232201_OnBounceBegin) == 0x000048, "Wrong size on Cue_Projectile_Loop_10232201_OnBounceBegin");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceBegin, HitLocation) == 0x000000, "Member 'Cue_Projectile_Loop_10232201_OnBounceBegin::HitLocation' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceBegin, SourceDir) == 0x000018, "Member 'Cue_Projectile_Loop_10232201_OnBounceBegin::SourceDir' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceBegin, ReflexDir) == 0x000030, "Member 'Cue_Projectile_Loop_10232201_OnBounceBegin::ReflexDir' has a wrong offset!");

// Function Hero_1023.Cue_Projectile_Loop_10232201.OnBounceHit
// 0x0048 (0x0048 - 0x0000)
struct Cue_Projectile_Loop_10232201_OnBounceHit final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceDir;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReflexDir;                                         // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Projectile_Loop_10232201_OnBounceHit) == 0x000008, "Wrong alignment on Cue_Projectile_Loop_10232201_OnBounceHit");
static_assert(sizeof(Cue_Projectile_Loop_10232201_OnBounceHit) == 0x000048, "Wrong size on Cue_Projectile_Loop_10232201_OnBounceHit");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceHit, HitLocation) == 0x000000, "Member 'Cue_Projectile_Loop_10232201_OnBounceHit::HitLocation' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceHit, SourceDir) == 0x000018, "Member 'Cue_Projectile_Loop_10232201_OnBounceHit::SourceDir' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_Loop_10232201_OnBounceHit, ReflexDir) == 0x000030, "Member 'Cue_Projectile_Loop_10232201_OnBounceHit::ReflexDir' has a wrong offset!");

// Function Hero_1023.TraceComponent_10232201.CanBeTreat
// 0x0010 (0x0010 - 0x0000)
struct TraceComponent_10232201_CanBeTreat final
{
public:
	const class AActor*                           InTargetActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceComponent_10232201_CanBeTreat) == 0x000008, "Wrong alignment on TraceComponent_10232201_CanBeTreat");
static_assert(sizeof(TraceComponent_10232201_CanBeTreat) == 0x000010, "Wrong size on TraceComponent_10232201_CanBeTreat");
static_assert(offsetof(TraceComponent_10232201_CanBeTreat, InTargetActor) == 0x000000, "Member 'TraceComponent_10232201_CanBeTreat::InTargetActor' has a wrong offset!");
static_assert(offsetof(TraceComponent_10232201_CanBeTreat, ReturnValue) == 0x000008, "Member 'TraceComponent_10232201_CanBeTreat::ReturnValue' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.GetRespawningCharacter
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10234101_GetRespawningCharacter final
{
public:
	class AMarvelBaseCharacter*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_GetRespawningCharacter) == 0x000008, "Wrong alignment on SummonedComp_10234101_GetRespawningCharacter");
static_assert(sizeof(SummonedComp_10234101_GetRespawningCharacter) == 0x000008, "Wrong size on SummonedComp_10234101_GetRespawningCharacter");
static_assert(offsetof(SummonedComp_10234101_GetRespawningCharacter, ReturnValue) == 0x000000, "Member 'SummonedComp_10234101_GetRespawningCharacter::ReturnValue' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.IsLeaveTimerValid
// 0x0001 (0x0001 - 0x0000)
struct SummonedComp_10234101_IsLeaveTimerValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_IsLeaveTimerValid) == 0x000001, "Wrong alignment on SummonedComp_10234101_IsLeaveTimerValid");
static_assert(sizeof(SummonedComp_10234101_IsLeaveTimerValid) == 0x000001, "Wrong size on SummonedComp_10234101_IsLeaveTimerValid");
static_assert(offsetof(SummonedComp_10234101_IsLeaveTimerValid, ReturnValue) == 0x000000, "Member 'SummonedComp_10234101_IsLeaveTimerValid::ReturnValue' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.OnRep_SummonedSpawnState
// 0x0001 (0x0001 - 0x0000)
struct SummonedComp_10234101_OnRep_SummonedSpawnState final
{
public:
	ESpawnState                                   OldCueState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_OnRep_SummonedSpawnState) == 0x000001, "Wrong alignment on SummonedComp_10234101_OnRep_SummonedSpawnState");
static_assert(sizeof(SummonedComp_10234101_OnRep_SummonedSpawnState) == 0x000001, "Wrong size on SummonedComp_10234101_OnRep_SummonedSpawnState");
static_assert(offsetof(SummonedComp_10234101_OnRep_SummonedSpawnState, OldCueState) == 0x000000, "Member 'SummonedComp_10234101_OnRep_SummonedSpawnState::OldCueState' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.SetCollisionMaskFilter
// 0x0001 (0x0001 - 0x0000)
struct SummonedComp_10234101_SetCollisionMaskFilter final
{
public:
	bool                                          bIsSetAllyMaskFilter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_SetCollisionMaskFilter) == 0x000001, "Wrong alignment on SummonedComp_10234101_SetCollisionMaskFilter");
static_assert(sizeof(SummonedComp_10234101_SetCollisionMaskFilter) == 0x000001, "Wrong size on SummonedComp_10234101_SetCollisionMaskFilter");
static_assert(offsetof(SummonedComp_10234101_SetCollisionMaskFilter, bIsSetAllyMaskFilter) == 0x000000, "Member 'SummonedComp_10234101_SetCollisionMaskFilter::bIsSetAllyMaskFilter' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.SetRespawningCharacter
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10234101_SetRespawningCharacter final
{
public:
	class AMarvelBaseCharacter*                   MarvelBaseCharacter;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_SetRespawningCharacter) == 0x000008, "Wrong alignment on SummonedComp_10234101_SetRespawningCharacter");
static_assert(sizeof(SummonedComp_10234101_SetRespawningCharacter) == 0x000008, "Wrong size on SummonedComp_10234101_SetRespawningCharacter");
static_assert(offsetof(SummonedComp_10234101_SetRespawningCharacter, MarvelBaseCharacter) == 0x000000, "Member 'SummonedComp_10234101_SetRespawningCharacter::MarvelBaseCharacter' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.SetSummonedSpawnState
// 0x0001 (0x0001 - 0x0000)
struct SummonedComp_10234101_SetSummonedSpawnState final
{
public:
	ESpawnState                                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_SetSummonedSpawnState) == 0x000001, "Wrong alignment on SummonedComp_10234101_SetSummonedSpawnState");
static_assert(sizeof(SummonedComp_10234101_SetSummonedSpawnState) == 0x000001, "Wrong size on SummonedComp_10234101_SetSummonedSpawnState");
static_assert(offsetof(SummonedComp_10234101_SetSummonedSpawnState, NewState) == 0x000000, "Member 'SummonedComp_10234101_SetSummonedSpawnState::NewState' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.SetTargetAnimToDeath
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10234101_SetTargetAnimToDeath final
{
public:
	class AMarvelBaseCharacter*                   Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_SetTargetAnimToDeath) == 0x000008, "Wrong alignment on SummonedComp_10234101_SetTargetAnimToDeath");
static_assert(sizeof(SummonedComp_10234101_SetTargetAnimToDeath) == 0x000008, "Wrong size on SummonedComp_10234101_SetTargetAnimToDeath");
static_assert(offsetof(SummonedComp_10234101_SetTargetAnimToDeath, Target) == 0x000000, "Member 'SummonedComp_10234101_SetTargetAnimToDeath::Target' has a wrong offset!");

// Function Hero_1023.SummonedComp_10234101.SetTargetAnimToReviving
// 0x0008 (0x0008 - 0x0000)
struct SummonedComp_10234101_SetTargetAnimToReviving final
{
public:
	class AMarvelBaseCharacter*                   Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedComp_10234101_SetTargetAnimToReviving) == 0x000008, "Wrong alignment on SummonedComp_10234101_SetTargetAnimToReviving");
static_assert(sizeof(SummonedComp_10234101_SetTargetAnimToReviving) == 0x000008, "Wrong size on SummonedComp_10234101_SetTargetAnimToReviving");
static_assert(offsetof(SummonedComp_10234101_SetTargetAnimToReviving, Target) == 0x000000, "Member 'SummonedComp_10234101_SetTargetAnimToReviving::Target' has a wrong offset!");

// Function Hero_1023.Summoned_10234101.GetConfig
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10234101_GetConfig final
{
public:
	class UConfig_102341*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10234101_GetConfig) == 0x000008, "Wrong alignment on Summoned_10234101_GetConfig");
static_assert(sizeof(Summoned_10234101_GetConfig) == 0x000008, "Wrong size on Summoned_10234101_GetConfig");
static_assert(offsetof(Summoned_10234101_GetConfig, ReturnValue) == 0x000000, "Member 'Summoned_10234101_GetConfig::ReturnValue' has a wrong offset!");

// Function Hero_1023.Summoned_10234101.GetDownCollisionTopLocation
// 0x0018 (0x0018 - 0x0000)
struct Summoned_10234101_GetDownCollisionTopLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10234101_GetDownCollisionTopLocation) == 0x000008, "Wrong alignment on Summoned_10234101_GetDownCollisionTopLocation");
static_assert(sizeof(Summoned_10234101_GetDownCollisionTopLocation) == 0x000018, "Wrong size on Summoned_10234101_GetDownCollisionTopLocation");
static_assert(offsetof(Summoned_10234101_GetDownCollisionTopLocation, ReturnValue) == 0x000000, "Member 'Summoned_10234101_GetDownCollisionTopLocation::ReturnValue' has a wrong offset!");

// Function Hero_1023.Summoned_10234101.OnCueStateChanged
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10234101_OnCueStateChanged final
{
public:
	class USummonedComp_10234101*                 SummonedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   OldState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   NewState;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10234101_OnCueStateChanged) == 0x000008, "Wrong alignment on Summoned_10234101_OnCueStateChanged");
static_assert(sizeof(Summoned_10234101_OnCueStateChanged) == 0x000010, "Wrong size on Summoned_10234101_OnCueStateChanged");
static_assert(offsetof(Summoned_10234101_OnCueStateChanged, SummonedComponent) == 0x000000, "Member 'Summoned_10234101_OnCueStateChanged::SummonedComponent' has a wrong offset!");
static_assert(offsetof(Summoned_10234101_OnCueStateChanged, OldState) == 0x000008, "Member 'Summoned_10234101_OnCueStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(Summoned_10234101_OnCueStateChanged, NewState) == 0x000009, "Member 'Summoned_10234101_OnCueStateChanged::NewState' has a wrong offset!");

// Function Hero_1023.Summoned_10234101.OnTopHeightUpdateWhileActive
// 0x001C (0x001C - 0x0000)
struct Summoned_10234101_OnTopHeightUpdateWhileActive final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Output;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10234101_OnTopHeightUpdateWhileActive) == 0x000004, "Wrong alignment on Summoned_10234101_OnTopHeightUpdateWhileActive");
static_assert(sizeof(Summoned_10234101_OnTopHeightUpdateWhileActive) == 0x00001C, "Wrong size on Summoned_10234101_OnTopHeightUpdateWhileActive");
static_assert(offsetof(Summoned_10234101_OnTopHeightUpdateWhileActive, TrackName) == 0x000000, "Member 'Summoned_10234101_OnTopHeightUpdateWhileActive::TrackName' has a wrong offset!");
static_assert(offsetof(Summoned_10234101_OnTopHeightUpdateWhileActive, PropertyName) == 0x00000C, "Member 'Summoned_10234101_OnTopHeightUpdateWhileActive::PropertyName' has a wrong offset!");
static_assert(offsetof(Summoned_10234101_OnTopHeightUpdateWhileActive, Output) == 0x000018, "Member 'Summoned_10234101_OnTopHeightUpdateWhileActive::Output' has a wrong offset!");

// Function Hero_1023.Summoned_10234101.SetUpCollisionIgnoreAll
// 0x0001 (0x0001 - 0x0000)
struct Summoned_10234101_SetUpCollisionIgnoreAll final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10234101_SetUpCollisionIgnoreAll) == 0x000001, "Wrong alignment on Summoned_10234101_SetUpCollisionIgnoreAll");
static_assert(sizeof(Summoned_10234101_SetUpCollisionIgnoreAll) == 0x000001, "Wrong size on Summoned_10234101_SetUpCollisionIgnoreAll");
static_assert(offsetof(Summoned_10234101_SetUpCollisionIgnoreAll, bIgnore) == 0x000000, "Member 'Summoned_10234101_SetUpCollisionIgnoreAll::bIgnore' has a wrong offset!");

// Function Hero_1023.Summoned_10234101_Item.OnActorOverlap
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10234101_Item_OnActorOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10234101_Item_OnActorOverlap) == 0x000008, "Wrong alignment on Summoned_10234101_Item_OnActorOverlap");
static_assert(sizeof(Summoned_10234101_Item_OnActorOverlap) == 0x000008, "Wrong size on Summoned_10234101_Item_OnActorOverlap");
static_assert(offsetof(Summoned_10234101_Item_OnActorOverlap, InActor) == 0x000000, "Member 'Summoned_10234101_Item_OnActorOverlap::InActor' has a wrong offset!");

// Function Hero_1023.Cue_Buff_10234107.OnResurrectStateChanged
// 0x0010 (0x0010 - 0x0000)
struct Cue_Buff_10234107_OnResurrectStateChanged final
{
public:
	class USummonedComp_10234101*                 SummonedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   OldState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   NewState;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Buff_10234107_OnResurrectStateChanged) == 0x000008, "Wrong alignment on Cue_Buff_10234107_OnResurrectStateChanged");
static_assert(sizeof(Cue_Buff_10234107_OnResurrectStateChanged) == 0x000010, "Wrong size on Cue_Buff_10234107_OnResurrectStateChanged");
static_assert(offsetof(Cue_Buff_10234107_OnResurrectStateChanged, SummonedComponent) == 0x000000, "Member 'Cue_Buff_10234107_OnResurrectStateChanged::SummonedComponent' has a wrong offset!");
static_assert(offsetof(Cue_Buff_10234107_OnResurrectStateChanged, OldState) == 0x000008, "Member 'Cue_Buff_10234107_OnResurrectStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(Cue_Buff_10234107_OnResurrectStateChanged, NewState) == 0x000009, "Member 'Cue_Buff_10234107_OnResurrectStateChanged::NewState' has a wrong offset!");

// Function Hero_1023.Cue_Summoner_Loop_10234101_2.OnCueStateChanged
// 0x0010 (0x0010 - 0x0000)
struct Cue_Summoner_Loop_10234101_2_OnCueStateChanged final
{
public:
	class USummonedComp_10234101*                 SummonedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   OldState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnState                                   NewState;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Summoner_Loop_10234101_2_OnCueStateChanged) == 0x000008, "Wrong alignment on Cue_Summoner_Loop_10234101_2_OnCueStateChanged");
static_assert(sizeof(Cue_Summoner_Loop_10234101_2_OnCueStateChanged) == 0x000010, "Wrong size on Cue_Summoner_Loop_10234101_2_OnCueStateChanged");
static_assert(offsetof(Cue_Summoner_Loop_10234101_2_OnCueStateChanged, SummonedComponent) == 0x000000, "Member 'Cue_Summoner_Loop_10234101_2_OnCueStateChanged::SummonedComponent' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10234101_2_OnCueStateChanged, OldState) == 0x000008, "Member 'Cue_Summoner_Loop_10234101_2_OnCueStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(Cue_Summoner_Loop_10234101_2_OnCueStateChanged, NewState) == 0x000009, "Member 'Cue_Summoner_Loop_10234101_2_OnCueStateChanged::NewState' has a wrong offset!");

// Function Hero_1023.SummonerAnimInstance_102351.OnEnterLoopState
// 0x02A8 (0x02A8 - 0x0000)
struct SummonerAnimInstance_102351_OnEnterLoopState final
{
public:
	struct FAnimNode_StateMachine                 Machine;                                           // 0x0000(0x02A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PrevStateIndex;                                    // 0x02A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextStateIndex;                                    // 0x02A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonerAnimInstance_102351_OnEnterLoopState) == 0x000008, "Wrong alignment on SummonerAnimInstance_102351_OnEnterLoopState");
static_assert(sizeof(SummonerAnimInstance_102351_OnEnterLoopState) == 0x0002A8, "Wrong size on SummonerAnimInstance_102351_OnEnterLoopState");
static_assert(offsetof(SummonerAnimInstance_102351_OnEnterLoopState, Machine) == 0x000000, "Member 'SummonerAnimInstance_102351_OnEnterLoopState::Machine' has a wrong offset!");
static_assert(offsetof(SummonerAnimInstance_102351_OnEnterLoopState, PrevStateIndex) == 0x0002A0, "Member 'SummonerAnimInstance_102351_OnEnterLoopState::PrevStateIndex' has a wrong offset!");
static_assert(offsetof(SummonerAnimInstance_102351_OnEnterLoopState, NextStateIndex) == 0x0002A4, "Member 'SummonerAnimInstance_102351_OnEnterLoopState::NextStateIndex' has a wrong offset!");

// Function Hero_1023.SummonerAnimInstance_102351.OnOwnerBeginFly
// 0x0008 (0x0008 - 0x0000)
struct SummonerAnimInstance_102351_OnOwnerBeginFly final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonerAnimInstance_102351_OnOwnerBeginFly) == 0x000008, "Wrong alignment on SummonerAnimInstance_102351_OnOwnerBeginFly");
static_assert(sizeof(SummonerAnimInstance_102351_OnOwnerBeginFly) == 0x000008, "Wrong size on SummonerAnimInstance_102351_OnOwnerBeginFly");
static_assert(offsetof(SummonerAnimInstance_102351_OnOwnerBeginFly, Target) == 0x000000, "Member 'SummonerAnimInstance_102351_OnOwnerBeginFly::Target' has a wrong offset!");

// Function Hero_1023.SummonerAnimInstance_102351.OnOwnerBeginLift
// 0x0008 (0x0008 - 0x0000)
struct SummonerAnimInstance_102351_OnOwnerBeginLift final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonerAnimInstance_102351_OnOwnerBeginLift) == 0x000008, "Wrong alignment on SummonerAnimInstance_102351_OnOwnerBeginLift");
static_assert(sizeof(SummonerAnimInstance_102351_OnOwnerBeginLift) == 0x000008, "Wrong size on SummonerAnimInstance_102351_OnOwnerBeginLift");
static_assert(offsetof(SummonerAnimInstance_102351_OnOwnerBeginLift, Target) == 0x000000, "Member 'SummonerAnimInstance_102351_OnOwnerBeginLift::Target' has a wrong offset!");

// Function Hero_1023.Ability_102361.BindDettachDelegates
// 0x0008 (0x0008 - 0x0000)
struct Ability_102361_BindDettachDelegates final
{
public:
	class AActor*                                 InGroot;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_BindDettachDelegates) == 0x000008, "Wrong alignment on Ability_102361_BindDettachDelegates");
static_assert(sizeof(Ability_102361_BindDettachDelegates) == 0x000008, "Wrong size on Ability_102361_BindDettachDelegates");
static_assert(offsetof(Ability_102361_BindDettachDelegates, InGroot) == 0x000000, "Member 'Ability_102361_BindDettachDelegates::InGroot' has a wrong offset!");

// Function Hero_1023.Ability_102361.MarkOnGroot
// 0x0001 (0x0001 - 0x0000)
struct Ability_102361_MarkOnGroot final
{
public:
	bool                                          bOnGroot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_MarkOnGroot) == 0x000001, "Wrong alignment on Ability_102361_MarkOnGroot");
static_assert(sizeof(Ability_102361_MarkOnGroot) == 0x000001, "Wrong size on Ability_102361_MarkOnGroot");
static_assert(offsetof(Ability_102361_MarkOnGroot, bOnGroot) == 0x000000, "Member 'Ability_102361_MarkOnGroot::bOnGroot' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnCoopAbilityTickStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Ability_102361_OnCoopAbilityTickStateChanged final
{
public:
	bool                                          bShouldAbilityTick;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_OnCoopAbilityTickStateChanged) == 0x000001, "Wrong alignment on Ability_102361_OnCoopAbilityTickStateChanged");
static_assert(sizeof(Ability_102361_OnCoopAbilityTickStateChanged) == 0x000001, "Wrong size on Ability_102361_OnCoopAbilityTickStateChanged");
static_assert(offsetof(Ability_102361_OnCoopAbilityTickStateChanged, bShouldAbilityTick) == 0x000000, "Member 'Ability_102361_OnCoopAbilityTickStateChanged::bShouldAbilityTick' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnGrootDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_102361_OnGrootDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_OnGrootDeath) == 0x000008, "Wrong alignment on Ability_102361_OnGrootDeath");
static_assert(sizeof(Ability_102361_OnGrootDeath) == 0x000028, "Wrong size on Ability_102361_OnGrootDeath");
static_assert(offsetof(Ability_102361_OnGrootDeath, InSourceAvatar) == 0x000000, "Member 'Ability_102361_OnGrootDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnGrootDeath, InTargetAvatar) == 0x000008, "Member 'Ability_102361_OnGrootDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnGrootDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_102361_OnGrootDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnGrootTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Ability_102361_OnGrootTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_102361_OnGrootTagUpdated) == 0x000004, "Wrong alignment on Ability_102361_OnGrootTagUpdated");
static_assert(sizeof(Ability_102361_OnGrootTagUpdated) == 0x000010, "Wrong size on Ability_102361_OnGrootTagUpdated");
static_assert(offsetof(Ability_102361_OnGrootTagUpdated, TagUpdated) == 0x000000, "Member 'Ability_102361_OnGrootTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnGrootTagUpdated, bTagExists) == 0x00000C, "Member 'Ability_102361_OnGrootTagUpdated::bTagExists' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnRaccoonDeath
// 0x0028 (0x0028 - 0x0000)
struct Ability_102361_OnRaccoonDeath final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_OnRaccoonDeath) == 0x000008, "Wrong alignment on Ability_102361_OnRaccoonDeath");
static_assert(sizeof(Ability_102361_OnRaccoonDeath) == 0x000028, "Wrong size on Ability_102361_OnRaccoonDeath");
static_assert(offsetof(Ability_102361_OnRaccoonDeath, InSourceAvatar) == 0x000000, "Member 'Ability_102361_OnRaccoonDeath::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnRaccoonDeath, InTargetAvatar) == 0x000008, "Member 'Ability_102361_OnRaccoonDeath::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnRaccoonDeath, ModifierParameterHandle) == 0x000010, "Member 'Ability_102361_OnRaccoonDeath::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnRaccoonTagUpdated
// 0x0010 (0x0010 - 0x0000)
struct Ability_102361_OnRaccoonTagUpdated final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExists;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_102361_OnRaccoonTagUpdated) == 0x000004, "Wrong alignment on Ability_102361_OnRaccoonTagUpdated");
static_assert(sizeof(Ability_102361_OnRaccoonTagUpdated) == 0x000010, "Wrong size on Ability_102361_OnRaccoonTagUpdated");
static_assert(offsetof(Ability_102361_OnRaccoonTagUpdated, TagUpdated) == 0x000000, "Member 'Ability_102361_OnRaccoonTagUpdated::TagUpdated' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnRaccoonTagUpdated, bTagExists) == 0x00000C, "Member 'Ability_102361_OnRaccoonTagUpdated::bTagExists' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnRaccoonTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct Ability_102361_OnRaccoonTakeDamage final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_OnRaccoonTakeDamage) == 0x000008, "Wrong alignment on Ability_102361_OnRaccoonTakeDamage");
static_assert(sizeof(Ability_102361_OnRaccoonTakeDamage) == 0x000028, "Wrong size on Ability_102361_OnRaccoonTakeDamage");
static_assert(offsetof(Ability_102361_OnRaccoonTakeDamage, InSourceAvatar) == 0x000000, "Member 'Ability_102361_OnRaccoonTakeDamage::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnRaccoonTakeDamage, InTargetAvatar) == 0x000008, "Member 'Ability_102361_OnRaccoonTakeDamage::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_102361_OnRaccoonTakeDamage, ModifierParameterHandle) == 0x000010, "Member 'Ability_102361_OnRaccoonTakeDamage::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1023.Ability_102361.OnRideCancel
// 0x0004 (0x0004 - 0x0000)
struct Ability_102361_OnRideCancel final
{
public:
	float                                         StateIntervalTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_OnRideCancel) == 0x000004, "Wrong alignment on Ability_102361_OnRideCancel");
static_assert(sizeof(Ability_102361_OnRideCancel) == 0x000004, "Wrong size on Ability_102361_OnRideCancel");
static_assert(offsetof(Ability_102361_OnRideCancel, StateIntervalTime) == 0x000000, "Member 'Ability_102361_OnRideCancel::StateIntervalTime' has a wrong offset!");

// Function Hero_1023.Ability_102361.ServerOnRideCancel
// 0x0004 (0x0004 - 0x0000)
struct Ability_102361_ServerOnRideCancel final
{
public:
	float                                         StateIntervalTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_ServerOnRideCancel) == 0x000004, "Wrong alignment on Ability_102361_ServerOnRideCancel");
static_assert(sizeof(Ability_102361_ServerOnRideCancel) == 0x000004, "Wrong size on Ability_102361_ServerOnRideCancel");
static_assert(offsetof(Ability_102361_ServerOnRideCancel, StateIntervalTime) == 0x000000, "Member 'Ability_102361_ServerOnRideCancel::StateIntervalTime' has a wrong offset!");

// Function Hero_1023.Ability_102361.SetRacoonState
// 0x0001 (0x0001 - 0x0000)
struct Ability_102361_SetRacoonState final
{
public:
	ERacoonGrootAbilityState                      InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_SetRacoonState) == 0x000001, "Wrong alignment on Ability_102361_SetRacoonState");
static_assert(sizeof(Ability_102361_SetRacoonState) == 0x000001, "Wrong size on Ability_102361_SetRacoonState");
static_assert(offsetof(Ability_102361_SetRacoonState, InState) == 0x000000, "Member 'Ability_102361_SetRacoonState::InState' has a wrong offset!");

// Function Hero_1023.Ability_102361.SetSpringArmIgnore
// 0x0018 (0x0018 - 0x0000)
struct Ability_102361_SetSpringArmIgnore final
{
public:
	class AGrootCharacter*                        InGroot;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnChar;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_102361_SetSpringArmIgnore) == 0x000008, "Wrong alignment on Ability_102361_SetSpringArmIgnore");
static_assert(sizeof(Ability_102361_SetSpringArmIgnore) == 0x000018, "Wrong size on Ability_102361_SetSpringArmIgnore");
static_assert(offsetof(Ability_102361_SetSpringArmIgnore, InGroot) == 0x000000, "Member 'Ability_102361_SetSpringArmIgnore::InGroot' has a wrong offset!");
static_assert(offsetof(Ability_102361_SetSpringArmIgnore, OwnChar) == 0x000008, "Member 'Ability_102361_SetSpringArmIgnore::OwnChar' has a wrong offset!");
static_assert(offsetof(Ability_102361_SetSpringArmIgnore, bIgnore) == 0x000010, "Member 'Ability_102361_SetSpringArmIgnore::bIgnore' has a wrong offset!");

// Function Hero_1023.Ability_102361.UnBindDettachDelegates
// 0x0008 (0x0008 - 0x0000)
struct Ability_102361_UnBindDettachDelegates final
{
public:
	class AActor*                                 InGroot;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102361_UnBindDettachDelegates) == 0x000008, "Wrong alignment on Ability_102361_UnBindDettachDelegates");
static_assert(sizeof(Ability_102361_UnBindDettachDelegates) == 0x000008, "Wrong size on Ability_102361_UnBindDettachDelegates");
static_assert(offsetof(Ability_102361_UnBindDettachDelegates, InGroot) == 0x000000, "Member 'Ability_102361_UnBindDettachDelegates::InGroot' has a wrong offset!");

// Function Hero_1023.Cue_Ability_Loop_10236101.OnRaccoonGrootCoopStateChange
// 0x0001 (0x0001 - 0x0000)
struct Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange final
{
public:
	ERacoonGrootAbilityState                      InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange) == 0x000001, "Wrong alignment on Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange");
static_assert(sizeof(Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange) == 0x000001, "Wrong size on Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange");
static_assert(offsetof(Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange, InState) == 0x000000, "Member 'Cue_Ability_Loop_10236101_OnRaccoonGrootCoopStateChange::InState' has a wrong offset!");

// Function Hero_1023.EpicMomentAction_1023.OnSummonerBegin
// 0x0060 (0x0060 - 0x0000)
struct EpicMomentAction_1023_OnSummonerBegin final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Summoned;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0018(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1023_OnSummonerBegin) == 0x000008, "Wrong alignment on EpicMomentAction_1023_OnSummonerBegin");
static_assert(sizeof(EpicMomentAction_1023_OnSummonerBegin) == 0x000060, "Wrong size on EpicMomentAction_1023_OnSummonerBegin");
static_assert(offsetof(EpicMomentAction_1023_OnSummonerBegin, SourceActor) == 0x000000, "Member 'EpicMomentAction_1023_OnSummonerBegin::SourceActor' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1023_OnSummonerBegin, SourceAbility) == 0x000008, "Member 'EpicMomentAction_1023_OnSummonerBegin::SourceAbility' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1023_OnSummonerBegin, Summoned) == 0x000010, "Member 'EpicMomentAction_1023_OnSummonerBegin::Summoned' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1023_OnSummonerBegin, GenerateInfo) == 0x000018, "Member 'EpicMomentAction_1023_OnSummonerBegin::GenerateInfo' has a wrong offset!");

// Function Hero_1023.RocketRaccoonCharacter.GetDefaultObject
// 0x0008 (0x0008 - 0x0000)
struct RocketRaccoonCharacter_GetDefaultObject final
{
public:
	class ARocketRaccoonCharacter*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonCharacter_GetDefaultObject) == 0x000008, "Wrong alignment on RocketRaccoonCharacter_GetDefaultObject");
static_assert(sizeof(RocketRaccoonCharacter_GetDefaultObject) == 0x000008, "Wrong size on RocketRaccoonCharacter_GetDefaultObject");
static_assert(offsetof(RocketRaccoonCharacter_GetDefaultObject, ReturnValue) == 0x000000, "Member 'RocketRaccoonCharacter_GetDefaultObject::ReturnValue' has a wrong offset!");

// Function Hero_1023.RocketRaccoonCharacter.GetRocketRocconMoveLogic
// 0x0008 (0x0008 - 0x0000)
struct RocketRaccoonCharacter_GetRocketRocconMoveLogic final
{
public:
	class URocketRaccoonMoveLogicBaseComponent*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonCharacter_GetRocketRocconMoveLogic) == 0x000008, "Wrong alignment on RocketRaccoonCharacter_GetRocketRocconMoveLogic");
static_assert(sizeof(RocketRaccoonCharacter_GetRocketRocconMoveLogic) == 0x000008, "Wrong size on RocketRaccoonCharacter_GetRocketRocconMoveLogic");
static_assert(offsetof(RocketRaccoonCharacter_GetRocketRocconMoveLogic, ReturnValue) == 0x000000, "Member 'RocketRaccoonCharacter_GetRocketRocconMoveLogic::ReturnValue' has a wrong offset!");

// Function Hero_1023.RocketRaccoonCharacter.GetRocketRocconMovement
// 0x0008 (0x0008 - 0x0000)
struct RocketRaccoonCharacter_GetRocketRocconMovement final
{
public:
	class URocketRaccoonMovementComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonCharacter_GetRocketRocconMovement) == 0x000008, "Wrong alignment on RocketRaccoonCharacter_GetRocketRocconMovement");
static_assert(sizeof(RocketRaccoonCharacter_GetRocketRocconMovement) == 0x000008, "Wrong size on RocketRaccoonCharacter_GetRocketRocconMovement");
static_assert(offsetof(RocketRaccoonCharacter_GetRocketRocconMovement, ReturnValue) == 0x000000, "Member 'RocketRaccoonCharacter_GetRocketRocconMovement::ReturnValue' has a wrong offset!");

// Function Hero_1023.RocketRaccoonCharacter.SetLimitControlRotation
// 0x0030 (0x0030 - 0x0000)
struct RocketRaccoonCharacter_SetLimitControlRotation final
{
public:
	struct FVector2D                              LimitPitch;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LimitYaw;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LimitRoll;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonCharacter_SetLimitControlRotation) == 0x000008, "Wrong alignment on RocketRaccoonCharacter_SetLimitControlRotation");
static_assert(sizeof(RocketRaccoonCharacter_SetLimitControlRotation) == 0x000030, "Wrong size on RocketRaccoonCharacter_SetLimitControlRotation");
static_assert(offsetof(RocketRaccoonCharacter_SetLimitControlRotation, LimitPitch) == 0x000000, "Member 'RocketRaccoonCharacter_SetLimitControlRotation::LimitPitch' has a wrong offset!");
static_assert(offsetof(RocketRaccoonCharacter_SetLimitControlRotation, LimitYaw) == 0x000010, "Member 'RocketRaccoonCharacter_SetLimitControlRotation::LimitYaw' has a wrong offset!");
static_assert(offsetof(RocketRaccoonCharacter_SetLimitControlRotation, LimitRoll) == 0x000020, "Member 'RocketRaccoonCharacter_SetLimitControlRotation::LimitRoll' has a wrong offset!");

// Function Hero_1023.RocketRaccoonMovementComponent.IsLeftWall
// 0x0001 (0x0001 - 0x0000)
struct RocketRaccoonMovementComponent_IsLeftWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonMovementComponent_IsLeftWall) == 0x000001, "Wrong alignment on RocketRaccoonMovementComponent_IsLeftWall");
static_assert(sizeof(RocketRaccoonMovementComponent_IsLeftWall) == 0x000001, "Wrong size on RocketRaccoonMovementComponent_IsLeftWall");
static_assert(offsetof(RocketRaccoonMovementComponent_IsLeftWall, ReturnValue) == 0x000000, "Member 'RocketRaccoonMovementComponent_IsLeftWall::ReturnValue' has a wrong offset!");

// Function Hero_1023.RocketRaccoonMovementComponent.IsWallRun
// 0x0001 (0x0001 - 0x0000)
struct RocketRaccoonMovementComponent_IsWallRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonMovementComponent_IsWallRun) == 0x000001, "Wrong alignment on RocketRaccoonMovementComponent_IsWallRun");
static_assert(sizeof(RocketRaccoonMovementComponent_IsWallRun) == 0x000001, "Wrong size on RocketRaccoonMovementComponent_IsWallRun");
static_assert(offsetof(RocketRaccoonMovementComponent_IsWallRun, ReturnValue) == 0x000000, "Member 'RocketRaccoonMovementComponent_IsWallRun::ReturnValue' has a wrong offset!");

// Function Hero_1023.RocketRaccoonMovementComponent.SetMeshRelativeLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation) == 0x000008, "Wrong alignment on RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation");
static_assert(sizeof(RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation) == 0x000030, "Wrong size on RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation");
static_assert(offsetof(RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation, RelativeLocation) == 0x000000, "Member 'RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation::RelativeLocation' has a wrong offset!");
static_assert(offsetof(RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation, RelativeRotation) == 0x000018, "Member 'RocketRaccoonMovementComponent_SetMeshRelativeLocationAndRotation::RelativeRotation' has a wrong offset!");

// Function Hero_1023.RocketRaccoonMovementComponent.WantCapsule
// 0x0001 (0x0001 - 0x0000)
struct RocketRaccoonMovementComponent_WantCapsule final
{
public:
	EWallRunCapsuleShape                          _CapsuleShrinkShape;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RocketRaccoonMovementComponent_WantCapsule) == 0x000001, "Wrong alignment on RocketRaccoonMovementComponent_WantCapsule");
static_assert(sizeof(RocketRaccoonMovementComponent_WantCapsule) == 0x000001, "Wrong size on RocketRaccoonMovementComponent_WantCapsule");
static_assert(offsetof(RocketRaccoonMovementComponent_WantCapsule, _CapsuleShrinkShape) == 0x000000, "Member 'RocketRaccoonMovementComponent_WantCapsule::_CapsuleShrinkShape' has a wrong offset!");

}

