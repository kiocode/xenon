#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyModuleCamp

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// PythonFunction PyModuleCamp.PyModuleCamp.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct PyModuleCamp_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_ReceiveEndPlay) == 0x000001, "Wrong alignment on PyModuleCamp_ReceiveEndPlay");
static_assert(sizeof(PyModuleCamp_ReceiveEndPlay) == 0x000001, "Wrong size on PyModuleCamp_ReceiveEndPlay");
static_assert(offsetof(PyModuleCamp_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'PyModuleCamp_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.ControlRangeCheck
// 0x0001 (0x0001 - 0x0000)
struct PyModuleCamp_ControlRangeCheck final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_ControlRangeCheck) == 0x000001, "Wrong alignment on PyModuleCamp_ControlRangeCheck");
static_assert(sizeof(PyModuleCamp_ControlRangeCheck) == 0x000001, "Wrong size on PyModuleCamp_ControlRangeCheck");
static_assert(offsetof(PyModuleCamp_ControlRangeCheck, Active) == 0x000000, "Member 'PyModuleCamp_ControlRangeCheck::Active' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.OnPlayerEnterCamp
// 0x0004 (0x0004 - 0x0000)
struct PyModuleCamp_OnPlayerEnterCamp final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_OnPlayerEnterCamp) == 0x000004, "Wrong alignment on PyModuleCamp_OnPlayerEnterCamp");
static_assert(sizeof(PyModuleCamp_OnPlayerEnterCamp) == 0x000004, "Wrong size on PyModuleCamp_OnPlayerEnterCamp");
static_assert(offsetof(PyModuleCamp_OnPlayerEnterCamp, UID) == 0x000000, "Member 'PyModuleCamp_OnPlayerEnterCamp::UID' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.OnPlayerExitCamp
// 0x0004 (0x0004 - 0x0000)
struct PyModuleCamp_OnPlayerExitCamp final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_OnPlayerExitCamp) == 0x000004, "Wrong alignment on PyModuleCamp_OnPlayerExitCamp");
static_assert(sizeof(PyModuleCamp_OnPlayerExitCamp) == 0x000004, "Wrong size on PyModuleCamp_OnPlayerExitCamp");
static_assert(offsetof(PyModuleCamp_OnPlayerExitCamp, UID) == 0x000000, "Member 'PyModuleCamp_OnPlayerExitCamp::UID' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.IsCampActivate
// 0x0001 (0x0001 - 0x0000)
struct PyModuleCamp_IsCampActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_IsCampActivate) == 0x000001, "Wrong alignment on PyModuleCamp_IsCampActivate");
static_assert(sizeof(PyModuleCamp_IsCampActivate) == 0x000001, "Wrong size on PyModuleCamp_IsCampActivate");
static_assert(offsetof(PyModuleCamp_IsCampActivate, ReturnValue) == 0x000000, "Member 'PyModuleCamp_IsCampActivate::ReturnValue' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.CampMoveFollowPlayer
// 0x000C (0x000C - 0x0000)
struct PyModuleCamp_CampMoveFollowPlayer final
{
public:
	float                                         DurationTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHidden;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerUID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_CampMoveFollowPlayer) == 0x000004, "Wrong alignment on PyModuleCamp_CampMoveFollowPlayer");
static_assert(sizeof(PyModuleCamp_CampMoveFollowPlayer) == 0x00000C, "Wrong size on PyModuleCamp_CampMoveFollowPlayer");
static_assert(offsetof(PyModuleCamp_CampMoveFollowPlayer, DurationTime) == 0x000000, "Member 'PyModuleCamp_CampMoveFollowPlayer::DurationTime' has a wrong offset!");
static_assert(offsetof(PyModuleCamp_CampMoveFollowPlayer, IsHidden) == 0x000004, "Member 'PyModuleCamp_CampMoveFollowPlayer::IsHidden' has a wrong offset!");
static_assert(offsetof(PyModuleCamp_CampMoveFollowPlayer, PlayerUID) == 0x000008, "Member 'PyModuleCamp_CampMoveFollowPlayer::PlayerUID' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.SetMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct PyModuleCamp_SetMoveSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_SetMoveSpeed) == 0x000004, "Wrong alignment on PyModuleCamp_SetMoveSpeed");
static_assert(sizeof(PyModuleCamp_SetMoveSpeed) == 0x000004, "Wrong size on PyModuleCamp_SetMoveSpeed");
static_assert(offsetof(PyModuleCamp_SetMoveSpeed, NewSpeed) == 0x000000, "Member 'PyModuleCamp_SetMoveSpeed::NewSpeed' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.FollowTraceMoveStart
// 0x0018 (0x0018 - 0x0000)
struct PyModuleCamp_FollowTraceMoveStart final
{
public:
	class FString                                 TraceName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         StartPercent;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_FollowTraceMoveStart) == 0x000008, "Wrong alignment on PyModuleCamp_FollowTraceMoveStart");
static_assert(sizeof(PyModuleCamp_FollowTraceMoveStart) == 0x000018, "Wrong size on PyModuleCamp_FollowTraceMoveStart");
static_assert(offsetof(PyModuleCamp_FollowTraceMoveStart, TraceName) == 0x000000, "Member 'PyModuleCamp_FollowTraceMoveStart::TraceName' has a wrong offset!");
static_assert(offsetof(PyModuleCamp_FollowTraceMoveStart, StartPercent) == 0x000010, "Member 'PyModuleCamp_FollowTraceMoveStart::StartPercent' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.GetCurLength
// 0x0004 (0x0004 - 0x0000)
struct PyModuleCamp_GetCurLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_GetCurLength) == 0x000004, "Wrong alignment on PyModuleCamp_GetCurLength");
static_assert(sizeof(PyModuleCamp_GetCurLength) == 0x000004, "Wrong size on PyModuleCamp_GetCurLength");
static_assert(offsetof(PyModuleCamp_GetCurLength, ReturnValue) == 0x000000, "Member 'PyModuleCamp_GetCurLength::ReturnValue' has a wrong offset!");

// PythonFunction PyModuleCamp.PyModuleCamp.ReachCheckPoint
// 0x0010 (0x0010 - 0x0000)
struct PyModuleCamp_ReachCheckPoint final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PyModuleCamp_ReachCheckPoint) == 0x000008, "Wrong alignment on PyModuleCamp_ReachCheckPoint");
static_assert(sizeof(PyModuleCamp_ReachCheckPoint) == 0x000010, "Wrong size on PyModuleCamp_ReachCheckPoint");
static_assert(offsetof(PyModuleCamp_ReachCheckPoint, EventName) == 0x000000, "Member 'PyModuleCamp_ReachCheckPoint::EventName' has a wrong offset!");

}

