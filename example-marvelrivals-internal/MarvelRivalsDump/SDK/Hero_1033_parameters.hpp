#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1033

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Engine_structs.hpp"
#include "Hero_1033_structs.hpp"


namespace SDK::Params
{

// Function Hero_1033.Ability_103303.OnWeaponSwitchedReplicated
// 0x02D0 (0x02D0 - 0x0000)
struct Ability_103303_OnWeaponSwitchedReplicated final
{
public:
	class AShootingWeapon*                        Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelEquipmentTable                  WeaponInfo;                                        // 0x0008(0x02C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x02C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ability_103303_OnWeaponSwitchedReplicated) == 0x000008, "Wrong alignment on Ability_103303_OnWeaponSwitchedReplicated");
static_assert(sizeof(Ability_103303_OnWeaponSwitchedReplicated) == 0x0002D0, "Wrong size on Ability_103303_OnWeaponSwitchedReplicated");
static_assert(offsetof(Ability_103303_OnWeaponSwitchedReplicated, Weapon) == 0x000000, "Member 'Ability_103303_OnWeaponSwitchedReplicated::Weapon' has a wrong offset!");
static_assert(offsetof(Ability_103303_OnWeaponSwitchedReplicated, WeaponInfo) == 0x000008, "Member 'Ability_103303_OnWeaponSwitchedReplicated::WeaponInfo' has a wrong offset!");
static_assert(offsetof(Ability_103303_OnWeaponSwitchedReplicated, bState) == 0x0002C8, "Member 'Ability_103303_OnWeaponSwitchedReplicated::bState' has a wrong offset!");

// Function Hero_1033.Ability_103303.SetNextAbilityID
// 0x0004 (0x0004 - 0x0000)
struct Ability_103303_SetNextAbilityID final
{
public:
	int32                                         AbilityID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103303_SetNextAbilityID) == 0x000004, "Wrong alignment on Ability_103303_SetNextAbilityID");
static_assert(sizeof(Ability_103303_SetNextAbilityID) == 0x000004, "Wrong size on Ability_103303_SetNextAbilityID");
static_assert(offsetof(Ability_103303_SetNextAbilityID, AbilityID) == 0x000000, "Member 'Ability_103303_SetNextAbilityID::AbilityID' has a wrong offset!");

// Function Hero_1033.Ability_103303.SwitchWeapon
// 0x0004 (0x0004 - 0x0000)
struct Ability_103303_SwitchWeapon final
{
public:
	int32                                         NewWeaponIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103303_SwitchWeapon) == 0x000004, "Wrong alignment on Ability_103303_SwitchWeapon");
static_assert(sizeof(Ability_103303_SwitchWeapon) == 0x000004, "Wrong size on Ability_103303_SwitchWeapon");
static_assert(offsetof(Ability_103303_SwitchWeapon, NewWeaponIndex) == 0x000000, "Member 'Ability_103303_SwitchWeapon::NewWeaponIndex' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.OnInputStateEnd
// 0x0004 (0x0004 - 0x0000)
struct MarvelAbility_AimDownSights_OnInputStateEnd final
{
public:
	float                                         StateIntervalTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_OnInputStateEnd) == 0x000004, "Wrong alignment on MarvelAbility_AimDownSights_OnInputStateEnd");
static_assert(sizeof(MarvelAbility_AimDownSights_OnInputStateEnd) == 0x000004, "Wrong size on MarvelAbility_AimDownSights_OnInputStateEnd");
static_assert(offsetof(MarvelAbility_AimDownSights_OnInputStateEnd, StateIntervalTime) == 0x000000, "Member 'MarvelAbility_AimDownSights_OnInputStateEnd::StateIntervalTime' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.SetAimingFOV
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbility_AimDownSights_SetAimingFOV final
{
public:
	bool                                          bInAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_SetAimingFOV) == 0x000001, "Wrong alignment on MarvelAbility_AimDownSights_SetAimingFOV");
static_assert(sizeof(MarvelAbility_AimDownSights_SetAimingFOV) == 0x000001, "Wrong size on MarvelAbility_AimDownSights_SetAimingFOV");
static_assert(offsetof(MarvelAbility_AimDownSights_SetAimingFOV, bInAiming) == 0x000000, "Member 'MarvelAbility_AimDownSights_SetAimingFOV::bInAiming' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.SetAimingState
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbility_AimDownSights_SetAimingState final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_SetAimingState) == 0x000001, "Wrong alignment on MarvelAbility_AimDownSights_SetAimingState");
static_assert(sizeof(MarvelAbility_AimDownSights_SetAimingState) == 0x000001, "Wrong size on MarvelAbility_AimDownSights_SetAimingState");
static_assert(offsetof(MarvelAbility_AimDownSights_SetAimingState, bNewState) == 0x000000, "Member 'MarvelAbility_AimDownSights_SetAimingState::bNewState' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.SetArmOffsetWithCorrection
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbility_AimDownSights_SetArmOffsetWithCorrection final
{
public:
	bool                                          bInAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_SetArmOffsetWithCorrection) == 0x000001, "Wrong alignment on MarvelAbility_AimDownSights_SetArmOffsetWithCorrection");
static_assert(sizeof(MarvelAbility_AimDownSights_SetArmOffsetWithCorrection) == 0x000001, "Wrong size on MarvelAbility_AimDownSights_SetArmOffsetWithCorrection");
static_assert(offsetof(MarvelAbility_AimDownSights_SetArmOffsetWithCorrection, bInAiming) == 0x000000, "Member 'MarvelAbility_AimDownSights_SetArmOffsetWithCorrection::bInAiming' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.SetDecelerateBuffActive
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbility_AimDownSights_SetDecelerateBuffActive final
{
public:
	bool                                          bInAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_SetDecelerateBuffActive) == 0x000001, "Wrong alignment on MarvelAbility_AimDownSights_SetDecelerateBuffActive");
static_assert(sizeof(MarvelAbility_AimDownSights_SetDecelerateBuffActive) == 0x000001, "Wrong size on MarvelAbility_AimDownSights_SetDecelerateBuffActive");
static_assert(offsetof(MarvelAbility_AimDownSights_SetDecelerateBuffActive, bInAiming) == 0x000000, "Member 'MarvelAbility_AimDownSights_SetDecelerateBuffActive::bInAiming' has a wrong offset!");

// Function Hero_1033.MarvelAbility_AimDownSights.SetFppMode
// 0x0001 (0x0001 - 0x0000)
struct MarvelAbility_AimDownSights_SetFppMode final
{
public:
	bool                                          bInAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarvelAbility_AimDownSights_SetFppMode) == 0x000001, "Wrong alignment on MarvelAbility_AimDownSights_SetFppMode");
static_assert(sizeof(MarvelAbility_AimDownSights_SetFppMode) == 0x000001, "Wrong size on MarvelAbility_AimDownSights_SetFppMode");
static_assert(offsetof(MarvelAbility_AimDownSights_SetFppMode, bInAiming) == 0x000000, "Member 'MarvelAbility_AimDownSights_SetFppMode::bInAiming' has a wrong offset!");

// Function Hero_1033.BlackWidowSniperGun.OnOwnerCharacterRespawned
// 0x0740 (0x0740 - 0x0000)
struct BlackWidowSniperGun_OnOwnerCharacterRespawned final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRebornParam                  RebornParam;                                       // 0x0010(0x0730)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowSniperGun_OnOwnerCharacterRespawned) == 0x000010, "Wrong alignment on BlackWidowSniperGun_OnOwnerCharacterRespawned");
static_assert(sizeof(BlackWidowSniperGun_OnOwnerCharacterRespawned) == 0x000740, "Wrong size on BlackWidowSniperGun_OnOwnerCharacterRespawned");
static_assert(offsetof(BlackWidowSniperGun_OnOwnerCharacterRespawned, TargetActor) == 0x000000, "Member 'BlackWidowSniperGun_OnOwnerCharacterRespawned::TargetActor' has a wrong offset!");
static_assert(offsetof(BlackWidowSniperGun_OnOwnerCharacterRespawned, RebornParam) == 0x000010, "Member 'BlackWidowSniperGun_OnOwnerCharacterRespawned::RebornParam' has a wrong offset!");

// Function Hero_1033.BlackWidowSniperGun.SetBulletLoaded
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowSniperGun_SetBulletLoaded final
{
public:
	bool                                          bLoaded;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowSniperGun_SetBulletLoaded) == 0x000001, "Wrong alignment on BlackWidowSniperGun_SetBulletLoaded");
static_assert(sizeof(BlackWidowSniperGun_SetBulletLoaded) == 0x000001, "Wrong size on BlackWidowSniperGun_SetBulletLoaded");
static_assert(offsetof(BlackWidowSniperGun_SetBulletLoaded, bLoaded) == 0x000000, "Member 'BlackWidowSniperGun_SetBulletLoaded::bLoaded' has a wrong offset!");

// Function Hero_1033.BlackWidowSniperGun.GetPullBulletDuration
// 0x0004 (0x0004 - 0x0000)
struct BlackWidowSniperGun_GetPullBulletDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowSniperGun_GetPullBulletDuration) == 0x000004, "Wrong alignment on BlackWidowSniperGun_GetPullBulletDuration");
static_assert(sizeof(BlackWidowSniperGun_GetPullBulletDuration) == 0x000004, "Wrong size on BlackWidowSniperGun_GetPullBulletDuration");
static_assert(offsetof(BlackWidowSniperGun_GetPullBulletDuration, ReturnValue) == 0x000000, "Member 'BlackWidowSniperGun_GetPullBulletDuration::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowSniperGun.IsBulletLoaded
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowSniperGun_IsBulletLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowSniperGun_IsBulletLoaded) == 0x000001, "Wrong alignment on BlackWidowSniperGun_IsBulletLoaded");
static_assert(sizeof(BlackWidowSniperGun_IsBulletLoaded) == 0x000001, "Wrong size on BlackWidowSniperGun_IsBulletLoaded");
static_assert(offsetof(BlackWidowSniperGun_IsBulletLoaded, ReturnValue) == 0x000000, "Member 'BlackWidowSniperGun_IsBulletLoaded::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowSniperGun.ShouldPassPullBulletSafeCheck
// 0x0008 (0x0008 - 0x0000)
struct BlackWidowSniperGun_ShouldPassPullBulletSafeCheck final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlackWidowSniperGun_ShouldPassPullBulletSafeCheck) == 0x000004, "Wrong alignment on BlackWidowSniperGun_ShouldPassPullBulletSafeCheck");
static_assert(sizeof(BlackWidowSniperGun_ShouldPassPullBulletSafeCheck) == 0x000008, "Wrong size on BlackWidowSniperGun_ShouldPassPullBulletSafeCheck");
static_assert(offsetof(BlackWidowSniperGun_ShouldPassPullBulletSafeCheck, Tolerance) == 0x000000, "Member 'BlackWidowSniperGun_ShouldPassPullBulletSafeCheck::Tolerance' has a wrong offset!");
static_assert(offsetof(BlackWidowSniperGun_ShouldPassPullBulletSafeCheck, ReturnValue) == 0x000004, "Member 'BlackWidowSniperGun_ShouldPassPullBulletSafeCheck::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103331.SaveHitActors
// 0x0010 (0x0010 - 0x0000)
struct Ability_103331_SaveHitActors final
{
public:
	TArray<struct FHitResult>                     InHitResults;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103331_SaveHitActors) == 0x000008, "Wrong alignment on Ability_103331_SaveHitActors");
static_assert(sizeof(Ability_103331_SaveHitActors) == 0x000010, "Wrong size on Ability_103331_SaveHitActors");
static_assert(offsetof(Ability_103331_SaveHitActors, InHitResults) == 0x000000, "Member 'Ability_103331_SaveHitActors::InHitResults' has a wrong offset!");

// Function Hero_1033.Ability_103331.HasValidHitActors
// 0x0001 (0x0001 - 0x0000)
struct Ability_103331_HasValidHitActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103331_HasValidHitActors) == 0x000001, "Wrong alignment on Ability_103331_HasValidHitActors");
static_assert(sizeof(Ability_103331_HasValidHitActors) == 0x000001, "Wrong size on Ability_103331_HasValidHitActors");
static_assert(offsetof(Ability_103331_HasValidHitActors, ReturnValue) == 0x000000, "Member 'Ability_103331_HasValidHitActors::ReturnValue' has a wrong offset!");

// Function Hero_1033.CueWeaponLoop_103301.GetWeaponMesh1P
// 0x0008 (0x0008 - 0x0000)
struct CueWeaponLoop_103301_GetWeaponMesh1P final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CueWeaponLoop_103301_GetWeaponMesh1P) == 0x000008, "Wrong alignment on CueWeaponLoop_103301_GetWeaponMesh1P");
static_assert(sizeof(CueWeaponLoop_103301_GetWeaponMesh1P) == 0x000008, "Wrong size on CueWeaponLoop_103301_GetWeaponMesh1P");
static_assert(offsetof(CueWeaponLoop_103301_GetWeaponMesh1P, ReturnValue) == 0x000000, "Member 'CueWeaponLoop_103301_GetWeaponMesh1P::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103332.FilterValidHitResult
// 0x0010 (0x0010 - 0x0000)
struct Ability_103332_FilterValidHitResult final
{
public:
	TArray<struct FHitResult>                     InOutHitResults;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103332_FilterValidHitResult) == 0x000008, "Wrong alignment on Ability_103332_FilterValidHitResult");
static_assert(sizeof(Ability_103332_FilterValidHitResult) == 0x000010, "Wrong size on Ability_103332_FilterValidHitResult");
static_assert(offsetof(Ability_103332_FilterValidHitResult, InOutHitResults) == 0x000000, "Member 'Ability_103332_FilterValidHitResult::InOutHitResults' has a wrong offset!");

// Function Hero_1033.Ability_103332.SetSelectedActor
// 0x0058 (0x0058 - 0x0000)
struct Ability_103332_SetSelectedActor final
{
public:
	class AActor*                                 InSelectedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        InPortalSegments;                                  // 0x0008(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103332_SetSelectedActor) == 0x000008, "Wrong alignment on Ability_103332_SetSelectedActor");
static_assert(sizeof(Ability_103332_SetSelectedActor) == 0x000058, "Wrong size on Ability_103332_SetSelectedActor");
static_assert(offsetof(Ability_103332_SetSelectedActor, InSelectedActor) == 0x000000, "Member 'Ability_103332_SetSelectedActor::InSelectedActor' has a wrong offset!");
static_assert(offsetof(Ability_103332_SetSelectedActor, InPortalSegments) == 0x000008, "Member 'Ability_103332_SetSelectedActor::InPortalSegments' has a wrong offset!");

// Function Hero_1033.Ability_103332.GetSelectedActor
// 0x0008 (0x0008 - 0x0000)
struct Ability_103332_GetSelectedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103332_GetSelectedActor) == 0x000008, "Wrong alignment on Ability_103332_GetSelectedActor");
static_assert(sizeof(Ability_103332_GetSelectedActor) == 0x000008, "Wrong size on Ability_103332_GetSelectedActor");
static_assert(offsetof(Ability_103332_GetSelectedActor, ReturnValue) == 0x000000, "Member 'Ability_103332_GetSelectedActor::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103332.GetValidActors
// 0x0010 (0x0010 - 0x0000)
struct Ability_103332_GetValidActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103332_GetValidActors) == 0x000008, "Wrong alignment on Ability_103332_GetValidActors");
static_assert(sizeof(Ability_103332_GetValidActors) == 0x000010, "Wrong size on Ability_103332_GetValidActors");
static_assert(offsetof(Ability_103332_GetValidActors, ReturnValue) == 0x000000, "Member 'Ability_103332_GetValidActors::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103333.OnRep_SelectedActor
// 0x0008 (0x0008 - 0x0000)
struct Ability_103333_OnRep_SelectedActor final
{
public:
	class AActor*                                 OldActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103333_OnRep_SelectedActor) == 0x000008, "Wrong alignment on Ability_103333_OnRep_SelectedActor");
static_assert(sizeof(Ability_103333_OnRep_SelectedActor) == 0x000008, "Wrong size on Ability_103333_OnRep_SelectedActor");
static_assert(offsetof(Ability_103333_OnRep_SelectedActor, OldActor) == 0x000000, "Member 'Ability_103333_OnRep_SelectedActor::OldActor' has a wrong offset!");

// DelegateFunction Hero_1033.Ability_103333.SelectedActorChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Ability_103333_SelectedActorChangedDelegate__DelegateSignature final
{
public:
	class AActor*                                 OldActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103333_SelectedActorChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on Ability_103333_SelectedActorChangedDelegate__DelegateSignature");
static_assert(sizeof(Ability_103333_SelectedActorChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on Ability_103333_SelectedActorChangedDelegate__DelegateSignature");
static_assert(offsetof(Ability_103333_SelectedActorChangedDelegate__DelegateSignature, OldActor) == 0x000000, "Member 'Ability_103333_SelectedActorChangedDelegate__DelegateSignature::OldActor' has a wrong offset!");
static_assert(offsetof(Ability_103333_SelectedActorChangedDelegate__DelegateSignature, NewActor) == 0x000008, "Member 'Ability_103333_SelectedActorChangedDelegate__DelegateSignature::NewActor' has a wrong offset!");

// Function Hero_1033.Ability_103333.GetDashTimelineIndex
// 0x0004 (0x0004 - 0x0000)
struct Ability_103333_GetDashTimelineIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103333_GetDashTimelineIndex) == 0x000004, "Wrong alignment on Ability_103333_GetDashTimelineIndex");
static_assert(sizeof(Ability_103333_GetDashTimelineIndex) == 0x000004, "Wrong size on Ability_103333_GetDashTimelineIndex");
static_assert(offsetof(Ability_103333_GetDashTimelineIndex, ReturnValue) == 0x000000, "Member 'Ability_103333_GetDashTimelineIndex::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103333.GetKickTimelineIndex
// 0x0004 (0x0004 - 0x0000)
struct Ability_103333_GetKickTimelineIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103333_GetKickTimelineIndex) == 0x000004, "Wrong alignment on Ability_103333_GetKickTimelineIndex");
static_assert(sizeof(Ability_103333_GetKickTimelineIndex) == 0x000004, "Wrong size on Ability_103333_GetKickTimelineIndex");
static_assert(offsetof(Ability_103333_GetKickTimelineIndex, ReturnValue) == 0x000000, "Member 'Ability_103333_GetKickTimelineIndex::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103333.GetPortalSegments
// 0x0050 (0x0050 - 0x0000)
struct Ability_103333_GetPortalSegments final
{
public:
	struct FPortalSegments                        ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103333_GetPortalSegments) == 0x000008, "Wrong alignment on Ability_103333_GetPortalSegments");
static_assert(sizeof(Ability_103333_GetPortalSegments) == 0x000050, "Wrong size on Ability_103333_GetPortalSegments");
static_assert(offsetof(Ability_103333_GetPortalSegments, ReturnValue) == 0x000000, "Member 'Ability_103333_GetPortalSegments::ReturnValue' has a wrong offset!");

// Function Hero_1033.EpicMomentAction_1033.OnProjectileBegin
// 0x0060 (0x0060 - 0x0000)
struct EpicMomentAction_1033_OnProjectileBegin final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Projectile;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0018(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1033_OnProjectileBegin) == 0x000008, "Wrong alignment on EpicMomentAction_1033_OnProjectileBegin");
static_assert(sizeof(EpicMomentAction_1033_OnProjectileBegin) == 0x000060, "Wrong size on EpicMomentAction_1033_OnProjectileBegin");
static_assert(offsetof(EpicMomentAction_1033_OnProjectileBegin, SourceActor) == 0x000000, "Member 'EpicMomentAction_1033_OnProjectileBegin::SourceActor' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnProjectileBegin, SourceAbility) == 0x000008, "Member 'EpicMomentAction_1033_OnProjectileBegin::SourceAbility' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnProjectileBegin, Projectile) == 0x000010, "Member 'EpicMomentAction_1033_OnProjectileBegin::Projectile' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnProjectileBegin, GenerateInfo) == 0x000018, "Member 'EpicMomentAction_1033_OnProjectileBegin::GenerateInfo' has a wrong offset!");

// Function Hero_1033.EpicMomentAction_1033.OnSummonerBegin
// 0x0060 (0x0060 - 0x0000)
struct EpicMomentAction_1033_OnSummonerBegin final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Summoned;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0018(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMomentAction_1033_OnSummonerBegin) == 0x000008, "Wrong alignment on EpicMomentAction_1033_OnSummonerBegin");
static_assert(sizeof(EpicMomentAction_1033_OnSummonerBegin) == 0x000060, "Wrong size on EpicMomentAction_1033_OnSummonerBegin");
static_assert(offsetof(EpicMomentAction_1033_OnSummonerBegin, SourceActor) == 0x000000, "Member 'EpicMomentAction_1033_OnSummonerBegin::SourceActor' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnSummonerBegin, SourceAbility) == 0x000008, "Member 'EpicMomentAction_1033_OnSummonerBegin::SourceAbility' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnSummonerBegin, Summoned) == 0x000010, "Member 'EpicMomentAction_1033_OnSummonerBegin::Summoned' has a wrong offset!");
static_assert(offsetof(EpicMomentAction_1033_OnSummonerBegin, GenerateInfo) == 0x000018, "Member 'EpicMomentAction_1033_OnSummonerBegin::GenerateInfo' has a wrong offset!");

// Function Hero_1033.Cue_Ability_Loop_10333301.HandleReceiveTargetCharacter
// 0x0010 (0x0010 - 0x0000)
struct Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter final
{
public:
	class AActor*                                 OldActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter");
static_assert(sizeof(Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter) == 0x000010, "Wrong size on Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter");
static_assert(offsetof(Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter, OldActor) == 0x000000, "Member 'Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter::OldActor' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter, NewActor) == 0x000008, "Member 'Cue_Ability_Loop_10333301_HandleReceiveTargetCharacter::NewActor' has a wrong offset!");

// Function Hero_1033.Ability_103341.GetAbilityInputKeyPressed
// 0x0001 (0x0001 - 0x0000)
struct Ability_103341_GetAbilityInputKeyPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103341_GetAbilityInputKeyPressed) == 0x000001, "Wrong alignment on Ability_103341_GetAbilityInputKeyPressed");
static_assert(sizeof(Ability_103341_GetAbilityInputKeyPressed) == 0x000001, "Wrong size on Ability_103341_GetAbilityInputKeyPressed");
static_assert(offsetof(Ability_103341_GetAbilityInputKeyPressed, ReturnValue) == 0x000000, "Member 'Ability_103341_GetAbilityInputKeyPressed::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103341.IsMovingForward
// 0x0001 (0x0001 - 0x0000)
struct Ability_103341_IsMovingForward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103341_IsMovingForward) == 0x000001, "Wrong alignment on Ability_103341_IsMovingForward");
static_assert(sizeof(Ability_103341_IsMovingForward) == 0x000001, "Wrong size on Ability_103341_IsMovingForward");
static_assert(offsetof(Ability_103341_IsMovingForward, ReturnValue) == 0x000000, "Member 'Ability_103341_IsMovingForward::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103341.OnStopMovingForward
// 0x0001 (0x0001 - 0x0000)
struct Ability_103341_OnStopMovingForward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103341_OnStopMovingForward) == 0x000001, "Wrong alignment on Ability_103341_OnStopMovingForward");
static_assert(sizeof(Ability_103341_OnStopMovingForward) == 0x000001, "Wrong size on Ability_103341_OnStopMovingForward");
static_assert(offsetof(Ability_103341_OnStopMovingForward, ReturnValue) == 0x000000, "Member 'Ability_103341_OnStopMovingForward::ReturnValue' has a wrong offset!");

// Function Hero_1033.Ability_103352.GetChargeStrength
// 0x0004 (0x0004 - 0x0000)
struct Ability_103352_GetChargeStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_103352_GetChargeStrength) == 0x000004, "Wrong alignment on Ability_103352_GetChargeStrength");
static_assert(sizeof(Ability_103352_GetChargeStrength) == 0x000004, "Wrong size on Ability_103352_GetChargeStrength");
static_assert(offsetof(Ability_103352_GetChargeStrength, ReturnValue) == 0x000000, "Member 'Ability_103352_GetChargeStrength::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowWeaponAnimInstance.SetState_103333
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowWeaponAnimInstance_SetState_103333 final
{
public:
	EBlackWidow_103333_WeaponState                InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowWeaponAnimInstance_SetState_103333) == 0x000001, "Wrong alignment on BlackWidowWeaponAnimInstance_SetState_103333");
static_assert(sizeof(BlackWidowWeaponAnimInstance_SetState_103333) == 0x000001, "Wrong size on BlackWidowWeaponAnimInstance_SetState_103333");
static_assert(offsetof(BlackWidowWeaponAnimInstance_SetState_103333, InState) == 0x000000, "Member 'BlackWidowWeaponAnimInstance_SetState_103333::InState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.IsViewingSelfInFirstPerspective
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_IsViewingSelfInFirstPerspective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_IsViewingSelfInFirstPerspective) == 0x000001, "Wrong alignment on BlackWidowCharacter_IsViewingSelfInFirstPerspective");
static_assert(sizeof(BlackWidowCharacter_IsViewingSelfInFirstPerspective) == 0x000001, "Wrong size on BlackWidowCharacter_IsViewingSelfInFirstPerspective");
static_assert(offsetof(BlackWidowCharacter_IsViewingSelfInFirstPerspective, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_IsViewingSelfInFirstPerspective::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.OnRep_ElectronicState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_OnRep_ElectronicState final
{
public:
	EBlackWidowElectronicState                    OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_OnRep_ElectronicState) == 0x000001, "Wrong alignment on BlackWidowCharacter_OnRep_ElectronicState");
static_assert(sizeof(BlackWidowCharacter_OnRep_ElectronicState) == 0x000001, "Wrong size on BlackWidowCharacter_OnRep_ElectronicState");
static_assert(offsetof(BlackWidowCharacter_OnRep_ElectronicState, OldState) == 0x000000, "Member 'BlackWidowCharacter_OnRep_ElectronicState::OldState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetAimFiringState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetAimFiringState final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetAimFiringState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetAimFiringState");
static_assert(sizeof(BlackWidowCharacter_SetAimFiringState) == 0x000001, "Wrong size on BlackWidowCharacter_SetAimFiringState");
static_assert(offsetof(BlackWidowCharacter_SetAimFiringState, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetAimFiringState::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetAimingState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetAimingState final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetAimingState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetAimingState");
static_assert(sizeof(BlackWidowCharacter_SetAimingState) == 0x000001, "Wrong size on BlackWidowCharacter_SetAimingState");
static_assert(offsetof(BlackWidowCharacter_SetAimingState, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetAimingState::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetAimReloadingState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetAimReloadingState final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetAimReloadingState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetAimReloadingState");
static_assert(sizeof(BlackWidowCharacter_SetAimReloadingState) == 0x000001, "Wrong size on BlackWidowCharacter_SetAimReloadingState");
static_assert(offsetof(BlackWidowCharacter_SetAimReloadingState, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetAimReloadingState::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetBlackWidowRunState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetBlackWidowRunState final
{
public:
	EBlackWidow_RunState                          InRunState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetBlackWidowRunState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetBlackWidowRunState");
static_assert(sizeof(BlackWidowCharacter_SetBlackWidowRunState) == 0x000001, "Wrong size on BlackWidowCharacter_SetBlackWidowRunState");
static_assert(offsetof(BlackWidowCharacter_SetBlackWidowRunState, InRunState) == 0x000000, "Member 'BlackWidowCharacter_SetBlackWidowRunState::InRunState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetElectronicState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetElectronicState final
{
public:
	EBlackWidowElectronicState                    ElecState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetElectronicState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetElectronicState");
static_assert(sizeof(BlackWidowCharacter_SetElectronicState) == 0x000001, "Wrong size on BlackWidowCharacter_SetElectronicState");
static_assert(offsetof(BlackWidowCharacter_SetElectronicState, ElecState) == 0x000000, "Member 'BlackWidowCharacter_SetElectronicState::ElecState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetElectronicStrength
// 0x0004 (0x0004 - 0x0000)
struct BlackWidowCharacter_SetElectronicStrength final
{
public:
	float                                         InStrength;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetElectronicStrength) == 0x000004, "Wrong alignment on BlackWidowCharacter_SetElectronicStrength");
static_assert(sizeof(BlackWidowCharacter_SetElectronicStrength) == 0x000004, "Wrong size on BlackWidowCharacter_SetElectronicStrength");
static_assert(offsetof(BlackWidowCharacter_SetElectronicStrength, InStrength) == 0x000000, "Member 'BlackWidowCharacter_SetElectronicStrength::InStrength' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetFiringingState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetFiringingState final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetFiringingState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetFiringingState");
static_assert(sizeof(BlackWidowCharacter_SetFiringingState) == 0x000001, "Wrong size on BlackWidowCharacter_SetFiringingState");
static_assert(offsetof(BlackWidowCharacter_SetFiringingState, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetFiringingState::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetOpenMirrorShootReady
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetOpenMirrorShootReady final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetOpenMirrorShootReady) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetOpenMirrorShootReady");
static_assert(sizeof(BlackWidowCharacter_SetOpenMirrorShootReady) == 0x000001, "Wrong size on BlackWidowCharacter_SetOpenMirrorShootReady");
static_assert(offsetof(BlackWidowCharacter_SetOpenMirrorShootReady, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetOpenMirrorShootReady::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetUltimateAimingState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetUltimateAimingState final
{
public:
	bool                                          bSetState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetUltimateAimingState) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetUltimateAimingState");
static_assert(sizeof(BlackWidowCharacter_SetUltimateAimingState) == 0x000001, "Wrong size on BlackWidowCharacter_SetUltimateAimingState");
static_assert(offsetof(BlackWidowCharacter_SetUltimateAimingState, bSetState) == 0x000000, "Member 'BlackWidowCharacter_SetUltimateAimingState::bSetState' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.SetUseEnhancedJump
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_SetUseEnhancedJump final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_SetUseEnhancedJump) == 0x000001, "Wrong alignment on BlackWidowCharacter_SetUseEnhancedJump");
static_assert(sizeof(BlackWidowCharacter_SetUseEnhancedJump) == 0x000001, "Wrong size on BlackWidowCharacter_SetUseEnhancedJump");
static_assert(offsetof(BlackWidowCharacter_SetUseEnhancedJump, bUse) == 0x000000, "Member 'BlackWidowCharacter_SetUseEnhancedJump::bUse' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.GetCurrentWeaponMode
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_GetCurrentWeaponMode final
{
public:
	EBlackWidowWeaponMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_GetCurrentWeaponMode) == 0x000001, "Wrong alignment on BlackWidowCharacter_GetCurrentWeaponMode");
static_assert(sizeof(BlackWidowCharacter_GetCurrentWeaponMode) == 0x000001, "Wrong size on BlackWidowCharacter_GetCurrentWeaponMode");
static_assert(offsetof(BlackWidowCharacter_GetCurrentWeaponMode, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_GetCurrentWeaponMode::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.GetElectronicState
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_GetElectronicState final
{
public:
	EBlackWidowElectronicState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_GetElectronicState) == 0x000001, "Wrong alignment on BlackWidowCharacter_GetElectronicState");
static_assert(sizeof(BlackWidowCharacter_GetElectronicState) == 0x000001, "Wrong size on BlackWidowCharacter_GetElectronicState");
static_assert(offsetof(BlackWidowCharacter_GetElectronicState, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_GetElectronicState::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.GetElectronicStrength
// 0x0004 (0x0004 - 0x0000)
struct BlackWidowCharacter_GetElectronicStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_GetElectronicStrength) == 0x000004, "Wrong alignment on BlackWidowCharacter_GetElectronicStrength");
static_assert(sizeof(BlackWidowCharacter_GetElectronicStrength) == 0x000004, "Wrong size on BlackWidowCharacter_GetElectronicStrength");
static_assert(offsetof(BlackWidowCharacter_GetElectronicStrength, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_GetElectronicStrength::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.GetOpenMirrorShootReady
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_GetOpenMirrorShootReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_GetOpenMirrorShootReady) == 0x000001, "Wrong alignment on BlackWidowCharacter_GetOpenMirrorShootReady");
static_assert(sizeof(BlackWidowCharacter_GetOpenMirrorShootReady) == 0x000001, "Wrong size on BlackWidowCharacter_GetOpenMirrorShootReady");
static_assert(offsetof(BlackWidowCharacter_GetOpenMirrorShootReady, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_GetOpenMirrorShootReady::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.IsSwitchingToSniperRifle
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_IsSwitchingToSniperRifle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_IsSwitchingToSniperRifle) == 0x000001, "Wrong alignment on BlackWidowCharacter_IsSwitchingToSniperRifle");
static_assert(sizeof(BlackWidowCharacter_IsSwitchingToSniperRifle) == 0x000001, "Wrong size on BlackWidowCharacter_IsSwitchingToSniperRifle");
static_assert(offsetof(BlackWidowCharacter_IsSwitchingToSniperRifle, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_IsSwitchingToSniperRifle::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.IsSwitchingToStick
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_IsSwitchingToStick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_IsSwitchingToStick) == 0x000001, "Wrong alignment on BlackWidowCharacter_IsSwitchingToStick");
static_assert(sizeof(BlackWidowCharacter_IsSwitchingToStick) == 0x000001, "Wrong size on BlackWidowCharacter_IsSwitchingToStick");
static_assert(offsetof(BlackWidowCharacter_IsSwitchingToStick, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_IsSwitchingToStick::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowCharacter.IsUsingSniperRifle
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowCharacter_IsUsingSniperRifle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowCharacter_IsUsingSniperRifle) == 0x000001, "Wrong alignment on BlackWidowCharacter_IsUsingSniperRifle");
static_assert(sizeof(BlackWidowCharacter_IsUsingSniperRifle) == 0x000001, "Wrong size on BlackWidowCharacter_IsUsingSniperRifle");
static_assert(offsetof(BlackWidowCharacter_IsUsingSniperRifle, ReturnValue) == 0x000000, "Member 'BlackWidowCharacter_IsUsingSniperRifle::ReturnValue' has a wrong offset!");

// Function Hero_1033.BlackWidowStickMeshComponent.SetHiddenWhile_103333
// 0x0001 (0x0001 - 0x0000)
struct BlackWidowStickMeshComponent_SetHiddenWhile_103333 final
{
public:
	bool                                          bInHiddenWhile_103333;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlackWidowStickMeshComponent_SetHiddenWhile_103333) == 0x000001, "Wrong alignment on BlackWidowStickMeshComponent_SetHiddenWhile_103333");
static_assert(sizeof(BlackWidowStickMeshComponent_SetHiddenWhile_103333) == 0x000001, "Wrong size on BlackWidowStickMeshComponent_SetHiddenWhile_103333");
static_assert(offsetof(BlackWidowStickMeshComponent_SetHiddenWhile_103333, bInHiddenWhile_103333) == 0x000000, "Member 'BlackWidowStickMeshComponent_SetHiddenWhile_103333::bInHiddenWhile_103333' has a wrong offset!");

}

