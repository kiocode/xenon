#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarvelControlAnalyzer

#include "Basic.hpp"


namespace SDK::Params
{

// Function MarvelControlAnalyzer.ControlAnalyzerSubsystem.ChangeTimerInterval
// 0x0004 (0x0004 - 0x0000)
struct ControlAnalyzerSubsystem_ChangeTimerInterval final
{
public:
	float                                         NewInterval;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlAnalyzerSubsystem_ChangeTimerInterval) == 0x000004, "Wrong alignment on ControlAnalyzerSubsystem_ChangeTimerInterval");
static_assert(sizeof(ControlAnalyzerSubsystem_ChangeTimerInterval) == 0x000004, "Wrong size on ControlAnalyzerSubsystem_ChangeTimerInterval");
static_assert(offsetof(ControlAnalyzerSubsystem_ChangeTimerInterval, NewInterval) == 0x000000, "Member 'ControlAnalyzerSubsystem_ChangeTimerInterval::NewInterval' has a wrong offset!");

// Function MarvelControlAnalyzer.ControlAnalyzerSubsystem.ResetScoreReportConfig
// 0x0014 (0x0014 - 0x0000)
struct ControlAnalyzerSubsystem_ResetScoreReportConfig final
{
public:
	float                                         NewLSThreshold;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewRSThreshold;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewLTThreshold;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewRTThreshold;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewInterval;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlAnalyzerSubsystem_ResetScoreReportConfig) == 0x000004, "Wrong alignment on ControlAnalyzerSubsystem_ResetScoreReportConfig");
static_assert(sizeof(ControlAnalyzerSubsystem_ResetScoreReportConfig) == 0x000014, "Wrong size on ControlAnalyzerSubsystem_ResetScoreReportConfig");
static_assert(offsetof(ControlAnalyzerSubsystem_ResetScoreReportConfig, NewLSThreshold) == 0x000000, "Member 'ControlAnalyzerSubsystem_ResetScoreReportConfig::NewLSThreshold' has a wrong offset!");
static_assert(offsetof(ControlAnalyzerSubsystem_ResetScoreReportConfig, NewRSThreshold) == 0x000004, "Member 'ControlAnalyzerSubsystem_ResetScoreReportConfig::NewRSThreshold' has a wrong offset!");
static_assert(offsetof(ControlAnalyzerSubsystem_ResetScoreReportConfig, NewLTThreshold) == 0x000008, "Member 'ControlAnalyzerSubsystem_ResetScoreReportConfig::NewLTThreshold' has a wrong offset!");
static_assert(offsetof(ControlAnalyzerSubsystem_ResetScoreReportConfig, NewRTThreshold) == 0x00000C, "Member 'ControlAnalyzerSubsystem_ResetScoreReportConfig::NewRTThreshold' has a wrong offset!");
static_assert(offsetof(ControlAnalyzerSubsystem_ResetScoreReportConfig, NewInterval) == 0x000010, "Member 'ControlAnalyzerSubsystem_ResetScoreReportConfig::NewInterval' has a wrong offset!");

// Function MarvelControlAnalyzer.ControlAnalyzerSubsystem.SendWarning
// 0x0010 (0x0010 - 0x0000)
struct ControlAnalyzerSubsystem_SendWarning final
{
public:
	class FString                                 WarningStr;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlAnalyzerSubsystem_SendWarning) == 0x000008, "Wrong alignment on ControlAnalyzerSubsystem_SendWarning");
static_assert(sizeof(ControlAnalyzerSubsystem_SendWarning) == 0x000010, "Wrong size on ControlAnalyzerSubsystem_SendWarning");
static_assert(offsetof(ControlAnalyzerSubsystem_SendWarning, WarningStr) == 0x000000, "Member 'ControlAnalyzerSubsystem_SendWarning::WarningStr' has a wrong offset!");

// Function MarvelControlAnalyzer.ControlAnalyzerSubsystem.SetDeviceInfo
// 0x0008 (0x0008 - 0x0000)
struct ControlAnalyzerSubsystem_SetDeviceInfo final
{
public:
	int32                                         VendorId_0;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductId_0;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlAnalyzerSubsystem_SetDeviceInfo) == 0x000004, "Wrong alignment on ControlAnalyzerSubsystem_SetDeviceInfo");
static_assert(sizeof(ControlAnalyzerSubsystem_SetDeviceInfo) == 0x000008, "Wrong size on ControlAnalyzerSubsystem_SetDeviceInfo");
static_assert(offsetof(ControlAnalyzerSubsystem_SetDeviceInfo, VendorId_0) == 0x000000, "Member 'ControlAnalyzerSubsystem_SetDeviceInfo::VendorId_0' has a wrong offset!");
static_assert(offsetof(ControlAnalyzerSubsystem_SetDeviceInfo, ProductId_0) == 0x000004, "Member 'ControlAnalyzerSubsystem_SetDeviceInfo::ProductId_0' has a wrong offset!");

}

