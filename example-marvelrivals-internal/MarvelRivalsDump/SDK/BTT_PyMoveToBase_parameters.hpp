#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_PyMoveToBase

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_PyMoveToBase_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_PyMoveToBase_ReceiveExecuteAI");
//static_assert(sizeof(BTT_PyMoveToBase_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_PyMoveToBase_ReceiveExecuteAI");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_PyMoveToBase_ReceiveExecuteAI::OwnerController' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_PyMoveToBase_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_PyMoveToBase_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTT_PyMoveToBase_ReceiveAbortAI");
//static_assert(sizeof(BTT_PyMoveToBase_ReceiveAbortAI) == 0x000010, "Wrong size on BTT_PyMoveToBase_ReceiveAbortAI");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTT_PyMoveToBase_ReceiveAbortAI::OwnerController' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTT_PyMoveToBase_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.ReceiveOnTaskFinished
// 0x0018 (0x0018 - 0x0000)
struct BTT_PyMoveToBase_ReceiveOnTaskFinished final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EBTNodeResult                                 Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_ReceiveOnTaskFinished) == 0x000008, "Wrong alignment on BTT_PyMoveToBase_ReceiveOnTaskFinished");
//static_assert(sizeof(BTT_PyMoveToBase_ReceiveOnTaskFinished) == 0x000018, "Wrong size on BTT_PyMoveToBase_ReceiveOnTaskFinished");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveOnTaskFinished, OwnerController) == 0x000000, "Member 'BTT_PyMoveToBase_ReceiveOnTaskFinished::OwnerController' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveOnTaskFinished, ControlledPawn) == 0x000008, "Member 'BTT_PyMoveToBase_ReceiveOnTaskFinished::ControlledPawn' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_ReceiveOnTaskFinished, Result) == 0x000010, "Member 'BTT_PyMoveToBase_ReceiveOnTaskFinished::Result' has a wrong offset!");

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.GetMoveTargetActor
// 0x0018 (0x0018 - 0x0000)
struct BTT_PyMoveToBase_GetMoveTargetActor final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_GetMoveTargetActor) == 0x000008, "Wrong alignment on BTT_PyMoveToBase_GetMoveTargetActor");
//static_assert(sizeof(BTT_PyMoveToBase_GetMoveTargetActor) == 0x000018, "Wrong size on BTT_PyMoveToBase_GetMoveTargetActor");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetActor, OwnerController) == 0x000000, "Member 'BTT_PyMoveToBase_GetMoveTargetActor::OwnerController' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetActor, ControlledPawn) == 0x000008, "Member 'BTT_PyMoveToBase_GetMoveTargetActor::ControlledPawn' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetActor, ReturnValue) == 0x000010, "Member 'BTT_PyMoveToBase_GetMoveTargetActor::ReturnValue' has a wrong offset!");

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.GetMoveTargetLocation
// 0x0028 (0x0028 - 0x0000)
struct BTT_PyMoveToBase_GetMoveTargetLocation final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_GetMoveTargetLocation) == 0x000008, "Wrong alignment on BTT_PyMoveToBase_GetMoveTargetLocation");
//static_assert(sizeof(BTT_PyMoveToBase_GetMoveTargetLocation) == 0x000028, "Wrong size on BTT_PyMoveToBase_GetMoveTargetLocation");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetLocation, OwnerController) == 0x000000, "Member 'BTT_PyMoveToBase_GetMoveTargetLocation::OwnerController' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetLocation, ControlledPawn) == 0x000008, "Member 'BTT_PyMoveToBase_GetMoveTargetLocation::ControlledPawn' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_GetMoveTargetLocation, ReturnValue) == 0x000010, "Member 'BTT_PyMoveToBase_GetMoveTargetLocation::ReturnValue' has a wrong offset!");

// PythonFunction BTT_PyMoveToBase.BTT_PyMoveToBase.OnMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct BTT_PyMoveToBase_OnMoveCompleted final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
//static_assert(alignof(BTT_PyMoveToBase_OnMoveCompleted) == 0x000004, "Wrong alignment on BTT_PyMoveToBase_OnMoveCompleted");
//static_assert(sizeof(BTT_PyMoveToBase_OnMoveCompleted) == 0x000008, "Wrong size on BTT_PyMoveToBase_OnMoveCompleted");
//static_assert(offsetof(BTT_PyMoveToBase_OnMoveCompleted, RequestID) == 0x000000, "Member 'BTT_PyMoveToBase_OnMoveCompleted::RequestID' has a wrong offset!");
//static_assert(offsetof(BTT_PyMoveToBase_OnMoveCompleted, Result) == 0x000004, "Member 'BTT_PyMoveToBase_OnMoveCompleted::Result' has a wrong offset!");

}

