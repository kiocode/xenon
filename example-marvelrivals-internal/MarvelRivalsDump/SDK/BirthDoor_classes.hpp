#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BirthDoor

#include "Basic.hpp"

#include "PyBirthDoor_classes.hpp"
#include "Engine_structs.hpp"
#include "MarvelLevel_structs.hpp"
#include "DeclarativeUnreal_structs.hpp"
#include "Marvel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BirthDoor.BirthDoor_C
// 0x0128 (0x05E8 - 0x04C0)
class ABirthDoor_C final : public APyBirthDoor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere_MultiSound_Healing_08;                      // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_07;                      // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_06;                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_06;                      // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_05;                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_05;                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_02;                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_04;                        // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_03;                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_04;                      // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_02;                      // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_03;                      // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Healing_01;                      // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMultiPositionComponent*                MultiSound_Healing;                                // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_MultiSound_Block_01;                        // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMultiPositionComponent*                MultiSound_Block;                                  // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pattern;                                           // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Around;                                            // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMoveMaskControllerComponent*           MoveMaskController;                                // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BlockCollision;                                    // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EDoorType                                     DoorType;                                          // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDoorAnimCurve>                 DoorAnimData;                                      // 0x0578(0x0010)(Edit, BlueprintVisible)
	class UMaterialInstance*                      CurePattern;                                       // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BlockPattern;                                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPlayerEnterBaseDispatcher;                       // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnPlayerExitBaseDispatcher;                        // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDeclarationHolder                     Holder1;                                           // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDeclarationHolder                     Holder2;                                           // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstance*                      AllyPattern;                                       // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      EnemyPattern;                                      // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void S_Payload_Reach(const class FString& EventName, const double EventArgs);
	void OnPlayerExitBaseDispatcher__DelegateSignature(class ABirthDoor_C* BirthDoor, class AMarvelBaseCharacter* InPlayer);
	void OnPlayerEnterBaseDispatcher__DelegateSignature(class ABirthDoor_C* BirthDoor, class AMarvelBaseCharacter* InPlayer);
	void ExecuteUbergraph_BirthDoor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BirthDoor_C">();
	}
	static class ABirthDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABirthDoor_C>();
	}
};
//static_assert(alignof(ABirthDoor_C) == 0x000008, "Wrong alignment on ABirthDoor_C");
//static_assert(sizeof(ABirthDoor_C) == 0x0005E8, "Wrong size on ABirthDoor_C");
//static_assert(offsetof(ABirthDoor_C, UberGraphFrame) == 0x0004C0, "Member 'ABirthDoor_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_08) == 0x0004C8, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_08' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_07) == 0x0004D0, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_07' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_06) == 0x0004D8, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_06' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_06) == 0x0004E0, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_06' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_05) == 0x0004E8, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_05' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_05) == 0x0004F0, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_05' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_02) == 0x0004F8, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_02' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_04) == 0x000500, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_04' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_03) == 0x000508, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_03' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_04) == 0x000510, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_04' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_02) == 0x000518, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_02' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_03) == 0x000520, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_03' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Healing_01) == 0x000528, "Member 'ABirthDoor_C::Sphere_MultiSound_Healing_01' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, MultiSound_Healing) == 0x000530, "Member 'ABirthDoor_C::MultiSound_Healing' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Sphere_MultiSound_Block_01) == 0x000538, "Member 'ABirthDoor_C::Sphere_MultiSound_Block_01' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, MultiSound_Block) == 0x000540, "Member 'ABirthDoor_C::MultiSound_Block' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Pattern) == 0x000548, "Member 'ABirthDoor_C::Pattern' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Around) == 0x000550, "Member 'ABirthDoor_C::Around' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, MoveMaskController) == 0x000558, "Member 'ABirthDoor_C::MoveMaskController' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, BlockCollision) == 0x000560, "Member 'ABirthDoor_C::BlockCollision' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, DefaultSceneRoot) == 0x000568, "Member 'ABirthDoor_C::DefaultSceneRoot' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, DoorType) == 0x000570, "Member 'ABirthDoor_C::DoorType' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, DoorAnimData) == 0x000578, "Member 'ABirthDoor_C::DoorAnimData' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, CurePattern) == 0x000588, "Member 'ABirthDoor_C::CurePattern' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, BlockPattern) == 0x000590, "Member 'ABirthDoor_C::BlockPattern' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, OnPlayerEnterBaseDispatcher) == 0x000598, "Member 'ABirthDoor_C::OnPlayerEnterBaseDispatcher' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, OnPlayerExitBaseDispatcher) == 0x0005A8, "Member 'ABirthDoor_C::OnPlayerExitBaseDispatcher' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Holder1) == 0x0005B8, "Member 'ABirthDoor_C::Holder1' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, Holder2) == 0x0005C8, "Member 'ABirthDoor_C::Holder2' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, AllyPattern) == 0x0005D8, "Member 'ABirthDoor_C::AllyPattern' has a wrong offset!");
//static_assert(offsetof(ABirthDoor_C, EnemyPattern) == 0x0005E0, "Member 'ABirthDoor_C::EnemyPattern' has a wrong offset!");

}

