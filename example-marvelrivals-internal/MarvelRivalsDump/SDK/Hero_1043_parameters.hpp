#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1043

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hero_1043_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Hero_1043.Ability_104321.OnUltimateDashFinish
// 0x0001 (0x0001 - 0x0000)
struct Ability_104321_OnUltimateDashFinish final
{
public:
	EDashStopReason                               Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104321_OnUltimateDashFinish) == 0x000001, "Wrong alignment on Ability_104321_OnUltimateDashFinish");
static_assert(sizeof(Ability_104321_OnUltimateDashFinish) == 0x000001, "Wrong size on Ability_104321_OnUltimateDashFinish");
static_assert(offsetof(Ability_104321_OnUltimateDashFinish, Reason) == 0x000000, "Member 'Ability_104321_OnUltimateDashFinish::Reason' has a wrong offset!");

// Function Hero_1043.Ability_104321.ServerSetCharacterInput
// 0x0018 (0x0018 - 0x0000)
struct Ability_104321_ServerSetCharacterInput final
{
public:
	struct FVector                                CharInput;                                         // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104321_ServerSetCharacterInput) == 0x000008, "Wrong alignment on Ability_104321_ServerSetCharacterInput");
static_assert(sizeof(Ability_104321_ServerSetCharacterInput) == 0x000018, "Wrong size on Ability_104321_ServerSetCharacterInput");
static_assert(offsetof(Ability_104321_ServerSetCharacterInput, CharInput) == 0x000000, "Member 'Ability_104321_ServerSetCharacterInput::CharInput' has a wrong offset!");

// Function Hero_1043.Cue_AbilityLoop_10432101.CreateCustomMaterial
// 0x0058 (0x0058 - 0x0000)
struct Cue_AbilityLoop_10432101_CreateCustomMaterial final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        CurrentMaterialDict;                               // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_10432101_CreateCustomMaterial) == 0x000008, "Wrong alignment on Cue_AbilityLoop_10432101_CreateCustomMaterial");
static_assert(sizeof(Cue_AbilityLoop_10432101_CreateCustomMaterial) == 0x000058, "Wrong size on Cue_AbilityLoop_10432101_CreateCustomMaterial");
static_assert(offsetof(Cue_AbilityLoop_10432101_CreateCustomMaterial, MeshComponent) == 0x000000, "Member 'Cue_AbilityLoop_10432101_CreateCustomMaterial::MeshComponent' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_10432101_CreateCustomMaterial, CurrentMaterialDict) == 0x000008, "Member 'Cue_AbilityLoop_10432101_CreateCustomMaterial::CurrentMaterialDict' has a wrong offset!");

// Function Hero_1043.Cue_AbilityLoop_10432101.OnTagChanged
// 0x0010 (0x0010 - 0x0000)
struct Cue_AbilityLoop_10432101_OnTagChanged final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_AbilityLoop_10432101_OnTagChanged) == 0x000004, "Wrong alignment on Cue_AbilityLoop_10432101_OnTagChanged");
static_assert(sizeof(Cue_AbilityLoop_10432101_OnTagChanged) == 0x000010, "Wrong size on Cue_AbilityLoop_10432101_OnTagChanged");
static_assert(offsetof(Cue_AbilityLoop_10432101_OnTagChanged, TagUpdated) == 0x000000, "Member 'Cue_AbilityLoop_10432101_OnTagChanged::TagUpdated' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_10432101_OnTagChanged, TagExists) == 0x00000C, "Member 'Cue_AbilityLoop_10432101_OnTagChanged::TagExists' has a wrong offset!");

// Function Hero_1043.Cue_AbilityLoop_10432101.SetMeshPara
// 0x0010 (0x0010 - 0x0000)
struct Cue_AbilityLoop_10432101_SetMeshPara final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_AbilityLoop_10432101_SetMeshPara) == 0x000008, "Wrong alignment on Cue_AbilityLoop_10432101_SetMeshPara");
static_assert(sizeof(Cue_AbilityLoop_10432101_SetMeshPara) == 0x000010, "Wrong size on Cue_AbilityLoop_10432101_SetMeshPara");
static_assert(offsetof(Cue_AbilityLoop_10432101_SetMeshPara, MeshComponent) == 0x000000, "Member 'Cue_AbilityLoop_10432101_SetMeshPara::MeshComponent' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_10432101_SetMeshPara, SkeletalMesh) == 0x000008, "Member 'Cue_AbilityLoop_10432101_SetMeshPara::SkeletalMesh' has a wrong offset!");

// Function Hero_1043.Cue_AbilityLoop_10432101.ShowShadowMesh
// 0x0020 (0x0020 - 0x0000)
struct Cue_AbilityLoop_10432101_ShowShadowMesh final
{
public:
	struct FShadowMesh                            ShadowMeshComponent;                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_AbilityLoop_10432101_ShowShadowMesh) == 0x000008, "Wrong alignment on Cue_AbilityLoop_10432101_ShowShadowMesh");
static_assert(sizeof(Cue_AbilityLoop_10432101_ShowShadowMesh) == 0x000020, "Wrong size on Cue_AbilityLoop_10432101_ShowShadowMesh");
static_assert(offsetof(Cue_AbilityLoop_10432101_ShowShadowMesh, ShadowMeshComponent) == 0x000000, "Member 'Cue_AbilityLoop_10432101_ShowShadowMesh::ShadowMeshComponent' has a wrong offset!");
static_assert(offsetof(Cue_AbilityLoop_10432101_ShowShadowMesh, Index_0) == 0x000018, "Member 'Cue_AbilityLoop_10432101_ShowShadowMesh::Index_0' has a wrong offset!");

// Function Hero_1043.Ability_104331.OnMoveBlock
// 0x0170 (0x0170 - 0x0000)
struct Ability_104331_OnMoveBlock final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104331_OnMoveBlock) == 0x000008, "Wrong alignment on Ability_104331_OnMoveBlock");
static_assert(sizeof(Ability_104331_OnMoveBlock) == 0x000170, "Wrong size on Ability_104331_OnMoveBlock");
static_assert(offsetof(Ability_104331_OnMoveBlock, Impact) == 0x000000, "Member 'Ability_104331_OnMoveBlock::Impact' has a wrong offset!");

// Function Hero_1043.Ability_104342.GetTarget
// 0x01F0 (0x01F0 - 0x0000)
struct Ability_104342_GetTarget final
{
public:
	struct FSelectTaskResult                      ReturnValue;                                       // 0x0000(0x01F0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104342_GetTarget) == 0x000010, "Wrong alignment on Ability_104342_GetTarget");
static_assert(sizeof(Ability_104342_GetTarget) == 0x0001F0, "Wrong size on Ability_104342_GetTarget");
static_assert(offsetof(Ability_104342_GetTarget, ReturnValue) == 0x000000, "Member 'Ability_104342_GetTarget::ReturnValue' has a wrong offset!");

// Function Hero_1043.Ability_104342.OnKillOtherCall
// 0x0028 (0x0028 - 0x0000)
struct Ability_104342_OnKillOtherCall final
{
public:
	class AActor*                                 InSourceAvatar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetAvatar;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_104342_OnKillOtherCall) == 0x000008, "Wrong alignment on Ability_104342_OnKillOtherCall");
static_assert(sizeof(Ability_104342_OnKillOtherCall) == 0x000028, "Wrong size on Ability_104342_OnKillOtherCall");
static_assert(offsetof(Ability_104342_OnKillOtherCall, InSourceAvatar) == 0x000000, "Member 'Ability_104342_OnKillOtherCall::InSourceAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104342_OnKillOtherCall, InTargetAvatar) == 0x000008, "Member 'Ability_104342_OnKillOtherCall::InTargetAvatar' has a wrong offset!");
static_assert(offsetof(Ability_104342_OnKillOtherCall, ModifierParameterHandle) == 0x000010, "Member 'Ability_104342_OnKillOtherCall::ModifierParameterHandle' has a wrong offset!");

// Function Hero_1043.Cue_Ability_Loop_10434101.OnTagChanged
// 0x0010 (0x0010 - 0x0000)
struct Cue_Ability_Loop_10434101_OnTagChanged final
{
public:
	struct FGameplayTag                           TagUpdated;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TagExists;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10434101_OnTagChanged) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10434101_OnTagChanged");
static_assert(sizeof(Cue_Ability_Loop_10434101_OnTagChanged) == 0x000010, "Wrong size on Cue_Ability_Loop_10434101_OnTagChanged");
static_assert(offsetof(Cue_Ability_Loop_10434101_OnTagChanged, TagUpdated) == 0x000000, "Member 'Cue_Ability_Loop_10434101_OnTagChanged::TagUpdated' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10434101_OnTagChanged, TagExists) == 0x00000C, "Member 'Cue_Ability_Loop_10434101_OnTagChanged::TagExists' has a wrong offset!");

// Function Hero_1043.Cue_Ability_Loop_10434101.SetMaterialChangeTimer
// 0x0020 (0x0020 - 0x0000)
struct Cue_Ability_Loop_10434101_SetMaterialChangeTimer final
{
public:
	float                                         ChangeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MaterialSlotNameArray;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NewState;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10434101_SetMaterialChangeTimer) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10434101_SetMaterialChangeTimer");
static_assert(sizeof(Cue_Ability_Loop_10434101_SetMaterialChangeTimer) == 0x000020, "Wrong size on Cue_Ability_Loop_10434101_SetMaterialChangeTimer");
static_assert(offsetof(Cue_Ability_Loop_10434101_SetMaterialChangeTimer, ChangeTime) == 0x000000, "Member 'Cue_Ability_Loop_10434101_SetMaterialChangeTimer::ChangeTime' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10434101_SetMaterialChangeTimer, MaterialSlotNameArray) == 0x000008, "Member 'Cue_Ability_Loop_10434101_SetMaterialChangeTimer::MaterialSlotNameArray' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10434101_SetMaterialChangeTimer, NewState) == 0x000018, "Member 'Cue_Ability_Loop_10434101_SetMaterialChangeTimer::NewState' has a wrong offset!");

// Function Hero_1043.Cue_Ability_Loop_10434101.SetMeshMaterials
// 0x0018 (0x0018 - 0x0000)
struct Cue_Ability_Loop_10434101_SetMeshMaterials final
{
public:
	TArray<class FName>                           MaterialSlotNameArray;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NewState;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10434101_SetMeshMaterials) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10434101_SetMeshMaterials");
static_assert(sizeof(Cue_Ability_Loop_10434101_SetMeshMaterials) == 0x000018, "Wrong size on Cue_Ability_Loop_10434101_SetMeshMaterials");
static_assert(offsetof(Cue_Ability_Loop_10434101_SetMeshMaterials, MaterialSlotNameArray) == 0x000000, "Member 'Cue_Ability_Loop_10434101_SetMeshMaterials::MaterialSlotNameArray' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10434101_SetMeshMaterials, NewState) == 0x000010, "Member 'Cue_Ability_Loop_10434101_SetMeshMaterials::NewState' has a wrong offset!");

// Function Hero_1043.Ability_Glide.OnMoveBlock
// 0x0170 (0x0170 - 0x0000)
struct Ability_Glide_OnMoveBlock final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_Glide_OnMoveBlock) == 0x000008, "Wrong alignment on Ability_Glide_OnMoveBlock");
static_assert(sizeof(Ability_Glide_OnMoveBlock) == 0x000170, "Wrong size on Ability_Glide_OnMoveBlock");
static_assert(offsetof(Ability_Glide_OnMoveBlock, Impact) == 0x000000, "Member 'Ability_Glide_OnMoveBlock::Impact' has a wrong offset!");

// Function Hero_1043.Ability_Glide.OnMovementInputs
// 0x0008 (0x0008 - 0x0000)
struct Ability_Glide_OnMovementInputs final
{
public:
	uint8                                         InMovementInputs;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_Glide_OnMovementInputs) == 0x000004, "Wrong alignment on Ability_Glide_OnMovementInputs");
static_assert(sizeof(Ability_Glide_OnMovementInputs) == 0x000008, "Wrong size on Ability_Glide_OnMovementInputs");
static_assert(offsetof(Ability_Glide_OnMovementInputs, InMovementInputs) == 0x000000, "Member 'Ability_Glide_OnMovementInputs::InMovementInputs' has a wrong offset!");
static_assert(offsetof(Ability_Glide_OnMovementInputs, DeltaTime) == 0x000004, "Member 'Ability_Glide_OnMovementInputs::DeltaTime' has a wrong offset!");

// Function Hero_1043.Ability_Glide.OnMoveRight
// 0x0004 (0x0004 - 0x0000)
struct Ability_Glide_OnMoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_Glide_OnMoveRight) == 0x000004, "Wrong alignment on Ability_Glide_OnMoveRight");
static_assert(sizeof(Ability_Glide_OnMoveRight) == 0x000004, "Wrong size on Ability_Glide_OnMoveRight");
static_assert(offsetof(Ability_Glide_OnMoveRight, Val) == 0x000000, "Member 'Ability_Glide_OnMoveRight::Val' has a wrong offset!");

// Function Hero_1043.Ability_Glide.GetAimLocation
// 0x0018 (0x0018 - 0x0000)
struct Ability_Glide_GetAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_Glide_GetAimLocation) == 0x000008, "Wrong alignment on Ability_Glide_GetAimLocation");
static_assert(sizeof(Ability_Glide_GetAimLocation) == 0x000018, "Wrong size on Ability_Glide_GetAimLocation");
static_assert(offsetof(Ability_Glide_GetAimLocation, ReturnValue) == 0x000000, "Member 'Ability_Glide_GetAimLocation::ReturnValue' has a wrong offset!");

// Function Hero_1043.StarlordAnimInstance.GetStartVelocity
// 0x0018 (0x0018 - 0x0000)
struct StarlordAnimInstance_GetStartVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordAnimInstance_GetStartVelocity) == 0x000008, "Wrong alignment on StarlordAnimInstance_GetStartVelocity");
static_assert(sizeof(StarlordAnimInstance_GetStartVelocity) == 0x000018, "Wrong size on StarlordAnimInstance_GetStartVelocity");
static_assert(offsetof(StarlordAnimInstance_GetStartVelocity, ReturnValue) == 0x000000, "Member 'StarlordAnimInstance_GetStartVelocity::ReturnValue' has a wrong offset!");

// Function Hero_1043.StarlordAnimInstance.UpdateDoubleJumpingFlag
// 0x0001 (0x0001 - 0x0000)
struct StarlordAnimInstance_UpdateDoubleJumpingFlag final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordAnimInstance_UpdateDoubleJumpingFlag) == 0x000001, "Wrong alignment on StarlordAnimInstance_UpdateDoubleJumpingFlag");
static_assert(sizeof(StarlordAnimInstance_UpdateDoubleJumpingFlag) == 0x000001, "Wrong size on StarlordAnimInstance_UpdateDoubleJumpingFlag");
static_assert(offsetof(StarlordAnimInstance_UpdateDoubleJumpingFlag, NewState) == 0x000000, "Member 'StarlordAnimInstance_UpdateDoubleJumpingFlag::NewState' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.AssignDeathCueTag
// 0x000C (0x000C - 0x0000)
struct StarlordCharacter_AssignDeathCueTag final
{
public:
	struct FGameplayTag                           InDeathCue;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_AssignDeathCueTag) == 0x000004, "Wrong alignment on StarlordCharacter_AssignDeathCueTag");
static_assert(sizeof(StarlordCharacter_AssignDeathCueTag) == 0x00000C, "Wrong size on StarlordCharacter_AssignDeathCueTag");
static_assert(offsetof(StarlordCharacter_AssignDeathCueTag, InDeathCue) == 0x000000, "Member 'StarlordCharacter_AssignDeathCueTag::InDeathCue' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.GetCharacterInput
// 0x0018 (0x0018 - 0x0000)
struct StarlordCharacter_GetCharacterInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_GetCharacterInput) == 0x000008, "Wrong alignment on StarlordCharacter_GetCharacterInput");
static_assert(sizeof(StarlordCharacter_GetCharacterInput) == 0x000018, "Wrong size on StarlordCharacter_GetCharacterInput");
static_assert(offsetof(StarlordCharacter_GetCharacterInput, ReturnValue) == 0x000000, "Member 'StarlordCharacter_GetCharacterInput::ReturnValue' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.SetCharacterInput
// 0x0018 (0x0018 - 0x0000)
struct StarlordCharacter_SetCharacterInput final
{
public:
	struct FVector                                CharInput;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_SetCharacterInput) == 0x000008, "Wrong alignment on StarlordCharacter_SetCharacterInput");
static_assert(sizeof(StarlordCharacter_SetCharacterInput) == 0x000018, "Wrong size on StarlordCharacter_SetCharacterInput");
static_assert(offsetof(StarlordCharacter_SetCharacterInput, CharInput) == 0x000000, "Member 'StarlordCharacter_SetCharacterInput::CharInput' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.SetDoubleJump
// 0x0002 (0x0002 - 0x0000)
struct StarlordCharacter_SetDoubleJump final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedBroadCast;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_SetDoubleJump) == 0x000001, "Wrong alignment on StarlordCharacter_SetDoubleJump");
static_assert(sizeof(StarlordCharacter_SetDoubleJump) == 0x000002, "Wrong size on StarlordCharacter_SetDoubleJump");
static_assert(offsetof(StarlordCharacter_SetDoubleJump, bNewState) == 0x000000, "Member 'StarlordCharacter_SetDoubleJump::bNewState' has a wrong offset!");
static_assert(offsetof(StarlordCharacter_SetDoubleJump, bNeedBroadCast) == 0x000001, "Member 'StarlordCharacter_SetDoubleJump::bNeedBroadCast' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.SetFly
// 0x0001 (0x0001 - 0x0000)
struct StarlordCharacter_SetFly final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_SetFly) == 0x000001, "Wrong alignment on StarlordCharacter_SetFly");
static_assert(sizeof(StarlordCharacter_SetFly) == 0x000001, "Wrong size on StarlordCharacter_SetFly");
static_assert(offsetof(StarlordCharacter_SetFly, NewState) == 0x000000, "Member 'StarlordCharacter_SetFly::NewState' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.SetStarFlyState
// 0x0001 (0x0001 - 0x0000)
struct StarlordCharacter_SetStarFlyState final
{
public:
	EStarFlyState                                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_SetStarFlyState) == 0x000001, "Wrong alignment on StarlordCharacter_SetStarFlyState");
static_assert(sizeof(StarlordCharacter_SetStarFlyState) == 0x000001, "Wrong size on StarlordCharacter_SetStarFlyState");
static_assert(offsetof(StarlordCharacter_SetStarFlyState, NewState) == 0x000000, "Member 'StarlordCharacter_SetStarFlyState::NewState' has a wrong offset!");

// Function Hero_1043.StarlordCharacter.SetStartFly
// 0x0001 (0x0001 - 0x0000)
struct StarlordCharacter_SetStartFly final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarlordCharacter_SetStartFly) == 0x000001, "Wrong alignment on StarlordCharacter_SetStartFly");
static_assert(sizeof(StarlordCharacter_SetStartFly) == 0x000001, "Wrong size on StarlordCharacter_SetStartFly");
static_assert(offsetof(StarlordCharacter_SetStartFly, NewState) == 0x000000, "Member 'StarlordCharacter_SetStartFly::NewState' has a wrong offset!");

}

