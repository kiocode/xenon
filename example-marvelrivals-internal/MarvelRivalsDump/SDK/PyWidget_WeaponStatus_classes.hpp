#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyWidget_WeaponStatus

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass PyWidget_WeaponStatus.PyWidget_WeaponAmmo
// 0x0010 (0x05B8 - 0x05A8)
class UPyWidget_WeaponAmmo : public UMarvelUserWidget
{
public:
	bool                                          IsInfinite;                                        // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAmmo;                                          // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAmmoMax;                                       // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AB[0x1];                                      // 0x05AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmmoMax;                                           // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoCurrent;                                       // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetShowAmmoMax(bool ShowAmmoMax_0);
	void SetIsInfinite(bool IsInfinite_0);
	void SetAmmoCurrent(int32 AmmoCurrent_0);
	void SetAmmoMax(int32 AmmoMax_0);
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_WeaponAmmo">();
	}
	static class UPyWidget_WeaponAmmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_WeaponAmmo>();
	}
};
static_assert(alignof(UPyWidget_WeaponAmmo) == 0x000008, "Wrong alignment on UPyWidget_WeaponAmmo");
static_assert(sizeof(UPyWidget_WeaponAmmo) == 0x0005B8, "Wrong size on UPyWidget_WeaponAmmo");
static_assert(offsetof(UPyWidget_WeaponAmmo, IsInfinite) == 0x0005A8, "Member 'UPyWidget_WeaponAmmo::IsInfinite' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponAmmo, ShowAmmo) == 0x0005A9, "Member 'UPyWidget_WeaponAmmo::ShowAmmo' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponAmmo, ShowAmmoMax) == 0x0005AA, "Member 'UPyWidget_WeaponAmmo::ShowAmmoMax' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponAmmo, AmmoMax) == 0x0005AC, "Member 'UPyWidget_WeaponAmmo::AmmoMax' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponAmmo, AmmoCurrent) == 0x0005B0, "Member 'UPyWidget_WeaponAmmo::AmmoCurrent' has a wrong offset!");

// PythonClass PyWidget_WeaponStatus.PyWidget_WeaponStatusPanel
// 0x0008 (0x05B0 - 0x05A8)
class UPyWidget_WeaponStatusPanel : public UMarvelUserWidget
{
public:
	bool                                          bCustomColorPreview;                               // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Destruct();
	void SetMode(EHeroWeaponUIType InMode);
	void RemoveWeaponWidget(class UPyWidget_WeaponStatus* InWidget);
	void AddWeaponWidget(int32 InPriority, class UUserWidget* InWidget);
	void Reset();
	void OnInitialized();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_WeaponStatusPanel">();
	}
	static class UPyWidget_WeaponStatusPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_WeaponStatusPanel>();
	}
};
static_assert(alignof(UPyWidget_WeaponStatusPanel) == 0x000008, "Wrong alignment on UPyWidget_WeaponStatusPanel");
static_assert(sizeof(UPyWidget_WeaponStatusPanel) == 0x0005B0, "Wrong size on UPyWidget_WeaponStatusPanel");
static_assert(offsetof(UPyWidget_WeaponStatusPanel, bCustomColorPreview) == 0x0005A8, "Member 'UPyWidget_WeaponStatusPanel::bCustomColorPreview' has a wrong offset!");

// PythonClass PyWidget_WeaponStatus.PyWidget_WeaponIcon
// 0x0058 (0x0600 - 0x05A8)
class UPyWidget_WeaponIcon : public UMarvelUserWidget
{
public:
	TMap<int32, float>                            CustomBoxSize;                                     // 0x05A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DefaultBoxSize;                                    // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Destruct();
	void Construct();
	void OnInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_WeaponIcon">();
	}
	static class UPyWidget_WeaponIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_WeaponIcon>();
	}
};
static_assert(alignof(UPyWidget_WeaponIcon) == 0x000008, "Wrong alignment on UPyWidget_WeaponIcon");
static_assert(sizeof(UPyWidget_WeaponIcon) == 0x000600, "Wrong size on UPyWidget_WeaponIcon");
static_assert(offsetof(UPyWidget_WeaponIcon, CustomBoxSize) == 0x0005A8, "Member 'UPyWidget_WeaponIcon::CustomBoxSize' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponIcon, DefaultBoxSize) == 0x0005F8, "Member 'UPyWidget_WeaponIcon::DefaultBoxSize' has a wrong offset!");

// PythonClass PyWidget_WeaponStatus.PyWidget_WeaponStatus
// 0x0030 (0x1080 - 0x1050)
class UPyWidget_WeaponStatus : public UWidget_WeaponStatus
{
public:
	FMulticastInlineDelegateProperty_             OnAmmoUpdate;                                      // 0x1050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEquipingUpdate;                                  // 0x1060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUsableUpdate;                                    // 0x1070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SetWeaponAction(const struct FUIActionData& InWeapinAction);
	void SetEquipAction(const class FName InEquipAction);
	void SetIsPrimary(bool bInPrimary);
	void SetInfinite(bool bInInfinite);
	void SetAbility(class UMarvelGameplayAbility* InAbility);
	void OnIconLoaded(class UObject* Icon);
	void SetWeaponIconFromSoftObject(const TSoftObjectPtr<class UTexture2D>& WeaponIcon);
	void SetWeaponIcon(class UTexture2D* WeaponIcon);
	void SetUsable(bool bInUsable);
	void SetEquiping(bool bInEquiping);
	void SetAmmoMax(int32 InAmmoMax);
	void SetAmmoCur(int32 InAmmoCur);
	void Reset();
	void OnUsableUpdate__DelegateSignature();
	void OnEquipingUpdate__DelegateSignature();
	void OnAmmoUpdate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyWidget_WeaponStatus">();
	}
	static class UPyWidget_WeaponStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyWidget_WeaponStatus>();
	}
};
static_assert(alignof(UPyWidget_WeaponStatus) == 0x000008, "Wrong alignment on UPyWidget_WeaponStatus");
static_assert(sizeof(UPyWidget_WeaponStatus) == 0x001080, "Wrong size on UPyWidget_WeaponStatus");
static_assert(offsetof(UPyWidget_WeaponStatus, OnAmmoUpdate) == 0x001050, "Member 'UPyWidget_WeaponStatus::OnAmmoUpdate' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponStatus, OnEquipingUpdate) == 0x001060, "Member 'UPyWidget_WeaponStatus::OnEquipingUpdate' has a wrong offset!");
static_assert(offsetof(UPyWidget_WeaponStatus, OnUsableUpdate) == 0x001070, "Member 'UPyWidget_WeaponStatus::OnUsableUpdate' has a wrong offset!");

}

