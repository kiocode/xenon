#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyShowActorBase

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Python_enums_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyShowActorBase.PyShowActorBase
// 0x0A98 (0x0F30 - 0x0498)
class APyShowActorBase final : public AShowActorBase
{
public:
	TArray<TSubclassOf<class UShowActorExtension>> ShowActorExtensionClass;                           // 0x0498(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftObjectPath>   ShowActorExtensionObjectAssert;                    // 0x04A8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ShowActorExtensionObject;                          // 0x04F8(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsOnlyUseOwnCamera;                                // 0x0508(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_511[0x3];                                      // 0x0511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockOutgoing;                                      // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraDistance;                             // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCameraBlur;                                     // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAperture;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraBlurRelativeOffset;                          // 0x0528(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoPlayTime;                                      // 0x0540(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayShowAnim;                                    // 0x0544(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoPlay;                                        // 0x0545(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_546[0x2];                                      // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlayStyle                LS_HoverToggleStand;                               // 0x0548(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_StandToggleHalf2;                               // 0x05C8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_Half2ToggleStand;                               // 0x0648(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_StandPersonality;                               // 0x06C8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_HalfPersonality;                                // 0x0748(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_Stand_Rotation;                                 // 0x07C8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_Half_Rotation;                                  // 0x0848(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_CardPose;                                       // 0x08C8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_HoverIdle;                                      // 0x0948(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_MVP;                                            // 0x09C8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLevelSequencePlayStyle                LS_LikeFX;                                         // 0x0A48(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ShowBPLight_SelectHero;                            // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ShowBPLight_HeroList;                              // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ShowBPLight_HeroDetail;                            // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ShowBPLight_MVP;                                   // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE8[0x8];                                      // 0x0AE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LightMaskBoxTransform;                             // 0x0AF0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightMaskBoxOn;                                    // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabledPhysics;                                  // 0x0B51(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B52[0x6];                                      // 0x0B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PhysicsRootNames;                                  // 0x0B58(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightMin;                             // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightMax;                             // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightTime;                            // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShowActorCustomPhysicsBlendConfig> PhysicsConfigByBoneChain;                          // 0x0B78(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEnabledPostProcess;                              // 0x0B88(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseCommonSHCamera;                               // 0x0B89(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8A[0x6];                                      // 0x0B8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HalfToHalf_CameraOffset;                           // 0x0B90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA8[0x8];                                      // 0x0BA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SelectHeroTransform;                               // 0x0BB0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectHeroTime;                                    // 0x0C10(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoPlayHeroVoice;                               // 0x0C14(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C15[0x3];                                      // 0x0C15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAnglePerSecond;                                 // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorRotationSpeed;                                // 0x0C1C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorDefaultRotationYaw;                           // 0x0C20(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TurnCameraGaze;                                    // 0x0C24(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C25[0x3];                                      // 0x0C25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Stand_GazeEffectiveAngle;                          // 0x0C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Half_GazeEffectiveAngle;                           // 0x0C38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Stand_CameraGazeAngle;                             // 0x0C48(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Half_CameraGazeAngle;                              // 0x0C58(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenGazeDelay;                                     // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseGazeDelay;                                    // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GazeLeadTimeToggleStand;                           // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GazeLeadTimeToggleHalf;                            // 0x0C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenGazeBlendTime;                                 // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraGazeInterp;                                  // 0x0C80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveOffsetAngle;                               // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleSignChangeTime;                               // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoadHeroGalleryAsset;                            // 0x0CA0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoHiddenActor;                                   // 0x0CA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA2[0x2];                                      // 0x0CA2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroID;                                            // 0x0CA4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0CA8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeID;                                           // 0x0CAC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsToggleHalf;                                      // 0x0CB0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHalfToHalf;                                      // 0x0CB1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB2[0x6];                                      // 0x0CB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ShowActorAsset;                                    // 0x0CB8(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsInputLog;                                        // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShowActorStage                               ShowActorStage;                                    // 0x0CC9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShowActorStage                               DefaultShowActorStage;                             // 0x0CCA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShowActorResType                             ShowActorResType;                                  // 0x0CCB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCC[0x4];                                      // 0x0CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        DefaultScene;                                      // 0x0CD0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MainScene;                                         // 0x0CD8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ShowScene;                                         // 0x0CE0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MeshScene;                                         // 0x0CE8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        CameraScene;                                       // 0x0CF0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        WidgetScene;                                       // 0x0CF8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh1;                                             // 0x0D00(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Weapon1;                                           // 0x0D08(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SpiderWeb;                                         // 0x0D10(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SK_Shell;                                          // 0x0D18(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelWidgetComponent*                 LikeWidget;                                        // 0x0D20(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelWidgetComponent*                 MVPWidget;                                         // 0x0D28(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 LightRootMesh;                                     // 0x0D30(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ShowBPLight;                                       // 0x0D38(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   SH_Stand_Camera;                                   // 0x0D40(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   SH_Half_Camera;                                    // 0x0D48(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   HG_Stand_Camera;                                   // 0x0D50(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   HG_Half_Camera;                                    // 0x0D58(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   AI_Half_Camera;                                    // 0x0D60(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   AI_Head_Camera;                                    // 0x0D68(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ShowPose_Camera;                                   // 0x0D70(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GyroRed;                                           // 0x0D78(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   CharacterGazePoint;                                // 0x0D80(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0D88(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess_MVP;                                   // 0x0D90(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcessCharacter;                              // 0x0D98(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcessVFX;                                    // 0x0DA0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraFXComponent;                                // 0x0DA8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayShowAnim;                                    // 0x0DB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayToggleAnim;                                  // 0x0DC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReplayToggleAnim;                                // 0x0DD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnJumpStandIdle;                                   // 0x0DE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnJumpHalfIdle;                                    // 0x0DF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResetPersonality;                                // 0x0E00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResetAllAnim;                                    // 0x0E10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayTurnAnim;                                    // 0x0E20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayEmoteAnim;                                   // 0x0E30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayMVPAnim;                                     // 0x0E40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayLikeAnim;                                    // 0x0E50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResetHeroGallery;                                // 0x0E60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayHeroGallerAnim;                              // 0x0E70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayHeroGaller_CardPose;                         // 0x0E80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayHeroGaller_HoverStand;                       // 0x0E90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayHoverStandFinished;                          // 0x0EA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayVoiceAnim;                                   // 0x0EB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStopVoiceAnim;                                   // 0x0EC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadShowAssetFinished;                           // 0x0ED0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnShowActorCameraGaze;                             // 0x0EE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnShowActorStageChanged;                           // 0x0EF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayIdleAnim;                                    // 0x0F00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsHalfChanged;                                   // 0x0F10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVisibleChange;                                   // 0x0F20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnLikeFXFinished();
	void OnMVPFinished();
	void OnRotatioFinished();
	void OnHalfPersonalityFinished();
	void OnStandPersonalityFinished();
	void OnHalf2StandFinished();
	void OnStandHalf2Finished();
	void OnHoverStandFinished();
	void OnHoverIdleFinished();
	void OnCardPoseFinished();
	void OnLevelSequenceFinished(class ULevelSequence* LevelSequence);
	void SetBindingTagInLevelSequenceActor(class ALevelSequenceActor* Ls_actor);
	void PlayHeroGaller_HoverStand(bool IsPlay_HoverStand);
	void PlayHeroGaller_CardPose(bool IsPlay_CardPose);
	void PlayHeroGallerAnim();
	void PlayLikeFX();
	void PlayLikeSwitchAnim();
	void RePlayLikeAnim();
	void PlayLikeAnim();
	void StopTMVPAnim();
	void PlayMVPAnim(class ULevelSequence* MVPLevelSequence);
	void OnPlayEmoteAnimItem(const class FString& ItemId);
	void PlayEmoteAnim(const class FString& ItemId);
	void StopTurnAnim();
	void PlayTurnAnim();
	void JumpHalfIdle();
	void JumpStandIdle();
	void PlayToggleAnim(bool IsToggleHalf_0, bool IsHalfToHalf_0, bool IsDynamic);
	void PlayShowAnim(bool IsPlay);
	void SetIsPlayIdleAnim(bool IsPlayIdleAnim);
	void LoadRimlightDetailOutlineFinished(class UObject* OverlayMaterial);
	void SetMeshRotation(float Yaw, bool IsReset);
	void OnRotatioAngleSignChange(int32 ChangesNum);
	void OnMeshRotation(float Yaw, float AnglePerSecond);
	void SetMeshsVisibleByTag(const TArray<class USkeletalMeshComponent*>& MeshList, const struct FGameplayTagContainer& MeshTag, bool Visible);
	void SetMeshVisibleByTag(class USkeletalMeshComponent* Mesh, const struct FGameplayTagContainer& MeshTag, bool Visible);
	void SetMeshsVisible(bool Visible, const TArray<class USkeletalMeshComponent*>& MeshList);
	void SetMeshVisible(bool Visible, class USkeletalMeshComponent* Mesh);
	void SetComponentsVisibleByTag(const TArray<class USceneComponent*>& ComponentList, const struct FGameplayTagContainer& ComponentTag, bool Visible);
	void SetComponentVisibleByTag(class USceneComponent* Component, const struct FGameplayTagContainer& ComponentTag, bool Visible);
	void SetComponentsVisible(bool Visible, const TArray<class USceneComponent*>& ComponentList);
	void SetComponentVisible(bool Visible, class USceneComponent* Component);
	void ToggleCameraBlur(bool bUseCameraBlur);
	void SetEnabledPostProcess(bool IsEnabledPostProcess_0);
	void SetMeshsPhysicsBlendWeight(class USkeletalMeshComponent* Mesh, const TArray<class FName>& BoneNameList, bool bIncludeSelf, float PhysicsBlendWeight);
	void ResetAllPhysicsBlendWeightToMin(float MinWeight);
	void ResetAllPhysicsBlendWeight(float BlendWeight);
	void StopAllPhysicsBlendWeight();
	void ReversePhysicsBlendWeight(class USkeletalMeshComponent* Mesh, const TArray<class FName>& BoneNameList, bool bIncludeSelf);
	void ForwardPhysicsBlendWeight(class USkeletalMeshComponent* Mesh, const TArray<class FName>& BoneNameList, bool bIncludeSelf);
	bool OnANSSetAllBodiesBelowSimulatePhysicsEnd(class USkeletalMeshComponent* Mesh, class FName BoneName, bool bSimulatePhysics, bool bIncludeSelf);
	bool OnANSSetAllBodiesBelowSimulatePhysicsBegin(class USkeletalMeshComponent* Mesh, class FName BoneName, bool bSimulatePhysics, bool bIncludeSelf);
	void AutoReversePhysicsBlendWeight(class USkeletalMeshComponent* Mesh, const TArray<class FName>& BoneNameList, bool bIncludeSelf);
	void AutoForwardPhysicsBlendWeight(class USkeletalMeshComponent* Mesh, const TArray<class FName>& BoneNameList, bool bIncludeSelf);
	void OnMeshPhysicsEnable(bool bEnable);
	void SetCustomBoneChain(class USkeletalMeshComponent* Mesh, const TArray<struct FShowActorCustomPhysicsBlendConfig>& PhysicsConfigs);
	void CallExtensionFunction(const class FString& Func_name);
	void SetShowActorStageChanged(EShowActorStage ShowActorStage_0);
	void SetComponentVisibility(bool Visible);
	void SetVisible(bool Visible);
	void OnAutoPlayShowAnim();
	void OnReceiveAnyInputInThisFrame();
	void LoadShowAssetsFinished(const TArray<class UObject*>& Assets);
	TArray<struct FSoftObjectPath> GetSoftReferenceAssets();
	void LoadSoftReferenceAssets();
	void ShowActorBeginPlay();
	void ReceiveDestroyed();
	void ReceiveInit();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnVisibleChange__DelegateSignature(bool bVisible);
	void OnIsHalfChanged__DelegateSignature(bool IsToggleHalf_0);
	void OnPlayIdleAnim__DelegateSignature(bool IsPlayIdleAnim);
	void OnShowActorStageChanged__DelegateSignature(EShowActorStage ShowActorStage_0);
	void OnShowActorCameraGaze__DelegateSignature(bool TurnCameraGaze_0, const struct FVector& CameraLocation, float OpenBlendTime, float CloseBlendTime);
	void OnLoadShowAssetFinished__DelegateSignature(class AActor* ShowActor);
	void OnStopVoiceAnim__DelegateSignature();
	void OnPlayVoiceAnim__DelegateSignature(class UAnimSequence* VoiceAnim);
	void OnPlayHoverStandFinished__DelegateSignature();
	void OnPlayHeroGaller_HoverStand__DelegateSignature(bool IsPlay_HoverStand);
	void OnPlayHeroGaller_CardPose__DelegateSignature(bool IsPlay_CardPose);
	void OnPlayHeroGallerAnim__DelegateSignature();
	void OnResetHeroGallery__DelegateSignature();
	void OnPlayLikeAnim__DelegateSignature();
	void OnPlayMVPAnim__DelegateSignature();
	void OnPlayEmoteAnim__DelegateSignature(const class FString& ItemId);
	void OnPlayTurnAnim__DelegateSignature();
	void OnResetAllAnim__DelegateSignature();
	void OnResetPersonality__DelegateSignature();
	void OnJumpHalfIdle__DelegateSignature();
	void OnJumpStandIdle__DelegateSignature();
	void OnReplayToggleAnim__DelegateSignature();
	void OnPlayToggleAnim__DelegateSignature(bool IsToggleHalf_0);
	void OnPlayShowAnim__DelegateSignature(bool IsPlay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyShowActorBase">();
	}
	static class APyShowActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyShowActorBase>();
	}
};
static_assert(alignof(APyShowActorBase) == 0x000010, "Wrong alignment on APyShowActorBase");
static_assert(sizeof(APyShowActorBase) == 0x000F30, "Wrong size on APyShowActorBase");
static_assert(offsetof(APyShowActorBase, ShowActorExtensionClass) == 0x000498, "Member 'APyShowActorBase::ShowActorExtensionClass' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowActorExtensionObjectAssert) == 0x0004A8, "Member 'APyShowActorBase::ShowActorExtensionObjectAssert' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowActorExtensionObject) == 0x0004F8, "Member 'APyShowActorBase::ShowActorExtensionObject' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsOnlyUseOwnCamera) == 0x000508, "Member 'APyShowActorBase::IsOnlyUseOwnCamera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, BlendTime) == 0x00050C, "Member 'APyShowActorBase::BlendTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, BlendFunc) == 0x000510, "Member 'APyShowActorBase::BlendFunc' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, BlendExp) == 0x000514, "Member 'APyShowActorBase::BlendExp' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LockOutgoing) == 0x000518, "Member 'APyShowActorBase::LockOutgoing' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, DefaultCameraDistance) == 0x00051C, "Member 'APyShowActorBase::DefaultCameraDistance' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, UseCameraBlur) == 0x000520, "Member 'APyShowActorBase::UseCameraBlur' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CameraAperture) == 0x000524, "Member 'APyShowActorBase::CameraAperture' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CameraBlurRelativeOffset) == 0x000528, "Member 'APyShowActorBase::CameraBlurRelativeOffset' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, AutoPlayTime) == 0x000540, "Member 'APyShowActorBase::AutoPlayTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsPlayShowAnim) == 0x000544, "Member 'APyShowActorBase::IsPlayShowAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsAutoPlay) == 0x000545, "Member 'APyShowActorBase::IsAutoPlay' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_HoverToggleStand) == 0x000548, "Member 'APyShowActorBase::LS_HoverToggleStand' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_StandToggleHalf2) == 0x0005C8, "Member 'APyShowActorBase::LS_StandToggleHalf2' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_Half2ToggleStand) == 0x000648, "Member 'APyShowActorBase::LS_Half2ToggleStand' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_StandPersonality) == 0x0006C8, "Member 'APyShowActorBase::LS_StandPersonality' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_HalfPersonality) == 0x000748, "Member 'APyShowActorBase::LS_HalfPersonality' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_Stand_Rotation) == 0x0007C8, "Member 'APyShowActorBase::LS_Stand_Rotation' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_Half_Rotation) == 0x000848, "Member 'APyShowActorBase::LS_Half_Rotation' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_CardPose) == 0x0008C8, "Member 'APyShowActorBase::LS_CardPose' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_HoverIdle) == 0x000948, "Member 'APyShowActorBase::LS_HoverIdle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_MVP) == 0x0009C8, "Member 'APyShowActorBase::LS_MVP' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LS_LikeFX) == 0x000A48, "Member 'APyShowActorBase::LS_LikeFX' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowBPLight_SelectHero) == 0x000AC8, "Member 'APyShowActorBase::ShowBPLight_SelectHero' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowBPLight_HeroList) == 0x000AD0, "Member 'APyShowActorBase::ShowBPLight_HeroList' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowBPLight_HeroDetail) == 0x000AD8, "Member 'APyShowActorBase::ShowBPLight_HeroDetail' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowBPLight_MVP) == 0x000AE0, "Member 'APyShowActorBase::ShowBPLight_MVP' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LightMaskBoxTransform) == 0x000AF0, "Member 'APyShowActorBase::LightMaskBoxTransform' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LightMaskBoxOn) == 0x000B50, "Member 'APyShowActorBase::LightMaskBoxOn' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsEnabledPhysics) == 0x000B51, "Member 'APyShowActorBase::IsEnabledPhysics' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PhysicsRootNames) == 0x000B58, "Member 'APyShowActorBase::PhysicsRootNames' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PhysicsBlendWeightMin) == 0x000B68, "Member 'APyShowActorBase::PhysicsBlendWeightMin' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PhysicsBlendWeightMax) == 0x000B6C, "Member 'APyShowActorBase::PhysicsBlendWeightMax' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PhysicsBlendWeightTime) == 0x000B70, "Member 'APyShowActorBase::PhysicsBlendWeightTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PhysicsConfigByBoneChain) == 0x000B78, "Member 'APyShowActorBase::PhysicsConfigByBoneChain' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsEnabledPostProcess) == 0x000B88, "Member 'APyShowActorBase::IsEnabledPostProcess' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsUseCommonSHCamera) == 0x000B89, "Member 'APyShowActorBase::IsUseCommonSHCamera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, HalfToHalf_CameraOffset) == 0x000B90, "Member 'APyShowActorBase::HalfToHalf_CameraOffset' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SelectHeroTransform) == 0x000BB0, "Member 'APyShowActorBase::SelectHeroTransform' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SelectHeroTime) == 0x000C10, "Member 'APyShowActorBase::SelectHeroTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsAutoPlayHeroVoice) == 0x000C14, "Member 'APyShowActorBase::IsAutoPlayHeroVoice' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, MaxAnglePerSecond) == 0x000C18, "Member 'APyShowActorBase::MaxAnglePerSecond' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ActorRotationSpeed) == 0x000C1C, "Member 'APyShowActorBase::ActorRotationSpeed' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ActorDefaultRotationYaw) == 0x000C20, "Member 'APyShowActorBase::ActorDefaultRotationYaw' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, TurnCameraGaze) == 0x000C24, "Member 'APyShowActorBase::TurnCameraGaze' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Stand_GazeEffectiveAngle) == 0x000C28, "Member 'APyShowActorBase::Stand_GazeEffectiveAngle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Half_GazeEffectiveAngle) == 0x000C38, "Member 'APyShowActorBase::Half_GazeEffectiveAngle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Stand_CameraGazeAngle) == 0x000C48, "Member 'APyShowActorBase::Stand_CameraGazeAngle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Half_CameraGazeAngle) == 0x000C58, "Member 'APyShowActorBase::Half_CameraGazeAngle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OpenGazeDelay) == 0x000C68, "Member 'APyShowActorBase::OpenGazeDelay' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CloseGazeDelay) == 0x000C6C, "Member 'APyShowActorBase::CloseGazeDelay' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, GazeLeadTimeToggleStand) == 0x000C70, "Member 'APyShowActorBase::GazeLeadTimeToggleStand' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, GazeLeadTimeToggleHalf) == 0x000C74, "Member 'APyShowActorBase::GazeLeadTimeToggleHalf' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OpenGazeBlendTime) == 0x000C78, "Member 'APyShowActorBase::OpenGazeBlendTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CameraGazeInterp) == 0x000C80, "Member 'APyShowActorBase::CameraGazeInterp' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PositiveOffsetAngle) == 0x000C98, "Member 'APyShowActorBase::PositiveOffsetAngle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, AngleSignChangeTime) == 0x000C9C, "Member 'APyShowActorBase::AngleSignChangeTime' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsLoadHeroGalleryAsset) == 0x000CA0, "Member 'APyShowActorBase::IsLoadHeroGalleryAsset' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, AutoHiddenActor) == 0x000CA1, "Member 'APyShowActorBase::AutoHiddenActor' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, HeroID) == 0x000CA4, "Member 'APyShowActorBase::HeroID' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SkinID) == 0x000CA8, "Member 'APyShowActorBase::SkinID' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShapeID) == 0x000CAC, "Member 'APyShowActorBase::ShapeID' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsToggleHalf) == 0x000CB0, "Member 'APyShowActorBase::IsToggleHalf' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsHalfToHalf) == 0x000CB1, "Member 'APyShowActorBase::IsHalfToHalf' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowActorAsset) == 0x000CB8, "Member 'APyShowActorBase::ShowActorAsset' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, IsInputLog) == 0x000CC8, "Member 'APyShowActorBase::IsInputLog' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowActorStage) == 0x000CC9, "Member 'APyShowActorBase::ShowActorStage' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, DefaultShowActorStage) == 0x000CCA, "Member 'APyShowActorBase::DefaultShowActorStage' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowActorResType) == 0x000CCB, "Member 'APyShowActorBase::ShowActorResType' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, DefaultScene) == 0x000CD0, "Member 'APyShowActorBase::DefaultScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, MainScene) == 0x000CD8, "Member 'APyShowActorBase::MainScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowScene) == 0x000CE0, "Member 'APyShowActorBase::ShowScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, MeshScene) == 0x000CE8, "Member 'APyShowActorBase::MeshScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CameraScene) == 0x000CF0, "Member 'APyShowActorBase::CameraScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, WidgetScene) == 0x000CF8, "Member 'APyShowActorBase::WidgetScene' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Mesh1) == 0x000D00, "Member 'APyShowActorBase::Mesh1' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, Weapon1) == 0x000D08, "Member 'APyShowActorBase::Weapon1' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SpiderWeb) == 0x000D10, "Member 'APyShowActorBase::SpiderWeb' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SK_Shell) == 0x000D18, "Member 'APyShowActorBase::SK_Shell' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LikeWidget) == 0x000D20, "Member 'APyShowActorBase::LikeWidget' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, MVPWidget) == 0x000D28, "Member 'APyShowActorBase::MVPWidget' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, LightRootMesh) == 0x000D30, "Member 'APyShowActorBase::LightRootMesh' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowBPLight) == 0x000D38, "Member 'APyShowActorBase::ShowBPLight' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SH_Stand_Camera) == 0x000D40, "Member 'APyShowActorBase::SH_Stand_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, SH_Half_Camera) == 0x000D48, "Member 'APyShowActorBase::SH_Half_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, HG_Stand_Camera) == 0x000D50, "Member 'APyShowActorBase::HG_Stand_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, HG_Half_Camera) == 0x000D58, "Member 'APyShowActorBase::HG_Half_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, AI_Half_Camera) == 0x000D60, "Member 'APyShowActorBase::AI_Half_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, AI_Head_Camera) == 0x000D68, "Member 'APyShowActorBase::AI_Head_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, ShowPose_Camera) == 0x000D70, "Member 'APyShowActorBase::ShowPose_Camera' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, GyroRed) == 0x000D78, "Member 'APyShowActorBase::GyroRed' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, CharacterGazePoint) == 0x000D80, "Member 'APyShowActorBase::CharacterGazePoint' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PostProcess) == 0x000D88, "Member 'APyShowActorBase::PostProcess' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PostProcess_MVP) == 0x000D90, "Member 'APyShowActorBase::PostProcess_MVP' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PostProcessCharacter) == 0x000D98, "Member 'APyShowActorBase::PostProcessCharacter' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, PostProcessVFX) == 0x000DA0, "Member 'APyShowActorBase::PostProcessVFX' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, NiagaraFXComponent) == 0x000DA8, "Member 'APyShowActorBase::NiagaraFXComponent' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayShowAnim) == 0x000DB0, "Member 'APyShowActorBase::OnPlayShowAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayToggleAnim) == 0x000DC0, "Member 'APyShowActorBase::OnPlayToggleAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnReplayToggleAnim) == 0x000DD0, "Member 'APyShowActorBase::OnReplayToggleAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnJumpStandIdle) == 0x000DE0, "Member 'APyShowActorBase::OnJumpStandIdle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnJumpHalfIdle) == 0x000DF0, "Member 'APyShowActorBase::OnJumpHalfIdle' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnResetPersonality) == 0x000E00, "Member 'APyShowActorBase::OnResetPersonality' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnResetAllAnim) == 0x000E10, "Member 'APyShowActorBase::OnResetAllAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayTurnAnim) == 0x000E20, "Member 'APyShowActorBase::OnPlayTurnAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayEmoteAnim) == 0x000E30, "Member 'APyShowActorBase::OnPlayEmoteAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayMVPAnim) == 0x000E40, "Member 'APyShowActorBase::OnPlayMVPAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayLikeAnim) == 0x000E50, "Member 'APyShowActorBase::OnPlayLikeAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnResetHeroGallery) == 0x000E60, "Member 'APyShowActorBase::OnResetHeroGallery' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayHeroGallerAnim) == 0x000E70, "Member 'APyShowActorBase::OnPlayHeroGallerAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayHeroGaller_CardPose) == 0x000E80, "Member 'APyShowActorBase::OnPlayHeroGaller_CardPose' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayHeroGaller_HoverStand) == 0x000E90, "Member 'APyShowActorBase::OnPlayHeroGaller_HoverStand' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayHoverStandFinished) == 0x000EA0, "Member 'APyShowActorBase::OnPlayHoverStandFinished' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayVoiceAnim) == 0x000EB0, "Member 'APyShowActorBase::OnPlayVoiceAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnStopVoiceAnim) == 0x000EC0, "Member 'APyShowActorBase::OnStopVoiceAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnLoadShowAssetFinished) == 0x000ED0, "Member 'APyShowActorBase::OnLoadShowAssetFinished' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnShowActorCameraGaze) == 0x000EE0, "Member 'APyShowActorBase::OnShowActorCameraGaze' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnShowActorStageChanged) == 0x000EF0, "Member 'APyShowActorBase::OnShowActorStageChanged' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnPlayIdleAnim) == 0x000F00, "Member 'APyShowActorBase::OnPlayIdleAnim' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnIsHalfChanged) == 0x000F10, "Member 'APyShowActorBase::OnIsHalfChanged' has a wrong offset!");
static_assert(offsetof(APyShowActorBase, OnVisibleChange) == 0x000F20, "Member 'APyShowActorBase::OnVisibleChange' has a wrong offset!");

}

