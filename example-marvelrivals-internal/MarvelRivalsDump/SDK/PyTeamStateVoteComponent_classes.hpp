#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyTeamStateVoteComponent

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "PyTeamStateComponent_classes.hpp"


namespace SDK
{

// PythonClass PyTeamStateVoteComponent.PyTeamStateVoteComponent
// 0x0030 (0x0120 - 0x00F0)
class UPyTeamStateVoteComponent final : public UPyTeamStateComponent
{
public:
	int32                                         VoteId;                                            // 0x00F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x00F4(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         State;                                             // 0x00F8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelPairInt32>               Selection;                                         // 0x0100(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VoteSessionUpdate;                                 // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void VoteSessionUpdate__DelegateSignature();
	void OnRep_VoteChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyTeamStateVoteComponent">();
	}
	static class UPyTeamStateVoteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyTeamStateVoteComponent>();
	}
};
static_assert(alignof(UPyTeamStateVoteComponent) == 0x000008, "Wrong alignment on UPyTeamStateVoteComponent");
static_assert(sizeof(UPyTeamStateVoteComponent) == 0x000120, "Wrong size on UPyTeamStateVoteComponent");
static_assert(offsetof(UPyTeamStateVoteComponent, VoteId) == 0x0000F0, "Member 'UPyTeamStateVoteComponent::VoteId' has a wrong offset!");
static_assert(offsetof(UPyTeamStateVoteComponent, Timeout) == 0x0000F4, "Member 'UPyTeamStateVoteComponent::Timeout' has a wrong offset!");
static_assert(offsetof(UPyTeamStateVoteComponent, State) == 0x0000F8, "Member 'UPyTeamStateVoteComponent::State' has a wrong offset!");
static_assert(offsetof(UPyTeamStateVoteComponent, Selection) == 0x000100, "Member 'UPyTeamStateVoteComponent::Selection' has a wrong offset!");
static_assert(offsetof(UPyTeamStateVoteComponent, VoteSessionUpdate) == 0x000110, "Member 'UPyTeamStateVoteComponent::VoteSessionUpdate' has a wrong offset!");

}

