#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimIK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// ScriptStruct AimIK.AnimNode_AimIK
// 0x03F8 (0x04E0 - 0x00E8)
struct FAnimNode_AimIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                AimTargetLocation;                                 // 0x00E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RoleForwardAxis;                                   // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RoleRightAxis;                                     // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RoleUpAxis;                                        // 0x0102(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0xD];                                      // 0x0103(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSocketReference                       GunRootSocketReference;                            // 0x0110(0x0080)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             GunMuzzleOffset;                                   // 0x0190(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RoleRootBone;                                      // 0x01F0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHandBone;                                     // 0x0204(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightLowerArmBone;                                 // 0x0218(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightUpperArmBone;                                 // 0x022C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAxis                                         GunMuzzleForwardAxis;                              // 0x0240(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightUpperArmRotateYawAxis;                        // 0x0241(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightUpperArmRotatePitchAxis;                      // 0x0242(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightUpperArmRotateRollAxis;                       // 0x0243(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightLowerArmRotateAxis;                           // 0x0244(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RightUpperArmRollDownAlpha;                        // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightUpperArmRollUpAlpha;                          // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightHandMaxIterations;                            // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKRotPrecision;                           // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightUpperArmIKIteratScale;                        // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLowerArmIKIteratScale;                        // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               GunRootDeltaRotator;                               // 0x0260(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AimPitch;                                          // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYaw;                                            // 0x027C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RightHandAimIKWeightByPitch;                       // 0x0280(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RightUpperArmAdjustPitchByYaw;                     // 0x0288(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSocketReference                       RightHandAimIkAdjustPoint;                         // 0x0290(0x0080)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSocketReference                       RightLowerArmAdjustPoint;                          // 0x0310(0x0080)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AimPitchSpeed;                                     // 0x0390(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawSpeed;                                       // 0x0394(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSpineIK;                                    // 0x0398(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 SpineBones;                                        // 0x03A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAxis>                                 SpineBoneYawAxises;                                // 0x03B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAxis>                                 SpineBonePitchAxises;                              // 0x03C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAxis>                                 SpineBoneRollAxises;                               // 0x03D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          SpineBoneYawReverse;                               // 0x03E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpineBonePitchReverse;                             // 0x03E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpineBoneRollReverse;                              // 0x03E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E3[0x5];                                      // 0x03E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SpineBoneYawWeights;                               // 0x03E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpineBonePitchWeights;                             // 0x03F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpineBoneRollUpWeights;                            // 0x0408(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpineBoneRollDownWeights;                          // 0x0418(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpineBonePitchScaleByYaw;                          // 0x0428(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpineBoneYawScaleByYaw;                            // 0x0430(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpineBoneRollScaleByYaw;                           // 0x0438(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LeftHandIK;                                        // 0x0440(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftLowerArmJointTargetOffset;                     // 0x04A0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandBone;                                      // 0x04B8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x14];                                     // 0x04CC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNode_AimIK) == 0x000010, "Wrong alignment on FAnimNode_AimIK");
//static_assert(sizeof(FAnimNode_AimIK) == 0x0004E0, "Wrong size on FAnimNode_AimIK");
//static_assert(offsetof(FAnimNode_AimIK, AimTargetLocation) == 0x0000E8, "Member 'FAnimNode_AimIK::AimTargetLocation' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RoleForwardAxis) == 0x000100, "Member 'FAnimNode_AimIK::RoleForwardAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RoleRightAxis) == 0x000101, "Member 'FAnimNode_AimIK::RoleRightAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RoleUpAxis) == 0x000102, "Member 'FAnimNode_AimIK::RoleUpAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, GunRootSocketReference) == 0x000110, "Member 'FAnimNode_AimIK::GunRootSocketReference' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, GunMuzzleOffset) == 0x000190, "Member 'FAnimNode_AimIK::GunMuzzleOffset' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RoleRootBone) == 0x0001F0, "Member 'FAnimNode_AimIK::RoleRootBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightHandBone) == 0x000204, "Member 'FAnimNode_AimIK::RightHandBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightLowerArmBone) == 0x000218, "Member 'FAnimNode_AimIK::RightLowerArmBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmBone) == 0x00022C, "Member 'FAnimNode_AimIK::RightUpperArmBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, GunMuzzleForwardAxis) == 0x000240, "Member 'FAnimNode_AimIK::GunMuzzleForwardAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmRotateYawAxis) == 0x000241, "Member 'FAnimNode_AimIK::RightUpperArmRotateYawAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmRotatePitchAxis) == 0x000242, "Member 'FAnimNode_AimIK::RightUpperArmRotatePitchAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmRotateRollAxis) == 0x000243, "Member 'FAnimNode_AimIK::RightUpperArmRotateRollAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightLowerArmRotateAxis) == 0x000244, "Member 'FAnimNode_AimIK::RightLowerArmRotateAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmRollDownAlpha) == 0x000248, "Member 'FAnimNode_AimIK::RightUpperArmRollDownAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmRollUpAlpha) == 0x00024C, "Member 'FAnimNode_AimIK::RightUpperArmRollUpAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightHandMaxIterations) == 0x000250, "Member 'FAnimNode_AimIK::RightHandMaxIterations' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightHandIKRotPrecision) == 0x000254, "Member 'FAnimNode_AimIK::RightHandIKRotPrecision' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmIKIteratScale) == 0x000258, "Member 'FAnimNode_AimIK::RightUpperArmIKIteratScale' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightLowerArmIKIteratScale) == 0x00025C, "Member 'FAnimNode_AimIK::RightLowerArmIKIteratScale' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, GunRootDeltaRotator) == 0x000260, "Member 'FAnimNode_AimIK::GunRootDeltaRotator' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, AimPitch) == 0x000278, "Member 'FAnimNode_AimIK::AimPitch' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, AimYaw) == 0x00027C, "Member 'FAnimNode_AimIK::AimYaw' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightHandAimIKWeightByPitch) == 0x000280, "Member 'FAnimNode_AimIK::RightHandAimIKWeightByPitch' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightUpperArmAdjustPitchByYaw) == 0x000288, "Member 'FAnimNode_AimIK::RightUpperArmAdjustPitchByYaw' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightHandAimIkAdjustPoint) == 0x000290, "Member 'FAnimNode_AimIK::RightHandAimIkAdjustPoint' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, RightLowerArmAdjustPoint) == 0x000310, "Member 'FAnimNode_AimIK::RightLowerArmAdjustPoint' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, AimPitchSpeed) == 0x000390, "Member 'FAnimNode_AimIK::AimPitchSpeed' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, AimYawSpeed) == 0x000394, "Member 'FAnimNode_AimIK::AimYawSpeed' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, bEnableSpineIK) == 0x000398, "Member 'FAnimNode_AimIK::bEnableSpineIK' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBones) == 0x0003A0, "Member 'FAnimNode_AimIK::SpineBones' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneYawAxises) == 0x0003B0, "Member 'FAnimNode_AimIK::SpineBoneYawAxises' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBonePitchAxises) == 0x0003C0, "Member 'FAnimNode_AimIK::SpineBonePitchAxises' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneRollAxises) == 0x0003D0, "Member 'FAnimNode_AimIK::SpineBoneRollAxises' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneYawReverse) == 0x0003E0, "Member 'FAnimNode_AimIK::SpineBoneYawReverse' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBonePitchReverse) == 0x0003E1, "Member 'FAnimNode_AimIK::SpineBonePitchReverse' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneRollReverse) == 0x0003E2, "Member 'FAnimNode_AimIK::SpineBoneRollReverse' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneYawWeights) == 0x0003E8, "Member 'FAnimNode_AimIK::SpineBoneYawWeights' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBonePitchWeights) == 0x0003F8, "Member 'FAnimNode_AimIK::SpineBonePitchWeights' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneRollUpWeights) == 0x000408, "Member 'FAnimNode_AimIK::SpineBoneRollUpWeights' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneRollDownWeights) == 0x000418, "Member 'FAnimNode_AimIK::SpineBoneRollDownWeights' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBonePitchScaleByYaw) == 0x000428, "Member 'FAnimNode_AimIK::SpineBonePitchScaleByYaw' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneYawScaleByYaw) == 0x000430, "Member 'FAnimNode_AimIK::SpineBoneYawScaleByYaw' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, SpineBoneRollScaleByYaw) == 0x000438, "Member 'FAnimNode_AimIK::SpineBoneRollScaleByYaw' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, LeftHandIK) == 0x000440, "Member 'FAnimNode_AimIK::LeftHandIK' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, LeftLowerArmJointTargetOffset) == 0x0004A0, "Member 'FAnimNode_AimIK::LeftLowerArmJointTargetOffset' has a wrong offset!");
//static_assert(offsetof(FAnimNode_AimIK, LeftHandBone) == 0x0004B8, "Member 'FAnimNode_AimIK::LeftHandBone' has a wrong offset!");

}

