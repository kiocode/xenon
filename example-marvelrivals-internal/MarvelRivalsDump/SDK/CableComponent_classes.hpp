#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CableComponent

#include "Basic.hpp"

#include "CableComponent_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class CableComponent.CableActor
// 0x0008 (0x0498 - 0x0490)
class ACableActor final : public AActor
{
public:
	class UCableComponent*                        CableComponent;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CableActor">();
	}
	static class ACableActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACableActor>();
	}
};
//static_assert(alignof(ACableActor) == 0x000008, "Wrong alignment on ACableActor");
//static_assert(sizeof(ACableActor) == 0x000498, "Wrong size on ACableActor");
//static_assert(offsetof(ACableActor, CableComponent) == 0x000490, "Member 'ACableActor::CableComponent' has a wrong offset!");

// Class CableComponent.CableComponent
// 0x01E0 (0x0A90 - 0x08B0)
class UCableComponent : public UMeshComponent
{
public:
	bool                                          bAttachStart;                                      // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachEnd;                                        // 0x08A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentReference                    AttachEndTo;                                       // 0x08B0(0x0030)(Edit, NativeAccessSpecifierPublic)
	class FName                                   AttachEndToSocketName;                             // 0x08E0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8EC[0x4];                                      // 0x08EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x08F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CableLength;                                       // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x090C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubstepTime;                                       // 0x0910(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerformSubstepAtLeastOncePerFrame;                // 0x0914(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_915[0x3];                                      // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SolverIterations;                                  // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStiffness;                                  // 0x091C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSubstepping;                                   // 0x091D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipCableUpdateWhenNotVisible;                    // 0x091E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipCableUpdateWhenNotOwnerRecentlyRendered;      // 0x091F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_921[0x3];                                      // 0x0921(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionFriction;                                 // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CableForce;                                        // 0x0928(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CableGravityScale;                                 // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CableWidth;                                        // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSides;                                          // 0x094C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileMaterial;                                      // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_954[0x4];                                      // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            CustomSegmentLengthMap;                            // 0x0958(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A8[0x8];                                      // 0x09A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCableParticle>                 Particles;                                         // 0x09B0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        RenderPointLocation;                               // 0x09C0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9D0[0xC0];                                     // 0x09D0(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceStraightenAtOnce();
	void GetEndPositions(struct FVector* OutStartPosition, struct FVector* OutEndPosition);
	void PerformCableCollision();
	void SetAttachEndTo(class AActor* Actor, class FName ComponentProperty, class FName SocketName);
	void SetAttachEndToComponent(class USceneComponent* Component, class FName SocketName);
	void SetNewNumSegments(int32 InNumSegments);
	void SolveConstraints();
	void TryToForceStraighten(bool bForce);
	void VerletIntegrate(float InSubstepTime, const struct FVector& Gravity);

	class AActor* GetAttachedActor() const;
	class USceneComponent* GetAttachedComponent() const;
	void GetCableParticleLocations(TArray<struct FVector>* Locations) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CableComponent">();
	}
	static class UCableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCableComponent>();
	}
};
//static_assert(alignof(UCableComponent) == 0x000010, "Wrong alignment on UCableComponent");
//static_assert(sizeof(UCableComponent) == 0x000A90, "Wrong size on UCableComponent");
//static_assert(offsetof(UCableComponent, bAttachStart) == 0x0008A8, "Member 'UCableComponent::bAttachStart' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bAttachEnd) == 0x0008A9, "Member 'UCableComponent::bAttachEnd' has a wrong offset!");
//static_assert(offsetof(UCableComponent, AttachEndTo) == 0x0008B0, "Member 'UCableComponent::AttachEndTo' has a wrong offset!");
//static_assert(offsetof(UCableComponent, AttachEndToSocketName) == 0x0008E0, "Member 'UCableComponent::AttachEndToSocketName' has a wrong offset!");
//static_assert(offsetof(UCableComponent, EndLocation) == 0x0008F0, "Member 'UCableComponent::EndLocation' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CableLength) == 0x000908, "Member 'UCableComponent::CableLength' has a wrong offset!");
//static_assert(offsetof(UCableComponent, NumSegments) == 0x00090C, "Member 'UCableComponent::NumSegments' has a wrong offset!");
//static_assert(offsetof(UCableComponent, SubstepTime) == 0x000910, "Member 'UCableComponent::SubstepTime' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bPerformSubstepAtLeastOncePerFrame) == 0x000914, "Member 'UCableComponent::bPerformSubstepAtLeastOncePerFrame' has a wrong offset!");
//static_assert(offsetof(UCableComponent, SolverIterations) == 0x000918, "Member 'UCableComponent::SolverIterations' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bEnableStiffness) == 0x00091C, "Member 'UCableComponent::bEnableStiffness' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bUseSubstepping) == 0x00091D, "Member 'UCableComponent::bUseSubstepping' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bSkipCableUpdateWhenNotVisible) == 0x00091E, "Member 'UCableComponent::bSkipCableUpdateWhenNotVisible' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bSkipCableUpdateWhenNotOwnerRecentlyRendered) == 0x00091F, "Member 'UCableComponent::bSkipCableUpdateWhenNotOwnerRecentlyRendered' has a wrong offset!");
//static_assert(offsetof(UCableComponent, bEnableCollision) == 0x000920, "Member 'UCableComponent::bEnableCollision' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CollisionFriction) == 0x000924, "Member 'UCableComponent::CollisionFriction' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CableForce) == 0x000928, "Member 'UCableComponent::CableForce' has a wrong offset!");
//static_assert(offsetof(UCableComponent, Friction) == 0x000940, "Member 'UCableComponent::Friction' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CableGravityScale) == 0x000944, "Member 'UCableComponent::CableGravityScale' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CableWidth) == 0x000948, "Member 'UCableComponent::CableWidth' has a wrong offset!");
//static_assert(offsetof(UCableComponent, NumSides) == 0x00094C, "Member 'UCableComponent::NumSides' has a wrong offset!");
//static_assert(offsetof(UCableComponent, TileMaterial) == 0x000950, "Member 'UCableComponent::TileMaterial' has a wrong offset!");
//static_assert(offsetof(UCableComponent, CustomSegmentLengthMap) == 0x000958, "Member 'UCableComponent::CustomSegmentLengthMap' has a wrong offset!");
//static_assert(offsetof(UCableComponent, Particles) == 0x0009B0, "Member 'UCableComponent::Particles' has a wrong offset!");
//static_assert(offsetof(UCableComponent, RenderPointLocation) == 0x0009C0, "Member 'UCableComponent::RenderPointLocation' has a wrong offset!");

}

