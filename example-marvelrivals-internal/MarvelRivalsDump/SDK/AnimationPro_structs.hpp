#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationPro

#include "Basic.hpp"

#include "AnimationProCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PBIK_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum AnimationPro.EAnimQueueBlendType
// NumValues: 0x0004
enum class EAnimQueueBlendType : uint8
{
	AutoBlendNext                            = 0,
	LoopForever                              = 1,
	LoopOnCondition                          = 2,
	EAnimQueueBlendType_MAX                  = 3,
};

// Enum AnimationPro.ELocomotionDirection
// NumValues: 0x0005
enum class ELocomotionDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	Left                                     = 2,
	Right                                    = 3,
	MAX                                      = 4,
};

// Enum AnimationPro.EMarvelSpringWeight
// NumValues: 0x0004
enum class EMarvelSpringWeight : uint8
{
	SW_Linear                                = 0,
	SW_Quadratic                             = 1,
	SW_Custom                                = 2,
	SW_MAX_0                                 = 3,
};

// Enum AnimationPro.EMarvelSpringMethod
// NumValues: 0x0003
enum class EMarvelSpringMethod : uint8
{
	SM_ImplicitEuler                         = 0,
	SM_Verlet                                = 1,
	SM_MAX                                   = 2,
};

// ScriptStruct AnimationPro.AnimNode_IKSovlerAim
// 0x0228 (0x0310 - 0x00E8)
struct FAnimNode_IKSovlerAim final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAimIKConfig                           AimIKConfig;                                       // 0x00F0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x01E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistFromActor;                                  // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AimSocketOffset;                                   // 0x0200(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  AimAxis;                                           // 0x0260(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TipBone;                                           // 0x0280(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0294(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotateLimit;                                // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationTime;                                 // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTriggerThreashold;                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpolationBlend                           InterpolationType;                                 // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUpdateEffectorLocation;                     // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BE[0x52];                                     // 0x02BE(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNode_IKSovlerAim) == 0x000010, "Wrong alignment on FAnimNode_IKSovlerAim");
//static_assert(sizeof(FAnimNode_IKSovlerAim) == 0x000310, "Wrong size on FAnimNode_IKSovlerAim");
//static_assert(offsetof(FAnimNode_IKSovlerAim, AimIKConfig) == 0x0000F0, "Member 'FAnimNode_IKSovlerAim::AimIKConfig' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, EffectorLocation) == 0x0001E0, "Member 'FAnimNode_IKSovlerAim::EffectorLocation' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, MinDistFromActor) == 0x0001F8, "Member 'FAnimNode_IKSovlerAim::MinDistFromActor' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, AimSocketOffset) == 0x000200, "Member 'FAnimNode_IKSovlerAim::AimSocketOffset' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, AimAxis) == 0x000260, "Member 'FAnimNode_IKSovlerAim::AimAxis' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, TipBone) == 0x000280, "Member 'FAnimNode_IKSovlerAim::TipBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, RootBone) == 0x000294, "Member 'FAnimNode_IKSovlerAim::RootBone' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, Tolerance) == 0x0002A8, "Member 'FAnimNode_IKSovlerAim::Tolerance' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, MaxIterations) == 0x0002AC, "Member 'FAnimNode_IKSovlerAim::MaxIterations' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, bEnableRotateLimit) == 0x0002B0, "Member 'FAnimNode_IKSovlerAim::bEnableRotateLimit' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, InterpolationTime) == 0x0002B4, "Member 'FAnimNode_IKSovlerAim::InterpolationTime' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, InterpolationTriggerThreashold) == 0x0002B8, "Member 'FAnimNode_IKSovlerAim::InterpolationTriggerThreashold' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, InterpolationType) == 0x0002BC, "Member 'FAnimNode_IKSovlerAim::InterpolationType' has a wrong offset!");
//static_assert(offsetof(FAnimNode_IKSovlerAim, bShouldUpdateEffectorLocation) == 0x0002BD, "Member 'FAnimNode_IKSovlerAim::bShouldUpdateEffectorLocation' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_AnimQueueCache
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMarvelAnimNode_AnimQueueCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_AnimQueueCache) == 0x000008, "Wrong alignment on FMarvelAnimNode_AnimQueueCache");
//static_assert(sizeof(FMarvelAnimNode_AnimQueueCache) == 0x000038, "Wrong size on FMarvelAnimNode_AnimQueueCache");

// ScriptStruct AnimationPro.MarvelAnimNode_AnimQueue
// 0x0088 (0x00B0 - 0x0028)
struct FMarvelAnimNode_AnimQueue final : public FAnimNode_AssetPlayerRelevancyBase
{
public:
	TArray<class UAnimSequenceBase*>              AnimSequences;                                     // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  BlendNextConditions;                               // 0x0038(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x68];                                      // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_AnimQueue) == 0x000008, "Wrong alignment on FMarvelAnimNode_AnimQueue");
//static_assert(sizeof(FMarvelAnimNode_AnimQueue) == 0x0000B0, "Wrong size on FMarvelAnimNode_AnimQueue");
//static_assert(offsetof(FMarvelAnimNode_AnimQueue, AnimSequences) == 0x000028, "Member 'FMarvelAnimNode_AnimQueue::AnimSequences' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AnimQueue, BlendNextConditions) == 0x000038, "Member 'FMarvelAnimNode_AnimQueue::BlendNextConditions' has a wrong offset!");

// ScriptStruct AnimationPro.AimIKCameraAimInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FAimIKCameraAimInfo final
{
public:
	float                                         TraceLength;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistForward;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAimIKCameraAimInfo) == 0x000008, "Wrong alignment on FAimIKCameraAimInfo");
//static_assert(sizeof(FAimIKCameraAimInfo) == 0x000040, "Wrong size on FAimIKCameraAimInfo");
//static_assert(offsetof(FAimIKCameraAimInfo, TraceLength) == 0x000000, "Member 'FAimIKCameraAimInfo::TraceLength' has a wrong offset!");
//static_assert(offsetof(FAimIKCameraAimInfo, MinDistForward) == 0x000004, "Member 'FAimIKCameraAimInfo::MinDistForward' has a wrong offset!");

// ScriptStruct AnimationPro.AimIKAOMetaDataConfig
// 0x00B0 (0x00B0 - 0x0000)
struct FAimIKAOMetaDataConfig final
{
public:
	struct FTransform                             AimSocketOffset;                                   // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  AimAxis;                                           // 0x0060(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TipBone;                                           // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBone;                                          // 0x008C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationSpeed;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAimIKAOMetaDataConfig) == 0x000010, "Wrong alignment on FAimIKAOMetaDataConfig");
//static_assert(sizeof(FAimIKAOMetaDataConfig) == 0x0000B0, "Wrong size on FAimIKAOMetaDataConfig");
//static_assert(offsetof(FAimIKAOMetaDataConfig, AimSocketOffset) == 0x000000, "Member 'FAimIKAOMetaDataConfig::AimSocketOffset' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, AimAxis) == 0x000060, "Member 'FAimIKAOMetaDataConfig::AimAxis' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, TipBone) == 0x000080, "Member 'FAimIKAOMetaDataConfig::TipBone' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, RootBone) == 0x00008C, "Member 'FAimIKAOMetaDataConfig::RootBone' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, Tolerance) == 0x000098, "Member 'FAimIKAOMetaDataConfig::Tolerance' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, MaxIterations) == 0x00009C, "Member 'FAimIKAOMetaDataConfig::MaxIterations' has a wrong offset!");
//static_assert(offsetof(FAimIKAOMetaDataConfig, InterpolationSpeed) == 0x0000A0, "Member 'FAimIKAOMetaDataConfig::InterpolationSpeed' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_AOWithIKCache
// 0x0090 (0x0090 - 0x0000)
struct FMarvelAnimNode_AOWithIKCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            BlendSpace;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x70];                                      // 0x0010(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            LastBlendSpace;                                    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            CacheBlendSpace;                                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelAnimNode_AOWithIKCache) == 0x000008, "Wrong alignment on FMarvelAnimNode_AOWithIKCache");
//static_assert(sizeof(FMarvelAnimNode_AOWithIKCache) == 0x000090, "Wrong size on FMarvelAnimNode_AOWithIKCache");
//static_assert(offsetof(FMarvelAnimNode_AOWithIKCache, BlendSpace) == 0x000008, "Member 'FMarvelAnimNode_AOWithIKCache::BlendSpace' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIKCache, LastBlendSpace) == 0x000080, "Member 'FMarvelAnimNode_AOWithIKCache::LastBlendSpace' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIKCache, CacheBlendSpace) == 0x000088, "Member 'FMarvelAnimNode_AOWithIKCache::CacheBlendSpace' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_AOWithIK
// 0x02A0 (0x0330 - 0x0090)
struct FMarvelAnimNode_AOWithIK final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              IKBasePose;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAimIKConfig                           AimIKConfig;                                       // 0x00B0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x01A0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipInterpThisFrame;                              // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraAim;                                     // 0x01B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAimIKCameraAimInfo                    CameraAimInfo;                                     // 0x01C0(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeDirectionFromEffector;                     // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          BaseSeq;                                           // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceEnableIK;                                    // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomIKBasePose;                                 // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAllTipBoneChild;                           // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B[0x6D];                                     // 0x021B(0x006D)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        CachedBS;                                          // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationAsset*                        CachedSeq;                                         // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            LastBlendSpace;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            CacheBlendSpace;                                   // 0x02A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x88];                                     // 0x02A8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_AOWithIK) == 0x000010, "Wrong alignment on FMarvelAnimNode_AOWithIK");
//static_assert(sizeof(FMarvelAnimNode_AOWithIK) == 0x000330, "Wrong size on FMarvelAnimNode_AOWithIK");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, BasePose) == 0x000090, "Member 'FMarvelAnimNode_AOWithIK::BasePose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, IKBasePose) == 0x0000A0, "Member 'FMarvelAnimNode_AOWithIK::IKBasePose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, AimIKConfig) == 0x0000B0, "Member 'FMarvelAnimNode_AOWithIK::AimIKConfig' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, EffectorLocation) == 0x0001A0, "Member 'FMarvelAnimNode_AOWithIK::EffectorLocation' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bSkipInterpThisFrame) == 0x0001B8, "Member 'FMarvelAnimNode_AOWithIK::bSkipInterpThisFrame' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bUseCameraAim) == 0x0001B9, "Member 'FMarvelAnimNode_AOWithIK::bUseCameraAim' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, CameraAimInfo) == 0x0001C0, "Member 'FMarvelAnimNode_AOWithIK::CameraAimInfo' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, LODThreshold) == 0x000200, "Member 'FMarvelAnimNode_AOWithIK::LODThreshold' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bComputeDirectionFromEffector) == 0x000204, "Member 'FMarvelAnimNode_AOWithIK::bComputeDirectionFromEffector' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, BaseSeq) == 0x000208, "Member 'FMarvelAnimNode_AOWithIK::BaseSeq' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, Alpha) == 0x000210, "Member 'FMarvelAnimNode_AOWithIK::Alpha' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, BlendTime) == 0x000214, "Member 'FMarvelAnimNode_AOWithIK::BlendTime' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bForceEnableIK) == 0x000218, "Member 'FMarvelAnimNode_AOWithIK::bForceEnableIK' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bCustomIKBasePose) == 0x000219, "Member 'FMarvelAnimNode_AOWithIK::bCustomIKBasePose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, bIncludeAllTipBoneChild) == 0x00021A, "Member 'FMarvelAnimNode_AOWithIK::bIncludeAllTipBoneChild' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, CachedBS) == 0x000288, "Member 'FMarvelAnimNode_AOWithIK::CachedBS' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, CachedSeq) == 0x000290, "Member 'FMarvelAnimNode_AOWithIK::CachedSeq' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, LastBlendSpace) == 0x000298, "Member 'FMarvelAnimNode_AOWithIK::LastBlendSpace' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_AOWithIK, CacheBlendSpace) == 0x0002A0, "Member 'FMarvelAnimNode_AOWithIK::CacheBlendSpace' has a wrong offset!");

// ScriptStruct AnimationPro.PlayedBSIndividualDataBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPlayedBSIndividualDataBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FPlayedBSIndividualDataBase) == 0x000008, "Wrong alignment on FPlayedBSIndividualDataBase");
//static_assert(sizeof(FPlayedBSIndividualDataBase) == 0x000010, "Wrong size on FPlayedBSIndividualDataBase");

// ScriptStruct AnimationPro.PlayedBSIndividualData
// 0x0030 (0x0040 - 0x0010)
struct FPlayedBSIndividualData final : public FPlayedBSIndividualDataBase
{
public:
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FPlayedBSIndividualData) == 0x000008, "Wrong alignment on FPlayedBSIndividualData");
//static_assert(sizeof(FPlayedBSIndividualData) == 0x000040, "Wrong size on FPlayedBSIndividualData");

// ScriptStruct AnimationPro.AnimNodeCache_BlendSpacePlayerWithBlend
// 0x0048 (0x0058 - 0x0010)
struct alignas(0x08) FAnimNodeCache_BlendSpacePlayerWithBlend : public FAnimNode_AssetPlayerCacheBase
{
public:
	uint8                                         Pad_10[0x48];                                      // 0x0010(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNodeCache_BlendSpacePlayerWithBlend) == 0x000008, "Wrong alignment on FAnimNodeCache_BlendSpacePlayerWithBlend");
//static_assert(sizeof(FAnimNodeCache_BlendSpacePlayerWithBlend) == 0x000058, "Wrong size on FAnimNodeCache_BlendSpacePlayerWithBlend");

// ScriptStruct AnimationPro.MarvelAnimNode_BlendSpacePlayerWithBlend
// 0x00A0 (0x0130 - 0x0090)
struct FMarvelAnimNode_BlendSpacePlayerWithBlend : public FAnimNode_BlendSpacePlayer
{
public:
	TArray<class UBlendSpace*>                    PlayedBlendSpaces;                                 // 0x0090(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayedBlendSpaceWeights;                           // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FAlphaBlend>                    PlayedBlendSpaceBlends;                            // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FPlayedBSIndividualData>        PlayedBlendSpaceIndividualDataArray;               // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBlendSpace*, int32>               BlendSpaceTypeCache;                               // 0x00E0(0x0050)(Transient, NativeAccessSpecifierPrivate)
};
//static_assert(alignof(FMarvelAnimNode_BlendSpacePlayerWithBlend) == 0x000008, "Wrong alignment on FMarvelAnimNode_BlendSpacePlayerWithBlend");
//static_assert(sizeof(FMarvelAnimNode_BlendSpacePlayerWithBlend) == 0x000130, "Wrong size on FMarvelAnimNode_BlendSpacePlayerWithBlend");
//static_assert(offsetof(FMarvelAnimNode_BlendSpacePlayerWithBlend, PlayedBlendSpaces) == 0x000090, "Member 'FMarvelAnimNode_BlendSpacePlayerWithBlend::PlayedBlendSpaces' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_BlendSpacePlayerWithBlend, PlayedBlendSpaceWeights) == 0x0000A0, "Member 'FMarvelAnimNode_BlendSpacePlayerWithBlend::PlayedBlendSpaceWeights' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_BlendSpacePlayerWithBlend, PlayedBlendSpaceBlends) == 0x0000B0, "Member 'FMarvelAnimNode_BlendSpacePlayerWithBlend::PlayedBlendSpaceBlends' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_BlendSpacePlayerWithBlend, PlayedBlendSpaceIndividualDataArray) == 0x0000C0, "Member 'FMarvelAnimNode_BlendSpacePlayerWithBlend::PlayedBlendSpaceIndividualDataArray' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_BlendSpacePlayerWithBlend, BlendSpaceTypeCache) == 0x0000E0, "Member 'FMarvelAnimNode_BlendSpacePlayerWithBlend::BlendSpaceTypeCache' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_OutputCompileChoose
// 0x0010 (0x0038 - 0x0028)
struct FMarvelAnimNode_OutputCompileChoose final : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      InputCompilePaths;                                 // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelAnimNode_OutputCompileChoose) == 0x000008, "Wrong alignment on FMarvelAnimNode_OutputCompileChoose");
//static_assert(sizeof(FMarvelAnimNode_OutputCompileChoose) == 0x000038, "Wrong size on FMarvelAnimNode_OutputCompileChoose");
//static_assert(offsetof(FMarvelAnimNode_OutputCompileChoose, InputCompilePaths) == 0x000028, "Member 'FMarvelAnimNode_OutputCompileChoose::InputCompilePaths' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_InputCompileChoose
// 0x0010 (0x0038 - 0x0028)
struct FMarvelAnimNode_InputCompileChoose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0028(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
//static_assert(alignof(FMarvelAnimNode_InputCompileChoose) == 0x000008, "Wrong alignment on FMarvelAnimNode_InputCompileChoose");
//static_assert(sizeof(FMarvelAnimNode_InputCompileChoose) == 0x000038, "Wrong size on FMarvelAnimNode_InputCompileChoose");
//static_assert(offsetof(FMarvelAnimNode_InputCompileChoose, InputPose) == 0x000028, "Member 'FMarvelAnimNode_InputCompileChoose::InputPose' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache
// 0x0001 (0x0001 - 0x0000)
struct FMarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache) == 0x000001, "Wrong alignment on FMarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache");
//static_assert(sizeof(FMarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache) == 0x000001, "Wrong size on FMarvelAnimNode_ComponentSpaceEvaluateFunctionCallCache");

// ScriptStruct AnimationPro.MarvelAnimNode_ComponentSpaceEvaluateFunctionCall
// 0x0018 (0x0100 - 0x00E8)
struct FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   FunctionName;                                      // 0x00E8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall) == 0x000008, "Wrong alignment on FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall");
//static_assert(sizeof(FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall) == 0x000100, "Wrong size on FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall");
//static_assert(offsetof(FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall, FunctionName) == 0x0000E8, "Member 'FMarvelAnimNode_ComponentSpaceEvaluateFunctionCall::FunctionName' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_DistanceMatchingCache
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMarvelAnimNode_DistanceMatchingCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_DistanceMatchingCache) == 0x000004, "Wrong alignment on FMarvelAnimNode_DistanceMatchingCache");
//static_assert(sizeof(FMarvelAnimNode_DistanceMatchingCache) == 0x000004, "Wrong size on FMarvelAnimNode_DistanceMatchingCache");

// ScriptStruct AnimationPro.MarvelAnimNode_DistanceMatching
// 0x0060 (0x00B0 - 0x0050)
struct FMarvelAnimNode_DistanceMatching final : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Sequence;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceCurveName;                                 // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableDistanceLimit : 1;                          // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMinDistanceLimit : 1;                       // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceLimit;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceLimit;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_DistanceMatching) == 0x000008, "Wrong alignment on FMarvelAnimNode_DistanceMatching");
//static_assert(sizeof(FMarvelAnimNode_DistanceMatching) == 0x0000B0, "Wrong size on FMarvelAnimNode_DistanceMatching");
//static_assert(offsetof(FMarvelAnimNode_DistanceMatching, Sequence) == 0x000088, "Member 'FMarvelAnimNode_DistanceMatching::Sequence' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_DistanceMatching, Distance) == 0x000090, "Member 'FMarvelAnimNode_DistanceMatching::Distance' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_DistanceMatching, DistanceCurveName) == 0x000094, "Member 'FMarvelAnimNode_DistanceMatching::DistanceCurveName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_DistanceMatching, DistanceLimit) == 0x0000A4, "Member 'FMarvelAnimNode_DistanceMatching::DistanceLimit' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_DistanceMatching, MinDistanceLimit) == 0x0000A8, "Member 'FMarvelAnimNode_DistanceMatching::MinDistanceLimit' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_EvaluateFunctionCallCache
// 0x0001 (0x0001 - 0x0000)
struct FMarvelAnimNode_EvaluateFunctionCallCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_EvaluateFunctionCallCache) == 0x000001, "Wrong alignment on FMarvelAnimNode_EvaluateFunctionCallCache");
//static_assert(sizeof(FMarvelAnimNode_EvaluateFunctionCallCache) == 0x000001, "Wrong size on FMarvelAnimNode_EvaluateFunctionCallCache");

// ScriptStruct AnimationPro.MarvelAnimNode_EvaluateFunctionCall
// 0x0028 (0x0050 - 0x0028)
struct FMarvelAnimNode_EvaluateFunctionCall final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0038(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_EvaluateFunctionCall) == 0x000008, "Wrong alignment on FMarvelAnimNode_EvaluateFunctionCall");
//static_assert(sizeof(FMarvelAnimNode_EvaluateFunctionCall) == 0x000050, "Wrong size on FMarvelAnimNode_EvaluateFunctionCall");
//static_assert(offsetof(FMarvelAnimNode_EvaluateFunctionCall, Source) == 0x000028, "Member 'FMarvelAnimNode_EvaluateFunctionCall::Source' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_EvaluateFunctionCall, FunctionName) == 0x000038, "Member 'FMarvelAnimNode_EvaluateFunctionCall::FunctionName' has a wrong offset!");

// ScriptStruct AnimationPro.AnimGraphFBIKEndEffector
// 0x0070 (0x0070 - 0x0000)
struct FAnimGraphFBIKEndEffector final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorTargetBoneName;                            // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionDepth;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationDepth;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PULL;                                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimGraphFBIKEndEffector) == 0x000010, "Wrong alignment on FAnimGraphFBIKEndEffector");
//static_assert(sizeof(FAnimGraphFBIKEndEffector) == 0x000070, "Wrong size on FAnimGraphFBIKEndEffector");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, BoneName) == 0x000000, "Member 'FAnimGraphFBIKEndEffector::BoneName' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, EffectorLocationSpace) == 0x00000C, "Member 'FAnimGraphFBIKEndEffector::EffectorLocationSpace' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, EffectorTargetBoneName) == 0x000010, "Member 'FAnimGraphFBIKEndEffector::EffectorTargetBoneName' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, Position) == 0x000020, "Member 'FAnimGraphFBIKEndEffector::Position' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, PositionAlpha) == 0x000038, "Member 'FAnimGraphFBIKEndEffector::PositionAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, PositionDepth) == 0x00003C, "Member 'FAnimGraphFBIKEndEffector::PositionDepth' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, Rotation) == 0x000040, "Member 'FAnimGraphFBIKEndEffector::Rotation' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, RotationAlpha) == 0x000060, "Member 'FAnimGraphFBIKEndEffector::RotationAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, RotationDepth) == 0x000064, "Member 'FAnimGraphFBIKEndEffector::RotationDepth' has a wrong offset!");
//static_assert(offsetof(FAnimGraphFBIKEndEffector, PULL) == 0x000068, "Member 'FAnimGraphFBIKEndEffector::PULL' has a wrong offset!");

// ScriptStruct AnimationPro.AnimGraphSolverInput
// 0x0024 (0x0024 - 0x0000)
struct FAnimGraphSolverInput final
{
public:
	float                                         LinearMotionStrength;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLinearMotionStrength;                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularMotionStrength;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngularMotionStrength;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTargetClamp;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseJacobianTranspose;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimGraphSolverInput) == 0x000004, "Wrong alignment on FAnimGraphSolverInput");
//static_assert(sizeof(FAnimGraphSolverInput) == 0x000024, "Wrong size on FAnimGraphSolverInput");
//static_assert(offsetof(FAnimGraphSolverInput, LinearMotionStrength) == 0x000000, "Member 'FAnimGraphSolverInput::LinearMotionStrength' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, MinLinearMotionStrength) == 0x000004, "Member 'FAnimGraphSolverInput::MinLinearMotionStrength' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, AngularMotionStrength) == 0x000008, "Member 'FAnimGraphSolverInput::AngularMotionStrength' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, MinAngularMotionStrength) == 0x00000C, "Member 'FAnimGraphSolverInput::MinAngularMotionStrength' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, DefaultTargetClamp) == 0x000010, "Member 'FAnimGraphSolverInput::DefaultTargetClamp' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, Precision) == 0x000014, "Member 'FAnimGraphSolverInput::Precision' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, Damping) == 0x000018, "Member 'FAnimGraphSolverInput::Damping' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, MaxIterations) == 0x00001C, "Member 'FAnimGraphSolverInput::MaxIterations' has a wrong offset!");
//static_assert(offsetof(FAnimGraphSolverInput, bUseJacobianTranspose) == 0x000020, "Member 'FAnimGraphSolverInput::bUseJacobianTranspose' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_FullBodyIK
// 0x0208 (0x02F0 - 0x00E8)
struct FMarvelAnimNode_FullBodyIK final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   RootBoneName;                                      // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimGraphFBIKEndEffector>      Effectors;                                         // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAnimGraphSolverInput                  SolverProperty;                                    // 0x0108(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x1C4];                                    // 0x012C(0x01C4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_FullBodyIK) == 0x000008, "Wrong alignment on FMarvelAnimNode_FullBodyIK");
//static_assert(sizeof(FMarvelAnimNode_FullBodyIK) == 0x0002F0, "Wrong size on FMarvelAnimNode_FullBodyIK");
//static_assert(offsetof(FMarvelAnimNode_FullBodyIK, RootBoneName) == 0x0000E8, "Member 'FMarvelAnimNode_FullBodyIK::RootBoneName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_FullBodyIK, Effectors) == 0x0000F8, "Member 'FMarvelAnimNode_FullBodyIK::Effectors' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_FullBodyIK, SolverProperty) == 0x000108, "Member 'FMarvelAnimNode_FullBodyIK::SolverProperty' has a wrong offset!");

// ScriptStruct AnimationPro.SimpleAlphaBlend
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSimpleAlphaBlend final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FSimpleAlphaBlend) == 0x000008, "Wrong alignment on FSimpleAlphaBlend");
//static_assert(sizeof(FSimpleAlphaBlend) == 0x000040, "Wrong size on FSimpleAlphaBlend");

// ScriptStruct AnimationPro.SimpleBlendQueue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSimpleBlendQueue final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FSimpleBlendQueue) == 0x000008, "Wrong alignment on FSimpleBlendQueue");
//static_assert(sizeof(FSimpleBlendQueue) == 0x000018, "Wrong size on FSimpleBlendQueue");

// ScriptStruct AnimationPro.X20LocomotionConfig
// 0x0040 (0x0040 - 0x0000)
struct FX20LocomotionConfig final
{
public:
	float                                         LFAngle;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RFAngle;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LBAngle;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RBAngle;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHipPreferLeft;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHipPreferRight;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FeetCrossingCurveName;                             // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             StateBlendType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StateBlendCurve;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipSwitchDelay;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveStateBlendTime;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityInterpSpeed;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FX20LocomotionConfig) == 0x000008, "Wrong alignment on FX20LocomotionConfig");
//static_assert(sizeof(FX20LocomotionConfig) == 0x000040, "Wrong size on FX20LocomotionConfig");
//static_assert(offsetof(FX20LocomotionConfig, LFAngle) == 0x000000, "Member 'FX20LocomotionConfig::LFAngle' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, RFAngle) == 0x000004, "Member 'FX20LocomotionConfig::RFAngle' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, LBAngle) == 0x000008, "Member 'FX20LocomotionConfig::LBAngle' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, RBAngle) == 0x00000C, "Member 'FX20LocomotionConfig::RBAngle' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, bHipPreferLeft) == 0x000010, "Member 'FX20LocomotionConfig::bHipPreferLeft' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, bHipPreferRight) == 0x000011, "Member 'FX20LocomotionConfig::bHipPreferRight' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, FeetCrossingCurveName) == 0x000014, "Member 'FX20LocomotionConfig::FeetCrossingCurveName' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, StateBlendType) == 0x000020, "Member 'FX20LocomotionConfig::StateBlendType' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, StateBlendCurve) == 0x000028, "Member 'FX20LocomotionConfig::StateBlendCurve' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, HipSwitchDelay) == 0x000030, "Member 'FX20LocomotionConfig::HipSwitchDelay' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, MoveStateBlendTime) == 0x000034, "Member 'FX20LocomotionConfig::MoveStateBlendTime' has a wrong offset!");
//static_assert(offsetof(FX20LocomotionConfig, VelocityInterpSpeed) == 0x000038, "Member 'FX20LocomotionConfig::VelocityInterpSpeed' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_LocomotionCache
// 0x0034 (0x0034 - 0x0000)
struct alignas(0x04) FMarvelAnimNode_LocomotionCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_LocomotionCache) == 0x000004, "Wrong alignment on FMarvelAnimNode_LocomotionCache");
//static_assert(sizeof(FMarvelAnimNode_LocomotionCache) == 0x000034, "Wrong size on FMarvelAnimNode_LocomotionCache");

// ScriptStruct AnimationPro.MarvelAnimNode_Locomotion
// 0x01A8 (0x01D0 - 0x0028)
struct FMarvelAnimNode_Locomotion final : public FAnimNode_Base
{
public:
	struct FPoseLink                              ForwardPose;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              BackwardPose;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              LeftFwdPose;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              LeftBwdPose;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              RightFwdPose;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              RightBwdPose;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsAccelerating;                                   // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorBasedAccAngle;                                // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingBasedAccAngle;                               // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipDirAngle;                                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeTwistOffset;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrouncAccTime;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitBias;                                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x12C];                                     // 0x00A4(0x012C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_Locomotion) == 0x000008, "Wrong alignment on FMarvelAnimNode_Locomotion");
//static_assert(sizeof(FMarvelAnimNode_Locomotion) == 0x0001D0, "Wrong size on FMarvelAnimNode_Locomotion");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, ForwardPose) == 0x000028, "Member 'FMarvelAnimNode_Locomotion::ForwardPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, BackwardPose) == 0x000038, "Member 'FMarvelAnimNode_Locomotion::BackwardPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, LeftFwdPose) == 0x000048, "Member 'FMarvelAnimNode_Locomotion::LeftFwdPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, LeftBwdPose) == 0x000058, "Member 'FMarvelAnimNode_Locomotion::LeftBwdPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, RightFwdPose) == 0x000068, "Member 'FMarvelAnimNode_Locomotion::RightFwdPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, RightBwdPose) == 0x000078, "Member 'FMarvelAnimNode_Locomotion::RightBwdPose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, bIsAccelerating) == 0x000088, "Member 'FMarvelAnimNode_Locomotion::bIsAccelerating' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, ActorBasedAccAngle) == 0x00008C, "Member 'FMarvelAnimNode_Locomotion::ActorBasedAccAngle' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, AimingBasedAccAngle) == 0x000090, "Member 'FMarvelAnimNode_Locomotion::AimingBasedAccAngle' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, HipDirAngle) == 0x000094, "Member 'FMarvelAnimNode_Locomotion::HipDirAngle' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, MeleeTwistOffset) == 0x000098, "Member 'FMarvelAnimNode_Locomotion::MeleeTwistOffset' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, GrouncAccTime) == 0x00009C, "Member 'FMarvelAnimNode_Locomotion::GrouncAccTime' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_Locomotion, InitBias) == 0x0000A0, "Member 'FMarvelAnimNode_Locomotion::InitBias' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_ModifyBoneArray
// 0x0058 (0x0140 - 0x00E8)
struct FMarvelAnimNode_ModifyBoneArray final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<class FName>                           ModifyBoneNames;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TranslationArray;                                  // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       RotationArray;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ScaleArray;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0129(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x012A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x012B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x012D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x12];                                     // 0x012E(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_ModifyBoneArray) == 0x000008, "Wrong alignment on FMarvelAnimNode_ModifyBoneArray");
//static_assert(sizeof(FMarvelAnimNode_ModifyBoneArray) == 0x000140, "Wrong size on FMarvelAnimNode_ModifyBoneArray");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, ModifyBoneNames) == 0x0000E8, "Member 'FMarvelAnimNode_ModifyBoneArray::ModifyBoneNames' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, TranslationArray) == 0x0000F8, "Member 'FMarvelAnimNode_ModifyBoneArray::TranslationArray' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, RotationArray) == 0x000108, "Member 'FMarvelAnimNode_ModifyBoneArray::RotationArray' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, ScaleArray) == 0x000118, "Member 'FMarvelAnimNode_ModifyBoneArray::ScaleArray' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, TranslationMode) == 0x000128, "Member 'FMarvelAnimNode_ModifyBoneArray::TranslationMode' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, RotationMode) == 0x000129, "Member 'FMarvelAnimNode_ModifyBoneArray::RotationMode' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, ScaleMode) == 0x00012A, "Member 'FMarvelAnimNode_ModifyBoneArray::ScaleMode' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, TranslationSpace) == 0x00012B, "Member 'FMarvelAnimNode_ModifyBoneArray::TranslationSpace' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, RotationSpace) == 0x00012C, "Member 'FMarvelAnimNode_ModifyBoneArray::RotationSpace' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_ModifyBoneArray, ScaleSpace) == 0x00012D, "Member 'FMarvelAnimNode_ModifyBoneArray::ScaleSpace' has a wrong offset!");

// ScriptStruct AnimationPro.BoneRef
// 0x0014 (0x0014 - 0x0000)
struct FBoneRef final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FBoneRef) == 0x000004, "Wrong alignment on FBoneRef");
//static_assert(sizeof(FBoneRef) == 0x000014, "Wrong size on FBoneRef");
//static_assert(offsetof(FBoneRef, bone) == 0x000000, "Member 'FBoneRef::bone' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_OrientationWarping
// 0x0048 (0x0130 - 0x00E8)
struct FMarvelAnimNode_OrientationWarping final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         Direction;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyAlpha;                                    // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x00F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0108(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneRef>                       SpineBones;                                        // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelAnimNode_OrientationWarping) == 0x000008, "Wrong alignment on FMarvelAnimNode_OrientationWarping");
//static_assert(sizeof(FMarvelAnimNode_OrientationWarping) == 0x000130, "Wrong size on FMarvelAnimNode_OrientationWarping");
//static_assert(offsetof(FMarvelAnimNode_OrientationWarping, Direction) == 0x0000E8, "Member 'FMarvelAnimNode_OrientationWarping::Direction' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OrientationWarping, UpperBodyAlpha) == 0x0000EC, "Member 'FMarvelAnimNode_OrientationWarping::UpperBodyAlpha' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OrientationWarping, UpAxis) == 0x0000F0, "Member 'FMarvelAnimNode_OrientationWarping::UpAxis' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OrientationWarping, RootBone) == 0x000108, "Member 'FMarvelAnimNode_OrientationWarping::RootBone' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OrientationWarping, SpineBones) == 0x000120, "Member 'FMarvelAnimNode_OrientationWarping::SpineBones' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_OverBlendCache
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMarvelAnimNode_OverBlendCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_OverBlendCache) == 0x000004, "Wrong alignment on FMarvelAnimNode_OverBlendCache");
//static_assert(sizeof(FMarvelAnimNode_OverBlendCache) == 0x000004, "Wrong size on FMarvelAnimNode_OverBlendCache");

// ScriptStruct AnimationPro.MarvelAnimNode_OverBlend
// 0x0028 (0x0050 - 0x0028)
struct FMarvelAnimNode_OverBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         BitPad_48_0 : 2;                                   // 0x0048(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bResetChildOnActivation : 1;                       // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelAnimNode_OverBlend) == 0x000008, "Wrong alignment on FMarvelAnimNode_OverBlend");
//static_assert(sizeof(FMarvelAnimNode_OverBlend) == 0x000050, "Wrong size on FMarvelAnimNode_OverBlend");
//static_assert(offsetof(FMarvelAnimNode_OverBlend, A) == 0x000028, "Member 'FMarvelAnimNode_OverBlend::A' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OverBlend, B) == 0x000038, "Member 'FMarvelAnimNode_OverBlend::B' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_OverBlend, Alpha) == 0x00004C, "Member 'FMarvelAnimNode_OverBlend::Alpha' has a wrong offset!");

// ScriptStruct AnimationPro.AnimGraphPBIKEffector
// 0x00A0 (0x00A0 - 0x0000)
struct FAnimGraphPBIKEffector final
{
public:
	class FName                                   bone;                                              // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectorTargetBoneName;                            // 0x0074(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAlpha;                                     // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullChainAlpha;                                    // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PinRotation;                                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimGraphPBIKEffector) == 0x000010, "Wrong alignment on FAnimGraphPBIKEffector");
//static_assert(sizeof(FAnimGraphPBIKEffector) == 0x0000A0, "Wrong size on FAnimGraphPBIKEffector");
//static_assert(offsetof(FAnimGraphPBIKEffector, bone) == 0x000000, "Member 'FAnimGraphPBIKEffector::bone' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, Transform) == 0x000010, "Member 'FAnimGraphPBIKEffector::Transform' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, EffectorLocationSpace) == 0x000070, "Member 'FAnimGraphPBIKEffector::EffectorLocationSpace' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, EffectorTargetBoneName) == 0x000074, "Member 'FAnimGraphPBIKEffector::EffectorTargetBoneName' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, PositionAlpha) == 0x000080, "Member 'FAnimGraphPBIKEffector::PositionAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, RotationAlpha) == 0x000084, "Member 'FAnimGraphPBIKEffector::RotationAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, StrengthAlpha) == 0x000088, "Member 'FAnimGraphPBIKEffector::StrengthAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, PullChainAlpha) == 0x00008C, "Member 'FAnimGraphPBIKEffector::PullChainAlpha' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKEffector, PinRotation) == 0x000090, "Member 'FAnimGraphPBIKEffector::PinRotation' has a wrong offset!");

// ScriptStruct AnimationPro.AnimGraphPBIKBoneSetting
// 0x0058 (0x0058 - 0x0000)
struct FAnimGraphPBIKBoneSetting final
{
public:
	class FName                                   bone;                                              // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationStiffness;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStiffness;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                X;                                                 // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinX;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                Y;                                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinY;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                Z;                                                 // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinZ;                                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePreferredAngles;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreferredAngles;                                   // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FAnimGraphPBIKBoneSetting) == 0x000008, "Wrong alignment on FAnimGraphPBIKBoneSetting");
//static_assert(sizeof(FAnimGraphPBIKBoneSetting) == 0x000058, "Wrong size on FAnimGraphPBIKBoneSetting");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, bone) == 0x000000, "Member 'FAnimGraphPBIKBoneSetting::bone' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, RotationStiffness) == 0x00000C, "Member 'FAnimGraphPBIKBoneSetting::RotationStiffness' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, PositionStiffness) == 0x000010, "Member 'FAnimGraphPBIKBoneSetting::PositionStiffness' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, X) == 0x000014, "Member 'FAnimGraphPBIKBoneSetting::X' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MinX) == 0x000018, "Member 'FAnimGraphPBIKBoneSetting::MinX' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MaxX) == 0x00001C, "Member 'FAnimGraphPBIKBoneSetting::MaxX' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, Y) == 0x000020, "Member 'FAnimGraphPBIKBoneSetting::Y' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MinY) == 0x000024, "Member 'FAnimGraphPBIKBoneSetting::MinY' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MaxY) == 0x000028, "Member 'FAnimGraphPBIKBoneSetting::MaxY' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, Z) == 0x00002C, "Member 'FAnimGraphPBIKBoneSetting::Z' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MinZ) == 0x000030, "Member 'FAnimGraphPBIKBoneSetting::MinZ' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, MaxZ) == 0x000034, "Member 'FAnimGraphPBIKBoneSetting::MaxZ' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, bUsePreferredAngles) == 0x000038, "Member 'FAnimGraphPBIKBoneSetting::bUsePreferredAngles' has a wrong offset!");
//static_assert(offsetof(FAnimGraphPBIKBoneSetting, PreferredAngles) == 0x000040, "Member 'FAnimGraphPBIKBoneSetting::PreferredAngles' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_PBIK
// 0x01C0 (0x02A8 - 0x00E8)
struct FMarvelAnimNode_PBIK final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   RootBoneName;                                      // 0x00E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x14];                                      // 0x00F4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimGraphPBIKEffector>         Effectors;                                         // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimGraphPBIKBoneSetting>      BoneSettings;                                      // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectorSolverIndices;                             // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            BoneIndexToSolverBoneIndex;                        // 0x0138(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            SolverBoneIndexToBoneIndex;                        // 0x0188(0x0050)(Transient, NativeAccessSpecifierPublic)
	struct FPBIKSolverSettings                    Settings;                                          // 0x01D8(0x003C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPBIKSolver                            Solver;                                            // 0x0218(0x0068)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x20];                                     // 0x0280(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasInit;                                          // 0x02A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_PBIK) == 0x000008, "Wrong alignment on FMarvelAnimNode_PBIK");
//static_assert(sizeof(FMarvelAnimNode_PBIK) == 0x0002A8, "Wrong size on FMarvelAnimNode_PBIK");
//static_assert(offsetof(FMarvelAnimNode_PBIK, RootBoneName) == 0x0000E8, "Member 'FMarvelAnimNode_PBIK::RootBoneName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, Effectors) == 0x000108, "Member 'FMarvelAnimNode_PBIK::Effectors' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, BoneSettings) == 0x000118, "Member 'FMarvelAnimNode_PBIK::BoneSettings' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, EffectorSolverIndices) == 0x000128, "Member 'FMarvelAnimNode_PBIK::EffectorSolverIndices' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, BoneIndexToSolverBoneIndex) == 0x000138, "Member 'FMarvelAnimNode_PBIK::BoneIndexToSolverBoneIndex' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, SolverBoneIndexToBoneIndex) == 0x000188, "Member 'FMarvelAnimNode_PBIK::SolverBoneIndexToBoneIndex' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, Settings) == 0x0001D8, "Member 'FMarvelAnimNode_PBIK::Settings' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, Solver) == 0x000218, "Member 'FMarvelAnimNode_PBIK::Solver' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PBIK, bHasInit) == 0x0002A0, "Member 'FMarvelAnimNode_PBIK::bHasInit' has a wrong offset!");

// ScriptStruct AnimationPro.PoseQueueBakedData
// 0x0020 (0x0020 - 0x0000)
struct FPoseQueueBakedData final
{
public:
	TArray<int32>                                 PlayerNodeIndices;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FPoseQueueBakedData) == 0x000008, "Wrong alignment on FPoseQueueBakedData");
//static_assert(sizeof(FPoseQueueBakedData) == 0x000020, "Wrong size on FPoseQueueBakedData");
//static_assert(offsetof(FPoseQueueBakedData, PlayerNodeIndices) == 0x000000, "Member 'FPoseQueueBakedData::PlayerNodeIndices' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_PoseQueue
// 0x0030 (0x00A0 - 0x0070)
struct FMarvelAnimNode_PoseQueue final : public FAnimNode_BlendListBase
{
public:
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseQueueBakedData>            PlayerNodeData;                                    // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  BlendNextConditions;                               // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_PoseQueue) == 0x000008, "Wrong alignment on FMarvelAnimNode_PoseQueue");
//static_assert(sizeof(FMarvelAnimNode_PoseQueue) == 0x0000A0, "Wrong size on FMarvelAnimNode_PoseQueue");
//static_assert(offsetof(FMarvelAnimNode_PoseQueue, PlayerNodeData) == 0x000078, "Member 'FMarvelAnimNode_PoseQueue::PlayerNodeData' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_PoseQueue, BlendNextConditions) == 0x000088, "Member 'FMarvelAnimNode_PoseQueue::BlendNextConditions' has a wrong offset!");

// ScriptStruct AnimationPro.AnimNodeCache_RotationOffsetBlendSpaceWithBlend
// 0x0008 (0x0060 - 0x0058)
struct FAnimNodeCache_RotationOffsetBlendSpaceWithBlend final : public FAnimNodeCache_BlendSpacePlayerWithBlend
{
public:
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNodeCache_RotationOffsetBlendSpaceWithBlend) == 0x000008, "Wrong alignment on FAnimNodeCache_RotationOffsetBlendSpaceWithBlend");
//static_assert(sizeof(FAnimNodeCache_RotationOffsetBlendSpaceWithBlend) == 0x000060, "Wrong size on FAnimNodeCache_RotationOffsetBlendSpaceWithBlend");

// ScriptStruct AnimationPro.MarvelAnimNode_RotationOffsetBlendSpaceWithBlend
// 0x00B0 (0x01E0 - 0x0130)
struct FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend final : public FMarvelAnimNode_BlendSpacePlayerWithBlend
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0130(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0150(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0198(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x01A4(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend) == 0x000008, "Wrong alignment on FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend");
//static_assert(sizeof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend) == 0x0001E0, "Wrong size on FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, BasePose) == 0x000130, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::BasePose' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, LODThreshold) == 0x000140, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::LODThreshold' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, Alpha) == 0x000144, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::Alpha' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, AlphaScaleBias) == 0x000148, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::AlphaScaleBias' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, AlphaBoolBlend) == 0x000150, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::AlphaBoolBlend' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, AlphaCurveName) == 0x000198, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::AlphaCurveName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, AlphaScaleBiasClamp) == 0x0001A4, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::AlphaScaleBiasClamp' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, AlphaInputType) == 0x0001D8, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::AlphaInputType' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend, bAlphaBoolEnabled) == 0x0001D9, "Member 'FMarvelAnimNode_RotationOffsetBlendSpaceWithBlend::bAlphaBoolEnabled' has a wrong offset!");

// ScriptStruct AnimationPro.AnimNodeCache_SequencePlayerWithBlend
// 0x0038 (0x0048 - 0x0010)
struct alignas(0x08) FAnimNodeCache_SequencePlayerWithBlend final : public FAnimNode_AssetPlayerCacheBase
{
public:
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FAnimNodeCache_SequencePlayerWithBlend) == 0x000008, "Wrong alignment on FAnimNodeCache_SequencePlayerWithBlend");
//static_assert(sizeof(FAnimNodeCache_SequencePlayerWithBlend) == 0x000048, "Wrong size on FAnimNodeCache_SequencePlayerWithBlend");

// ScriptStruct AnimationPro.MarvelAnimNode_SequencePlayerWithBlend
// 0x0040 (0x00A0 - 0x0060)
struct FMarvelAnimNode_SequencePlayerWithBlend final : public FAnimNode_SequencePlayer
{
public:
	class UAnimSequenceBase*                      LastSequence;                                      // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAnimSequenceBase*>              PlayedSequences;                                   // 0x0068(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<float>                                 PlayedSequenceWeights;                             // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FAlphaBlend>                    PlayedSequenceBlends;                              // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_SequencePlayerWithBlend) == 0x000008, "Wrong alignment on FMarvelAnimNode_SequencePlayerWithBlend");
//static_assert(sizeof(FMarvelAnimNode_SequencePlayerWithBlend) == 0x0000A0, "Wrong size on FMarvelAnimNode_SequencePlayerWithBlend");
//static_assert(offsetof(FMarvelAnimNode_SequencePlayerWithBlend, LastSequence) == 0x000060, "Member 'FMarvelAnimNode_SequencePlayerWithBlend::LastSequence' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SequencePlayerWithBlend, PlayedSequences) == 0x000068, "Member 'FMarvelAnimNode_SequencePlayerWithBlend::PlayedSequences' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SequencePlayerWithBlend, PlayedSequenceWeights) == 0x000078, "Member 'FMarvelAnimNode_SequencePlayerWithBlend::PlayedSequenceWeights' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SequencePlayerWithBlend, PlayedSequenceBlends) == 0x000088, "Member 'FMarvelAnimNode_SequencePlayerWithBlend::PlayedSequenceBlends' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_SourceBlendCache
// 0x0000 (0x0020 - 0x0020)
struct FMarvelAnimNode_SourceBlendCache final : public FAnimNode_BlendListBaseCache
{
};
//static_assert(alignof(FMarvelAnimNode_SourceBlendCache) == 0x000008, "Wrong alignment on FMarvelAnimNode_SourceBlendCache");
//static_assert(sizeof(FMarvelAnimNode_SourceBlendCache) == 0x000020, "Wrong size on FMarvelAnimNode_SourceBlendCache");

// ScriptStruct AnimationPro.MarvelAnimNode_SourceBlend
// 0x0028 (0x0098 - 0x0070)
struct FMarvelAnimNode_SourceBlend final : public FAnimNode_BlendListBase
{
public:
	struct FPoseLink                              Source;                                            // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ConditionFunctionName;                             // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0xB];                                       // 0x008D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_SourceBlend) == 0x000008, "Wrong alignment on FMarvelAnimNode_SourceBlend");
//static_assert(sizeof(FMarvelAnimNode_SourceBlend) == 0x000098, "Wrong size on FMarvelAnimNode_SourceBlend");
//static_assert(offsetof(FMarvelAnimNode_SourceBlend, Source) == 0x000070, "Member 'FMarvelAnimNode_SourceBlend::Source' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SourceBlend, ConditionFunctionName) == 0x000080, "Member 'FMarvelAnimNode_SourceBlend::ConditionFunctionName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SourceBlend, Condition) == 0x00008C, "Member 'FMarvelAnimNode_SourceBlend::Condition' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelSpringBonePair
// 0x0020 (0x0020 - 0x0000)
struct FMarvelSpringBonePair final
{
public:
	class FName                                   RootBone;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TipBone;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelSpringBonePair) == 0x000004, "Wrong alignment on FMarvelSpringBonePair");
//static_assert(sizeof(FMarvelSpringBonePair) == 0x000020, "Wrong size on FMarvelSpringBonePair");
//static_assert(offsetof(FMarvelSpringBonePair, RootBone) == 0x000000, "Member 'FMarvelSpringBonePair::RootBone' has a wrong offset!");
//static_assert(offsetof(FMarvelSpringBonePair, TipBone) == 0x00000C, "Member 'FMarvelSpringBonePair::TipBone' has a wrong offset!");
//static_assert(offsetof(FMarvelSpringBonePair, SpringStiffness) == 0x000018, "Member 'FMarvelSpringBonePair::SpringStiffness' has a wrong offset!");
//static_assert(offsetof(FMarvelSpringBonePair, SpringDamping) == 0x00001C, "Member 'FMarvelSpringBonePair::SpringDamping' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelExternalSpringBoneChain
// 0x0010 (0x0010 - 0x0000)
struct FMarvelExternalSpringBoneChain final
{
public:
	TArray<struct FMarvelSpringBonePair>          ExternalBones;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(FMarvelExternalSpringBoneChain) == 0x000008, "Wrong alignment on FMarvelExternalSpringBoneChain");
//static_assert(sizeof(FMarvelExternalSpringBoneChain) == 0x000010, "Wrong size on FMarvelExternalSpringBoneChain");
//static_assert(offsetof(FMarvelExternalSpringBoneChain, ExternalBones) == 0x000000, "Member 'FMarvelExternalSpringBoneChain::ExternalBones' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_SpringBoneChain
// 0x0118 (0x0200 - 0x00E8)
struct FMarvelAnimNode_SpringBoneChain final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TipBone;                                           // 0x00E8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x00FC(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRootMovement;                               // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelSpringWeight                           SpringWeightMode;                                  // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpringWeightCurve;                                // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SpringStiffnessCurve;                              // 0x0120(0x0088)(Edit, NativeAccessSpecifierPublic)
	EMarvelSpringMethod                           SpringMethod;                                      // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelExternalSpringBoneChain         ExternalSpringBoneChains;                          // 0x01B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x40];                                     // 0x01C0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_SpringBoneChain) == 0x000008, "Wrong alignment on FMarvelAnimNode_SpringBoneChain");
//static_assert(sizeof(FMarvelAnimNode_SpringBoneChain) == 0x000200, "Wrong size on FMarvelAnimNode_SpringBoneChain");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, TipBone) == 0x0000E8, "Member 'FMarvelAnimNode_SpringBoneChain::TipBone' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, RootBone) == 0x0000FC, "Member 'FMarvelAnimNode_SpringBoneChain::RootBone' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, SpringStiffness) == 0x000110, "Member 'FMarvelAnimNode_SpringBoneChain::SpringStiffness' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, SpringDamping) == 0x000114, "Member 'FMarvelAnimNode_SpringBoneChain::SpringDamping' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, bIgnoreRootMovement) == 0x000118, "Member 'FMarvelAnimNode_SpringBoneChain::bIgnoreRootMovement' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, SpringWeightMode) == 0x000119, "Member 'FMarvelAnimNode_SpringBoneChain::SpringWeightMode' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, bSpringWeightCurve) == 0x00011A, "Member 'FMarvelAnimNode_SpringBoneChain::bSpringWeightCurve' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, SpringStiffnessCurve) == 0x000120, "Member 'FMarvelAnimNode_SpringBoneChain::SpringStiffnessCurve' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, SpringMethod) == 0x0001A8, "Member 'FMarvelAnimNode_SpringBoneChain::SpringMethod' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringBoneChain, ExternalSpringBoneChains) == 0x0001B0, "Member 'FMarvelAnimNode_SpringBoneChain::ExternalSpringBoneChains' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelAnimNode_SpringHitCache
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FMarvelAnimNode_SpringHitCache final : public FAniNodeCacheBase
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_SpringHitCache) == 0x000004, "Wrong alignment on FMarvelAnimNode_SpringHitCache");
//static_assert(sizeof(FMarvelAnimNode_SpringHitCache) == 0x000014, "Wrong size on FMarvelAnimNode_SpringHitCache");

// ScriptStruct AnimationPro.MarvelAnimNode_SpringHit
// 0x0160 (0x0188 - 0x0028)
struct FMarvelAnimNode_SpringHit final : public FAnimNode_Base
{
public:
	struct FPoseLink                              base;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0058(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x00AC(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringAlpha;                                       // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x4];                                       // 0x00E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TipBone;                                           // 0x00EC(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0100(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRootMovement;                               // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x6B];                                     // 0x011D(0x006B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelAnimNode_SpringHit) == 0x000008, "Wrong alignment on FMarvelAnimNode_SpringHit");
//static_assert(sizeof(FMarvelAnimNode_SpringHit) == 0x000188, "Wrong size on FMarvelAnimNode_SpringHit");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, base) == 0x000028, "Member 'FMarvelAnimNode_SpringHit::base' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, Additive) == 0x000038, "Member 'FMarvelAnimNode_SpringHit::Additive' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, Alpha) == 0x000048, "Member 'FMarvelAnimNode_SpringHit::Alpha' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, AlphaScaleBias) == 0x00004C, "Member 'FMarvelAnimNode_SpringHit::AlphaScaleBias' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, LODThreshold) == 0x000054, "Member 'FMarvelAnimNode_SpringHit::LODThreshold' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, AlphaBoolBlend) == 0x000058, "Member 'FMarvelAnimNode_SpringHit::AlphaBoolBlend' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, AlphaCurveName) == 0x0000A0, "Member 'FMarvelAnimNode_SpringHit::AlphaCurveName' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, AlphaScaleBiasClamp) == 0x0000AC, "Member 'FMarvelAnimNode_SpringHit::AlphaScaleBiasClamp' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, AlphaInputType) == 0x0000E0, "Member 'FMarvelAnimNode_SpringHit::AlphaInputType' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, bAlphaBoolEnabled) == 0x0000E1, "Member 'FMarvelAnimNode_SpringHit::bAlphaBoolEnabled' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, SpringAlpha) == 0x0000E4, "Member 'FMarvelAnimNode_SpringHit::SpringAlpha' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, TipBone) == 0x0000EC, "Member 'FMarvelAnimNode_SpringHit::TipBone' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, RootBone) == 0x000100, "Member 'FMarvelAnimNode_SpringHit::RootBone' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, SpringStiffness) == 0x000114, "Member 'FMarvelAnimNode_SpringHit::SpringStiffness' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, SpringDamping) == 0x000118, "Member 'FMarvelAnimNode_SpringHit::SpringDamping' has a wrong offset!");
//static_assert(offsetof(FMarvelAnimNode_SpringHit, bIgnoreRootMovement) == 0x00011C, "Member 'FMarvelAnimNode_SpringHit::bIgnoreRootMovement' has a wrong offset!");

// ScriptStruct AnimationPro.MarvelVehicleAnimNode_GoatChariotAdjust
// 0x0060 (0x0148 - 0x00E8)
struct FMarvelVehicleAnimNode_GoatChariotAdjust final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FBoneReference>                 SrcBones;                                          // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKBones;                                           // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         YokeBone;                                          // 0x0108(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftGoatChestBone;                                 // 0x011C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightGoatChestBone;                                // 0x0130(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(FMarvelVehicleAnimNode_GoatChariotAdjust) == 0x000008, "Wrong alignment on FMarvelVehicleAnimNode_GoatChariotAdjust");
//static_assert(sizeof(FMarvelVehicleAnimNode_GoatChariotAdjust) == 0x000148, "Wrong size on FMarvelVehicleAnimNode_GoatChariotAdjust");
//static_assert(offsetof(FMarvelVehicleAnimNode_GoatChariotAdjust, SrcBones) == 0x0000E8, "Member 'FMarvelVehicleAnimNode_GoatChariotAdjust::SrcBones' has a wrong offset!");
//static_assert(offsetof(FMarvelVehicleAnimNode_GoatChariotAdjust, IKBones) == 0x0000F8, "Member 'FMarvelVehicleAnimNode_GoatChariotAdjust::IKBones' has a wrong offset!");
//static_assert(offsetof(FMarvelVehicleAnimNode_GoatChariotAdjust, YokeBone) == 0x000108, "Member 'FMarvelVehicleAnimNode_GoatChariotAdjust::YokeBone' has a wrong offset!");
//static_assert(offsetof(FMarvelVehicleAnimNode_GoatChariotAdjust, LeftGoatChestBone) == 0x00011C, "Member 'FMarvelVehicleAnimNode_GoatChariotAdjust::LeftGoatChestBone' has a wrong offset!");
//static_assert(offsetof(FMarvelVehicleAnimNode_GoatChariotAdjust, RightGoatChestBone) == 0x000130, "Member 'FMarvelVehicleAnimNode_GoatChariotAdjust::RightGoatChestBone' has a wrong offset!");

}

