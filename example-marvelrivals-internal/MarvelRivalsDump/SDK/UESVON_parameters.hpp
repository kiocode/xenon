#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UESVON

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function UESVON.AITask_SVONMoveTo.SVONAIMoveTo
// 0x0040 (0x0040 - 0x0000)
struct AITask_SVONMoveTo_SVONAIMoveTo final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AUseAsyncPathfinding;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GoalActor;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIOptionFlag                                 StopOnOverlap;                                     // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockAILogic;                                      // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseContinuosGoalTracking;                         // 0x0036(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAITask_SVONMoveTo*                     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AITask_SVONMoveTo_SVONAIMoveTo) == 0x000008, "Wrong alignment on AITask_SVONMoveTo_SVONAIMoveTo");
//static_assert(sizeof(AITask_SVONMoveTo_SVONAIMoveTo) == 0x000040, "Wrong size on AITask_SVONMoveTo_SVONAIMoveTo");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, Controller) == 0x000000, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::Controller' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, GoalLocation) == 0x000008, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::GoalLocation' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, AUseAsyncPathfinding) == 0x000020, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::AUseAsyncPathfinding' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, GoalActor) == 0x000028, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::GoalActor' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, AcceptanceRadius) == 0x000030, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::AcceptanceRadius' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, StopOnOverlap) == 0x000034, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::StopOnOverlap' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, bLockAILogic) == 0x000035, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::bLockAILogic' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, bUseContinuosGoalTracking) == 0x000036, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::bUseContinuosGoalTracking' has a wrong offset!");
//static_assert(offsetof(AITask_SVONMoveTo_SVONAIMoveTo, ReturnValue) == 0x000038, "Member 'AITask_SVONMoveTo_SVONAIMoveTo::ReturnValue' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.GetSVOPointsInBox
// 0x0030 (0x0030 - 0x0000)
struct SVONNavigationComponent_GetSVOPointsInBox final
{
public:
	struct FVector                                CenterPos;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Half;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFindCount;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPoints;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SVONNavigationComponent_GetSVOPointsInBox) == 0x000008, "Wrong alignment on SVONNavigationComponent_GetSVOPointsInBox");
//static_assert(sizeof(SVONNavigationComponent_GetSVOPointsInBox) == 0x000030, "Wrong size on SVONNavigationComponent_GetSVOPointsInBox");
//static_assert(offsetof(SVONNavigationComponent_GetSVOPointsInBox, CenterPos) == 0x000000, "Member 'SVONNavigationComponent_GetSVOPointsInBox::CenterPos' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_GetSVOPointsInBox, Half) == 0x000018, "Member 'SVONNavigationComponent_GetSVOPointsInBox::Half' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_GetSVOPointsInBox, MaxFindCount) == 0x00001C, "Member 'SVONNavigationComponent_GetSVOPointsInBox::MaxFindCount' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_GetSVOPointsInBox, OutPoints) == 0x000020, "Member 'SVONNavigationComponent_GetSVOPointsInBox::OutPoints' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.K2_FindPathImmediate
// 0x0048 (0x0048 - 0x0000)
struct SVONNavigationComponent_K2_FindPathImmediate final
{
public:
	struct FVector                                StartPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathPoints;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(SVONNavigationComponent_K2_FindPathImmediate) == 0x000008, "Wrong alignment on SVONNavigationComponent_K2_FindPathImmediate");
//static_assert(sizeof(SVONNavigationComponent_K2_FindPathImmediate) == 0x000048, "Wrong size on SVONNavigationComponent_K2_FindPathImmediate");
//static_assert(offsetof(SVONNavigationComponent_K2_FindPathImmediate, StartPosition) == 0x000000, "Member 'SVONNavigationComponent_K2_FindPathImmediate::StartPosition' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_K2_FindPathImmediate, TargetPosition) == 0x000018, "Member 'SVONNavigationComponent_K2_FindPathImmediate::TargetPosition' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_K2_FindPathImmediate, OutPathPoints) == 0x000030, "Member 'SVONNavigationComponent_K2_FindPathImmediate::OutPathPoints' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_K2_FindPathImmediate, ReturnValue) == 0x000040, "Member 'SVONNavigationComponent_K2_FindPathImmediate::ReturnValue' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.K2_SetFixedIterationTime
// 0x0004 (0x0004 - 0x0000)
struct SVONNavigationComponent_K2_SetFixedIterationTime final
{
public:
	int32                                         FixedTimes;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SVONNavigationComponent_K2_SetFixedIterationTime) == 0x000004, "Wrong alignment on SVONNavigationComponent_K2_SetFixedIterationTime");
//static_assert(sizeof(SVONNavigationComponent_K2_SetFixedIterationTime) == 0x000004, "Wrong size on SVONNavigationComponent_K2_SetFixedIterationTime");
//static_assert(offsetof(SVONNavigationComponent_K2_SetFixedIterationTime, FixedTimes) == 0x000000, "Member 'SVONNavigationComponent_K2_SetFixedIterationTime::FixedTimes' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.K2_UpdateVolume
// 0x0010 (0x0010 - 0x0000)
struct SVONNavigationComponent_K2_UpdateVolume final
{
public:
	class ASVONVolume*                            OptVolume;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(SVONNavigationComponent_K2_UpdateVolume) == 0x000008, "Wrong alignment on SVONNavigationComponent_K2_UpdateVolume");
//static_assert(sizeof(SVONNavigationComponent_K2_UpdateVolume) == 0x000010, "Wrong size on SVONNavigationComponent_K2_UpdateVolume");
//static_assert(offsetof(SVONNavigationComponent_K2_UpdateVolume, OptVolume) == 0x000000, "Member 'SVONNavigationComponent_K2_UpdateVolume::OptVolume' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_K2_UpdateVolume, ReturnValue) == 0x000008, "Member 'SVONNavigationComponent_K2_UpdateVolume::ReturnValue' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.TryCancelCurrentMoveTask
// 0x0001 (0x0001 - 0x0000)
struct SVONNavigationComponent_TryCancelCurrentMoveTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SVONNavigationComponent_TryCancelCurrentMoveTask) == 0x000001, "Wrong alignment on SVONNavigationComponent_TryCancelCurrentMoveTask");
//static_assert(sizeof(SVONNavigationComponent_TryCancelCurrentMoveTask) == 0x000001, "Wrong size on SVONNavigationComponent_TryCancelCurrentMoveTask");
//static_assert(offsetof(SVONNavigationComponent_TryCancelCurrentMoveTask, ReturnValue) == 0x000000, "Member 'SVONNavigationComponent_TryCancelCurrentMoveTask::ReturnValue' has a wrong offset!");

// Function UESVON.SVONNavigationComponent.IsPositionSVOBlocked
// 0x0020 (0x0020 - 0x0000)
struct SVONNavigationComponent_IsPositionSVOBlocked final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(SVONNavigationComponent_IsPositionSVOBlocked) == 0x000008, "Wrong alignment on SVONNavigationComponent_IsPositionSVOBlocked");
//static_assert(sizeof(SVONNavigationComponent_IsPositionSVOBlocked) == 0x000020, "Wrong size on SVONNavigationComponent_IsPositionSVOBlocked");
//static_assert(offsetof(SVONNavigationComponent_IsPositionSVOBlocked, Position) == 0x000000, "Member 'SVONNavigationComponent_IsPositionSVOBlocked::Position' has a wrong offset!");
//static_assert(offsetof(SVONNavigationComponent_IsPositionSVOBlocked, ReturnValue) == 0x000018, "Member 'SVONNavigationComponent_IsPositionSVOBlocked::ReturnValue' has a wrong offset!");

// Function UESVON.SVONVolume.K2_ReDrawDebug
// 0x0020 (0x0020 - 0x0000)
struct SVONVolume_K2_ReDrawDebug final
{
public:
	struct FVector                                DebugPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDistance;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(SVONVolume_K2_ReDrawDebug) == 0x000008, "Wrong alignment on SVONVolume_K2_ReDrawDebug");
//static_assert(sizeof(SVONVolume_K2_ReDrawDebug) == 0x000020, "Wrong size on SVONVolume_K2_ReDrawDebug");
//static_assert(offsetof(SVONVolume_K2_ReDrawDebug, DebugPosition) == 0x000000, "Member 'SVONVolume_K2_ReDrawDebug::DebugPosition' has a wrong offset!");
//static_assert(offsetof(SVONVolume_K2_ReDrawDebug, DebugDistance) == 0x000018, "Member 'SVONVolume_K2_ReDrawDebug::DebugDistance' has a wrong offset!");

// Function UESVON.SVONVolume.DrawNodeForReachableTest
// 0x0001 (0x0001 - 0x0000)
struct SVONVolume_DrawNodeForReachableTest final
{
public:
	bool                                          DrawReachable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(SVONVolume_DrawNodeForReachableTest) == 0x000001, "Wrong alignment on SVONVolume_DrawNodeForReachableTest");
//static_assert(sizeof(SVONVolume_DrawNodeForReachableTest) == 0x000001, "Wrong size on SVONVolume_DrawNodeForReachableTest");
//static_assert(offsetof(SVONVolume_DrawNodeForReachableTest, DrawReachable) == 0x000000, "Member 'SVONVolume_DrawNodeForReachableTest::DrawReachable' has a wrong offset!");

}

