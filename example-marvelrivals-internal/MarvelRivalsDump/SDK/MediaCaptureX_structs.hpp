#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaCaptureX

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct MediaCaptureX.VideoRecordingXParameters
// 0x0050 (0x0050 - 0x0000)
struct FVideoRecordingXParameters final
{
public:
	class FString                                 SaveFolder;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResX;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResY;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoFPS;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoCodecBitRate;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioCodecBitRate;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAsyncEncoding;                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecordingLengthSeconds;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoRecordingXParameters) == 0x000008, "Wrong alignment on FVideoRecordingXParameters");
static_assert(sizeof(FVideoRecordingXParameters) == 0x000050, "Wrong size on FVideoRecordingXParameters");
static_assert(offsetof(FVideoRecordingXParameters, SaveFolder) == 0x000000, "Member 'FVideoRecordingXParameters::SaveFolder' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, Filename) == 0x000010, "Member 'FVideoRecordingXParameters::Filename' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, ResX) == 0x000020, "Member 'FVideoRecordingXParameters::ResX' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, ResY) == 0x000024, "Member 'FVideoRecordingXParameters::ResY' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, VideoFPS) == 0x000028, "Member 'FVideoRecordingXParameters::VideoFPS' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, VideoCodecBitRate) == 0x00002C, "Member 'FVideoRecordingXParameters::VideoCodecBitRate' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, AudioCodecBitRate) == 0x000030, "Member 'FVideoRecordingXParameters::AudioCodecBitRate' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, bEnableAsyncEncoding) == 0x000034, "Member 'FVideoRecordingXParameters::bEnableAsyncEncoding' has a wrong offset!");
static_assert(offsetof(FVideoRecordingXParameters, RecordingLengthSeconds) == 0x000040, "Member 'FVideoRecordingXParameters::RecordingLengthSeconds' has a wrong offset!");

}

