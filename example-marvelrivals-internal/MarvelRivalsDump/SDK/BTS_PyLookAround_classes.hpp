#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_PyLookAround

#include "Basic.hpp"

#include "MarvelAI_structs.hpp"
#include "PyBTNodeBase_classes.hpp"


namespace SDK
{

// PythonClass BTS_PyLookAround.BTS_PyLookAround
// 0x0028 (0x00D0 - 0x00A8)
class UBTS_PyLookAround : public UBTService_PyBase
{
public:
	float                                         ChanceToLookAround;                                // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAroundDuration;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAroundDeviation;                               // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRange_FloatValue                      LookAngleRange;                                    // 0x00B4(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinUnblockedDist;                                  // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaAngleWhenBlocked;                             // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawDebug;                                  // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTraceCheckTimes;                                // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ResetMoveFocus();
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTS_PyLookAround">();
	}
	static class UBTS_PyLookAround* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_PyLookAround>();
	}
};
//static_assert(alignof(UBTS_PyLookAround) == 0x000008, "Wrong alignment on UBTS_PyLookAround");
//static_assert(sizeof(UBTS_PyLookAround) == 0x0000D0, "Wrong size on UBTS_PyLookAround");
//static_assert(offsetof(UBTS_PyLookAround, ChanceToLookAround) == 0x0000A8, "Member 'UBTS_PyLookAround::ChanceToLookAround' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, LookAroundDuration) == 0x0000AC, "Member 'UBTS_PyLookAround::LookAroundDuration' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, LookAroundDeviation) == 0x0000B0, "Member 'UBTS_PyLookAround::LookAroundDeviation' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, LookAngleRange) == 0x0000B4, "Member 'UBTS_PyLookAround::LookAngleRange' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, MinUnblockedDist) == 0x0000BC, "Member 'UBTS_PyLookAround::MinUnblockedDist' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, DeltaAngleWhenBlocked) == 0x0000C0, "Member 'UBTS_PyLookAround::DeltaAngleWhenBlocked' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, bEnableDrawDebug) == 0x0000C4, "Member 'UBTS_PyLookAround::bEnableDrawDebug' has a wrong offset!");
//static_assert(offsetof(UBTS_PyLookAround, MaxTraceCheckTimes) == 0x0000C8, "Member 'UBTS_PyLookAround::MaxTraceCheckTimes' has a wrong offset!");

}

