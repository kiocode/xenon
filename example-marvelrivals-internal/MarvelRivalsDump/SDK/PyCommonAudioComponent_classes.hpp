#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyCommonAudioComponent

#include "Basic.hpp"

#include "MarvelLevel_structs.hpp"
#include "MarvelLevel_classes.hpp"
#include "Marvel_structs.hpp"
#include "PyBaseAudioComponent_classes.hpp"


namespace SDK
{

// PythonClass PyCommonAudioComponent.PyLevelCommonAudioItem
// 0x01D0 (0x0208 - 0x0038)
class UPyLevelCommonAudioItem final : public UMarvelLevelAudioItem
{
public:
	TArray<struct FLevelAudioContent>             DoubleKill;                                        // 0x0038(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             TripleKill;                                        // 0x0048(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             QuadraKill;                                        // 0x0058(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             PentaKill;                                         // 0x0068(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             HexaKill;                                          // 0x0078(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             MoreThanHexaKill;                                  // 0x0088(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             TeamKill;                                          // 0x0098(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             PreSelectCountDown;                                // 0x00A8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             OurSideBanPickCountDown;                           // 0x00B8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             EnemySideBanPickCountDown;                         // 0x00C8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             OurSideStartBanPick;                               // 0x00D8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             EnemySideStartBanPick;                             // 0x00E8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             ChangeToOurSide;                                   // 0x00F8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             ChangeToEnemySide;                                 // 0x0108(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             OurSideBanFinish;                                  // 0x0118(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             EnemySideBanFinish;                                // 0x0128(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             SelectHeroStart;                                   // 0x0138(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             PreSelectStateVoice;                               // 0x0148(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             BanRoundStartVoice;                                // 0x0158(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             PickRoundStartVoice;                               // 0x0168(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             RankRoundStart;                                    // 0x0178(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             RankRoundResult;                                   // 0x0188(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             RankRoundFinalResult;                              // 0x0198(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             RankSwitchSide;                                    // 0x01A8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             CheckPointComplete;                                // 0x01B8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             ArriveTarget;                                      // 0x01C8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             AbilityUnlock;                                     // 0x01D8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             StartTeleport;                                     // 0x01E8(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FLevelAudioContent>             EndTeleport;                                       // 0x01F8(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyLevelCommonAudioItem">();
	}
	static class UPyLevelCommonAudioItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyLevelCommonAudioItem>();
	}
};
static_assert(alignof(UPyLevelCommonAudioItem) == 0x000008, "Wrong alignment on UPyLevelCommonAudioItem");
static_assert(sizeof(UPyLevelCommonAudioItem) == 0x000208, "Wrong size on UPyLevelCommonAudioItem");
static_assert(offsetof(UPyLevelCommonAudioItem, DoubleKill) == 0x000038, "Member 'UPyLevelCommonAudioItem::DoubleKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, TripleKill) == 0x000048, "Member 'UPyLevelCommonAudioItem::TripleKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, QuadraKill) == 0x000058, "Member 'UPyLevelCommonAudioItem::QuadraKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, PentaKill) == 0x000068, "Member 'UPyLevelCommonAudioItem::PentaKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, HexaKill) == 0x000078, "Member 'UPyLevelCommonAudioItem::HexaKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, MoreThanHexaKill) == 0x000088, "Member 'UPyLevelCommonAudioItem::MoreThanHexaKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, TeamKill) == 0x000098, "Member 'UPyLevelCommonAudioItem::TeamKill' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, PreSelectCountDown) == 0x0000A8, "Member 'UPyLevelCommonAudioItem::PreSelectCountDown' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, OurSideBanPickCountDown) == 0x0000B8, "Member 'UPyLevelCommonAudioItem::OurSideBanPickCountDown' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, EnemySideBanPickCountDown) == 0x0000C8, "Member 'UPyLevelCommonAudioItem::EnemySideBanPickCountDown' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, OurSideStartBanPick) == 0x0000D8, "Member 'UPyLevelCommonAudioItem::OurSideStartBanPick' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, EnemySideStartBanPick) == 0x0000E8, "Member 'UPyLevelCommonAudioItem::EnemySideStartBanPick' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, ChangeToOurSide) == 0x0000F8, "Member 'UPyLevelCommonAudioItem::ChangeToOurSide' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, ChangeToEnemySide) == 0x000108, "Member 'UPyLevelCommonAudioItem::ChangeToEnemySide' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, OurSideBanFinish) == 0x000118, "Member 'UPyLevelCommonAudioItem::OurSideBanFinish' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, EnemySideBanFinish) == 0x000128, "Member 'UPyLevelCommonAudioItem::EnemySideBanFinish' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, SelectHeroStart) == 0x000138, "Member 'UPyLevelCommonAudioItem::SelectHeroStart' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, PreSelectStateVoice) == 0x000148, "Member 'UPyLevelCommonAudioItem::PreSelectStateVoice' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, BanRoundStartVoice) == 0x000158, "Member 'UPyLevelCommonAudioItem::BanRoundStartVoice' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, PickRoundStartVoice) == 0x000168, "Member 'UPyLevelCommonAudioItem::PickRoundStartVoice' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, RankRoundStart) == 0x000178, "Member 'UPyLevelCommonAudioItem::RankRoundStart' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, RankRoundResult) == 0x000188, "Member 'UPyLevelCommonAudioItem::RankRoundResult' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, RankRoundFinalResult) == 0x000198, "Member 'UPyLevelCommonAudioItem::RankRoundFinalResult' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, RankSwitchSide) == 0x0001A8, "Member 'UPyLevelCommonAudioItem::RankSwitchSide' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, CheckPointComplete) == 0x0001B8, "Member 'UPyLevelCommonAudioItem::CheckPointComplete' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, ArriveTarget) == 0x0001C8, "Member 'UPyLevelCommonAudioItem::ArriveTarget' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, AbilityUnlock) == 0x0001D8, "Member 'UPyLevelCommonAudioItem::AbilityUnlock' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, StartTeleport) == 0x0001E8, "Member 'UPyLevelCommonAudioItem::StartTeleport' has a wrong offset!");
static_assert(offsetof(UPyLevelCommonAudioItem, EndTeleport) == 0x0001F8, "Member 'UPyLevelCommonAudioItem::EndTeleport' has a wrong offset!");

// PythonClass PyCommonAudioComponent.PyCommonAudioComponent
// 0x0000 (0x0108 - 0x0108)
class UPyCommonAudioComponent final : public UPyBaseAudioComponent
{
public:
	void ReceiveBeginPlay();
	void BroadCastPreSelect(bool bActive, float TotalTime);
	void BroadCastBanPickState(bool bActive, float TotalTime, bool Play_our_side_audio);
	void BroadCastOurSideStartBanPick();
	void BroadCastEnemySideStartBanPick();
	void BroadCastAnnouncementCountDown(bool bActive, float TotalTime);
	void BroadCastBanPickSideChange(EBattleSide BanPickSide);
	void BroadCastBanPickSideConfirmResult(EBattleSide BattleSide);
	void BroadCastPreSelectVoice(float ban_pick_preseletct_remainting_time);
	void BroadCastBanRoundStartVoice(EBattleSide BanPickSide);
	void BroadCastPickRoundStartVoice(EBattleSide BanPickSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyCommonAudioComponent">();
	}
	static class UPyCommonAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyCommonAudioComponent>();
	}
};
static_assert(alignof(UPyCommonAudioComponent) == 0x000008, "Wrong alignment on UPyCommonAudioComponent");
static_assert(sizeof(UPyCommonAudioComponent) == 0x000108, "Wrong size on UPyCommonAudioComponent");

}

