#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyLevelEventSubsystem

#include "Basic.hpp"

#include "Python_enums_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "MarvelLevel_structs.hpp"


namespace SDK
{

// PythonClass PyLevelEventSubsystem.PyLevelEventSubSystem
// 0x0DE0 (0x10D0 - 0x02F0)
class UPyLevelEventSubSystem : public ULevelEventSubsystem
{
public:
	FMulticastInlineDelegateProperty_             LevelStart;                                        // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AllClientLoadedMap;                                // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClientLoadedMap;                                   // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RoundStart;                                        // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RoundEnd;                                          // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RequiredMapPreLoaded;                              // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RequiredReplayMapLoaded;                           // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RequiredMapUnLoaded;                               // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SelectHeroLoaded;                                  // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ServerFirstMapLoaded;                              // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreEventLevelReset;                                // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PostEventLevelReset;                               // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LikeMapLoadedStart;                                // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LikeMapLoaded;                                     // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LikeMapUnLoaded;                                   // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClientShowMVPPanel;                                // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClientEnterEpicMoment;                             // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SelectHeroEndDispatcher;                           // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SelectHeroWorldLoadedDispatcher;                   // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClientFirstShowSelectHeroPanel;                    // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InitializeSublevelPartList;                        // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CurrentLevelPartNameChanged;                       // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PrepareEndDispatcher;                              // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FightStartDispatcher;                              // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RpcFightStartDispatcher;                           // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ShowTransitionPanel;                               // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TransitionPanelFadeOut;                            // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TransitionEndDispatcher;                           // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RemainingTimeDispatcher;                           // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PauseRemainingTimeDispatcher;                      // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SetRemainingTimeDispatcher;                        // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RegularTimeOutDispatcher;                          // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerSpawn;                                     // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerWin;                                       // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerLost;                                      // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayDraw;                                        // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActorSRoomPassDispatcher;                        // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RoundWinnerDispatcher;                             // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OpenHeroListChange;                                // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OpenSelectHeroListChange;                          // 0x0560(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StateTimeChangeDispatcher;                         // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SlowMotionEndDispatcher;                           // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OvertimeStartDispatcher;                           // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OvertimeEndDispatcher;                             // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OvertimeCancelDispatcher;                          // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OvertimeUpdateDispatcher;                          // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DestroyCharacterLogOut;                            // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerReconnect;                                 // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InitObjectives;                                    // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObjectiveActivateDispatcher;                       // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObjectiveEndDispatcher;                            // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObjectiveEndCallback;                              // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObjectiveStageDispatcher;                          // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObjectiveMaxProgressDispatcher;                    // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InitPayload;                                       // 0x0650(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadActivateDispatcher;                         // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PrePayloadRouteStartDispatcher;                    // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadRouteStartDispatcher;                       // 0x0680(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadRouteEndDispatcher;                         // 0x0690(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EscortRebirthTimeUpdateDispatcher;                 // 0x06A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadDecalVisibleDispatcher;                     // 0x06B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadEndCallback;                                // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TraceListChangeDispatcher;                         // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PayloadMaxDistanceDispatcher;                      // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RankAttackInfoChange;                              // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RankDefendInfoChange;                              // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AsgardE01TODStart;                                 // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AsgardE01TODEnd;                                   // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTriggeredFireZone;                               // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTriggeredFreeFlyZone;                            // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTriggeredFogZone;                                // 0x0750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InitControl;                                       // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ControlUnlockStartDispatcher;                      // 0x0770(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ControlFightStartDispatcher;                       // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ControlOwnerChangedForRPC;                         // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ControlEndCallback;                                // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RobotEndDispatcher;                                // 0x07B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherRespawnStart;                            // 0x07C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherRespawnBreak;                            // 0x07D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SepcialForceKillByTerrain;                         // 0x07E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DeathZoneKill;                                     // 0x07F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PostSwitchBattleSide;                              // 0x0800(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CampPlayerChangedDispatcher;                       // 0x0810(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreCharacterDestroy;                               // 0x0820(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherInitUI;                                  // 0x0830(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpProgressDispatcher;                             // 0x0840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpFlagOccupyProgressDispatcher;                   // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpFlagStateChanged;                               // 0x0860(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpFlagEndDispatcher;                              // 0x0870(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpFlagRestart;                                    // 0x0880(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SyncUnlockTimeChanged;                             // 0x0890(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SyncCatchTimeoutChanged;                           // 0x08A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPickupAmpFlag;                                   // 0x08B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPickupAmpFlagInterrupted;                        // 0x08C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTryPickupAmpFlag;                                // 0x08D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PlaceFlagInLegalZone;                              // 0x08E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CapturingFlag;                                     // 0x08F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFlagStopSimulating;                              // 0x0900(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmpFlagTargetActorChanged;                         // 0x0910(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             HydraMoveAchievementEvent;                         // 0x0920(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatcherFullScreenMessage;                       // 0x0930(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StartSelectHeroTimer;                              // 0x0940(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainStart;                                        // 0x0950(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainEnd;                                          // 0x0960(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ChangeTrainHold;                                   // 0x0970(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainDelayStart;                                   // 0x0980(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainDelayEnd;                                     // 0x0990(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ObtainTrainComputerAuth;                           // 0x09A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LoseTrainComputerAuth;                             // 0x09B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnterPortalArea;                                   // 0x09C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ExitPortalArea;                                    // 0x09D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnterTrainArea;                                    // 0x09E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ExitTrainArea;                                     // 0x09F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainCustomSetting;                                // 0x0A00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainFriendHarm;                                   // 0x0A10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainFriendHarmFinshed;                            // 0x0A20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainSkillNoCd;                                    // 0x0A30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainTeleportStart;                                // 0x0A40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainTeleportEnd;                                  // 0x0A50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainEntryStateChanged;                            // 0x0A60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainStartLog;                                     // 0x0A70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LimitTimeTrainStateChanged;                        // 0x0A80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LimitTimeTrainConfigChanged;                       // 0x0A90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LimitTimeTrainInsidePlayerChanged;                 // 0x0AA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LimitTimeTrainInsideScoreChanged;                  // 0x0AB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TrainCreateCooperate;                              // 0x0AC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LevelCheckPointActivate;                           // 0x0AD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NoviceTeleportEnd;                                 // 0x0AE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NoviceFirstSwitchHero;                             // 0x0AF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AddPlayerScore;                                    // 0x0B00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangePlayerScore;                               // 0x0B10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DeathBattleSituation;                              // 0x0B20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SubPlayerScore;                                    // 0x0B30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ChangeDeathFinal;                                  // 0x0B40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FristWinner;                                       // 0x0B50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             GainAdvantage;                                     // 0x0B60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LostAdvantage;                                     // 0x0B70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PostUpdateScoreList;                               // 0x0B80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PickUpKillConfirm;                                 // 0x0B90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AddTeamScore;                                      // 0x0BA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SubTeamScore;                                      // 0x0BB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InSuddenDeathDispatcher;                           // 0x0BC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMultiKillChanged;                                // 0x0BD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickHeroIDChange;                               // 0x0BE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickStateChangeDispatcher;                      // 0x0BF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickResultListChangeDispatcher;                 // 0x0C00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickIndexChangeDispatcher;                      // 0x0C10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CurBanPickSideChangeDispatcher;                    // 0x0C20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RedBanPickLeaderIDChangeDispatcher;                // 0x0C30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BlueBanPickLeaderIDChangeDispatcher;               // 0x0C40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CurRoundBlueBanPickResultChangeDispatcher;         // 0x0C50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CurRoundRedBanPickResultChangeDispatcher;          // 0x0C60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             S_BanPickSideChangeDispatcher;                     // 0x0C70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickSideConfirmResultDispatcher;                // 0x0C80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickOperateTypeChangeDispatcher;                // 0x0C90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClientEnableBanPickChangeDispatcher;               // 0x0CA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPreSelectHeroDisplayStageStart;                  // 0x0CB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBanPickDisplayStageStart;                        // 0x0CC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelectHeroDisplayStageStart;                     // 0x0CD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BanPickStateTimeChangeDispatcher;                  // 0x0CE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivePlayerLaunchSurrender;                    // 0x0CF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivePlayerSurrender;                          // 0x0D00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSurrenderStart;                                  // 0x0D10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSurrenderAnnouncement;                           // 0x0D20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSurrenderEnd;                                    // 0x0D30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRedValidSurrenderPlayersChange;                  // 0x0D40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlueValidSurrenderPlayersChange;                 // 0x0D50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRedSurrenderStateChange;                         // 0x0D60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlueSurrenderStateChange;                        // 0x0D70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRedSurrenderResultChange;                        // 0x0D80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlueSurrenderResultChange;                       // 0x0D90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRedSurrenderPassedChange;                        // 0x0DA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlueSurrenderPassedChange;                       // 0x0DB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSurrenderFailed;                                 // 0x0DC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSurrenderSuccess;                                // 0x0DD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             UIMultiKill;                                       // 0x0DE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             UITeamKill;                                        // 0x0DF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             UIOccupyingSideChange;                             // 0x0E00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VHolderSideDispatcher;                             // 0x0E10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DispatchVictoryProgressChanged;                    // 0x0E20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SelectHeroEntranceFinish;                          // 0x0E30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AudioSiwtchBattleSide;                             // 0x0E40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoiceEnd;                                        // 0x0E50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCampOccupied;                                    // 0x0E60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInteractingWithNPC;                              // 0x0E70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHearingLevelVoice;                               // 0x0E80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVictoryInMap;                                    // 0x0E90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TeamKillPlayerDeath;                               // 0x0EA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TeamKillTeamWin;                                   // 0x0EB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NotifyClientCloseSelectHero;                       // 0x0EC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FillColorToPoint;                                  // 0x0ED0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CalculateFillColorPercent;                         // 0x0EE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FillColorUpdatePercentDispatcher;                  // 0x0EF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CommonFestivalPlayerStatChanged;                   // 0x0F00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalScoreChanged;                        // 0x0F10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalGoaled;                              // 0x0F20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalOnTackling;                          // 0x0F30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalPlayerStatChanged;                   // 0x0F40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalRoundStart;                          // 0x0F50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBallKeepSideChange;                              // 0x0F60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalNear2Win;                            // 0x0F70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalForbidKeepBallStateChanged;          // 0x0F80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalMatchEnd;                            // 0x0F90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSpringFestivalMatchStateChange;                  // 0x0FA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalSelfGotBall;                         // 0x0FB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpringFestivalGotLongPass;                         // 0x0FC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnergyScoreChanged;                                // 0x0FD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnergyContestMinesInited;                          // 0x0FE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EnergyContestHasWinner;                            // 0x0FF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NewMineControlActivated;                           // 0x1000(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             MineControlDeactivated;                            // 0x1010(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMineProxyConstructed;                            // 0x1020(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMineProxyDestructed;                             // 0x1030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreCreateMineProxy;                                // 0x1040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             MineControlUnlockStartDispatcher;                  // 0x1050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RuleComponentReceiveInit;                          // 0x1060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWinterFestivalResult;                            // 0x1070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             QualitySettingChange;                              // 0x1080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SpecialAreaTrigger;                                // 0x1090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPortalActivate;                                  // 0x10A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLocalAreaChange;                                 // 0x10B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActorChangedByTrajectoryPortal;                  // 0x10C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void LevelStart__DelegateSignature();
	void AllClientLoadedMap__DelegateSignature();
	void ClientLoadedMap__DelegateSignature(class APyMarvelPlayerState* PS);
	void RoundStart__DelegateSignature();
	void RoundEnd__DelegateSignature();
	void RequiredMapPreLoaded__DelegateSignature();
	void RequiredReplayMapLoaded__DelegateSignature();
	void RequiredMapUnLoaded__DelegateSignature();
	void SelectHeroLoaded__DelegateSignature();
	void ServerFirstMapLoaded__DelegateSignature();
	void PreEventLevelReset__DelegateSignature();
	void PostEventLevelReset__DelegateSignature();
	void LikeMapLoadedStart__DelegateSignature();
	void LikeMapLoaded__DelegateSignature();
	void LikeMapUnLoaded__DelegateSignature();
	void ClientShowMVPPanel__DelegateSignature();
	void ClientEnterEpicMoment__DelegateSignature();
	void SelectHeroEndDispatcher__DelegateSignature();
	void SelectHeroWorldLoadedDispatcher__DelegateSignature(const class FString& WorldName);
	void ClientFirstShowSelectHeroPanel__DelegateSignature();
	void InitializeSublevelPartList__DelegateSignature(const TArray<class FString>& SublevelPartList);
	void CurrentLevelPartNameChanged__DelegateSignature(const class FString& CurrentLevelPartName);
	void PrepareEndDispatcher__DelegateSignature();
	void FightStartDispatcher__DelegateSignature();
	void RpcFightStartDispatcher__DelegateSignature();
	void ShowTransitionPanel__DelegateSignature();
	void TransitionPanelFadeOut__DelegateSignature();
	void TransitionEndDispatcher__DelegateSignature();
	void RemainingTimeDispatcher__DelegateSignature(float RemainingTime);
	void PauseRemainingTimeDispatcher__DelegateSignature(float RemainingTime);
	void SetRemainingTimeDispatcher__DelegateSignature();
	void RegularTimeOutDispatcher__DelegateSignature();
	void OnPlayerSpawn__DelegateSignature(class APyMarvelPlayerState* PS);
	void OnPlayerWin__DelegateSignature(class APyMarvelPlayerState* PS);
	void OnPlayerLost__DelegateSignature(class APyMarvelPlayerState* PS);
	void OnPlayDraw__DelegateSignature();
	void OnActorSRoomPassDispatcher__DelegateSignature(class AActor* Char, bool In_pass);
	void RoundWinnerDispatcher__DelegateSignature(int32 Map_id, EBattleSide battle_side);
	void OpenHeroListChange__DelegateSignature();
	void OpenSelectHeroListChange__DelegateSignature();
	void StateTimeChangeDispatcher__DelegateSignature(EMatchState State, float Old_time, float New_time, float Passed_time);
	void SlowMotionEndDispatcher__DelegateSignature();
	void OvertimeStartDispatcher__DelegateSignature();
	void OvertimeEndDispatcher__DelegateSignature();
	void OvertimeCancelDispatcher__DelegateSignature();
	void OvertimeUpdateDispatcher__DelegateSignature(float OvertimeRemaining, float OvertimeLength, float OvertimeSpeed);
	void DestroyCharacterLogOut__DelegateSignature(class AMarvelPlayerState* PlayerState);
	void OnPlayerReconnect__DelegateSignature(class AMarvelPlayerState* PlayerState);
	void InitObjectives__DelegateSignature();
	void ObjectiveActivateDispatcher__DelegateSignature(class AActor* Objective);
	void ObjectiveEndDispatcher__DelegateSignature(class AActor* Objective);
	void ObjectiveEndCallback__DelegateSignature(class AActor* Objective);
	void ObjectiveStageDispatcher__DelegateSignature(int32 Stage);
	void ObjectiveMaxProgressDispatcher__DelegateSignature(float MaxProgress);
	void InitPayload__DelegateSignature();
	void PayloadActivateDispatcher__DelegateSignature(class AActor* Payload);
	void PrePayloadRouteStartDispatcher__DelegateSignature(class AActor* Payload);
	void PayloadRouteStartDispatcher__DelegateSignature(class AActor* Payload);
	void PayloadRouteEndDispatcher__DelegateSignature(class AActor* Payload);
	void EscortRebirthTimeUpdateDispatcher__DelegateSignature();
	void PayloadDecalVisibleDispatcher__DelegateSignature(bool IsVisible);
	void PayloadEndCallback__DelegateSignature(class AActor* Payload);
	void TraceListChangeDispatcher__DelegateSignature(const TArray<float>& TraceList);
	void PayloadMaxDistanceDispatcher__DelegateSignature(float MaxDistance);
	void RankAttackInfoChange__DelegateSignature();
	void RankDefendInfoChange__DelegateSignature();
	void AsgardE01TODStart__DelegateSignature();
	void AsgardE01TODEnd__DelegateSignature();
	void OnTriggeredFireZone__DelegateSignature();
	void OnTriggeredFreeFlyZone__DelegateSignature();
	void OnTriggeredFogZone__DelegateSignature();
	void InitControl__DelegateSignature();
	void ControlUnlockStartDispatcher__DelegateSignature(class AActor* Control);
	void ControlFightStartDispatcher__DelegateSignature(class AActor* Control);
	void ControlOwnerChangedForRPC__DelegateSignature(EBattleSide BattleSide, bool IsFirstChange);
	void ControlEndCallback__DelegateSignature(class AActor* Control);
	void RobotEndDispatcher__DelegateSignature(class AActor* Robot);
	void DispatcherRespawnStart__DelegateSignature(int32 PlayerId, int32 RespawnTime);
	void DispatcherRespawnBreak__DelegateSignature(int32 PlayerId);
	void SepcialForceKillByTerrain__DelegateSignature(class AActor* Target);
	void DeathZoneKill__DelegateSignature(class AActor* Target);
	void PostSwitchBattleSide__DelegateSignature();
	void CampPlayerChangedDispatcher__DelegateSignature(class AActor* Camp);
	void PreCharacterDestroy__DelegateSignature(class AActor* Character);
	void DispatcherInitUI__DelegateSignature();
	void AmpProgressDispatcher__DelegateSignature(float CombineProgress, EOwnershipType OwnerSide);
	void AmpFlagOccupyProgressDispatcher__DelegateSignature(float Progress, EOwnershipType OwnerSide);
	void AmpFlagStateChanged__DelegateSignature(EInfinityCrisisState OldState, EInfinityCrisisState NewState, EOwnershipType OldSide, EOwnershipType NewSide);
	void AmpFlagEndDispatcher__DelegateSignature(EOwnershipType WinnerSide);
	void AmpFlagRestart__DelegateSignature();
	void SyncUnlockTimeChanged__DelegateSignature(int32 Num);
	void SyncCatchTimeoutChanged__DelegateSignature(int32 Num, int32 Total);
	void OnPickupAmpFlag__DelegateSignature(class AActor* Character);
	void OnPickupAmpFlagInterrupted__DelegateSignature(class AActor* Character);
	void OnTryPickupAmpFlag__DelegateSignature(class AActor* Character, float GatherTotalTime);
	void PlaceFlagInLegalZone__DelegateSignature(class AActor* LegalZone);
	void CapturingFlag__DelegateSignature(class AActor* Char);
	void OnFlagStopSimulating__DelegateSignature();
	void AmpFlagTargetActorChanged__DelegateSignature(class AActor* Target);
	void HydraMoveAchievementEvent__DelegateSignature(EOwnershipType BattleSide);
	void DispatcherFullScreenMessage__DelegateSignature(const class FString& Tips);
	void StartSelectHeroTimer__DelegateSignature();
	void TrainStart__DelegateSignature(ETrainAction Action, int32 UID);
	void TrainEnd__DelegateSignature(int32 Ret, ETrainAction Action, int32 UID, bool Is_finish);
	void ChangeTrainHold__DelegateSignature(int32 UID);
	void TrainDelayStart__DelegateSignature(ETrainAction Action, int32 UID, float Delay);
	void TrainDelayEnd__DelegateSignature(ETrainAction Action, int32 UID);
	void ObtainTrainComputerAuth__DelegateSignature(class AActor* Computer, class APyMarvelPlayerState* PS);
	void LoseTrainComputerAuth__DelegateSignature(class AActor* Computer, class APyMarvelPlayerState* PS);
	void EnterPortalArea__DelegateSignature(class AActor* Computer, class APyMarvelPlayerState* PS);
	void ExitPortalArea__DelegateSignature(class AActor* Computer, class APyMarvelPlayerState* PS);
	void EnterTrainArea__DelegateSignature(class APyMarvelPlayerState* PS, ETrainAreaType Area_type);
	void ExitTrainArea__DelegateSignature(class APyMarvelPlayerState* PS, ETrainAreaType Area_type);
	void TrainCustomSetting__DelegateSignature(ETrainCustomOp Custom_op);
	void TrainFriendHarm__DelegateSignature(bool Value, float Time);
	void TrainFriendHarmFinshed__DelegateSignature(bool Value);
	void TrainSkillNoCd__DelegateSignature(bool Value);
	void TrainTeleportStart__DelegateSignature();
	void TrainTeleportEnd__DelegateSignature();
	void TrainEntryStateChanged__DelegateSignature(bool IsPlaying);
	void TrainStartLog__DelegateSignature(const struct FTrainLogContent& Info);
	void LimitTimeTrainStateChanged__DelegateSignature(int32 TrainState);
	void LimitTimeTrainConfigChanged__DelegateSignature();
	void LimitTimeTrainInsidePlayerChanged__DelegateSignature();
	void LimitTimeTrainInsideScoreChanged__DelegateSignature();
	void TrainCreateCooperate__DelegateSignature();
	void LevelCheckPointActivate__DelegateSignature(int32 UID, int32 CheckPointID);
	void NoviceTeleportEnd__DelegateSignature();
	void NoviceFirstSwitchHero__DelegateSignature();
	void AddPlayerScore__DelegateSignature(class APyMarvelPlayerState* PS, int32 Score);
	void OnChangePlayerScore__DelegateSignature(class APyMarvelPlayerState* PS, int32 OldScore, int32 NewScore);
	void DeathBattleSituation__DelegateSignature(EBattleSide battle_side, int32 Score, int32 Winner_score);
	void SubPlayerScore__DelegateSignature(class APyMarvelPlayerState* PS, int32 Score);
	void ChangeDeathFinal__DelegateSignature(bool Is_final);
	void FristWinner__DelegateSignature(class APyMarvelPlayerState* PS);
	void GainAdvantage__DelegateSignature();
	void LostAdvantage__DelegateSignature();
	void PostUpdateScoreList__DelegateSignature();
	void PickUpKillConfirm__DelegateSignature(class AActor* Item, class AMarvelPlayerState* PlayerState, EBattleSide battle_side, bool Is_ally);
	void AddTeamScore__DelegateSignature(EBattleSide battle_side, int32 Score);
	void SubTeamScore__DelegateSignature(EBattleSide battle_side, int32 Score);
	void InSuddenDeathDispatcher__DelegateSignature(bool InSuddenDeath);
	void OnMultiKillChanged__DelegateSignature(int32 MultiKill, class AMarvelPlayerState* PlayerState);
	void BanPickHeroIDChange__DelegateSignature(class AMarvelPlayerState* PlayerState);
	void BanPickStateChangeDispatcher__DelegateSignature(EBanPickState BanPickState);
	void BanPickResultListChangeDispatcher__DelegateSignature(const TArray<struct FBanPickResultInfo>& BanPickResultList);
	void BanPickIndexChangeDispatcher__DelegateSignature(int32 BanPickIndex);
	void CurBanPickSideChangeDispatcher__DelegateSignature(EBattleSide CurBanPickSide);
	void RedBanPickLeaderIDChangeDispatcher__DelegateSignature(int32 RedBanPickLeaderID);
	void BlueBanPickLeaderIDChangeDispatcher__DelegateSignature(int32 BlueBanPickLeaderID);
	void CurRoundBlueBanPickResultChangeDispatcher__DelegateSignature(const struct FBanPickResultInfo& BanPickResult);
	void CurRoundRedBanPickResultChangeDispatcher__DelegateSignature(const struct FBanPickResultInfo& BanPickResult);
	void S_BanPickSideChangeDispatcher__DelegateSignature(EBattleSide CurBanPickSide);
	void BanPickSideConfirmResultDispatcher__DelegateSignature(EBattleSide BattleSide);
	void BanPickOperateTypeChangeDispatcher__DelegateSignature(EBanPickOperateType OperateType);
	void ClientEnableBanPickChangeDispatcher__DelegateSignature(bool EnableBanPick);
	void OnPreSelectHeroDisplayStageStart__DelegateSignature();
	void OnBanPickDisplayStageStart__DelegateSignature();
	void OnSelectHeroDisplayStageStart__DelegateSignature();
	void BanPickStateTimeChangeDispatcher__DelegateSignature(EBanPickState BanPickState, float TotalTime);
	void OnReceivePlayerLaunchSurrender__DelegateSignature(class AMarvelPlayerState* PS);
	void OnReceivePlayerSurrender__DelegateSignature(class AMarvelPlayerState* PS);
	void OnSurrenderStart__DelegateSignature(int32 UID, EBattleSide BattleSide);
	void OnSurrenderAnnouncement__DelegateSignature(EBattleSide BattleSide, bool bSurrenderSuccess);
	void OnSurrenderEnd__DelegateSignature(EBattleSide BattleSide);
	void OnRedValidSurrenderPlayersChange__DelegateSignature(const TArray<class AMarvelPlayerState*>& ValidSurrenderPlayers);
	void OnBlueValidSurrenderPlayersChange__DelegateSignature(const TArray<class AMarvelPlayerState*>& ValidSurrenderPlayers);
	void OnRedSurrenderStateChange__DelegateSignature(ESurrenderState SurrenderState);
	void OnBlueSurrenderStateChange__DelegateSignature(ESurrenderState SurrenderState);
	void OnRedSurrenderResultChange__DelegateSignature(const TArray<struct FSurrenderResultInfo>& SurrenderResult);
	void OnBlueSurrenderResultChange__DelegateSignature(const TArray<struct FSurrenderResultInfo>& SurrenderResult);
	void OnRedSurrenderPassedChange__DelegateSignature(bool bSurrenderPassed);
	void OnBlueSurrenderPassedChange__DelegateSignature(bool bSurrenderPassed);
	void OnSurrenderFailed__DelegateSignature(ESurrenderFailedReason SurrenderFailedReason);
	void OnSurrenderSuccess__DelegateSignature();
	void UIMultiKill__DelegateSignature(const struct FGameplayTag& Tag, float Interval_time);
	void UITeamKill__DelegateSignature(class AActor* Killer_pawn);
	void UIOccupyingSideChange__DelegateSignature(EOwnershipTypeUI Occupying_side);
	void VHolderSideDispatcher__DelegateSignature(class AActor* Camp, EOwnershipType Hold_side);
	void DispatchVictoryProgressChanged__DelegateSignature(class AActor* Control, EBattleSide battle_side);
	void SelectHeroEntranceFinish__DelegateSignature();
	void AudioSiwtchBattleSide__DelegateSignature();
	void OnVoiceEnd__DelegateSignature(int32 VoiceID);
	void OnCampOccupied__DelegateSignature(class APyCamp* Camp, int32 Mode_id, EBattleSide battle_side);
	void OnInteractingWithNPC__DelegateSignature(class AMarvelPlayerState* PS, const TArray<class FString>& Tags, int32 Mode_id);
	void OnHearingLevelVoice__DelegateSignature(EMarvelVoiceType Voice_type, int32 Voice_id, class AActor* Char, class AActor* To_char, class AMarvelPlayerState* PS);
	void OnVictoryInMap__DelegateSignature(int32 Mode_id, EBattleSide battle_side);
	void TeamKillPlayerDeath__DelegateSignature(EBattleSide battle_side);
	void TeamKillTeamWin__DelegateSignature(EBattleSide battle_side);
	void NotifyClientCloseSelectHero__DelegateSignature(int32 HeroID, int32 RoundIndex);
	void FillColorToPoint__DelegateSignature(EBattleSide OldBattleSide, EBattleSide NewBattleSide);
	void CalculateFillColorPercent__DelegateSignature();
	void FillColorUpdatePercentDispatcher__DelegateSignature(float BluePercent, float RedPercent);
	void CommonFestivalPlayerStatChanged__DelegateSignature(int32 UID, const class FString& Key, float Val);
	void SpringFestivalScoreChanged__DelegateSignature(EBattleSide battle_side, int32 Cur_score);
	void SpringFestivalGoaled__DelegateSignature(EBattleSide battle_side, int32 Goaled_score, int32 Total_score, int32 UID);
	void SpringFestivalOnTackling__DelegateSignature(class AActor* Source, class AActor* Target, int32 Ability_id, float Hold_time);
	void SpringFestivalPlayerStatChanged__DelegateSignature(int32 UID, const class FString& Key, float Val);
	void SpringFestivalRoundStart__DelegateSignature();
	void OnBallKeepSideChange__DelegateSignature(EBattleSide battle_side);
	void SpringFestivalNear2Win__DelegateSignature(EBattleSide battle_side, int32 Cur_score, int32 Total_score);
	void SpringFestivalForbidKeepBallStateChanged__DelegateSignature(class AActor* Char, bool Is_forbid);
	void SpringFestivalMatchEnd__DelegateSignature(EBattleSide Winner_side);
	void OnSpringFestivalMatchStateChange__DelegateSignature(ESpringFestivalMatchState Spring_festival_match_state);
	void SpringFestivalSelfGotBall__DelegateSignature();
	void SpringFestivalGotLongPass__DelegateSignature(EBattleSide battle_side);
	void EnergyScoreChanged__DelegateSignature(const TMap<EBattleSide, float>& Score_board);
	void EnergyContestMinesInited__DelegateSignature();
	void EnergyContestHasWinner__DelegateSignature(EBattleSide Win_side);
	void NewMineControlActivated__DelegateSignature(class AActor* Mine);
	void MineControlDeactivated__DelegateSignature(class AActor* Mine);
	void OnMineProxyConstructed__DelegateSignature(class AActor* Mine, bool Is_pre);
	void OnMineProxyDestructed__DelegateSignature(class AActor* Mine);
	void PreCreateMineProxy__DelegateSignature(class AActor* Mine, bool With_normal_ui);
	void MineControlUnlockStartDispatcher__DelegateSignature(class AActor* Control);
	void RuleComponentReceiveInit__DelegateSignature(class URuleComponent* RuleCom);
	void OnWinterFestivalResult__DelegateSignature(float BluePercent, float RedPercent, EBattleSide Winner_side);
	void QualitySettingChange__DelegateSignature();
	void SpecialAreaTrigger__DelegateSignature(class AActor* SpecialArea);
	void OnPortalActivate__DelegateSignature(class AActor* Character);
	void OnLocalAreaChange__DelegateSignature(const class FString& NewAreaTag);
	void OnActorChangedByTrajectoryPortal__DelegateSignature(class AActor* Character);
	bool IsMapLoaded();
	void PyPreDeinitialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyLevelEventSubSystem">();
	}
	static class UPyLevelEventSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyLevelEventSubSystem>();
	}
};
static_assert(alignof(UPyLevelEventSubSystem) == 0x000008, "Wrong alignment on UPyLevelEventSubSystem");
static_assert(sizeof(UPyLevelEventSubSystem) == 0x0010D0, "Wrong size on UPyLevelEventSubSystem");
static_assert(offsetof(UPyLevelEventSubSystem, LevelStart) == 0x0002F0, "Member 'UPyLevelEventSubSystem::LevelStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AllClientLoadedMap) == 0x000300, "Member 'UPyLevelEventSubSystem::AllClientLoadedMap' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ClientLoadedMap) == 0x000310, "Member 'UPyLevelEventSubSystem::ClientLoadedMap' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RoundStart) == 0x000320, "Member 'UPyLevelEventSubSystem::RoundStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RoundEnd) == 0x000330, "Member 'UPyLevelEventSubSystem::RoundEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RequiredMapPreLoaded) == 0x000340, "Member 'UPyLevelEventSubSystem::RequiredMapPreLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RequiredReplayMapLoaded) == 0x000350, "Member 'UPyLevelEventSubSystem::RequiredReplayMapLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RequiredMapUnLoaded) == 0x000360, "Member 'UPyLevelEventSubSystem::RequiredMapUnLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SelectHeroLoaded) == 0x000370, "Member 'UPyLevelEventSubSystem::SelectHeroLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ServerFirstMapLoaded) == 0x000380, "Member 'UPyLevelEventSubSystem::ServerFirstMapLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PreEventLevelReset) == 0x000390, "Member 'UPyLevelEventSubSystem::PreEventLevelReset' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PostEventLevelReset) == 0x0003A0, "Member 'UPyLevelEventSubSystem::PostEventLevelReset' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LikeMapLoadedStart) == 0x0003B0, "Member 'UPyLevelEventSubSystem::LikeMapLoadedStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LikeMapLoaded) == 0x0003C0, "Member 'UPyLevelEventSubSystem::LikeMapLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LikeMapUnLoaded) == 0x0003D0, "Member 'UPyLevelEventSubSystem::LikeMapUnLoaded' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ClientShowMVPPanel) == 0x0003E0, "Member 'UPyLevelEventSubSystem::ClientShowMVPPanel' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ClientEnterEpicMoment) == 0x0003F0, "Member 'UPyLevelEventSubSystem::ClientEnterEpicMoment' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SelectHeroEndDispatcher) == 0x000400, "Member 'UPyLevelEventSubSystem::SelectHeroEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SelectHeroWorldLoadedDispatcher) == 0x000410, "Member 'UPyLevelEventSubSystem::SelectHeroWorldLoadedDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ClientFirstShowSelectHeroPanel) == 0x000420, "Member 'UPyLevelEventSubSystem::ClientFirstShowSelectHeroPanel' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, InitializeSublevelPartList) == 0x000430, "Member 'UPyLevelEventSubSystem::InitializeSublevelPartList' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CurrentLevelPartNameChanged) == 0x000440, "Member 'UPyLevelEventSubSystem::CurrentLevelPartNameChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PrepareEndDispatcher) == 0x000450, "Member 'UPyLevelEventSubSystem::PrepareEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, FightStartDispatcher) == 0x000460, "Member 'UPyLevelEventSubSystem::FightStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RpcFightStartDispatcher) == 0x000470, "Member 'UPyLevelEventSubSystem::RpcFightStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ShowTransitionPanel) == 0x000480, "Member 'UPyLevelEventSubSystem::ShowTransitionPanel' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TransitionPanelFadeOut) == 0x000490, "Member 'UPyLevelEventSubSystem::TransitionPanelFadeOut' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TransitionEndDispatcher) == 0x0004A0, "Member 'UPyLevelEventSubSystem::TransitionEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RemainingTimeDispatcher) == 0x0004B0, "Member 'UPyLevelEventSubSystem::RemainingTimeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PauseRemainingTimeDispatcher) == 0x0004C0, "Member 'UPyLevelEventSubSystem::PauseRemainingTimeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SetRemainingTimeDispatcher) == 0x0004D0, "Member 'UPyLevelEventSubSystem::SetRemainingTimeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RegularTimeOutDispatcher) == 0x0004E0, "Member 'UPyLevelEventSubSystem::RegularTimeOutDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPlayerSpawn) == 0x0004F0, "Member 'UPyLevelEventSubSystem::OnPlayerSpawn' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPlayerWin) == 0x000500, "Member 'UPyLevelEventSubSystem::OnPlayerWin' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPlayerLost) == 0x000510, "Member 'UPyLevelEventSubSystem::OnPlayerLost' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPlayDraw) == 0x000520, "Member 'UPyLevelEventSubSystem::OnPlayDraw' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnActorSRoomPassDispatcher) == 0x000530, "Member 'UPyLevelEventSubSystem::OnActorSRoomPassDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RoundWinnerDispatcher) == 0x000540, "Member 'UPyLevelEventSubSystem::RoundWinnerDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OpenHeroListChange) == 0x000550, "Member 'UPyLevelEventSubSystem::OpenHeroListChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OpenSelectHeroListChange) == 0x000560, "Member 'UPyLevelEventSubSystem::OpenSelectHeroListChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, StateTimeChangeDispatcher) == 0x000570, "Member 'UPyLevelEventSubSystem::StateTimeChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SlowMotionEndDispatcher) == 0x000580, "Member 'UPyLevelEventSubSystem::SlowMotionEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OvertimeStartDispatcher) == 0x000590, "Member 'UPyLevelEventSubSystem::OvertimeStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OvertimeEndDispatcher) == 0x0005A0, "Member 'UPyLevelEventSubSystem::OvertimeEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OvertimeCancelDispatcher) == 0x0005B0, "Member 'UPyLevelEventSubSystem::OvertimeCancelDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OvertimeUpdateDispatcher) == 0x0005C0, "Member 'UPyLevelEventSubSystem::OvertimeUpdateDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DestroyCharacterLogOut) == 0x0005D0, "Member 'UPyLevelEventSubSystem::DestroyCharacterLogOut' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPlayerReconnect) == 0x0005E0, "Member 'UPyLevelEventSubSystem::OnPlayerReconnect' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, InitObjectives) == 0x0005F0, "Member 'UPyLevelEventSubSystem::InitObjectives' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObjectiveActivateDispatcher) == 0x000600, "Member 'UPyLevelEventSubSystem::ObjectiveActivateDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObjectiveEndDispatcher) == 0x000610, "Member 'UPyLevelEventSubSystem::ObjectiveEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObjectiveEndCallback) == 0x000620, "Member 'UPyLevelEventSubSystem::ObjectiveEndCallback' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObjectiveStageDispatcher) == 0x000630, "Member 'UPyLevelEventSubSystem::ObjectiveStageDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObjectiveMaxProgressDispatcher) == 0x000640, "Member 'UPyLevelEventSubSystem::ObjectiveMaxProgressDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, InitPayload) == 0x000650, "Member 'UPyLevelEventSubSystem::InitPayload' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadActivateDispatcher) == 0x000660, "Member 'UPyLevelEventSubSystem::PayloadActivateDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PrePayloadRouteStartDispatcher) == 0x000670, "Member 'UPyLevelEventSubSystem::PrePayloadRouteStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadRouteStartDispatcher) == 0x000680, "Member 'UPyLevelEventSubSystem::PayloadRouteStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadRouteEndDispatcher) == 0x000690, "Member 'UPyLevelEventSubSystem::PayloadRouteEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EscortRebirthTimeUpdateDispatcher) == 0x0006A0, "Member 'UPyLevelEventSubSystem::EscortRebirthTimeUpdateDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadDecalVisibleDispatcher) == 0x0006B0, "Member 'UPyLevelEventSubSystem::PayloadDecalVisibleDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadEndCallback) == 0x0006C0, "Member 'UPyLevelEventSubSystem::PayloadEndCallback' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TraceListChangeDispatcher) == 0x0006D0, "Member 'UPyLevelEventSubSystem::TraceListChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PayloadMaxDistanceDispatcher) == 0x0006E0, "Member 'UPyLevelEventSubSystem::PayloadMaxDistanceDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RankAttackInfoChange) == 0x0006F0, "Member 'UPyLevelEventSubSystem::RankAttackInfoChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RankDefendInfoChange) == 0x000700, "Member 'UPyLevelEventSubSystem::RankDefendInfoChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AsgardE01TODStart) == 0x000710, "Member 'UPyLevelEventSubSystem::AsgardE01TODStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AsgardE01TODEnd) == 0x000720, "Member 'UPyLevelEventSubSystem::AsgardE01TODEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnTriggeredFireZone) == 0x000730, "Member 'UPyLevelEventSubSystem::OnTriggeredFireZone' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnTriggeredFreeFlyZone) == 0x000740, "Member 'UPyLevelEventSubSystem::OnTriggeredFreeFlyZone' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnTriggeredFogZone) == 0x000750, "Member 'UPyLevelEventSubSystem::OnTriggeredFogZone' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, InitControl) == 0x000760, "Member 'UPyLevelEventSubSystem::InitControl' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ControlUnlockStartDispatcher) == 0x000770, "Member 'UPyLevelEventSubSystem::ControlUnlockStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ControlFightStartDispatcher) == 0x000780, "Member 'UPyLevelEventSubSystem::ControlFightStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ControlOwnerChangedForRPC) == 0x000790, "Member 'UPyLevelEventSubSystem::ControlOwnerChangedForRPC' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ControlEndCallback) == 0x0007A0, "Member 'UPyLevelEventSubSystem::ControlEndCallback' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RobotEndDispatcher) == 0x0007B0, "Member 'UPyLevelEventSubSystem::RobotEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DispatcherRespawnStart) == 0x0007C0, "Member 'UPyLevelEventSubSystem::DispatcherRespawnStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DispatcherRespawnBreak) == 0x0007D0, "Member 'UPyLevelEventSubSystem::DispatcherRespawnBreak' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SepcialForceKillByTerrain) == 0x0007E0, "Member 'UPyLevelEventSubSystem::SepcialForceKillByTerrain' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DeathZoneKill) == 0x0007F0, "Member 'UPyLevelEventSubSystem::DeathZoneKill' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PostSwitchBattleSide) == 0x000800, "Member 'UPyLevelEventSubSystem::PostSwitchBattleSide' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CampPlayerChangedDispatcher) == 0x000810, "Member 'UPyLevelEventSubSystem::CampPlayerChangedDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PreCharacterDestroy) == 0x000820, "Member 'UPyLevelEventSubSystem::PreCharacterDestroy' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DispatcherInitUI) == 0x000830, "Member 'UPyLevelEventSubSystem::DispatcherInitUI' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpProgressDispatcher) == 0x000840, "Member 'UPyLevelEventSubSystem::AmpProgressDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpFlagOccupyProgressDispatcher) == 0x000850, "Member 'UPyLevelEventSubSystem::AmpFlagOccupyProgressDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpFlagStateChanged) == 0x000860, "Member 'UPyLevelEventSubSystem::AmpFlagStateChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpFlagEndDispatcher) == 0x000870, "Member 'UPyLevelEventSubSystem::AmpFlagEndDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpFlagRestart) == 0x000880, "Member 'UPyLevelEventSubSystem::AmpFlagRestart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SyncUnlockTimeChanged) == 0x000890, "Member 'UPyLevelEventSubSystem::SyncUnlockTimeChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SyncCatchTimeoutChanged) == 0x0008A0, "Member 'UPyLevelEventSubSystem::SyncCatchTimeoutChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPickupAmpFlag) == 0x0008B0, "Member 'UPyLevelEventSubSystem::OnPickupAmpFlag' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPickupAmpFlagInterrupted) == 0x0008C0, "Member 'UPyLevelEventSubSystem::OnPickupAmpFlagInterrupted' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnTryPickupAmpFlag) == 0x0008D0, "Member 'UPyLevelEventSubSystem::OnTryPickupAmpFlag' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PlaceFlagInLegalZone) == 0x0008E0, "Member 'UPyLevelEventSubSystem::PlaceFlagInLegalZone' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CapturingFlag) == 0x0008F0, "Member 'UPyLevelEventSubSystem::CapturingFlag' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnFlagStopSimulating) == 0x000900, "Member 'UPyLevelEventSubSystem::OnFlagStopSimulating' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AmpFlagTargetActorChanged) == 0x000910, "Member 'UPyLevelEventSubSystem::AmpFlagTargetActorChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, HydraMoveAchievementEvent) == 0x000920, "Member 'UPyLevelEventSubSystem::HydraMoveAchievementEvent' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DispatcherFullScreenMessage) == 0x000930, "Member 'UPyLevelEventSubSystem::DispatcherFullScreenMessage' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, StartSelectHeroTimer) == 0x000940, "Member 'UPyLevelEventSubSystem::StartSelectHeroTimer' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainStart) == 0x000950, "Member 'UPyLevelEventSubSystem::TrainStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainEnd) == 0x000960, "Member 'UPyLevelEventSubSystem::TrainEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ChangeTrainHold) == 0x000970, "Member 'UPyLevelEventSubSystem::ChangeTrainHold' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainDelayStart) == 0x000980, "Member 'UPyLevelEventSubSystem::TrainDelayStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainDelayEnd) == 0x000990, "Member 'UPyLevelEventSubSystem::TrainDelayEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ObtainTrainComputerAuth) == 0x0009A0, "Member 'UPyLevelEventSubSystem::ObtainTrainComputerAuth' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LoseTrainComputerAuth) == 0x0009B0, "Member 'UPyLevelEventSubSystem::LoseTrainComputerAuth' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EnterPortalArea) == 0x0009C0, "Member 'UPyLevelEventSubSystem::EnterPortalArea' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ExitPortalArea) == 0x0009D0, "Member 'UPyLevelEventSubSystem::ExitPortalArea' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EnterTrainArea) == 0x0009E0, "Member 'UPyLevelEventSubSystem::EnterTrainArea' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ExitTrainArea) == 0x0009F0, "Member 'UPyLevelEventSubSystem::ExitTrainArea' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainCustomSetting) == 0x000A00, "Member 'UPyLevelEventSubSystem::TrainCustomSetting' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainFriendHarm) == 0x000A10, "Member 'UPyLevelEventSubSystem::TrainFriendHarm' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainFriendHarmFinshed) == 0x000A20, "Member 'UPyLevelEventSubSystem::TrainFriendHarmFinshed' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainSkillNoCd) == 0x000A30, "Member 'UPyLevelEventSubSystem::TrainSkillNoCd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainTeleportStart) == 0x000A40, "Member 'UPyLevelEventSubSystem::TrainTeleportStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainTeleportEnd) == 0x000A50, "Member 'UPyLevelEventSubSystem::TrainTeleportEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainEntryStateChanged) == 0x000A60, "Member 'UPyLevelEventSubSystem::TrainEntryStateChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainStartLog) == 0x000A70, "Member 'UPyLevelEventSubSystem::TrainStartLog' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LimitTimeTrainStateChanged) == 0x000A80, "Member 'UPyLevelEventSubSystem::LimitTimeTrainStateChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LimitTimeTrainConfigChanged) == 0x000A90, "Member 'UPyLevelEventSubSystem::LimitTimeTrainConfigChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LimitTimeTrainInsidePlayerChanged) == 0x000AA0, "Member 'UPyLevelEventSubSystem::LimitTimeTrainInsidePlayerChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LimitTimeTrainInsideScoreChanged) == 0x000AB0, "Member 'UPyLevelEventSubSystem::LimitTimeTrainInsideScoreChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TrainCreateCooperate) == 0x000AC0, "Member 'UPyLevelEventSubSystem::TrainCreateCooperate' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LevelCheckPointActivate) == 0x000AD0, "Member 'UPyLevelEventSubSystem::LevelCheckPointActivate' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, NoviceTeleportEnd) == 0x000AE0, "Member 'UPyLevelEventSubSystem::NoviceTeleportEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, NoviceFirstSwitchHero) == 0x000AF0, "Member 'UPyLevelEventSubSystem::NoviceFirstSwitchHero' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AddPlayerScore) == 0x000B00, "Member 'UPyLevelEventSubSystem::AddPlayerScore' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnChangePlayerScore) == 0x000B10, "Member 'UPyLevelEventSubSystem::OnChangePlayerScore' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DeathBattleSituation) == 0x000B20, "Member 'UPyLevelEventSubSystem::DeathBattleSituation' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SubPlayerScore) == 0x000B30, "Member 'UPyLevelEventSubSystem::SubPlayerScore' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ChangeDeathFinal) == 0x000B40, "Member 'UPyLevelEventSubSystem::ChangeDeathFinal' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, FristWinner) == 0x000B50, "Member 'UPyLevelEventSubSystem::FristWinner' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, GainAdvantage) == 0x000B60, "Member 'UPyLevelEventSubSystem::GainAdvantage' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, LostAdvantage) == 0x000B70, "Member 'UPyLevelEventSubSystem::LostAdvantage' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PostUpdateScoreList) == 0x000B80, "Member 'UPyLevelEventSubSystem::PostUpdateScoreList' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PickUpKillConfirm) == 0x000B90, "Member 'UPyLevelEventSubSystem::PickUpKillConfirm' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AddTeamScore) == 0x000BA0, "Member 'UPyLevelEventSubSystem::AddTeamScore' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SubTeamScore) == 0x000BB0, "Member 'UPyLevelEventSubSystem::SubTeamScore' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, InSuddenDeathDispatcher) == 0x000BC0, "Member 'UPyLevelEventSubSystem::InSuddenDeathDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnMultiKillChanged) == 0x000BD0, "Member 'UPyLevelEventSubSystem::OnMultiKillChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickHeroIDChange) == 0x000BE0, "Member 'UPyLevelEventSubSystem::BanPickHeroIDChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickStateChangeDispatcher) == 0x000BF0, "Member 'UPyLevelEventSubSystem::BanPickStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickResultListChangeDispatcher) == 0x000C00, "Member 'UPyLevelEventSubSystem::BanPickResultListChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickIndexChangeDispatcher) == 0x000C10, "Member 'UPyLevelEventSubSystem::BanPickIndexChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CurBanPickSideChangeDispatcher) == 0x000C20, "Member 'UPyLevelEventSubSystem::CurBanPickSideChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RedBanPickLeaderIDChangeDispatcher) == 0x000C30, "Member 'UPyLevelEventSubSystem::RedBanPickLeaderIDChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BlueBanPickLeaderIDChangeDispatcher) == 0x000C40, "Member 'UPyLevelEventSubSystem::BlueBanPickLeaderIDChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CurRoundBlueBanPickResultChangeDispatcher) == 0x000C50, "Member 'UPyLevelEventSubSystem::CurRoundBlueBanPickResultChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CurRoundRedBanPickResultChangeDispatcher) == 0x000C60, "Member 'UPyLevelEventSubSystem::CurRoundRedBanPickResultChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, S_BanPickSideChangeDispatcher) == 0x000C70, "Member 'UPyLevelEventSubSystem::S_BanPickSideChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickSideConfirmResultDispatcher) == 0x000C80, "Member 'UPyLevelEventSubSystem::BanPickSideConfirmResultDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickOperateTypeChangeDispatcher) == 0x000C90, "Member 'UPyLevelEventSubSystem::BanPickOperateTypeChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, ClientEnableBanPickChangeDispatcher) == 0x000CA0, "Member 'UPyLevelEventSubSystem::ClientEnableBanPickChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPreSelectHeroDisplayStageStart) == 0x000CB0, "Member 'UPyLevelEventSubSystem::OnPreSelectHeroDisplayStageStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBanPickDisplayStageStart) == 0x000CC0, "Member 'UPyLevelEventSubSystem::OnBanPickDisplayStageStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSelectHeroDisplayStageStart) == 0x000CD0, "Member 'UPyLevelEventSubSystem::OnSelectHeroDisplayStageStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, BanPickStateTimeChangeDispatcher) == 0x000CE0, "Member 'UPyLevelEventSubSystem::BanPickStateTimeChangeDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnReceivePlayerLaunchSurrender) == 0x000CF0, "Member 'UPyLevelEventSubSystem::OnReceivePlayerLaunchSurrender' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnReceivePlayerSurrender) == 0x000D00, "Member 'UPyLevelEventSubSystem::OnReceivePlayerSurrender' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSurrenderStart) == 0x000D10, "Member 'UPyLevelEventSubSystem::OnSurrenderStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSurrenderAnnouncement) == 0x000D20, "Member 'UPyLevelEventSubSystem::OnSurrenderAnnouncement' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSurrenderEnd) == 0x000D30, "Member 'UPyLevelEventSubSystem::OnSurrenderEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnRedValidSurrenderPlayersChange) == 0x000D40, "Member 'UPyLevelEventSubSystem::OnRedValidSurrenderPlayersChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBlueValidSurrenderPlayersChange) == 0x000D50, "Member 'UPyLevelEventSubSystem::OnBlueValidSurrenderPlayersChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnRedSurrenderStateChange) == 0x000D60, "Member 'UPyLevelEventSubSystem::OnRedSurrenderStateChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBlueSurrenderStateChange) == 0x000D70, "Member 'UPyLevelEventSubSystem::OnBlueSurrenderStateChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnRedSurrenderResultChange) == 0x000D80, "Member 'UPyLevelEventSubSystem::OnRedSurrenderResultChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBlueSurrenderResultChange) == 0x000D90, "Member 'UPyLevelEventSubSystem::OnBlueSurrenderResultChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnRedSurrenderPassedChange) == 0x000DA0, "Member 'UPyLevelEventSubSystem::OnRedSurrenderPassedChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBlueSurrenderPassedChange) == 0x000DB0, "Member 'UPyLevelEventSubSystem::OnBlueSurrenderPassedChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSurrenderFailed) == 0x000DC0, "Member 'UPyLevelEventSubSystem::OnSurrenderFailed' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSurrenderSuccess) == 0x000DD0, "Member 'UPyLevelEventSubSystem::OnSurrenderSuccess' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, UIMultiKill) == 0x000DE0, "Member 'UPyLevelEventSubSystem::UIMultiKill' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, UITeamKill) == 0x000DF0, "Member 'UPyLevelEventSubSystem::UITeamKill' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, UIOccupyingSideChange) == 0x000E00, "Member 'UPyLevelEventSubSystem::UIOccupyingSideChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, VHolderSideDispatcher) == 0x000E10, "Member 'UPyLevelEventSubSystem::VHolderSideDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, DispatchVictoryProgressChanged) == 0x000E20, "Member 'UPyLevelEventSubSystem::DispatchVictoryProgressChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SelectHeroEntranceFinish) == 0x000E30, "Member 'UPyLevelEventSubSystem::SelectHeroEntranceFinish' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, AudioSiwtchBattleSide) == 0x000E40, "Member 'UPyLevelEventSubSystem::AudioSiwtchBattleSide' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnVoiceEnd) == 0x000E50, "Member 'UPyLevelEventSubSystem::OnVoiceEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnCampOccupied) == 0x000E60, "Member 'UPyLevelEventSubSystem::OnCampOccupied' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnInteractingWithNPC) == 0x000E70, "Member 'UPyLevelEventSubSystem::OnInteractingWithNPC' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnHearingLevelVoice) == 0x000E80, "Member 'UPyLevelEventSubSystem::OnHearingLevelVoice' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnVictoryInMap) == 0x000E90, "Member 'UPyLevelEventSubSystem::OnVictoryInMap' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TeamKillPlayerDeath) == 0x000EA0, "Member 'UPyLevelEventSubSystem::TeamKillPlayerDeath' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, TeamKillTeamWin) == 0x000EB0, "Member 'UPyLevelEventSubSystem::TeamKillTeamWin' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, NotifyClientCloseSelectHero) == 0x000EC0, "Member 'UPyLevelEventSubSystem::NotifyClientCloseSelectHero' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, FillColorToPoint) == 0x000ED0, "Member 'UPyLevelEventSubSystem::FillColorToPoint' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CalculateFillColorPercent) == 0x000EE0, "Member 'UPyLevelEventSubSystem::CalculateFillColorPercent' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, FillColorUpdatePercentDispatcher) == 0x000EF0, "Member 'UPyLevelEventSubSystem::FillColorUpdatePercentDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, CommonFestivalPlayerStatChanged) == 0x000F00, "Member 'UPyLevelEventSubSystem::CommonFestivalPlayerStatChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalScoreChanged) == 0x000F10, "Member 'UPyLevelEventSubSystem::SpringFestivalScoreChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalGoaled) == 0x000F20, "Member 'UPyLevelEventSubSystem::SpringFestivalGoaled' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalOnTackling) == 0x000F30, "Member 'UPyLevelEventSubSystem::SpringFestivalOnTackling' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalPlayerStatChanged) == 0x000F40, "Member 'UPyLevelEventSubSystem::SpringFestivalPlayerStatChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalRoundStart) == 0x000F50, "Member 'UPyLevelEventSubSystem::SpringFestivalRoundStart' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnBallKeepSideChange) == 0x000F60, "Member 'UPyLevelEventSubSystem::OnBallKeepSideChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalNear2Win) == 0x000F70, "Member 'UPyLevelEventSubSystem::SpringFestivalNear2Win' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalForbidKeepBallStateChanged) == 0x000F80, "Member 'UPyLevelEventSubSystem::SpringFestivalForbidKeepBallStateChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalMatchEnd) == 0x000F90, "Member 'UPyLevelEventSubSystem::SpringFestivalMatchEnd' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnSpringFestivalMatchStateChange) == 0x000FA0, "Member 'UPyLevelEventSubSystem::OnSpringFestivalMatchStateChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalSelfGotBall) == 0x000FB0, "Member 'UPyLevelEventSubSystem::SpringFestivalSelfGotBall' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpringFestivalGotLongPass) == 0x000FC0, "Member 'UPyLevelEventSubSystem::SpringFestivalGotLongPass' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EnergyScoreChanged) == 0x000FD0, "Member 'UPyLevelEventSubSystem::EnergyScoreChanged' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EnergyContestMinesInited) == 0x000FE0, "Member 'UPyLevelEventSubSystem::EnergyContestMinesInited' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, EnergyContestHasWinner) == 0x000FF0, "Member 'UPyLevelEventSubSystem::EnergyContestHasWinner' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, NewMineControlActivated) == 0x001000, "Member 'UPyLevelEventSubSystem::NewMineControlActivated' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, MineControlDeactivated) == 0x001010, "Member 'UPyLevelEventSubSystem::MineControlDeactivated' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnMineProxyConstructed) == 0x001020, "Member 'UPyLevelEventSubSystem::OnMineProxyConstructed' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnMineProxyDestructed) == 0x001030, "Member 'UPyLevelEventSubSystem::OnMineProxyDestructed' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, PreCreateMineProxy) == 0x001040, "Member 'UPyLevelEventSubSystem::PreCreateMineProxy' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, MineControlUnlockStartDispatcher) == 0x001050, "Member 'UPyLevelEventSubSystem::MineControlUnlockStartDispatcher' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, RuleComponentReceiveInit) == 0x001060, "Member 'UPyLevelEventSubSystem::RuleComponentReceiveInit' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnWinterFestivalResult) == 0x001070, "Member 'UPyLevelEventSubSystem::OnWinterFestivalResult' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, QualitySettingChange) == 0x001080, "Member 'UPyLevelEventSubSystem::QualitySettingChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, SpecialAreaTrigger) == 0x001090, "Member 'UPyLevelEventSubSystem::SpecialAreaTrigger' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnPortalActivate) == 0x0010A0, "Member 'UPyLevelEventSubSystem::OnPortalActivate' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnLocalAreaChange) == 0x0010B0, "Member 'UPyLevelEventSubSystem::OnLocalAreaChange' has a wrong offset!");
static_assert(offsetof(UPyLevelEventSubSystem, OnActorChangedByTrajectoryPortal) == 0x0010C0, "Member 'UPyLevelEventSubSystem::OnActorChangedByTrajectoryPortal' has a wrong offset!");

// PythonClass PyLevelEventSubsystem.PyReplayLevelEventSubSystem
// 0x0000 (0x10D0 - 0x10D0)
class UPyReplayLevelEventSubSystem final : public UPyLevelEventSubSystem
{
public:
	bool IsMapLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyReplayLevelEventSubSystem">();
	}
	static class UPyReplayLevelEventSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyReplayLevelEventSubSystem>();
	}
};
static_assert(alignof(UPyReplayLevelEventSubSystem) == 0x000008, "Wrong alignment on UPyReplayLevelEventSubSystem");
static_assert(sizeof(UPyReplayLevelEventSubSystem) == 0x0010D0, "Wrong size on UPyReplayLevelEventSubSystem");

}

