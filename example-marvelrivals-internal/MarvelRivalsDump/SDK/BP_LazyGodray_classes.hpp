#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LazyGodray

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LazyGodray.BP_LazyGodray_C
// 0x0120 (0x05B0 - 0x0490)
class ABP_LazyGodray_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0490(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Spotlight_grp;                                     // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Godray_card_SM;                                    // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lazygodray_FX_BP;                                  // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Diameter_multiplier;                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Length_multiplier;                         // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Overall_Tint_color;                                // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_intensity;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_contrast;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               LightShaft_texture;                                // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        LightShaft_strength;                               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        LightShaft_amount;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        LightShaft_length;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_depth_fade_distance;                    // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_fesnel_exponent;                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_camera_fading_starting_distance;        // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_camera_fading_transition_range;         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_vertical_falloff_midpoint;              // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_vertical_falloff_exponent;              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_vertical_falloff_strength;              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_cylindrical_masking_exponent;           // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_lightray_convergent;                           // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volumetric_lightray_convergent_rate;               // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_spotlight_component__cannot_be_toggled_during_runtime_if_not_Movable; // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Spotlight_Mobility;                                // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55A[0x6];                                      // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spotlight_intensity_in_Lumens;                     // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Spotlight_source_radius;                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Spotlight_attenuation_offset;                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Spotlight_outer_cone_angle_offset;                 // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Spotlight_inner_cone_angle;                        // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_intensity;                                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Smoke_texture;                                     // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_texture_scale;                               // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_panning_speedX;                              // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_panning_speedY;                              // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void OnChangingGodrayParameters(bool UpdateSpotlight);
	void ExecuteUbergraph_BP_LazyGodray(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LazyGodray_C">();
	}
	static class ABP_LazyGodray_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LazyGodray_C>();
	}
};
//static_assert(alignof(ABP_LazyGodray_C) == 0x000008, "Wrong alignment on ABP_LazyGodray_C");
//static_assert(sizeof(ABP_LazyGodray_C) == 0x0005B0, "Wrong size on ABP_LazyGodray_C");
//static_assert(offsetof(ABP_LazyGodray_C, UberGraphFrame) == 0x000490, "Member 'ABP_LazyGodray_C::UberGraphFrame' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, SpotLight) == 0x000498, "Member 'ABP_LazyGodray_C::SpotLight' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_grp) == 0x0004A0, "Member 'ABP_LazyGodray_C::Spotlight_grp' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Godray_card_SM) == 0x0004A8, "Member 'ABP_LazyGodray_C::Godray_card_SM' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Lazygodray_FX_BP) == 0x0004B0, "Member 'ABP_LazyGodray_C::Lazygodray_FX_BP' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Overall_Diameter_multiplier) == 0x0004B8, "Member 'ABP_LazyGodray_C::Overall_Diameter_multiplier' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Overall_Length_multiplier) == 0x0004C0, "Member 'ABP_LazyGodray_C::Overall_Length_multiplier' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Overall_Tint_color) == 0x0004C8, "Member 'ABP_LazyGodray_C::Overall_Tint_color' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Overall_intensity) == 0x0004D8, "Member 'ABP_LazyGodray_C::Overall_intensity' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Overall_contrast) == 0x0004E0, "Member 'ABP_LazyGodray_C::Overall_contrast' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, LightShaft_texture) == 0x0004E8, "Member 'ABP_LazyGodray_C::LightShaft_texture' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, LightShaft_strength) == 0x0004F0, "Member 'ABP_LazyGodray_C::LightShaft_strength' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, LightShaft_amount) == 0x0004F8, "Member 'ABP_LazyGodray_C::LightShaft_amount' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, LightShaft_length) == 0x000500, "Member 'ABP_LazyGodray_C::LightShaft_length' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_depth_fade_distance) == 0x000508, "Member 'ABP_LazyGodray_C::Volumetric_depth_fade_distance' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_fesnel_exponent) == 0x000510, "Member 'ABP_LazyGodray_C::Volumetric_fesnel_exponent' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_camera_fading_starting_distance) == 0x000518, "Member 'ABP_LazyGodray_C::Volumetric_camera_fading_starting_distance' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_camera_fading_transition_range) == 0x000520, "Member 'ABP_LazyGodray_C::Volumetric_camera_fading_transition_range' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_vertical_falloff_midpoint) == 0x000528, "Member 'ABP_LazyGodray_C::Volumetric_vertical_falloff_midpoint' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_vertical_falloff_exponent) == 0x000530, "Member 'ABP_LazyGodray_C::Volumetric_vertical_falloff_exponent' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_vertical_falloff_strength) == 0x000538, "Member 'ABP_LazyGodray_C::Volumetric_vertical_falloff_strength' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_cylindrical_masking_exponent) == 0x000540, "Member 'ABP_LazyGodray_C::Volumetric_cylindrical_masking_exponent' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Use_lightray_convergent) == 0x000548, "Member 'ABP_LazyGodray_C::Use_lightray_convergent' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Volumetric_lightray_convergent_rate) == 0x000550, "Member 'ABP_LazyGodray_C::Volumetric_lightray_convergent_rate' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Enable_spotlight_component__cannot_be_toggled_during_runtime_if_not_Movable) == 0x000558, "Member 'ABP_LazyGodray_C::Enable_spotlight_component__cannot_be_toggled_during_runtime_if_not_Movable' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_Mobility) == 0x000559, "Member 'ABP_LazyGodray_C::Spotlight_Mobility' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_intensity_in_Lumens) == 0x000560, "Member 'ABP_LazyGodray_C::Spotlight_intensity_in_Lumens' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_source_radius) == 0x000568, "Member 'ABP_LazyGodray_C::Spotlight_source_radius' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_attenuation_offset) == 0x000570, "Member 'ABP_LazyGodray_C::Spotlight_attenuation_offset' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_outer_cone_angle_offset) == 0x000578, "Member 'ABP_LazyGodray_C::Spotlight_outer_cone_angle_offset' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Spotlight_inner_cone_angle) == 0x000580, "Member 'ABP_LazyGodray_C::Spotlight_inner_cone_angle' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Smoke_intensity) == 0x000588, "Member 'ABP_LazyGodray_C::Smoke_intensity' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Smoke_texture) == 0x000590, "Member 'ABP_LazyGodray_C::Smoke_texture' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Smoke_texture_scale) == 0x000598, "Member 'ABP_LazyGodray_C::Smoke_texture_scale' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Smoke_panning_speedX) == 0x0005A0, "Member 'ABP_LazyGodray_C::Smoke_panning_speedX' has a wrong offset!");
//static_assert(offsetof(ABP_LazyGodray_C, Smoke_panning_speedY) == 0x0005A8, "Member 'ABP_LazyGodray_C::Smoke_panning_speedY' has a wrong offset!");

}

