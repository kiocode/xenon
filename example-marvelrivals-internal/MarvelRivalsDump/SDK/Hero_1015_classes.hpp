#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1015

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DeclarativeUnreal_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "Hero_1015_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class Hero_1015.Cue_Ability_Loop_101501
// 0x0000 (0x0CE0 - 0x0CE0)
class ACue_Ability_Loop_101501 final : public ACueAudioAbilityMove
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_101501">();
	}
	static class ACue_Ability_Loop_101501* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_101501>();
	}
};
static_assert(alignof(ACue_Ability_Loop_101501) == 0x000008, "Wrong alignment on ACue_Ability_Loop_101501");
static_assert(sizeof(ACue_Ability_Loop_101501) == 0x000CE0, "Wrong size on ACue_Ability_Loop_101501");

// Class Hero_1015.Cue_Projectile_Loop_10152101
// 0x0040 (0x0DF0 - 0x0DB0)
class ACue_Projectile_Loop_10152101 final : public AMarvelCueNotify_Projectile
{
public:
	float                                         OriginRot;                                         // 0x0DB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeed;                                          // 0x0DB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginTime;                                         // 0x0DB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Esp;                                               // 0x0DBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaKey;                                          // 0x0DC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutTime;                                       // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCC[0x4];                                      // 0x0DCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AlphaCurve;                                        // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComboConfig_101521>            ComboConfigArray;                                  // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_Trajectory;                                     // 0x0DE8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Projectile_Loop_10152101">();
	}
	static class ACue_Projectile_Loop_10152101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Projectile_Loop_10152101>();
	}
};
static_assert(alignof(ACue_Projectile_Loop_10152101) == 0x000008, "Wrong alignment on ACue_Projectile_Loop_10152101");
static_assert(sizeof(ACue_Projectile_Loop_10152101) == 0x000DF0, "Wrong size on ACue_Projectile_Loop_10152101");
static_assert(offsetof(ACue_Projectile_Loop_10152101, OriginRot) == 0x000DB0, "Member 'ACue_Projectile_Loop_10152101::OriginRot' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, RotSpeed) == 0x000DB4, "Member 'ACue_Projectile_Loop_10152101::RotSpeed' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, BeginTime) == 0x000DB8, "Member 'ACue_Projectile_Loop_10152101::BeginTime' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, Esp) == 0x000DBC, "Member 'ACue_Projectile_Loop_10152101::Esp' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, AlphaKey) == 0x000DC0, "Member 'ACue_Projectile_Loop_10152101::AlphaKey' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, FadeInTime) == 0x000DC4, "Member 'ACue_Projectile_Loop_10152101::FadeInTime' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, FadeoutTime) == 0x000DC8, "Member 'ACue_Projectile_Loop_10152101::FadeoutTime' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, AlphaCurve) == 0x000DD0, "Member 'ACue_Projectile_Loop_10152101::AlphaCurve' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, ComboConfigArray) == 0x000DD8, "Member 'ACue_Projectile_Loop_10152101::ComboConfigArray' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10152101, NS_Trajectory) == 0x000DE8, "Member 'ACue_Projectile_Loop_10152101::NS_Trajectory' has a wrong offset!");

// Class Hero_1015.Scope_101541
// 0x0010 (0x1710 - 0x1700)
class AScope_101541 : public AMarvelAbilityTargetActor_Scope
{
public:
	bool                                          bNeedTick;                                         // 0x1700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1701[0xF];                                     // 0x1701(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastExecuteHitCue(const struct FGameplayTag& InCueTag, const TArray<struct FHitResult>& InHitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Scope_101541">();
	}
	static class AScope_101541* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScope_101541>();
	}
};
static_assert(alignof(AScope_101541) == 0x000010, "Wrong alignment on AScope_101541");
static_assert(sizeof(AScope_101541) == 0x001710, "Wrong size on AScope_101541");
static_assert(offsetof(AScope_101541, bNeedTick) == 0x001700, "Member 'AScope_101541::bNeedTick' has a wrong offset!");

// Class Hero_1015.Cue_Ability_Loop_101541
// 0x0008 (0x0E58 - 0x0E50)
class ACue_Ability_Loop_101541 : public AMarvelCueNotify_Ability
{
public:
	class AActor*                                 Storm_char;                                        // 0x0E50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearAllAudio();
	bool IsAbilitySoundPlaying();
	void OnCharDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnSecondResLoaded(class AActor* Value);
	void OnTagUpdate(const struct FGameplayTag& Tag, bool TagExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_101541">();
	}
	static class ACue_Ability_Loop_101541* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_101541>();
	}
};
static_assert(alignof(ACue_Ability_Loop_101541) == 0x000008, "Wrong alignment on ACue_Ability_Loop_101541");
static_assert(sizeof(ACue_Ability_Loop_101541) == 0x000E58, "Wrong size on ACue_Ability_Loop_101541");
static_assert(offsetof(ACue_Ability_Loop_101541, Storm_char) == 0x000E50, "Member 'ACue_Ability_Loop_101541::Storm_char' has a wrong offset!");

// Class Hero_1015.Cue_Scope_Loop_101541_Common
// 0x00B8 (0x0E28 - 0x0D70)
class ACue_Scope_Loop_101541_Common final : public AMarvelCueNotify_Scope
{
public:
	bool                                          bCanEnemySeeScope;                                 // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0x3];                                      // 0x0D71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereEffectRadius;                                // 0x0D74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRadiusOfUnderPanEffect;                         // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x4];                                      // 0x0D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNiagaraSocketParam_101541>     MultiBoneEffectArray;                              // 0x0D80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         UnderPanEffectLocationOffsetOnZ;                   // 0x0D90(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerInterval;                                     // 0x0D94(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStormCharacter*                        OwnerInstigator;                                   // 0x0D98(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AScope_101541*                          AttachedScope;                                     // 0x0DA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFXSystemComponent*>             BoneEffectComponentArray;                          // 0x0DA8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsSetCustomEffect;                                // 0x0DB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceHideEffect;                                  // 0x0DB9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBA[0x6];                                      // 0x0DBA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0DC0(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_GroundDecal;                                    // 0x0DD8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NS_LightningRangeField;                            // 0x0DE0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NS_UnderPan;                                       // 0x0DE8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NS_StandBy;                                        // 0x0DF0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NS_StandField;                                     // 0x0DF8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     ViewSideChangeHolder;                              // 0x0E00(0x0010)(Protected, NativeAccessSpecifierProtected)
	TDelegate<void(EClientPlayerViewSide InViewSide)> ViewSideDelegate;                                  // 0x0E10(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E24[0x4];                                      // 0x0E24(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleGroundFXVisibility(bool bVisible);
	void OnGetInstigator(class AActor* InstigatorActor);
	void OnSelfViewSideChanged(EClientPlayerViewSide ViewSide);
	void UpdateScopeVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_101541_Common">();
	}
	static class ACue_Scope_Loop_101541_Common* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_101541_Common>();
	}
};
static_assert(alignof(ACue_Scope_Loop_101541_Common) == 0x000008, "Wrong alignment on ACue_Scope_Loop_101541_Common");
static_assert(sizeof(ACue_Scope_Loop_101541_Common) == 0x000E28, "Wrong size on ACue_Scope_Loop_101541_Common");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, bCanEnemySeeScope) == 0x000D70, "Member 'ACue_Scope_Loop_101541_Common::bCanEnemySeeScope' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, SphereEffectRadius) == 0x000D74, "Member 'ACue_Scope_Loop_101541_Common::SphereEffectRadius' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, MinRadiusOfUnderPanEffect) == 0x000D78, "Member 'ACue_Scope_Loop_101541_Common::MinRadiusOfUnderPanEffect' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, MultiBoneEffectArray) == 0x000D80, "Member 'ACue_Scope_Loop_101541_Common::MultiBoneEffectArray' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, UnderPanEffectLocationOffsetOnZ) == 0x000D90, "Member 'ACue_Scope_Loop_101541_Common::UnderPanEffectLocationOffsetOnZ' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, TimerInterval) == 0x000D94, "Member 'ACue_Scope_Loop_101541_Common::TimerInterval' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, OwnerInstigator) == 0x000D98, "Member 'ACue_Scope_Loop_101541_Common::OwnerInstigator' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, AttachedScope) == 0x000DA0, "Member 'ACue_Scope_Loop_101541_Common::AttachedScope' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, BoneEffectComponentArray) == 0x000DA8, "Member 'ACue_Scope_Loop_101541_Common::BoneEffectComponentArray' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, bIsSetCustomEffect) == 0x000DB8, "Member 'ACue_Scope_Loop_101541_Common::bIsSetCustomEffect' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, bForceHideEffect) == 0x000DB9, "Member 'ACue_Scope_Loop_101541_Common::bForceHideEffect' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, LoopTimerHandle) == 0x000DC0, "Member 'ACue_Scope_Loop_101541_Common::LoopTimerHandle' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, NS_GroundDecal) == 0x000DD8, "Member 'ACue_Scope_Loop_101541_Common::NS_GroundDecal' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, NS_LightningRangeField) == 0x000DE0, "Member 'ACue_Scope_Loop_101541_Common::NS_LightningRangeField' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, NS_UnderPan) == 0x000DE8, "Member 'ACue_Scope_Loop_101541_Common::NS_UnderPan' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, NS_StandBy) == 0x000DF0, "Member 'ACue_Scope_Loop_101541_Common::NS_StandBy' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, NS_StandField) == 0x000DF8, "Member 'ACue_Scope_Loop_101541_Common::NS_StandField' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, ViewSideChangeHolder) == 0x000E00, "Member 'ACue_Scope_Loop_101541_Common::ViewSideChangeHolder' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_101541_Common, ViewSideDelegate) == 0x000E10, "Member 'ACue_Scope_Loop_101541_Common::ViewSideDelegate' has a wrong offset!");

// Class Hero_1015.Cue_TakeDamage_1015
// 0x0000 (0x0D48 - 0x0D48)
class ACue_TakeDamage_1015 final : public AMarvelCueNotify_TakeDamage_Actor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_TakeDamage_1015">();
	}
	static class ACue_TakeDamage_1015* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_TakeDamage_1015>();
	}
};
static_assert(alignof(ACue_TakeDamage_1015) == 0x000008, "Wrong alignment on ACue_TakeDamage_1015");
static_assert(sizeof(ACue_TakeDamage_1015) == 0x000D48, "Wrong size on ACue_TakeDamage_1015");

// Class Hero_1015.Ability_101541
// 0x0008 (0x2588 - 0x2580)
class UAbility_101541 : public UMarvelGameplayAbility
{
public:
	int32                                         EnemyNum;                                          // 0x2580(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeammateNum;                                       // 0x2584(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetGroupNum(int32 NewEnemyNum, int32 NewTeamNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101541">();
	}
	static class UAbility_101541* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101541>();
	}
};
static_assert(alignof(UAbility_101541) == 0x000008, "Wrong alignment on UAbility_101541");
static_assert(sizeof(UAbility_101541) == 0x002588, "Wrong size on UAbility_101541");
static_assert(offsetof(UAbility_101541, EnemyNum) == 0x002580, "Member 'UAbility_101541::EnemyNum' has a wrong offset!");
static_assert(offsetof(UAbility_101541, TeammateNum) == 0x002584, "Member 'UAbility_101541::TeammateNum' has a wrong offset!");

// Class Hero_1015.UIController_101541
// 0x0FF0 (0x1C50 - 0x0C60)
class UUIController_101541 : public UUIC_Ability
{
public:
	struct FGameplayTag                           IgnoreAbilityTag;                                  // 0x0C60(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StormTag;                                          // 0x0C6C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ThunderTag;                                        // 0x0C78(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumTraceScopeID;                                   // 0x0C84(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           NumTraceTimerHandle;                               // 0x0C88(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             NumTraceContext;                                   // 0x0CA0(0x0F90)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x1C30(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextEnemyNum;                                      // 0x1C38(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextTeammateNum;                                   // 0x1C40(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_101541*                        OwningAbility;                                     // 0x1C48(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanShow();
	class AMarvelBaseCharacter* GetOwningCharacter();
	void HandleNumTrace();
	void UpdateExtraWidgetVisible(bool bVisible);
	void UpdateGroupNum(int32 EnemyNum, int32 TeammateNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_101541">();
	}
	static class UUIController_101541* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_101541>();
	}
};
static_assert(alignof(UUIController_101541) == 0x000010, "Wrong alignment on UUIController_101541");
static_assert(sizeof(UUIController_101541) == 0x001C50, "Wrong size on UUIController_101541");
static_assert(offsetof(UUIController_101541, IgnoreAbilityTag) == 0x000C60, "Member 'UUIController_101541::IgnoreAbilityTag' has a wrong offset!");
static_assert(offsetof(UUIController_101541, StormTag) == 0x000C6C, "Member 'UUIController_101541::StormTag' has a wrong offset!");
static_assert(offsetof(UUIController_101541, ThunderTag) == 0x000C78, "Member 'UUIController_101541::ThunderTag' has a wrong offset!");
static_assert(offsetof(UUIController_101541, NumTraceScopeID) == 0x000C84, "Member 'UUIController_101541::NumTraceScopeID' has a wrong offset!");
static_assert(offsetof(UUIController_101541, NumTraceTimerHandle) == 0x000C88, "Member 'UUIController_101541::NumTraceTimerHandle' has a wrong offset!");
static_assert(offsetof(UUIController_101541, NumTraceContext) == 0x000CA0, "Member 'UUIController_101541::NumTraceContext' has a wrong offset!");
static_assert(offsetof(UUIController_101541, OwningCharacter) == 0x001C30, "Member 'UUIController_101541::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UUIController_101541, TextEnemyNum) == 0x001C38, "Member 'UUIController_101541::TextEnemyNum' has a wrong offset!");
static_assert(offsetof(UUIController_101541, TextTeammateNum) == 0x001C40, "Member 'UUIController_101541::TextTeammateNum' has a wrong offset!");
static_assert(offsetof(UUIController_101541, OwningAbility) == 0x001C48, "Member 'UUIController_101541::OwningAbility' has a wrong offset!");

// Class Hero_1015.Cue_Ability_Loop_10155101
// 0x0030 (0x0E80 - 0x0E50)
class ACue_Ability_Loop_10155101 final : public AMarvelCueNotify_Ability
{
public:
	class AStormCharacter*                        StormChar;                                         // 0x0E50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CueStartTime;                                      // 0x0E58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0E5C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelHitEffectComponent*              HitEffectComp;                                     // 0x0E68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WeightCurve;                                       // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CameraMaterial;                                    // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10155101">();
	}
	static class ACue_Ability_Loop_10155101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10155101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10155101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10155101");
static_assert(sizeof(ACue_Ability_Loop_10155101) == 0x000E80, "Wrong size on ACue_Ability_Loop_10155101");
static_assert(offsetof(ACue_Ability_Loop_10155101, StormChar) == 0x000E50, "Member 'ACue_Ability_Loop_10155101::StormChar' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10155101, CueStartTime) == 0x000E58, "Member 'ACue_Ability_Loop_10155101::CueStartTime' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10155101, TagName) == 0x000E5C, "Member 'ACue_Ability_Loop_10155101::TagName' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10155101, HitEffectComp) == 0x000E68, "Member 'ACue_Ability_Loop_10155101::HitEffectComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10155101, WeightCurve) == 0x000E70, "Member 'ACue_Ability_Loop_10155101::WeightCurve' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10155101, CameraMaterial) == 0x000E78, "Member 'ACue_Ability_Loop_10155101::CameraMaterial' has a wrong offset!");

// Class Hero_1015.Config_101561
// 0x01D8 (0x0270 - 0x0098)
class UConfig_101561 final : public UMarvelAbilityConfig
{
public:
	struct FVector                                ActivatingCameraTranslation;                       // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ActivatingCameraRotation;                          // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ActivatingCameraInterpSpeed;                       // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneCapsuleRadius;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneCapsuleHalfHeight;                        // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectionRegionMaxSeconds;                         // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EnterLocatorCameraTranslation;                     // 0x00D8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EnterLocatorCameraRotation;                        // 0x00F0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EnterLocatorCameraInterpSpeed;                     // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocatorTopViewCameraZ;                             // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraTopViewPushUpSpeed;                          // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraTopViewPushDownSpeed;                        // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SelectRegionTopViewTags;                           // 0x0118(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ASelectRegionCameraActor>   CameraActorClass;                                  // 0x0180(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpExitTopMode;                             // 0x0188(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultViewPitch;                                  // 0x018C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandGravityScale;                                  // 0x0190(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStormMoveConfig                       SelectMoveConfig;                                  // 0x0194(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HurricanePreActiveSeconds;                         // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneActiveSeconds;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneMaxSpeed;                                 // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneAcc;                                      // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricanMaxDropSpeed;                              // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricanePlayerHeight;                             // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneHeight;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepCeilingFrequency;                             // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneValidHeight;                              // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EnterHurricaneCameraTranslation;                   // 0x01D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EnterHurricaneCameraRotation;                      // 0x01F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HurricaneFarCameraTranslation;                     // 0x0208(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HurricaneFarCameraRotation;                        // 0x0220(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HurricaneCameraInterpSpeed;                        // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AbsorbActorTag;                                    // 0x023C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HurricaneIgnitableTag;                             // 0x0248(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationPlusPerScope;                              // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAbilityDuration;                                // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireHurricaneDamageRadius;                         // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireHurricaneDamageValue;                          // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireHurricaneBuffID;                               // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricanePlayerDownTime;                           // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_101561">();
	}
	static class UConfig_101561* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_101561>();
	}
};
static_assert(alignof(UConfig_101561) == 0x000008, "Wrong alignment on UConfig_101561");
static_assert(sizeof(UConfig_101561) == 0x000270, "Wrong size on UConfig_101561");
static_assert(offsetof(UConfig_101561, ActivatingCameraTranslation) == 0x000098, "Member 'UConfig_101561::ActivatingCameraTranslation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, ActivatingCameraRotation) == 0x0000B0, "Member 'UConfig_101561::ActivatingCameraRotation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, ActivatingCameraInterpSpeed) == 0x0000C8, "Member 'UConfig_101561::ActivatingCameraInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneCapsuleRadius) == 0x0000CC, "Member 'UConfig_101561::HurricaneCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneCapsuleHalfHeight) == 0x0000D0, "Member 'UConfig_101561::HurricaneCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UConfig_101561, SelectionRegionMaxSeconds) == 0x0000D4, "Member 'UConfig_101561::SelectionRegionMaxSeconds' has a wrong offset!");
static_assert(offsetof(UConfig_101561, EnterLocatorCameraTranslation) == 0x0000D8, "Member 'UConfig_101561::EnterLocatorCameraTranslation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, EnterLocatorCameraRotation) == 0x0000F0, "Member 'UConfig_101561::EnterLocatorCameraRotation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, EnterLocatorCameraInterpSpeed) == 0x000108, "Member 'UConfig_101561::EnterLocatorCameraInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, LocatorTopViewCameraZ) == 0x00010C, "Member 'UConfig_101561::LocatorTopViewCameraZ' has a wrong offset!");
static_assert(offsetof(UConfig_101561, CameraTopViewPushUpSpeed) == 0x000110, "Member 'UConfig_101561::CameraTopViewPushUpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, CameraTopViewPushDownSpeed) == 0x000114, "Member 'UConfig_101561::CameraTopViewPushDownSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, SelectRegionTopViewTags) == 0x000118, "Member 'UConfig_101561::SelectRegionTopViewTags' has a wrong offset!");
static_assert(offsetof(UConfig_101561, CameraActorClass) == 0x000180, "Member 'UConfig_101561::CameraActorClass' has a wrong offset!");
static_assert(offsetof(UConfig_101561, bUseInterpExitTopMode) == 0x000188, "Member 'UConfig_101561::bUseInterpExitTopMode' has a wrong offset!");
static_assert(offsetof(UConfig_101561, DefaultViewPitch) == 0x00018C, "Member 'UConfig_101561::DefaultViewPitch' has a wrong offset!");
static_assert(offsetof(UConfig_101561, LandGravityScale) == 0x000190, "Member 'UConfig_101561::LandGravityScale' has a wrong offset!");
static_assert(offsetof(UConfig_101561, SelectMoveConfig) == 0x000194, "Member 'UConfig_101561::SelectMoveConfig' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricanePreActiveSeconds) == 0x0001B4, "Member 'UConfig_101561::HurricanePreActiveSeconds' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneActiveSeconds) == 0x0001B8, "Member 'UConfig_101561::HurricaneActiveSeconds' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneMaxSpeed) == 0x0001BC, "Member 'UConfig_101561::HurricaneMaxSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneAcc) == 0x0001C0, "Member 'UConfig_101561::HurricaneAcc' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricanMaxDropSpeed) == 0x0001C4, "Member 'UConfig_101561::HurricanMaxDropSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricanePlayerHeight) == 0x0001C8, "Member 'UConfig_101561::HurricanePlayerHeight' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneHeight) == 0x0001CC, "Member 'UConfig_101561::HurricaneHeight' has a wrong offset!");
static_assert(offsetof(UConfig_101561, SweepCeilingFrequency) == 0x0001D0, "Member 'UConfig_101561::SweepCeilingFrequency' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneValidHeight) == 0x0001D4, "Member 'UConfig_101561::HurricaneValidHeight' has a wrong offset!");
static_assert(offsetof(UConfig_101561, EnterHurricaneCameraTranslation) == 0x0001D8, "Member 'UConfig_101561::EnterHurricaneCameraTranslation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, EnterHurricaneCameraRotation) == 0x0001F0, "Member 'UConfig_101561::EnterHurricaneCameraRotation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneFarCameraTranslation) == 0x000208, "Member 'UConfig_101561::HurricaneFarCameraTranslation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneFarCameraRotation) == 0x000220, "Member 'UConfig_101561::HurricaneFarCameraRotation' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneCameraInterpSpeed) == 0x000238, "Member 'UConfig_101561::HurricaneCameraInterpSpeed' has a wrong offset!");
static_assert(offsetof(UConfig_101561, AbsorbActorTag) == 0x00023C, "Member 'UConfig_101561::AbsorbActorTag' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricaneIgnitableTag) == 0x000248, "Member 'UConfig_101561::HurricaneIgnitableTag' has a wrong offset!");
static_assert(offsetof(UConfig_101561, DurationPlusPerScope) == 0x000254, "Member 'UConfig_101561::DurationPlusPerScope' has a wrong offset!");
static_assert(offsetof(UConfig_101561, MaxAbilityDuration) == 0x000258, "Member 'UConfig_101561::MaxAbilityDuration' has a wrong offset!");
static_assert(offsetof(UConfig_101561, FireHurricaneDamageRadius) == 0x00025C, "Member 'UConfig_101561::FireHurricaneDamageRadius' has a wrong offset!");
static_assert(offsetof(UConfig_101561, FireHurricaneDamageValue) == 0x000260, "Member 'UConfig_101561::FireHurricaneDamageValue' has a wrong offset!");
static_assert(offsetof(UConfig_101561, FireHurricaneBuffID) == 0x000264, "Member 'UConfig_101561::FireHurricaneBuffID' has a wrong offset!");
static_assert(offsetof(UConfig_101561, HurricanePlayerDownTime) == 0x000268, "Member 'UConfig_101561::HurricanePlayerDownTime' has a wrong offset!");

// Class Hero_1015.Ability_101561
// 0x04B8 (0x2A38 - 0x2580)
class UAbility_101561 : public UMarvelGameplayAbility
{
public:
	class ASelectRegionCameraActor_101561*        CameraActor;                                       // 0x2580(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStormCharacter*                        Owner;                                             // 0x2588(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_101561*                         Config;                                            // 0x2590(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CugTagForWarningUI;                                // 0x2598(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A4[0x4];                                     // 0x25A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* TimeLineTask2;                                     // 0x25A8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* TimeLineTask3;                                     // 0x25B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_WaitBindInput*       InputTaskActivateHurricane;                        // 0x25B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           PreActiveTimer;                                    // 0x25C0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           ActiveTimer;                                       // 0x25D8(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStormMoveConfig                       MoveConfigCache;                                   // 0x25F0(0x0020)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_WaitDelay*           SelectingDelayTask;                                // 0x2610(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AMarvelAbilityTargetActor_Scope>> AbilityScopes;                                     // 0x2618(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2628[0x30];                                    // 0x2628(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PressCameraAnimationKey;                           // 0x2658(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         ReleaseCameraAnimationKey;                         // 0x26F8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PressActivateHurricaneKey;                         // 0x2798(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         HurricaneTimeOverKey;                              // 0x2838(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         RefreshDurationKey;                                // 0x28D8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         SelectRegionLandKey;                               // 0x2978(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A18[0x10];                                    // 0x2A18(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             AbsorbFireTornadoDispatcher;                       // 0x2A28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UConfig_101561* GetAbilityConfig();

	void ActiveHurricane();
	void CacheCharSpeedParam();
	void Client_NotifyReceiveFireInCharacterState();
	class AStormCharacter* GetOwnerCharacter();
	void HandleSelectionMoveParam(struct FStormMoveConfig* InMoveConfig, bool bIsWalking, bool bIsCache, bool bClearSpeed);
	void NetMulticast_ActivateFireHurricane(const TArray<class AActor*>& InTargets);
	void OnHurricaneFinished(bool bIsDeath, bool bCanceled, bool bActiveByTimerOrMT);
	void OnLocateFinish(bool bActiveByTimerOrMT);
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnNotifyCharacterChange(EStormCharState NewStormCharState);
	void OnPressActivateHurricaneKey(float TimeWaited);
	void OnPressCameraAnimationKey(float TimeWaited);
	void OnReleaseCameraAnimationKey(float TimeWaited);
	void OnRep_ReplicateCameraActor();
	void OnSpawnSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTimeOver();
	void OnTimerLocateFinish();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101561">();
	}
	static class UAbility_101561* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101561>();
	}
};
static_assert(alignof(UAbility_101561) == 0x000008, "Wrong alignment on UAbility_101561");
static_assert(sizeof(UAbility_101561) == 0x002A38, "Wrong size on UAbility_101561");
static_assert(offsetof(UAbility_101561, CameraActor) == 0x002580, "Member 'UAbility_101561::CameraActor' has a wrong offset!");
static_assert(offsetof(UAbility_101561, Owner) == 0x002588, "Member 'UAbility_101561::Owner' has a wrong offset!");
static_assert(offsetof(UAbility_101561, Config) == 0x002590, "Member 'UAbility_101561::Config' has a wrong offset!");
static_assert(offsetof(UAbility_101561, CugTagForWarningUI) == 0x002598, "Member 'UAbility_101561::CugTagForWarningUI' has a wrong offset!");
static_assert(offsetof(UAbility_101561, TimeLineTask2) == 0x0025A8, "Member 'UAbility_101561::TimeLineTask2' has a wrong offset!");
static_assert(offsetof(UAbility_101561, TimeLineTask3) == 0x0025B0, "Member 'UAbility_101561::TimeLineTask3' has a wrong offset!");
static_assert(offsetof(UAbility_101561, InputTaskActivateHurricane) == 0x0025B8, "Member 'UAbility_101561::InputTaskActivateHurricane' has a wrong offset!");
static_assert(offsetof(UAbility_101561, PreActiveTimer) == 0x0025C0, "Member 'UAbility_101561::PreActiveTimer' has a wrong offset!");
static_assert(offsetof(UAbility_101561, ActiveTimer) == 0x0025D8, "Member 'UAbility_101561::ActiveTimer' has a wrong offset!");
static_assert(offsetof(UAbility_101561, MoveConfigCache) == 0x0025F0, "Member 'UAbility_101561::MoveConfigCache' has a wrong offset!");
static_assert(offsetof(UAbility_101561, SelectingDelayTask) == 0x002610, "Member 'UAbility_101561::SelectingDelayTask' has a wrong offset!");
static_assert(offsetof(UAbility_101561, AbilityScopes) == 0x002618, "Member 'UAbility_101561::AbilityScopes' has a wrong offset!");
static_assert(offsetof(UAbility_101561, PressCameraAnimationKey) == 0x002658, "Member 'UAbility_101561::PressCameraAnimationKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, ReleaseCameraAnimationKey) == 0x0026F8, "Member 'UAbility_101561::ReleaseCameraAnimationKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, PressActivateHurricaneKey) == 0x002798, "Member 'UAbility_101561::PressActivateHurricaneKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, HurricaneTimeOverKey) == 0x002838, "Member 'UAbility_101561::HurricaneTimeOverKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, RefreshDurationKey) == 0x0028D8, "Member 'UAbility_101561::RefreshDurationKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, SelectRegionLandKey) == 0x002978, "Member 'UAbility_101561::SelectRegionLandKey' has a wrong offset!");
static_assert(offsetof(UAbility_101561, AbsorbFireTornadoDispatcher) == 0x002A28, "Member 'UAbility_101561::AbsorbFireTornadoDispatcher' has a wrong offset!");

// Class Hero_1015.TraceComponent_101561_Common
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_101561_Common : public UMarvelAgentTraceComponent
{
public:
	bool                                          bUsingOutterRadius;                                // 0x1708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1709[0x7];                                     // 0x1709(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_101561_Common">();
	}
	static class UTraceComponent_101561_Common* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_101561_Common>();
	}
};
static_assert(alignof(UTraceComponent_101561_Common) == 0x000010, "Wrong alignment on UTraceComponent_101561_Common");
static_assert(sizeof(UTraceComponent_101561_Common) == 0x001710, "Wrong size on UTraceComponent_101561_Common");
static_assert(offsetof(UTraceComponent_101561_Common, bUsingOutterRadius) == 0x001708, "Member 'UTraceComponent_101561_Common::bUsingOutterRadius' has a wrong offset!");

// Class Hero_1015.Scope_10156101
// 0x00A0 (0x17A0 - 0x1700)
class AScope_10156101 final : public AMarvelAbilityTargetActor_Scope
{
public:
	class UConfig_101561*                         AbilityConfig;                                     // 0x1700(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AStormCharacter*                        OwnerCharacter;                                    // 0x1708(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_101561*                        OwnerAbility;                                      // 0x1710(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1718[0x88];                                    // 0x1718(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Scope_10156101">();
	}
	static class AScope_10156101* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScope_10156101>();
	}
};
static_assert(alignof(AScope_10156101) == 0x000010, "Wrong alignment on AScope_10156101");
static_assert(sizeof(AScope_10156101) == 0x0017A0, "Wrong size on AScope_10156101");
static_assert(offsetof(AScope_10156101, AbilityConfig) == 0x001700, "Member 'AScope_10156101::AbilityConfig' has a wrong offset!");
static_assert(offsetof(AScope_10156101, OwnerCharacter) == 0x001708, "Member 'AScope_10156101::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(AScope_10156101, OwnerAbility) == 0x001710, "Member 'AScope_10156101::OwnerAbility' has a wrong offset!");

// Class Hero_1015.TraceComponent_10156101
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10156101 final : public UTraceComponent_101561_Common
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10156101">();
	}
	static class UTraceComponent_10156101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10156101>();
	}
};
static_assert(alignof(UTraceComponent_10156101) == 0x000010, "Wrong alignment on UTraceComponent_10156101");
static_assert(sizeof(UTraceComponent_10156101) == 0x001710, "Wrong size on UTraceComponent_10156101");

// Class Hero_1015.TraceComponent_10156102
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10156102 final : public UTraceComponent_101561_Common
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10156102">();
	}
	static class UTraceComponent_10156102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10156102>();
	}
};
static_assert(alignof(UTraceComponent_10156102) == 0x000010, "Wrong alignment on UTraceComponent_10156102");
static_assert(sizeof(UTraceComponent_10156102) == 0x001710, "Wrong size on UTraceComponent_10156102");

// Class Hero_1015.Cue_Ability_Loop_10156101
// 0x0090 (0x0EE0 - 0x0E50)
class ACue_Ability_Loop_10156101 final : public AMarvelCueNotify_Ability
{
public:
	TSet<class UActorComponent*>                  HideComponents;                                    // 0x0E50(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AStormCharacter*                        StormCharacter;                                    // 0x0EA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStormCharState                               FxCurrentCharState;                                // 0x0EA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA9[0x7];                                      // 0x0EA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAudioComponent*               AudioComp;                                         // 0x0EB0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 OwningAbility;                                     // 0x0EB8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      SelectRegionFxComp;                                // 0x0EC0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      PreGenerateFxComp;                                 // 0x0EC8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StormFlyHeight;                                    // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectRegionAudioID;                               // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGenerateAudioID;                                // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectPreGenerateFXOffset;                         // 0x0EDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10156101">();
	}
	static class ACue_Ability_Loop_10156101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10156101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10156101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10156101");
static_assert(sizeof(ACue_Ability_Loop_10156101) == 0x000EE0, "Wrong size on ACue_Ability_Loop_10156101");
static_assert(offsetof(ACue_Ability_Loop_10156101, HideComponents) == 0x000E50, "Member 'ACue_Ability_Loop_10156101::HideComponents' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, StormCharacter) == 0x000EA0, "Member 'ACue_Ability_Loop_10156101::StormCharacter' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, FxCurrentCharState) == 0x000EA8, "Member 'ACue_Ability_Loop_10156101::FxCurrentCharState' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, AudioComp) == 0x000EB0, "Member 'ACue_Ability_Loop_10156101::AudioComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, OwningAbility) == 0x000EB8, "Member 'ACue_Ability_Loop_10156101::OwningAbility' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, SelectRegionFxComp) == 0x000EC0, "Member 'ACue_Ability_Loop_10156101::SelectRegionFxComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, PreGenerateFxComp) == 0x000EC8, "Member 'ACue_Ability_Loop_10156101::PreGenerateFxComp' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, StormFlyHeight) == 0x000ED0, "Member 'ACue_Ability_Loop_10156101::StormFlyHeight' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, SelectRegionAudioID) == 0x000ED4, "Member 'ACue_Ability_Loop_10156101::SelectRegionAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, PreGenerateAudioID) == 0x000ED8, "Member 'ACue_Ability_Loop_10156101::PreGenerateAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10156101, SelectPreGenerateFXOffset) == 0x000EDC, "Member 'ACue_Ability_Loop_10156101::SelectPreGenerateFXOffset' has a wrong offset!");

// Class Hero_1015.Cue_Scope_Loop_10156101
// 0x0078 (0x0DE8 - 0x0D70)
class ACue_Scope_Loop_10156101 final : public AMarvelCueNotify_Scope
{
public:
	class UNiagaraComponent*                      HurricaneLoopFxComp;                               // 0x0D70(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StormFlyHeight;                                    // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HurricaneLoopAudioID;                              // 0x0D7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireHurricaneStartAudioID;                         // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireHurricaneLoopAudioID;                          // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRenderCustomDepthPass;                         // 0x0D88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D89[0x3];                                      // 0x0D89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StormFxInterpSpeed;                                // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         HurricaneStartFX;                                  // 0x0D90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneStartFXOffsetZ;                           // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           FireHurricaneFXCurve;                              // 0x0DA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurricaneVanishTime;                               // 0x0DA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderVanishTime;                                 // 0x0DAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStormCharacter*                        OwnerChar;                                         // 0x0DB0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbility_101561*                        OwningAbility;                                     // 0x0DB8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStormCharState                               FxCurrentCharState;                                // 0x0DC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC1[0x7];                                      // 0x0DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAudioComponent*               AudioComp;                                         // 0x0DC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DD0[0x18];                                     // 0x0DD0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityDurationChanged();
	void OnAbsorbFireTornado();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_10156101">();
	}
	static class ACue_Scope_Loop_10156101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_10156101>();
	}
};
static_assert(alignof(ACue_Scope_Loop_10156101) == 0x000008, "Wrong alignment on ACue_Scope_Loop_10156101");
static_assert(sizeof(ACue_Scope_Loop_10156101) == 0x000DE8, "Wrong size on ACue_Scope_Loop_10156101");
static_assert(offsetof(ACue_Scope_Loop_10156101, HurricaneLoopFxComp) == 0x000D70, "Member 'ACue_Scope_Loop_10156101::HurricaneLoopFxComp' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, StormFlyHeight) == 0x000D78, "Member 'ACue_Scope_Loop_10156101::StormFlyHeight' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, HurricaneLoopAudioID) == 0x000D7C, "Member 'ACue_Scope_Loop_10156101::HurricaneLoopAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, FireHurricaneStartAudioID) == 0x000D80, "Member 'ACue_Scope_Loop_10156101::FireHurricaneStartAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, FireHurricaneLoopAudioID) == 0x000D84, "Member 'ACue_Scope_Loop_10156101::FireHurricaneLoopAudioID' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, bUseRenderCustomDepthPass) == 0x000D88, "Member 'ACue_Scope_Loop_10156101::bUseRenderCustomDepthPass' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, StormFxInterpSpeed) == 0x000D8C, "Member 'ACue_Scope_Loop_10156101::StormFxInterpSpeed' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, HurricaneStartFX) == 0x000D90, "Member 'ACue_Scope_Loop_10156101::HurricaneStartFX' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, HurricaneStartFXOffsetZ) == 0x000D98, "Member 'ACue_Scope_Loop_10156101::HurricaneStartFXOffsetZ' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, FireHurricaneFXCurve) == 0x000DA0, "Member 'ACue_Scope_Loop_10156101::FireHurricaneFXCurve' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, HurricaneVanishTime) == 0x000DA8, "Member 'ACue_Scope_Loop_10156101::HurricaneVanishTime' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, ThunderVanishTime) == 0x000DAC, "Member 'ACue_Scope_Loop_10156101::ThunderVanishTime' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, OwnerChar) == 0x000DB0, "Member 'ACue_Scope_Loop_10156101::OwnerChar' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, OwningAbility) == 0x000DB8, "Member 'ACue_Scope_Loop_10156101::OwningAbility' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, FxCurrentCharState) == 0x000DC0, "Member 'ACue_Scope_Loop_10156101::FxCurrentCharState' has a wrong offset!");
static_assert(offsetof(ACue_Scope_Loop_10156101, AudioComp) == 0x000DC8, "Member 'ACue_Scope_Loop_10156101::AudioComp' has a wrong offset!");

// Class Hero_1015.Ability_101562
// 0x0000 (0x2668 - 0x2668)
class UAbility_101562 final : public UMarvelAbility_SelectTarget_Bond
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101562">();
	}
	static class UAbility_101562* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101562>();
	}
};
static_assert(alignof(UAbility_101562) == 0x000008, "Wrong alignment on UAbility_101562");
static_assert(sizeof(UAbility_101562) == 0x002668, "Wrong size on UAbility_101562");

// Class Hero_1015.Ability_101571
// 0x0018 (0x27F8 - 0x27E0)
class UAbility_101571 : public UAbility_113
{
public:
	bool                                          bThrowState;                                       // 0x27E0(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27E1[0x7];                                     // 0x27E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnThrowStateChanged;                               // 0x27E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101571">();
	}
	static class UAbility_101571* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101571>();
	}
};
static_assert(alignof(UAbility_101571) == 0x000008, "Wrong alignment on UAbility_101571");
static_assert(sizeof(UAbility_101571) == 0x0027F8, "Wrong size on UAbility_101571");
static_assert(offsetof(UAbility_101571, bThrowState) == 0x0027E0, "Member 'UAbility_101571::bThrowState' has a wrong offset!");
static_assert(offsetof(UAbility_101571, OnThrowStateChanged) == 0x0027E8, "Member 'UAbility_101571::OnThrowStateChanged' has a wrong offset!");

// Class Hero_1015.Cue_Ability_Loop_10157101
// 0x0028 (0x0E78 - 0x0E50)
class ACue_Ability_Loop_10157101 : public AMarvelCueNotify_Ability
{
public:
	struct FVector                                ShootOffset;                                       // 0x0E50(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     StoneFX;                                           // 0x0E68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   StormChar;                                         // 0x0E70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10157101">();
	}
	static class ACue_Ability_Loop_10157101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10157101>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10157101) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10157101");
static_assert(sizeof(ACue_Ability_Loop_10157101) == 0x000E78, "Wrong size on ACue_Ability_Loop_10157101");
static_assert(offsetof(ACue_Ability_Loop_10157101, ShootOffset) == 0x000E50, "Member 'ACue_Ability_Loop_10157101::ShootOffset' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157101, StoneFX) == 0x000E68, "Member 'ACue_Ability_Loop_10157101::StoneFX' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157101, StormChar) == 0x000E70, "Member 'ACue_Ability_Loop_10157101::StormChar' has a wrong offset!");

// Class Hero_1015.Cue_Projectile_Loop_10157101
// 0x0018 (0x0DC8 - 0x0DB0)
class ACue_Projectile_Loop_10157101 final : public AMarvelCueNotify_Projectile
{
public:
	class UMovementComponent*                     ProjectileMoveComp;                                // 0x0DB0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_Energy;                                         // 0x0DB8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NS_SpeedLine;                                      // 0x0DC0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Projectile_Loop_10157101">();
	}
	static class ACue_Projectile_Loop_10157101* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Projectile_Loop_10157101>();
	}
};
static_assert(alignof(ACue_Projectile_Loop_10157101) == 0x000008, "Wrong alignment on ACue_Projectile_Loop_10157101");
static_assert(sizeof(ACue_Projectile_Loop_10157101) == 0x000DC8, "Wrong size on ACue_Projectile_Loop_10157101");
static_assert(offsetof(ACue_Projectile_Loop_10157101, ProjectileMoveComp) == 0x000DB0, "Member 'ACue_Projectile_Loop_10157101::ProjectileMoveComp' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10157101, NS_Energy) == 0x000DB8, "Member 'ACue_Projectile_Loop_10157101::NS_Energy' has a wrong offset!");
static_assert(offsetof(ACue_Projectile_Loop_10157101, NS_SpeedLine) == 0x000DC0, "Member 'ACue_Projectile_Loop_10157101::NS_SpeedLine' has a wrong offset!");

// Class Hero_1015.Cue_Ability_Loop_10157102
// 0x00A0 (0x0EF0 - 0x0E50)
class ACue_Ability_Loop_10157102 final : public AMarvelCueNotify_Ability
{
public:
	struct FUIActionData                          AdsorbActionData;                                  // 0x0E50(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         UpdateInterval;                                    // 0x0EA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0EAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelWidgetComponent*                 WidgetComponent;                                   // 0x0EB0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityActionTip*               Widget;                                            // 0x0EB8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbility_101571*                        Ability;                                           // 0x0EC0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x0EC8(0x0010)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED8[0x18];                                     // 0x0ED8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_10157102">();
	}
	static class ACue_Ability_Loop_10157102* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_10157102>();
	}
};
static_assert(alignof(ACue_Ability_Loop_10157102) == 0x000008, "Wrong alignment on ACue_Ability_Loop_10157102");
static_assert(sizeof(ACue_Ability_Loop_10157102) == 0x000EF0, "Wrong size on ACue_Ability_Loop_10157102");
static_assert(offsetof(ACue_Ability_Loop_10157102, AdsorbActionData) == 0x000E50, "Member 'ACue_Ability_Loop_10157102::AdsorbActionData' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, UpdateInterval) == 0x000EA8, "Member 'ACue_Ability_Loop_10157102::UpdateInterval' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, AbilityID) == 0x000EAC, "Member 'ACue_Ability_Loop_10157102::AbilityID' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, WidgetComponent) == 0x000EB0, "Member 'ACue_Ability_Loop_10157102::WidgetComponent' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, Widget) == 0x000EB8, "Member 'ACue_Ability_Loop_10157102::Widget' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, Ability) == 0x000EC0, "Member 'ACue_Ability_Loop_10157102::Ability' has a wrong offset!");
static_assert(offsetof(ACue_Ability_Loop_10157102, DeclarePlayerViewSideHolder) == 0x000EC8, "Member 'ACue_Ability_Loop_10157102::DeclarePlayerViewSideHolder' has a wrong offset!");

// Class Hero_1015.UIController_101571
// 0x0000 (0x0C60 - 0x0C60)
class UUIController_101571 final : public UUIC_Ability
{
public:
	void ShowThrowActionTips(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_101571">();
	}
	static class UUIController_101571* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_101571>();
	}
};
static_assert(alignof(UUIController_101571) == 0x000008, "Wrong alignment on UUIController_101571");
static_assert(sizeof(UUIController_101571) == 0x000C60, "Wrong size on UUIController_101571");

// Class Hero_1015.Config_101581
// 0x00E8 (0x0180 - 0x0098)
class UConfig_101581 final : public UMarvelAbilityConfig
{
public:
	int32                                         DamageScopeID;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SpecialTags;                                       // 0x00A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         SplashScopeOffset;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplashScopeID;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SkipSplashTags;                                    // 0x0110(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MaxSplashScopeNum;                                 // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_101581">();
	}
	static class UConfig_101581* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_101581>();
	}
};
static_assert(alignof(UConfig_101581) == 0x000008, "Wrong alignment on UConfig_101581");
static_assert(sizeof(UConfig_101581) == 0x000180, "Wrong size on UConfig_101581");
static_assert(offsetof(UConfig_101581, DamageScopeID) == 0x000098, "Member 'UConfig_101581::DamageScopeID' has a wrong offset!");
static_assert(offsetof(UConfig_101581, SpecialTags) == 0x0000A0, "Member 'UConfig_101581::SpecialTags' has a wrong offset!");
static_assert(offsetof(UConfig_101581, SplashScopeOffset) == 0x000108, "Member 'UConfig_101581::SplashScopeOffset' has a wrong offset!");
static_assert(offsetof(UConfig_101581, SplashScopeID) == 0x00010C, "Member 'UConfig_101581::SplashScopeID' has a wrong offset!");
static_assert(offsetof(UConfig_101581, SkipSplashTags) == 0x000110, "Member 'UConfig_101581::SkipSplashTags' has a wrong offset!");
static_assert(offsetof(UConfig_101581, MaxSplashScopeNum) == 0x000178, "Member 'UConfig_101581::MaxSplashScopeNum' has a wrong offset!");

// Class Hero_1015.Ability_101581
// 0x0028 (0x25B0 - 0x2588)
class alignas(0x10) UAbility_101581 : public UAbility_108
{
public:
	uint8                                         Pad_2588[0x18];                                    // 0x2588(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_101581*                         Config;                                            // 0x25A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A8[0x8];                                     // 0x25A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientSpawnSplashScope(const struct FVector& Location, class AActor* AttachTgt);
	void OnSplashScopeInitialized(class UMarvelAgentTraceComponent* TraceComp, class UMarvelAgentEffectiveComponent* EffectComp);
	void ServerSpawnSplashScope(const struct FVector& Location, class AActor* AttachTgt);

	bool IsTargetCharValidToSplash(class AMarvelBaseCharacter* TargetChar) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101581">();
	}
	static class UAbility_101581* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101581>();
	}
};
static_assert(alignof(UAbility_101581) == 0x000010, "Wrong alignment on UAbility_101581");
static_assert(sizeof(UAbility_101581) == 0x0025B0, "Wrong size on UAbility_101581");
static_assert(offsetof(UAbility_101581, Config) == 0x0025A0, "Member 'UAbility_101581::Config' has a wrong offset!");

// Class Hero_1015.TraceComponent_10158101
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10158101 final : public UMarvelAgentTraceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10158101">();
	}
	static class UTraceComponent_10158101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10158101>();
	}
};
static_assert(alignof(UTraceComponent_10158101) == 0x000010, "Wrong alignment on UTraceComponent_10158101");
static_assert(sizeof(UTraceComponent_10158101) == 0x001710, "Wrong size on UTraceComponent_10158101");

// Class Hero_1015.TraceComponent_10158102
// 0x0000 (0x1710 - 0x1710)
class UTraceComponent_10158102 final : public UMarvelAgentTraceComponent
{
public:
	class AActor*                                 AttachTarget;                                      // 0x1708(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponent_10158102">();
	}
	static class UTraceComponent_10158102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponent_10158102>();
	}
};
static_assert(alignof(UTraceComponent_10158102) == 0x000010, "Wrong alignment on UTraceComponent_10158102");
static_assert(sizeof(UTraceComponent_10158102) == 0x001710, "Wrong size on UTraceComponent_10158102");
static_assert(offsetof(UTraceComponent_10158102, AttachTarget) == 0x001708, "Member 'UTraceComponent_10158102::AttachTarget' has a wrong offset!");

// Class Hero_1015.EffectiveComponent_101581_Common
// 0x0000 (0x1C00 - 0x1C00)
class UEffectiveComponent_101581_Common final : public UMarvelAgentEffectiveComponent
{
public:
	bool ActorHasSpecialTag(class AActor* InActor, const class UConfig_101581* Config) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectiveComponent_101581_Common">();
	}
	static class UEffectiveComponent_101581_Common* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectiveComponent_101581_Common>();
	}
};
static_assert(alignof(UEffectiveComponent_101581_Common) == 0x000010, "Wrong alignment on UEffectiveComponent_101581_Common");
static_assert(sizeof(UEffectiveComponent_101581_Common) == 0x001C00, "Wrong size on UEffectiveComponent_101581_Common");

// Class Hero_1015.Cue_Scope_HitImpact_10158102
// 0x0018 (0x04E8 - 0x04D0)
class UCue_Scope_HitImpact_10158102 final : public UMarvelCueNotify_HitImpact
{
public:
	class UNiagaraSystem*                         StormLightningFX;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndPosParameterName;                               // 0x04D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_HitImpact_10158102">();
	}
	static class UCue_Scope_HitImpact_10158102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCue_Scope_HitImpact_10158102>();
	}
};
static_assert(alignof(UCue_Scope_HitImpact_10158102) == 0x000008, "Wrong alignment on UCue_Scope_HitImpact_10158102");
static_assert(sizeof(UCue_Scope_HitImpact_10158102) == 0x0004E8, "Wrong size on UCue_Scope_HitImpact_10158102");
static_assert(offsetof(UCue_Scope_HitImpact_10158102, StormLightningFX) == 0x0004D0, "Member 'UCue_Scope_HitImpact_10158102::StormLightningFX' has a wrong offset!");
static_assert(offsetof(UCue_Scope_HitImpact_10158102, EndPosParameterName) == 0x0004D8, "Member 'UCue_Scope_HitImpact_10158102::EndPosParameterName' has a wrong offset!");

// Class Hero_1015.SelectRegionCameraActor
// 0x0070 (0x0F10 - 0x0EA0)
class ASelectRegionCameraActor : public AMovingCameraActor
{
public:
	bool                                          bIsActive;                                         // 0x0E98(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E99[0x3F];                                     // 0x0E99(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStateChange;                                     // 0x0ED8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0EE8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraActorSpringArmComponent*         SpringArmComponent;                                // 0x0EF0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0EF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_101561*                         AbilityConfig;                                     // 0x0F00(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStormCameraState                             CurrentCameraState;                                // 0x0F08(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F09[0x7];                                      // 0x0F09(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bIsActive();
	void OnRep_CurrentCameraState(EStormCameraState OldState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectRegionCameraActor">();
	}
	static class ASelectRegionCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASelectRegionCameraActor>();
	}
};
static_assert(alignof(ASelectRegionCameraActor) == 0x000010, "Wrong alignment on ASelectRegionCameraActor");
static_assert(sizeof(ASelectRegionCameraActor) == 0x000F10, "Wrong size on ASelectRegionCameraActor");
static_assert(offsetof(ASelectRegionCameraActor, bIsActive) == 0x000E98, "Member 'ASelectRegionCameraActor::bIsActive' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, OnStateChange) == 0x000ED8, "Member 'ASelectRegionCameraActor::OnStateChange' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, CapsuleComponent) == 0x000EE8, "Member 'ASelectRegionCameraActor::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, SpringArmComponent) == 0x000EF0, "Member 'ASelectRegionCameraActor::SpringArmComponent' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, AudioComponent) == 0x000EF8, "Member 'ASelectRegionCameraActor::AudioComponent' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, AbilityConfig) == 0x000F00, "Member 'ASelectRegionCameraActor::AbilityConfig' has a wrong offset!");
static_assert(offsetof(ASelectRegionCameraActor, CurrentCameraState) == 0x000F08, "Member 'ASelectRegionCameraActor::CurrentCameraState' has a wrong offset!");

// Class Hero_1015.SelectRegionCameraActor_101561
// 0x0010 (0x0F20 - 0x0F10)
class ASelectRegionCameraActor_101561 : public ASelectRegionCameraActor
{
public:
	class UAbility_101561*                        OwningAbility;                                     // 0x0F10(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F18[0x8];                                      // 0x0F18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectRegionCameraActor_101561">();
	}
	static class ASelectRegionCameraActor_101561* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASelectRegionCameraActor_101561>();
	}
};
static_assert(alignof(ASelectRegionCameraActor_101561) == 0x000010, "Wrong alignment on ASelectRegionCameraActor_101561");
static_assert(sizeof(ASelectRegionCameraActor_101561) == 0x000F20, "Wrong size on ASelectRegionCameraActor_101561");
static_assert(offsetof(ASelectRegionCameraActor_101561, OwningAbility) == 0x000F10, "Member 'ASelectRegionCameraActor_101561::OwningAbility' has a wrong offset!");

// Class Hero_1015.SelectionRegionCue_101561
// 0x0038 (0x0F00 - 0x0EC8)
class ASelectionRegionCue_101561 final : public AMarvelCueNotify_Loop
{
public:
	int32                                         SelectRegionAudioID;                               // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGenerateAudioID;                                // 0x0ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectPreGenerateFXOffset;                         // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED4[0x4];                                      // 0x0ED4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SelectRegionFxComp;                                // 0x0ED8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      PreGenerateFxComp;                                 // 0x0EE0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0EE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASelectRegionCameraActor_101561*        OwnerCameraActor;                                  // 0x0EF0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStormCameraState                             FXCurrentState;                                    // 0x0EF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF9[0x7];                                      // 0x0EF9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCameraStateChange(bool bIsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectionRegionCue_101561">();
	}
	static class ASelectionRegionCue_101561* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASelectionRegionCue_101561>();
	}
};
static_assert(alignof(ASelectionRegionCue_101561) == 0x000008, "Wrong alignment on ASelectionRegionCue_101561");
static_assert(sizeof(ASelectionRegionCue_101561) == 0x000F00, "Wrong size on ASelectionRegionCue_101561");
static_assert(offsetof(ASelectionRegionCue_101561, SelectRegionAudioID) == 0x000EC8, "Member 'ASelectionRegionCue_101561::SelectRegionAudioID' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, PreGenerateAudioID) == 0x000ECC, "Member 'ASelectionRegionCue_101561::PreGenerateAudioID' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, SelectPreGenerateFXOffset) == 0x000ED0, "Member 'ASelectionRegionCue_101561::SelectPreGenerateFXOffset' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, SelectRegionFxComp) == 0x000ED8, "Member 'ASelectionRegionCue_101561::SelectRegionFxComp' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, PreGenerateFxComp) == 0x000EE0, "Member 'ASelectionRegionCue_101561::PreGenerateFxComp' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, AudioComponent) == 0x000EE8, "Member 'ASelectionRegionCue_101561::AudioComponent' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, OwnerCameraActor) == 0x000EF0, "Member 'ASelectionRegionCue_101561::OwnerCameraActor' has a wrong offset!");
static_assert(offsetof(ASelectionRegionCue_101561, FXCurrentState) == 0x000EF8, "Member 'ASelectionRegionCue_101561::FXCurrentState' has a wrong offset!");

// Class Hero_1015.SelectRegionCameraMovement
// 0x0018 (0x0290 - 0x0278)
class USelectRegionCameraMovement final : public UOnlineCameraMovement
{
public:
	float                                         GravityScale;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceDist;                                   // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TryRiseSpeed;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0xC];                                      // 0x0284(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectRegionCameraMovement">();
	}
	static class USelectRegionCameraMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectRegionCameraMovement>();
	}
};
static_assert(alignof(USelectRegionCameraMovement) == 0x000008, "Wrong alignment on USelectRegionCameraMovement");
static_assert(sizeof(USelectRegionCameraMovement) == 0x000290, "Wrong size on USelectRegionCameraMovement");
static_assert(offsetof(USelectRegionCameraMovement, GravityScale) == 0x000278, "Member 'USelectRegionCameraMovement::GravityScale' has a wrong offset!");
static_assert(offsetof(USelectRegionCameraMovement, GroundTraceDist) == 0x00027C, "Member 'USelectRegionCameraMovement::GroundTraceDist' has a wrong offset!");
static_assert(offsetof(USelectRegionCameraMovement, TryRiseSpeed) == 0x000280, "Member 'USelectRegionCameraMovement::TryRiseSpeed' has a wrong offset!");

// Class Hero_1015.StormAnimInstance
// 0x0030 (0x0940 - 0x0910)
class UStormAnimInstance final : public UMarvelAnimInstance
{
public:
	struct FGameplayTag                           AdsorbingIdleTag;                                  // 0x0910(0x000C)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAdsorbing;                                      // 0x091C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91D[0x3];                                      // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnBlendSpaceScale;                               // 0x0920(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToTurnStopYawRateMIN;                              // 0x0924(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToTurnStopYawDeltaMIN;                             // 0x0928(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToIdleTurnYawDeltaMIN;                             // 0x092C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SmoothYawRate;                                     // 0x0930(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRateAbsoluteDelta;                              // 0x0934(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_938[0x8];                                      // 0x0938(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StormAnimInstance">();
	}
	static class UStormAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStormAnimInstance>();
	}
};
static_assert(alignof(UStormAnimInstance) == 0x000010, "Wrong alignment on UStormAnimInstance");
static_assert(sizeof(UStormAnimInstance) == 0x000940, "Wrong size on UStormAnimInstance");
static_assert(offsetof(UStormAnimInstance, AdsorbingIdleTag) == 0x000910, "Member 'UStormAnimInstance::AdsorbingIdleTag' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, bIsAdsorbing) == 0x00091C, "Member 'UStormAnimInstance::bIsAdsorbing' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, TurnBlendSpaceScale) == 0x000920, "Member 'UStormAnimInstance::TurnBlendSpaceScale' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, ToTurnStopYawRateMIN) == 0x000924, "Member 'UStormAnimInstance::ToTurnStopYawRateMIN' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, ToTurnStopYawDeltaMIN) == 0x000928, "Member 'UStormAnimInstance::ToTurnStopYawDeltaMIN' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, ToIdleTurnYawDeltaMIN) == 0x00092C, "Member 'UStormAnimInstance::ToIdleTurnYawDeltaMIN' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, SmoothYawRate) == 0x000930, "Member 'UStormAnimInstance::SmoothYawRate' has a wrong offset!");
static_assert(offsetof(UStormAnimInstance, YawRateAbsoluteDelta) == 0x000934, "Member 'UStormAnimInstance::YawRateAbsoluteDelta' has a wrong offset!");

// Class Hero_1015.StormChildActor
// 0x03A8 (0x0E08 - 0x0A60)
class AStormChildActor final : public AMarvelCharacterChildActor
{
public:
	bool                                          bOpenOptimizationV2;                               // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A61[0x3];                                      // 0x0A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParamHandleNumPerTick;                             // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialAbilityParams                 WeatherAllParams;                                  // 0x0A68(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FMaterialAbilityParams> WeatherDataDict;                                   // 0x0AB8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FStormMaterialSlotParamsArray> WeatherDataArray;                                  // 0x0B08(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FStormMaterialSlotParams>       ProcessingDataArray;                               // 0x0B58(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ArchyMesh;                                         // 0x0B68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FStormDynamicSectionMaterials> WeatherMaterials;                                  // 0x0B70(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FMaterialIndexParams>      OriginalMaterialParamDict;                         // 0x0BC0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<int32, class UMaterialInstanceDynamic*>  DynamicMaterialDict;                               // 0x0C10(0x0050)(Protected, NativeAccessSpecifierProtected)
	class FName                                   CurrentWeatherStateName;                           // 0x0C60(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C6C[0x4];                                      // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStormCharacter*                        StormChar;                                         // 0x0C70(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     PlayerViewingSideHolder;                           // 0x0C78(0x0010)(Protected, NativeAccessSpecifierProtected)
	bool                                          bOpenOptimization;                                 // 0x0C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C89[0x7];                                      // 0x0C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMaterialAbilityParams> MaterialParamsAbility101541;                       // 0x0C90(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EStormCharState, class UCurveVector*>    CharMaterialCurves;                                // 0x0CE0(0x0050)(Edit, NativeAccessSpecifierPublic)
	class UCurveVector*                           FireMaterialCurve;                                 // 0x0D30(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PhysicRootNames;                                   // 0x0D38(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PhysicsHairName;                                   // 0x0D48(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D54[0x4];                                      // 0x0D54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockPhysicTagsContainer;                          // 0x0D58(0x0068)(Edit, NativeAccessSpecifierPublic)
	float                                         ActivePhysicsBlendWeight;                          // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InactivePhysicsBlendWeight;                        // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsBlendWeightInterpSpeed;                     // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StormTag;                                          // 0x0DCC(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ThunderTag;                                        // 0x0DD8(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnhancedTag;                                       // 0x0DE4(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPhysicsOn;                                      // 0x0DF0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHairPhysicsOn;                                  // 0x0DF1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF2[0x2];                                      // 0x0DF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentPhysicsBlendWeight;                         // 0x0DF4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDirection;                                     // 0x0DF8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyMaterialParamName;                            // 0x0DFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyHurricaneMeshMaterial(const struct FVector& FxData, float FireAlpha);
	void GeneWeatherMaterialParams();
	class AStormCharacter* GetStormChar();
	void HandleEnemyMaterial();
	void OnViewingSideChanged(EClientPlayerViewSide InViewSide);
	void UpdatePhysicsOn(float DeltaTime);
	void UpdateWeatherMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StormChildActor">();
	}
	static class AStormChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStormChildActor>();
	}
};
static_assert(alignof(AStormChildActor) == 0x000008, "Wrong alignment on AStormChildActor");
static_assert(sizeof(AStormChildActor) == 0x000E08, "Wrong size on AStormChildActor");
static_assert(offsetof(AStormChildActor, bOpenOptimizationV2) == 0x000A60, "Member 'AStormChildActor::bOpenOptimizationV2' has a wrong offset!");
static_assert(offsetof(AStormChildActor, ParamHandleNumPerTick) == 0x000A64, "Member 'AStormChildActor::ParamHandleNumPerTick' has a wrong offset!");
static_assert(offsetof(AStormChildActor, WeatherAllParams) == 0x000A68, "Member 'AStormChildActor::WeatherAllParams' has a wrong offset!");
static_assert(offsetof(AStormChildActor, WeatherDataDict) == 0x000AB8, "Member 'AStormChildActor::WeatherDataDict' has a wrong offset!");
static_assert(offsetof(AStormChildActor, WeatherDataArray) == 0x000B08, "Member 'AStormChildActor::WeatherDataArray' has a wrong offset!");
static_assert(offsetof(AStormChildActor, ProcessingDataArray) == 0x000B58, "Member 'AStormChildActor::ProcessingDataArray' has a wrong offset!");
static_assert(offsetof(AStormChildActor, ArchyMesh) == 0x000B68, "Member 'AStormChildActor::ArchyMesh' has a wrong offset!");
static_assert(offsetof(AStormChildActor, WeatherMaterials) == 0x000B70, "Member 'AStormChildActor::WeatherMaterials' has a wrong offset!");
static_assert(offsetof(AStormChildActor, OriginalMaterialParamDict) == 0x000BC0, "Member 'AStormChildActor::OriginalMaterialParamDict' has a wrong offset!");
static_assert(offsetof(AStormChildActor, DynamicMaterialDict) == 0x000C10, "Member 'AStormChildActor::DynamicMaterialDict' has a wrong offset!");
static_assert(offsetof(AStormChildActor, CurrentWeatherStateName) == 0x000C60, "Member 'AStormChildActor::CurrentWeatherStateName' has a wrong offset!");
static_assert(offsetof(AStormChildActor, StormChar) == 0x000C70, "Member 'AStormChildActor::StormChar' has a wrong offset!");
static_assert(offsetof(AStormChildActor, PlayerViewingSideHolder) == 0x000C78, "Member 'AStormChildActor::PlayerViewingSideHolder' has a wrong offset!");
static_assert(offsetof(AStormChildActor, bOpenOptimization) == 0x000C88, "Member 'AStormChildActor::bOpenOptimization' has a wrong offset!");
static_assert(offsetof(AStormChildActor, MaterialParamsAbility101541) == 0x000C90, "Member 'AStormChildActor::MaterialParamsAbility101541' has a wrong offset!");
static_assert(offsetof(AStormChildActor, CharMaterialCurves) == 0x000CE0, "Member 'AStormChildActor::CharMaterialCurves' has a wrong offset!");
static_assert(offsetof(AStormChildActor, FireMaterialCurve) == 0x000D30, "Member 'AStormChildActor::FireMaterialCurve' has a wrong offset!");
static_assert(offsetof(AStormChildActor, PhysicRootNames) == 0x000D38, "Member 'AStormChildActor::PhysicRootNames' has a wrong offset!");
static_assert(offsetof(AStormChildActor, PhysicsHairName) == 0x000D48, "Member 'AStormChildActor::PhysicsHairName' has a wrong offset!");
static_assert(offsetof(AStormChildActor, BlockPhysicTagsContainer) == 0x000D58, "Member 'AStormChildActor::BlockPhysicTagsContainer' has a wrong offset!");
static_assert(offsetof(AStormChildActor, ActivePhysicsBlendWeight) == 0x000DC0, "Member 'AStormChildActor::ActivePhysicsBlendWeight' has a wrong offset!");
static_assert(offsetof(AStormChildActor, InactivePhysicsBlendWeight) == 0x000DC4, "Member 'AStormChildActor::InactivePhysicsBlendWeight' has a wrong offset!");
static_assert(offsetof(AStormChildActor, PhysicsBlendWeightInterpSpeed) == 0x000DC8, "Member 'AStormChildActor::PhysicsBlendWeightInterpSpeed' has a wrong offset!");
static_assert(offsetof(AStormChildActor, StormTag) == 0x000DCC, "Member 'AStormChildActor::StormTag' has a wrong offset!");
static_assert(offsetof(AStormChildActor, ThunderTag) == 0x000DD8, "Member 'AStormChildActor::ThunderTag' has a wrong offset!");
static_assert(offsetof(AStormChildActor, EnhancedTag) == 0x000DE4, "Member 'AStormChildActor::EnhancedTag' has a wrong offset!");
static_assert(offsetof(AStormChildActor, bIsPhysicsOn) == 0x000DF0, "Member 'AStormChildActor::bIsPhysicsOn' has a wrong offset!");
static_assert(offsetof(AStormChildActor, bIsHairPhysicsOn) == 0x000DF1, "Member 'AStormChildActor::bIsHairPhysicsOn' has a wrong offset!");
static_assert(offsetof(AStormChildActor, CurrentPhysicsBlendWeight) == 0x000DF4, "Member 'AStormChildActor::CurrentPhysicsBlendWeight' has a wrong offset!");
static_assert(offsetof(AStormChildActor, LastDirection) == 0x000DF8, "Member 'AStormChildActor::LastDirection' has a wrong offset!");
static_assert(offsetof(AStormChildActor, EnemyMaterialParamName) == 0x000DFC, "Member 'AStormChildActor::EnemyMaterialParamName' has a wrong offset!");

// Class Hero_1015.StormCharacter
// 0x0080 (0x1890 - 0x1810)
class AStormCharacter : public AMarvelBaseCharacter
{
public:
	EStormCharState                               CurrentCharState;                                  // 0x1810(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHurricaneFired;                                   // 0x1811(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStormCameraState                             CameraState;                                       // 0x1812(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1813[0x5];                                     // 0x1813(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHeightChangedDispatcher;                         // 0x1818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStormCharStateChangedDispatcher;                 // 0x1828(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStormMoveLogicBaseComponent*           StormMoveLogic;                                    // 0x1838(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeUpperLimit;                                // 0x1840(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeLowerLimit;                                // 0x1844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 CachedDefaultLandMovementMode;                     // 0x1848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1849[0x3];                                     // 0x1849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedSpringArmLength;                             // 0x184C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedSpringArmSorcketOffset;                      // 0x1850(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelectionRegionTopView;                         // 0x1868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1869[0x3];                                     // 0x1869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedMaxWalkSpeed;                                // 0x186C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedMaxFlySpeed;                                 // 0x1870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedMaxWalkAcc;                                  // 0x1874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedAirControl;                                  // 0x1878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousLocationZ;                                 // 0x187C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDuration;                                     // 0x1880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultEnableCameraLag;                           // 0x1884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1885[0x3];                                     // 0x1885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BecomeFireHurricaneTime;                           // 0x1888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitFireHurricaneTime;                             // 0x188C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float GetDisToCeiling();
	void InterpSpringToCustomViewOffset(const struct FVector& TargetLocationOffset, const struct FRotator& TargetRotationOffset, float InterpSpeed);
	void OnRep_CameraState(EStormCameraState OldCameraState);
	void OnRep_CurrentCharState();
	void RecoverCharacterStateCamera();
	void RecoverFromStorm();
	void SafeMove(const struct FVector& Delta);
	void SetCameraState(const EStormCameraState State);
	void SetCurrentState(const EStormCharState State, bool bActiveByTimerOrMT);
	void SetHurricaneFireState(bool InState);
	bool SweepQueryWalkingHurricaneLocation(struct FVector* OutLocation, bool bIsImpact);
	void SwitchSelectionRegionTopView(bool bToTopView, bool bButtonSwitch, bool bActiveByTimerOrMT);
	void ToCharacterState(bool bActiveByTimerOrMT);
	void ToHurricanState(bool bActiveByTimerOrMT);
	void ToPreHurricanState(bool bActiveByTimerOrMT);
	void ToPreHurricanStateCamera();
	void ToSelectionRegionState(bool bActiveByTimerOrMT);

	EStormCameraState GetCameraState() const;
	EStormCharState GetCurrentState() const;
	float GetCurrentStateDuration() const;
	EStormCharWeatherType GetCurrentWeatherType() const;
	bool GetDefaultEnableCameraLag() const;
	bool IsSelectionRegionTopView() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StormCharacter">();
	}
	static class AStormCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStormCharacter>();
	}
};
static_assert(alignof(AStormCharacter) == 0x000010, "Wrong alignment on AStormCharacter");
static_assert(sizeof(AStormCharacter) == 0x001890, "Wrong size on AStormCharacter");
static_assert(offsetof(AStormCharacter, CurrentCharState) == 0x001810, "Member 'AStormCharacter::CurrentCharState' has a wrong offset!");
static_assert(offsetof(AStormCharacter, bHurricaneFired) == 0x001811, "Member 'AStormCharacter::bHurricaneFired' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CameraState) == 0x001812, "Member 'AStormCharacter::CameraState' has a wrong offset!");
static_assert(offsetof(AStormCharacter, OnHeightChangedDispatcher) == 0x001818, "Member 'AStormCharacter::OnHeightChangedDispatcher' has a wrong offset!");
static_assert(offsetof(AStormCharacter, OnStormCharStateChangedDispatcher) == 0x001828, "Member 'AStormCharacter::OnStormCharStateChangedDispatcher' has a wrong offset!");
static_assert(offsetof(AStormCharacter, StormMoveLogic) == 0x001838, "Member 'AStormCharacter::StormMoveLogic' has a wrong offset!");
static_assert(offsetof(AStormCharacter, AltitudeUpperLimit) == 0x001840, "Member 'AStormCharacter::AltitudeUpperLimit' has a wrong offset!");
static_assert(offsetof(AStormCharacter, AltitudeLowerLimit) == 0x001844, "Member 'AStormCharacter::AltitudeLowerLimit' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedDefaultLandMovementMode) == 0x001848, "Member 'AStormCharacter::CachedDefaultLandMovementMode' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedSpringArmLength) == 0x00184C, "Member 'AStormCharacter::CachedSpringArmLength' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedSpringArmSorcketOffset) == 0x001850, "Member 'AStormCharacter::CachedSpringArmSorcketOffset' has a wrong offset!");
static_assert(offsetof(AStormCharacter, bIsSelectionRegionTopView) == 0x001868, "Member 'AStormCharacter::bIsSelectionRegionTopView' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedMaxWalkSpeed) == 0x00186C, "Member 'AStormCharacter::CachedMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedMaxFlySpeed) == 0x001870, "Member 'AStormCharacter::CachedMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedMaxWalkAcc) == 0x001874, "Member 'AStormCharacter::CachedMaxWalkAcc' has a wrong offset!");
static_assert(offsetof(AStormCharacter, CachedAirControl) == 0x001878, "Member 'AStormCharacter::CachedAirControl' has a wrong offset!");
static_assert(offsetof(AStormCharacter, PreviousLocationZ) == 0x00187C, "Member 'AStormCharacter::PreviousLocationZ' has a wrong offset!");
static_assert(offsetof(AStormCharacter, StateDuration) == 0x001880, "Member 'AStormCharacter::StateDuration' has a wrong offset!");
static_assert(offsetof(AStormCharacter, bDefaultEnableCameraLag) == 0x001884, "Member 'AStormCharacter::bDefaultEnableCameraLag' has a wrong offset!");
static_assert(offsetof(AStormCharacter, BecomeFireHurricaneTime) == 0x001888, "Member 'AStormCharacter::BecomeFireHurricaneTime' has a wrong offset!");
static_assert(offsetof(AStormCharacter, ExitFireHurricaneTime) == 0x00188C, "Member 'AStormCharacter::ExitFireHurricaneTime' has a wrong offset!");

// Class Hero_1015.StormGirlMovementComponent
// 0x0030 (0x1B90 - 0x1B60)
class UStormGirlMovementComponent final : public UMarvelCharacterMovementComponent
{
public:
	float                                         StepDownOnceHeight;                                // 0x1B60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepDownHeight;                                 // 0x1B64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TryRiseSpeed;                                      // 0x1B68(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFixZCeilMode;                                   // 0x1B6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B6D[0x3];                                     // 0x1B6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CeilingZ;                                          // 0x1B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SweepRadius;                                       // 0x1B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B78[0x18];                                    // 0x1B78(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StormGirlMovementComponent">();
	}
	static class UStormGirlMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStormGirlMovementComponent>();
	}
};
static_assert(alignof(UStormGirlMovementComponent) == 0x000010, "Wrong alignment on UStormGirlMovementComponent");
static_assert(sizeof(UStormGirlMovementComponent) == 0x001B90, "Wrong size on UStormGirlMovementComponent");
static_assert(offsetof(UStormGirlMovementComponent, StepDownOnceHeight) == 0x001B60, "Member 'UStormGirlMovementComponent::StepDownOnceHeight' has a wrong offset!");
static_assert(offsetof(UStormGirlMovementComponent, MaxStepDownHeight) == 0x001B64, "Member 'UStormGirlMovementComponent::MaxStepDownHeight' has a wrong offset!");
static_assert(offsetof(UStormGirlMovementComponent, TryRiseSpeed) == 0x001B68, "Member 'UStormGirlMovementComponent::TryRiseSpeed' has a wrong offset!");
static_assert(offsetof(UStormGirlMovementComponent, bIsFixZCeilMode) == 0x001B6C, "Member 'UStormGirlMovementComponent::bIsFixZCeilMode' has a wrong offset!");
static_assert(offsetof(UStormGirlMovementComponent, CeilingZ) == 0x001B70, "Member 'UStormGirlMovementComponent::CeilingZ' has a wrong offset!");
static_assert(offsetof(UStormGirlMovementComponent, SweepRadius) == 0x001B74, "Member 'UStormGirlMovementComponent::SweepRadius' has a wrong offset!");

// Class Hero_1015.StormMoveLogicBaseComponent
// 0x0008 (0x03F8 - 0x03F0)
class UStormMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	class ASelectRegionCameraActor*               CameraActor;                                       // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StormMoveLogicBaseComponent">();
	}
	static class UStormMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStormMoveLogicBaseComponent>();
	}
};
static_assert(alignof(UStormMoveLogicBaseComponent) == 0x000008, "Wrong alignment on UStormMoveLogicBaseComponent");
static_assert(sizeof(UStormMoveLogicBaseComponent) == 0x0003F8, "Wrong size on UStormMoveLogicBaseComponent");
static_assert(offsetof(UStormMoveLogicBaseComponent, CameraActor) == 0x0003F0, "Member 'UStormMoveLogicBaseComponent::CameraActor' has a wrong offset!");

}

