#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyPlayerStateTrainComponent

#include "Basic.hpp"

#include "MarvelLevel_structs.hpp"
#include "MarvelLevel_classes.hpp"
#include "Python_enums_structs.hpp"
#include "Marvel_structs.hpp"


namespace SDK
{

// PythonClass PyPlayerStateTrainComponent.PyPlayerStateTrainComponent
// 0x0150 (0x0270 - 0x0120)
class UPyPlayerStateTrainComponent final : public UPlayerStateTrainComponent
{
public:
	struct FReplicateTimer                        DelayTimer;                                        // 0x0120(0x0078)(BlueprintVisible, Net, NativeAccessSpecifierPublic)
	struct FReplicateTimer                        TrainingTimer;                                     // 0x0198(0x0078)(BlueprintVisible, Net, NativeAccessSpecifierPublic)
	int32                                         PrepareTrainAction;                                // 0x0210(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainAction;                                       // 0x0214(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrainAreaType                                TrainAreaType;                                     // 0x0218(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrainTraceScore;                                   // 0x021C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrainTimeStamp;                                    // 0x0220(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TracePointIndex;                                   // 0x0224(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TracePointTotal;                                   // 0x0228(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTrainResult>                   TrainResultList;                                   // 0x0230(0x0010)(BlueprintVisible, Net, NativeAccessSpecifierPublic)
	float                                         TrainStartTimeStamp;                               // 0x0240(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrainEndTimeStamp;                                 // 0x0244(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainRet;                                          // 0x0248(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTrainFinish;                                     // 0x024C(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             TrainEnd;                                          // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DelayQuickTrainEnd;                                // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void TrainEnd__DelegateSignature(ETrainAction Action, int32 UID);
	void DelayQuickTrainEnd__DelegateSignature(ETrainAction Action, int32 UID);
	void ReceiveInitializeComponent();
	void ReceiveBeginPlay();
	void OnRep_TrainAreaType();
	void OnRep_TrainAction();
	void Recover_train_pre_hero();
	void Notify_train_delay(ETrainAction Action, float Delay);
	void Notify_train_delay_end(ETrainAction Action);
	void Step_start_train();
	void EndTrain();
	void OnRep_TracePointIndex();
	void OnRep_TracePointTotal();
	void Train_tips(const class FString& Text, ETipsPriority Priority);
	void Train_tips_bykey(const class FString& Key, const TArray<class FString>& Replace_list, ETipsPriority Priority);
	void Train_holder_tips(int32 Holder_uid, ETipsPriority Priority);
	void Formal_start_trace_train(ETrainAction Action, int32 Select_hero);
	void Formal_start_fixedtarget_train(int32 Select_hero, EShootingDis Select_dis);
	void Formal_start_movingtarget_train(int32 Select_hero, EShootingDis Select_dis, float Target_speed, int32 Target_type);
	void Formal_start_melee_train(ETrainAction Action, int32 Select_hero, ETrainAIModeType Move_type);
	void Set_not_cd(bool No_cd);
	void Set_friend_harm(bool No_cd);
	void Stop_train();
	void Spawn_train_entry_ai(class APyAISpawnActor* Spawner);
	void Destroy_train_entry_ai(class APyAISpawnActor* Spawner);
	void Set_entry_play_state(class AActor* Entry_controller, bool Is_playing);
	void Trigger_entry_chaos_destruction(class AActor* Entry_controller, const class FString& Actor_name);
	void Trigger_entry_chaos_recovery(class AActor* Entry_controller, const class FString& Actor_name);
	void Start_limit_time_train(class AActor* Limit_time_train_computer);
	void Set_limit_time_train_config(class AActor* Limit_time_train_computer, const TArray<class FString>& Key_list, const TArray<int32>& Value_list);
	void Spwan_ai_on_entry();
	void On_teleport_player_to_train_area(class AActor* Train_computer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyPlayerStateTrainComponent">();
	}
	static class UPyPlayerStateTrainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyPlayerStateTrainComponent>();
	}
};
static_assert(alignof(UPyPlayerStateTrainComponent) == 0x000008, "Wrong alignment on UPyPlayerStateTrainComponent");
static_assert(sizeof(UPyPlayerStateTrainComponent) == 0x000270, "Wrong size on UPyPlayerStateTrainComponent");
static_assert(offsetof(UPyPlayerStateTrainComponent, DelayTimer) == 0x000120, "Member 'UPyPlayerStateTrainComponent::DelayTimer' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainingTimer) == 0x000198, "Member 'UPyPlayerStateTrainComponent::TrainingTimer' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, PrepareTrainAction) == 0x000210, "Member 'UPyPlayerStateTrainComponent::PrepareTrainAction' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainAction) == 0x000214, "Member 'UPyPlayerStateTrainComponent::TrainAction' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainAreaType) == 0x000218, "Member 'UPyPlayerStateTrainComponent::TrainAreaType' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainTraceScore) == 0x00021C, "Member 'UPyPlayerStateTrainComponent::TrainTraceScore' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainTimeStamp) == 0x000220, "Member 'UPyPlayerStateTrainComponent::TrainTimeStamp' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TracePointIndex) == 0x000224, "Member 'UPyPlayerStateTrainComponent::TracePointIndex' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TracePointTotal) == 0x000228, "Member 'UPyPlayerStateTrainComponent::TracePointTotal' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainResultList) == 0x000230, "Member 'UPyPlayerStateTrainComponent::TrainResultList' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainStartTimeStamp) == 0x000240, "Member 'UPyPlayerStateTrainComponent::TrainStartTimeStamp' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainEndTimeStamp) == 0x000244, "Member 'UPyPlayerStateTrainComponent::TrainEndTimeStamp' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainRet) == 0x000248, "Member 'UPyPlayerStateTrainComponent::TrainRet' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, IsTrainFinish) == 0x00024C, "Member 'UPyPlayerStateTrainComponent::IsTrainFinish' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, TrainEnd) == 0x000250, "Member 'UPyPlayerStateTrainComponent::TrainEnd' has a wrong offset!");
static_assert(offsetof(UPyPlayerStateTrainComponent, DelayQuickTrainEnd) == 0x000260, "Member 'UPyPlayerStateTrainComponent::DelayQuickTrainEnd' has a wrong offset!");

}

