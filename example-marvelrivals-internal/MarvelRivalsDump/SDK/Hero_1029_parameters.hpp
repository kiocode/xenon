#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_1029

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Hero_1029.Projectile_10292101.GetAccumulateTime
// 0x0004 (0x0004 - 0x0000)
struct Projectile_10292101_GetAccumulateTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_10292101_GetAccumulateTime) == 0x000004, "Wrong alignment on Projectile_10292101_GetAccumulateTime");
static_assert(sizeof(Projectile_10292101_GetAccumulateTime) == 0x000004, "Wrong size on Projectile_10292101_GetAccumulateTime");
static_assert(offsetof(Projectile_10292101_GetAccumulateTime, ReturnValue) == 0x000000, "Member 'Projectile_10292101_GetAccumulateTime::ReturnValue' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Loop_102921_Common.CalculateFxLocRot
// 0x0030 (0x0030 - 0x0000)
struct Cue_Ability_Loop_102921_Common_CalculateFxLocRot final
{
public:
	struct FVector                                OutLoc;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRot;                                            // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Loop_102921_Common_CalculateFxLocRot) == 0x000008, "Wrong alignment on Cue_Ability_Loop_102921_Common_CalculateFxLocRot");
static_assert(sizeof(Cue_Ability_Loop_102921_Common_CalculateFxLocRot) == 0x000030, "Wrong size on Cue_Ability_Loop_102921_Common_CalculateFxLocRot");
static_assert(offsetof(Cue_Ability_Loop_102921_Common_CalculateFxLocRot, OutLoc) == 0x000000, "Member 'Cue_Ability_Loop_102921_Common_CalculateFxLocRot::OutLoc' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_102921_Common_CalculateFxLocRot, OutRot) == 0x000018, "Member 'Cue_Ability_Loop_102921_Common_CalculateFxLocRot::OutRot' has a wrong offset!");

// Function Hero_1029.Cue_Projectile_HitImpact_10292101.OnHitNiagaraSpawned
// 0x01C8 (0x01C8 - 0x0000)
struct Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned final
{
public:
	class UNiagaraComponent*                      SpawnedNiagara;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MyTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned) == 0x000008, "Wrong alignment on Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned");
static_assert(sizeof(Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned) == 0x0001C8, "Wrong size on Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned");
static_assert(offsetof(Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned, SpawnedNiagara) == 0x000000, "Member 'Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned::SpawnedNiagara' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned, MyTarget) == 0x000008, "Member 'Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned::MyTarget' has a wrong offset!");
static_assert(offsetof(Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned, Parameters) == 0x000010, "Member 'Cue_Projectile_HitImpact_10292101_OnHitNiagaraSpawned::Parameters' has a wrong offset!");

// Function Hero_1029.UIController_102921.UpdateReticle
// 0x0004 (0x0004 - 0x0000)
struct UIController_102921_UpdateReticle final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_102921_UpdateReticle) == 0x000004, "Wrong alignment on UIController_102921_UpdateReticle");
static_assert(sizeof(UIController_102921_UpdateReticle) == 0x000004, "Wrong size on UIController_102921_UpdateReticle");
static_assert(offsetof(UIController_102921_UpdateReticle, Radius) == 0x000000, "Member 'UIController_102921_UpdateReticle::Radius' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.HandleTargetTPBuff
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10294101_HandleTargetTPBuff final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10294101_HandleTargetTPBuff) == 0x000008, "Wrong alignment on Summoned_10294101_HandleTargetTPBuff");
static_assert(sizeof(Summoned_10294101_HandleTargetTPBuff) == 0x000010, "Wrong size on Summoned_10294101_HandleTargetTPBuff");
static_assert(offsetof(Summoned_10294101_HandleTargetTPBuff, TargetActor) == 0x000000, "Member 'Summoned_10294101_HandleTargetTPBuff::TargetActor' has a wrong offset!");
static_assert(offsetof(Summoned_10294101_HandleTargetTPBuff, bApply) == 0x000008, "Member 'Summoned_10294101_HandleTargetTPBuff::bApply' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.IsTargetCanBeTP
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10294101_IsTargetCanBeTP final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10294101_IsTargetCanBeTP) == 0x000008, "Wrong alignment on Summoned_10294101_IsTargetCanBeTP");
static_assert(sizeof(Summoned_10294101_IsTargetCanBeTP) == 0x000010, "Wrong size on Summoned_10294101_IsTargetCanBeTP");
static_assert(offsetof(Summoned_10294101_IsTargetCanBeTP, TargetActor) == 0x000000, "Member 'Summoned_10294101_IsTargetCanBeTP::TargetActor' has a wrong offset!");
static_assert(offsetof(Summoned_10294101_IsTargetCanBeTP, ReturnValue) == 0x000008, "Member 'Summoned_10294101_IsTargetCanBeTP::ReturnValue' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.OnASCTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10294101_OnASCTagUpdate final
{
public:
	struct FGameplayTag                           TagUpdate;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagExist;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10294101_OnASCTagUpdate) == 0x000004, "Wrong alignment on Summoned_10294101_OnASCTagUpdate");
static_assert(sizeof(Summoned_10294101_OnASCTagUpdate) == 0x000010, "Wrong size on Summoned_10294101_OnASCTagUpdate");
static_assert(offsetof(Summoned_10294101_OnASCTagUpdate, TagUpdate) == 0x000000, "Member 'Summoned_10294101_OnASCTagUpdate::TagUpdate' has a wrong offset!");
static_assert(offsetof(Summoned_10294101_OnASCTagUpdate, bTagExist) == 0x00000C, "Member 'Summoned_10294101_OnASCTagUpdate::bTagExist' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.SetTargetTP
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10294101_SetTargetTP final
{
public:
	class ASummoned_10294101*                     InTargetTP;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10294101_SetTargetTP) == 0x000008, "Wrong alignment on Summoned_10294101_SetTargetTP");
static_assert(sizeof(Summoned_10294101_SetTargetTP) == 0x000008, "Wrong size on Summoned_10294101_SetTargetTP");
static_assert(offsetof(Summoned_10294101_SetTargetTP, InTargetTP) == 0x000000, "Member 'Summoned_10294101_SetTargetTP::InTargetTP' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.SetTPFaceDir
// 0x0018 (0x0018 - 0x0000)
struct Summoned_10294101_SetTPFaceDir final
{
public:
	struct FVector                                InDir;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10294101_SetTPFaceDir) == 0x000008, "Wrong alignment on Summoned_10294101_SetTPFaceDir");
static_assert(sizeof(Summoned_10294101_SetTPFaceDir) == 0x000018, "Wrong size on Summoned_10294101_SetTPFaceDir");
static_assert(offsetof(Summoned_10294101_SetTPFaceDir, InDir) == 0x000000, "Member 'Summoned_10294101_SetTPFaceDir::InDir' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.TryTeleportTarget
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10294101_TryTeleportTarget final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10294101_TryTeleportTarget) == 0x000008, "Wrong alignment on Summoned_10294101_TryTeleportTarget");
static_assert(sizeof(Summoned_10294101_TryTeleportTarget) == 0x000008, "Wrong size on Summoned_10294101_TryTeleportTarget");
static_assert(offsetof(Summoned_10294101_TryTeleportTarget, TargetActor) == 0x000000, "Member 'Summoned_10294101_TryTeleportTarget::TargetActor' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.UpdateTPState
// 0x0010 (0x0010 - 0x0000)
struct Summoned_10294101_UpdateTPState final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTP;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Summoned_10294101_UpdateTPState) == 0x000008, "Wrong alignment on Summoned_10294101_UpdateTPState");
static_assert(sizeof(Summoned_10294101_UpdateTPState) == 0x000010, "Wrong size on Summoned_10294101_UpdateTPState");
static_assert(offsetof(Summoned_10294101_UpdateTPState, TargetActor) == 0x000000, "Member 'Summoned_10294101_UpdateTPState::TargetActor' has a wrong offset!");
static_assert(offsetof(Summoned_10294101_UpdateTPState, bStartTP) == 0x000008, "Member 'Summoned_10294101_UpdateTPState::bStartTP' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.UpdateUsageRecord
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10294101_UpdateUsageRecord final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10294101_UpdateUsageRecord) == 0x000008, "Wrong alignment on Summoned_10294101_UpdateUsageRecord");
static_assert(sizeof(Summoned_10294101_UpdateUsageRecord) == 0x000008, "Wrong size on Summoned_10294101_UpdateUsageRecord");
static_assert(offsetof(Summoned_10294101_UpdateUsageRecord, TargetActor) == 0x000000, "Member 'Summoned_10294101_UpdateUsageRecord::TargetActor' has a wrong offset!");

// Function Hero_1029.Summoned_10294101.GetTargetTP
// 0x0008 (0x0008 - 0x0000)
struct Summoned_10294101_GetTargetTP final
{
public:
	class ASummoned_10294101*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Summoned_10294101_GetTargetTP) == 0x000008, "Wrong alignment on Summoned_10294101_GetTargetTP");
static_assert(sizeof(Summoned_10294101_GetTargetTP) == 0x000008, "Wrong size on Summoned_10294101_GetTargetTP");
static_assert(offsetof(Summoned_10294101_GetTargetTP, ReturnValue) == 0x000000, "Member 'Summoned_10294101_GetTargetTP::ReturnValue' has a wrong offset!");

// Function Hero_1029.SummonedOverlapComp_10294101.GetOwnerSummoned_10294101
// 0x0008 (0x0008 - 0x0000)
struct SummonedOverlapComp_10294101_GetOwnerSummoned_10294101 final
{
public:
	class ASummoned_10294101*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonedOverlapComp_10294101_GetOwnerSummoned_10294101) == 0x000008, "Wrong alignment on SummonedOverlapComp_10294101_GetOwnerSummoned_10294101");
static_assert(sizeof(SummonedOverlapComp_10294101_GetOwnerSummoned_10294101) == 0x000008, "Wrong size on SummonedOverlapComp_10294101_GetOwnerSummoned_10294101");
static_assert(offsetof(SummonedOverlapComp_10294101_GetOwnerSummoned_10294101, ReturnValue) == 0x000000, "Member 'SummonedOverlapComp_10294101_GetOwnerSummoned_10294101::ReturnValue' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Instant_10294101.CustomDebugDraw
// 0x0030 (0x0030 - 0x0000)
struct Cue_Ability_Instant_10294101_CustomDebugDraw final
{
public:
	struct FRotator                               Dir;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Instant_10294101_CustomDebugDraw) == 0x000008, "Wrong alignment on Cue_Ability_Instant_10294101_CustomDebugDraw");
static_assert(sizeof(Cue_Ability_Instant_10294101_CustomDebugDraw) == 0x000030, "Wrong size on Cue_Ability_Instant_10294101_CustomDebugDraw");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomDebugDraw, Dir) == 0x000000, "Member 'Cue_Ability_Instant_10294101_CustomDebugDraw::Dir' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomDebugDraw, Start) == 0x000018, "Member 'Cue_Ability_Instant_10294101_CustomDebugDraw::Start' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Instant_10294101.CustomSpawnFX
// 0x0240 (0x0240 - 0x0000)
struct Cue_Ability_Instant_10294101_CustomSpawnFX final
{
public:
	class UFXSystemAsset*                         InFXAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttach;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0028(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Loc;                                               // 0x01E0(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x01F8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLoc;                                       // 0x0210(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRot;                                       // 0x0228(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cue_Ability_Instant_10294101_CustomSpawnFX) == 0x000008, "Wrong alignment on Cue_Ability_Instant_10294101_CustomSpawnFX");
static_assert(sizeof(Cue_Ability_Instant_10294101_CustomSpawnFX) == 0x000240, "Wrong size on Cue_Ability_Instant_10294101_CustomSpawnFX");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, InFXAsset) == 0x000000, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::InFXAsset' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, bIsAttach) == 0x000008, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::bIsAttach' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, Mesh) == 0x000010, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::Mesh' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, Socket) == 0x000018, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::Socket' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, Parameters) == 0x000028, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::Parameters' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, Loc) == 0x0001E0, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::Loc' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, Rot) == 0x0001F8, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::Rot' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, RelativeLoc) == 0x000210, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::RelativeLoc' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Instant_10294101_CustomSpawnFX, RelativeRot) == 0x000228, "Member 'Cue_Ability_Instant_10294101_CustomSpawnFX::RelativeRot' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Loop_10294102.HandleSlotMaterial
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_10294102_HandleSlotMaterial final
{
public:
	float                                         CurveTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReset;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10294102_HandleSlotMaterial) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10294102_HandleSlotMaterial");
static_assert(sizeof(Cue_Ability_Loop_10294102_HandleSlotMaterial) == 0x000008, "Wrong size on Cue_Ability_Loop_10294102_HandleSlotMaterial");
static_assert(offsetof(Cue_Ability_Loop_10294102_HandleSlotMaterial, CurveTime) == 0x000000, "Member 'Cue_Ability_Loop_10294102_HandleSlotMaterial::CurveTime' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_HandleSlotMaterial, bIsReset) == 0x000004, "Member 'Cue_Ability_Loop_10294102_HandleSlotMaterial::bIsReset' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Loop_10294102.IsMaterialHasCached
// 0x0008 (0x0008 - 0x0000)
struct Cue_Ability_Loop_10294102_IsMaterialHasCached final
{
public:
	int32                                         SlotIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10294102_IsMaterialHasCached) == 0x000004, "Wrong alignment on Cue_Ability_Loop_10294102_IsMaterialHasCached");
static_assert(sizeof(Cue_Ability_Loop_10294102_IsMaterialHasCached) == 0x000008, "Wrong size on Cue_Ability_Loop_10294102_IsMaterialHasCached");
static_assert(offsetof(Cue_Ability_Loop_10294102_IsMaterialHasCached, SlotIdx) == 0x000000, "Member 'Cue_Ability_Loop_10294102_IsMaterialHasCached::SlotIdx' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_IsMaterialHasCached, ReturnValue) == 0x000004, "Member 'Cue_Ability_Loop_10294102_IsMaterialHasCached::ReturnValue' has a wrong offset!");

// Function Hero_1029.Cue_Ability_Loop_10294102.SetMaterialParamInternal
// 0x0030 (0x0030 - 0x0000)
struct Cue_Ability_Loop_10294102_SetMaterialParamInternal final
{
public:
	class UCurveBase*                             CurveBase;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Material;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReset;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Cue_Ability_Loop_10294102_SetMaterialParamInternal) == 0x000008, "Wrong alignment on Cue_Ability_Loop_10294102_SetMaterialParamInternal");
static_assert(sizeof(Cue_Ability_Loop_10294102_SetMaterialParamInternal) == 0x000030, "Wrong size on Cue_Ability_Loop_10294102_SetMaterialParamInternal");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, CurveBase) == 0x000000, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::CurveBase' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, CurveTime) == 0x000008, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::CurveTime' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, Material) == 0x000010, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::Material' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, Param) == 0x000018, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::Param' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, SlotIdx) == 0x000024, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::SlotIdx' has a wrong offset!");
static_assert(offsetof(Cue_Ability_Loop_10294102_SetMaterialParamInternal, bIsReset) == 0x000028, "Member 'Cue_Ability_Loop_10294102_SetMaterialParamInternal::bIsReset' has a wrong offset!");

// Function Hero_1029.Ability_102972.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct Ability_102972_SetTarget final
{
public:
	class AActor*                                 OutTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ability_102972_SetTarget) == 0x000008, "Wrong alignment on Ability_102972_SetTarget");
static_assert(sizeof(Ability_102972_SetTarget) == 0x000008, "Wrong size on Ability_102972_SetTarget");
static_assert(offsetof(Ability_102972_SetTarget, OutTarget) == 0x000000, "Member 'Ability_102972_SetTarget::OutTarget' has a wrong offset!");

// Function Hero_1029.MagikAnimInstance.OnCharacterTagUpdate
// 0x0010 (0x0010 - 0x0000)
struct MagikAnimInstance_OnCharacterTagUpdate final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExist;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagikAnimInstance_OnCharacterTagUpdate) == 0x000004, "Wrong alignment on MagikAnimInstance_OnCharacterTagUpdate");
static_assert(sizeof(MagikAnimInstance_OnCharacterTagUpdate) == 0x000010, "Wrong size on MagikAnimInstance_OnCharacterTagUpdate");
static_assert(offsetof(MagikAnimInstance_OnCharacterTagUpdate, InTag) == 0x000000, "Member 'MagikAnimInstance_OnCharacterTagUpdate::InTag' has a wrong offset!");
static_assert(offsetof(MagikAnimInstance_OnCharacterTagUpdate, bExist) == 0x00000C, "Member 'MagikAnimInstance_OnCharacterTagUpdate::bExist' has a wrong offset!");

// Function Hero_1029.TabData_1029.OnActorDeath
// 0x0030 (0x0030 - 0x0000)
struct TabData_1029_OnActorDeath final
{
public:
	class AActor*                                 Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeModifierHandle               ModifierParameterHandle;                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalEventExtraData                  ExtraData;                                         // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabData_1029_OnActorDeath) == 0x000008, "Wrong alignment on TabData_1029_OnActorDeath");
static_assert(sizeof(TabData_1029_OnActorDeath) == 0x000030, "Wrong size on TabData_1029_OnActorDeath");
static_assert(offsetof(TabData_1029_OnActorDeath, Killer) == 0x000000, "Member 'TabData_1029_OnActorDeath::Killer' has a wrong offset!");
static_assert(offsetof(TabData_1029_OnActorDeath, Target) == 0x000008, "Member 'TabData_1029_OnActorDeath::Target' has a wrong offset!");
static_assert(offsetof(TabData_1029_OnActorDeath, ModifierParameterHandle) == 0x000010, "Member 'TabData_1029_OnActorDeath::ModifierParameterHandle' has a wrong offset!");
static_assert(offsetof(TabData_1029_OnActorDeath, ExtraData) == 0x000028, "Member 'TabData_1029_OnActorDeath::ExtraData' has a wrong offset!");

}

