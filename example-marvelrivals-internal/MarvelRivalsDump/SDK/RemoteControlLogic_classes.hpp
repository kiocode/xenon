#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RemoteControlLogic

#include "Basic.hpp"

#include "RemoteControl_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "RemoteControlLogic_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Class RemoteControlLogic.RCAction
// 0x0028 (0x0058 - 0x0030)
class URCAction : public UObject
{
public:
	struct FGuid                                  ExposedFieldId;                                    // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class URemoteControlPreset>    PresetWeakPtr;                                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCAction">();
	}
	static class URCAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCAction>();
	}
};
//static_assert(alignof(URCAction) == 0x000008, "Wrong alignment on URCAction");
//static_assert(sizeof(URCAction) == 0x000058, "Wrong size on URCAction");
//static_assert(offsetof(URCAction, ExposedFieldId) == 0x000030, "Member 'URCAction::ExposedFieldId' has a wrong offset!");
//static_assert(offsetof(URCAction, ID) == 0x000040, "Member 'URCAction::ID' has a wrong offset!");
//static_assert(offsetof(URCAction, PresetWeakPtr) == 0x000050, "Member 'URCAction::PresetWeakPtr' has a wrong offset!");

// Class RemoteControlLogic.RCActionContainer
// 0x00C0 (0x00F0 - 0x0030)
class URCActionContainer final : public UObject
{
public:
	TSet<class URCActionContainer*>               ActionContainers;                                  // 0x0030(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class URemoteControlPreset>    PresetWeakPtr;                                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class URCAction*>                        Actions;                                           // 0x00A0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCActionContainer">();
	}
	static class URCActionContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCActionContainer>();
	}
};
//static_assert(alignof(URCActionContainer) == 0x000008, "Wrong alignment on URCActionContainer");
//static_assert(sizeof(URCActionContainer) == 0x0000F0, "Wrong size on URCActionContainer");
//static_assert(offsetof(URCActionContainer, ActionContainers) == 0x000030, "Member 'URCActionContainer::ActionContainers' has a wrong offset!");
//static_assert(offsetof(URCActionContainer, PresetWeakPtr) == 0x000080, "Member 'URCActionContainer::PresetWeakPtr' has a wrong offset!");
//static_assert(offsetof(URCActionContainer, Actions) == 0x0000A0, "Member 'URCActionContainer::Actions' has a wrong offset!");

// Class RemoteControlLogic.RCBehaviour
// 0x0068 (0x0098 - 0x0030)
class URCBehaviour : public UObject
{
public:
	TSubclassOf<class URCBehaviourNode>           BehaviourNodeClass;                                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         OverrideBehaviourBlueprintClassPath;               // 0x0038(0x0028)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCActionContainer*                     ActionContainer;                                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class URCController>           ControllerWeakPtr;                                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URCBehaviourNode*                       CachedBehaviourNode;                               // 0x0088(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsEnabled;                                        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteBehavioursDuringPreChange;                 // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviour">();
	}
	static class URCBehaviour* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviour>();
	}
};
//static_assert(alignof(URCBehaviour) == 0x000008, "Wrong alignment on URCBehaviour");
//static_assert(sizeof(URCBehaviour) == 0x000098, "Wrong size on URCBehaviour");
//static_assert(offsetof(URCBehaviour, BehaviourNodeClass) == 0x000030, "Member 'URCBehaviour::BehaviourNodeClass' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, OverrideBehaviourBlueprintClassPath) == 0x000038, "Member 'URCBehaviour::OverrideBehaviourBlueprintClassPath' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, ID) == 0x000060, "Member 'URCBehaviour::ID' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, ActionContainer) == 0x000070, "Member 'URCBehaviour::ActionContainer' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, ControllerWeakPtr) == 0x000078, "Member 'URCBehaviour::ControllerWeakPtr' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, CachedBehaviourNode) == 0x000088, "Member 'URCBehaviour::CachedBehaviourNode' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, bIsEnabled) == 0x000090, "Member 'URCBehaviour::bIsEnabled' has a wrong offset!");
//static_assert(offsetof(URCBehaviour, bExecuteBehavioursDuringPreChange) == 0x000091, "Member 'URCBehaviour::bExecuteBehavioursDuringPreChange' has a wrong offset!");

// Class RemoteControlLogic.RCBehaviourBind
// 0x0008 (0x00A0 - 0x0098)
class URCBehaviourBind final : public URCBehaviour
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourBind">();
	}
	static class URCBehaviourBind* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourBind>();
	}
};
//static_assert(alignof(URCBehaviourBind) == 0x000008, "Wrong alignment on URCBehaviourBind");
//static_assert(sizeof(URCBehaviourBind) == 0x0000A0, "Wrong size on URCBehaviourBind");

// Class RemoteControlLogic.RCBehaviourNode
// 0x0030 (0x0060 - 0x0030)
class URCBehaviourNode : public UObject
{
public:
	class FText                                   DisplayName;                                       // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   BehaviorDescription;                               // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourNode">();
	}
	static class URCBehaviourNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourNode>();
	}
};
//static_assert(alignof(URCBehaviourNode) == 0x000008, "Wrong alignment on URCBehaviourNode");
//static_assert(sizeof(URCBehaviourNode) == 0x000060, "Wrong size on URCBehaviourNode");
//static_assert(offsetof(URCBehaviourNode, DisplayName) == 0x000030, "Member 'URCBehaviourNode::DisplayName' has a wrong offset!");
//static_assert(offsetof(URCBehaviourNode, BehaviorDescription) == 0x000048, "Member 'URCBehaviourNode::BehaviorDescription' has a wrong offset!");

// Class RemoteControlLogic.RCBehaviourBindNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourBindNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;
	void OnPassed(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourBindNode">();
	}
	static class URCBehaviourBindNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourBindNode>();
	}
};
//static_assert(alignof(URCBehaviourBindNode) == 0x000008, "Wrong alignment on URCBehaviourBindNode");
//static_assert(sizeof(URCBehaviourBindNode) == 0x000060, "Wrong size on URCBehaviourBindNode");

// Class RemoteControlLogic.RCBehaviourBlueprintNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourBlueprintNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;
	void OnPassed(class URCBehaviour* InBehaviour) const;
	void PreExecute(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourBlueprintNode">();
	}
	static class URCBehaviourBlueprintNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourBlueprintNode>();
	}
};
//static_assert(alignof(URCBehaviourBlueprintNode) == 0x000008, "Wrong alignment on URCBehaviourBlueprintNode");
//static_assert(sizeof(URCBehaviourBlueprintNode) == 0x000060, "Wrong size on URCBehaviourBlueprintNode");

// Class RemoteControlLogic.RCBehaviourConditional
// 0x0058 (0x00F0 - 0x0098)
class URCBehaviourConditional final : public URCBehaviour
{
public:
	TMap<class URCAction*, struct FRCBehaviourCondition> Conditions;                                        // 0x0098(0x0050)(NativeAccessSpecifierPublic)
	class URCVirtualPropertySelfContainer*        Comparand;                                         // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourConditional">();
	}
	static class URCBehaviourConditional* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourConditional>();
	}
};
//static_assert(alignof(URCBehaviourConditional) == 0x000008, "Wrong alignment on URCBehaviourConditional");
//static_assert(sizeof(URCBehaviourConditional) == 0x0000F0, "Wrong size on URCBehaviourConditional");
//static_assert(offsetof(URCBehaviourConditional, Conditions) == 0x000098, "Member 'URCBehaviourConditional::Conditions' has a wrong offset!");
//static_assert(offsetof(URCBehaviourConditional, Comparand) == 0x0000E8, "Member 'URCBehaviourConditional::Comparand' has a wrong offset!");

// Class RemoteControlLogic.RCBehaviourConditionalNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourConditionalNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;
	void OnPassed(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourConditionalNode">();
	}
	static class URCBehaviourConditionalNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourConditionalNode>();
	}
};
//static_assert(alignof(URCBehaviourConditionalNode) == 0x000008, "Wrong alignment on URCBehaviourConditionalNode");
//static_assert(sizeof(URCBehaviourConditionalNode) == 0x000060, "Wrong size on URCBehaviourConditionalNode");

// Class RemoteControlLogic.RCBehaviourOnValueChangedNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourOnValueChangedNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourOnValueChangedNode">();
	}
	static class URCBehaviourOnValueChangedNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourOnValueChangedNode>();
	}
};
//static_assert(alignof(URCBehaviourOnValueChangedNode) == 0x000008, "Wrong alignment on URCBehaviourOnValueChangedNode");
//static_assert(sizeof(URCBehaviourOnValueChangedNode) == 0x000060, "Wrong size on URCBehaviourOnValueChangedNode");

// Class RemoteControlLogic.RCBehaviourRangeMapNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourRangeMapNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;
	void OnPassed(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourRangeMapNode">();
	}
	static class URCBehaviourRangeMapNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourRangeMapNode>();
	}
};
//static_assert(alignof(URCBehaviourRangeMapNode) == 0x000008, "Wrong alignment on URCBehaviourRangeMapNode");
//static_assert(sizeof(URCBehaviourRangeMapNode) == 0x000060, "Wrong size on URCBehaviourRangeMapNode");

// Class RemoteControlLogic.RCBehaviourSetAssetByPathNode
// 0x0000 (0x0060 - 0x0060)
class URCBehaviourSetAssetByPathNode final : public URCBehaviourNode
{
public:
	bool Execute(class URCBehaviour* InBehaviour) const;
	bool IsSupported(class URCBehaviour* InBehaviour) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCBehaviourSetAssetByPathNode">();
	}
	static class URCBehaviourSetAssetByPathNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCBehaviourSetAssetByPathNode>();
	}
};
//static_assert(alignof(URCBehaviourSetAssetByPathNode) == 0x000008, "Wrong alignment on URCBehaviourSetAssetByPathNode");
//static_assert(sizeof(URCBehaviourSetAssetByPathNode) == 0x000060, "Wrong size on URCBehaviourSetAssetByPathNode");

// Class RemoteControlLogic.RCController
// 0x0068 (0x0130 - 0x00C8)
class URCController final : public URCVirtualPropertyInContainer
{
public:
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class URCBehaviour*>                     Behaviours;                                        // 0x00E0(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCController">();
	}
	static class URCController* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCController>();
	}
};
//static_assert(alignof(URCController) == 0x000008, "Wrong alignment on URCController");
//static_assert(sizeof(URCController) == 0x000130, "Wrong size on URCController");
//static_assert(offsetof(URCController, Behaviours) == 0x0000E0, "Member 'URCController::Behaviours' has a wrong offset!");

// Class RemoteControlLogic.RCControllerContainer
// 0x0060 (0x0110 - 0x00B0)
class URCControllerContainer final : public URCVirtualPropertyContainerBase
{
public:
	float                                         VectorSliderDelta;                                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VectorLinearDeltaSensitivity;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatorSliderDelta;                                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotatorLinearDeltaSensitivity;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class URCActionContainer*>               SharedActionContainers;                            // 0x00C0(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCControllerContainer">();
	}
	static class URCControllerContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCControllerContainer>();
	}
};
//static_assert(alignof(URCControllerContainer) == 0x000008, "Wrong alignment on URCControllerContainer");
//static_assert(sizeof(URCControllerContainer) == 0x000110, "Wrong size on URCControllerContainer");
//static_assert(offsetof(URCControllerContainer, VectorSliderDelta) == 0x0000B0, "Member 'URCControllerContainer::VectorSliderDelta' has a wrong offset!");
//static_assert(offsetof(URCControllerContainer, VectorLinearDeltaSensitivity) == 0x0000B4, "Member 'URCControllerContainer::VectorLinearDeltaSensitivity' has a wrong offset!");
//static_assert(offsetof(URCControllerContainer, RotatorSliderDelta) == 0x0000B8, "Member 'URCControllerContainer::RotatorSliderDelta' has a wrong offset!");
//static_assert(offsetof(URCControllerContainer, RotatorLinearDeltaSensitivity) == 0x0000BC, "Member 'URCControllerContainer::RotatorLinearDeltaSensitivity' has a wrong offset!");
//static_assert(offsetof(URCControllerContainer, SharedActionContainers) == 0x0000C0, "Member 'URCControllerContainer::SharedActionContainers' has a wrong offset!");

// Class RemoteControlLogic.RCFunctionAction
// 0x0000 (0x0058 - 0x0058)
class URCFunctionAction final : public URCAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCFunctionAction">();
	}
	static class URCFunctionAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCFunctionAction>();
	}
};
//static_assert(alignof(URCFunctionAction) == 0x000008, "Wrong alignment on URCFunctionAction");
//static_assert(sizeof(URCFunctionAction) == 0x000058, "Wrong size on URCFunctionAction");

// Class RemoteControlLogic.RCPropertyAction
// 0x0008 (0x0060 - 0x0058)
class URCPropertyAction : public URCAction
{
public:
	class URCVirtualPropertySelfContainer*        PropertySelfContainer;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCPropertyAction">();
	}
	static class URCPropertyAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCPropertyAction>();
	}
};
//static_assert(alignof(URCPropertyAction) == 0x000008, "Wrong alignment on URCPropertyAction");
//static_assert(sizeof(URCPropertyAction) == 0x000060, "Wrong size on URCPropertyAction");
//static_assert(offsetof(URCPropertyAction, PropertySelfContainer) == 0x000058, "Member 'URCPropertyAction::PropertySelfContainer' has a wrong offset!");

// Class RemoteControlLogic.RCPropertyBindAction
// 0x0008 (0x0068 - 0x0060)
class URCPropertyBindAction final : public URCPropertyAction
{
public:
	class URCController*                          Controller;                                        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCPropertyBindAction">();
	}
	static class URCPropertyBindAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCPropertyBindAction>();
	}
};
//static_assert(alignof(URCPropertyBindAction) == 0x000008, "Wrong alignment on URCPropertyBindAction");
//static_assert(sizeof(URCPropertyBindAction) == 0x000068, "Wrong size on URCPropertyBindAction");
//static_assert(offsetof(URCPropertyBindAction, Controller) == 0x000060, "Member 'URCPropertyBindAction::Controller' has a wrong offset!");

// Class RemoteControlLogic.RCRangeMapBehaviour
// 0x0070 (0x0108 - 0x0098)
class URCRangeMapBehaviour final : public URCBehaviour
{
public:
	class URCVirtualPropertyContainerBase*        PropertyContainer;                                 // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class URCAction*, struct FRCRangeMapInput> RangeMapActionContainer;                           // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCRangeMapBehaviour">();
	}
	static class URCRangeMapBehaviour* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCRangeMapBehaviour>();
	}
};
//static_assert(alignof(URCRangeMapBehaviour) == 0x000008, "Wrong alignment on URCRangeMapBehaviour");
//static_assert(sizeof(URCRangeMapBehaviour) == 0x000108, "Wrong size on URCRangeMapBehaviour");
//static_assert(offsetof(URCRangeMapBehaviour, PropertyContainer) == 0x000098, "Member 'URCRangeMapBehaviour::PropertyContainer' has a wrong offset!");
//static_assert(offsetof(URCRangeMapBehaviour, RangeMapActionContainer) == 0x0000A0, "Member 'URCRangeMapBehaviour::RangeMapActionContainer' has a wrong offset!");

// Class RemoteControlLogic.RCSetAssetByPathBehaviour
// 0x0048 (0x00E0 - 0x0098)
class URCSetAssetByPathBehaviour final : public URCBehaviour
{
public:
	class URCVirtualPropertyContainerBase*        PropertyInContainer;                               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AssetClass;                                        // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRCSetAssetPath                        PathStruct;                                        // 0x00A8(0x0010)(NativeAccessSpecifierPublic)
	bool                                          bInternal;                                         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  TargetEntityId;                                    // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x14];                                      // 0x00CC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RCSetAssetByPathBehaviour">();
	}
	static class URCSetAssetByPathBehaviour* GetDefaultObj()
	{
		return GetDefaultObjImpl<URCSetAssetByPathBehaviour>();
	}
};
//static_assert(alignof(URCSetAssetByPathBehaviour) == 0x000008, "Wrong alignment on URCSetAssetByPathBehaviour");
//static_assert(sizeof(URCSetAssetByPathBehaviour) == 0x0000E0, "Wrong size on URCSetAssetByPathBehaviour");
//static_assert(offsetof(URCSetAssetByPathBehaviour, PropertyInContainer) == 0x000098, "Member 'URCSetAssetByPathBehaviour::PropertyInContainer' has a wrong offset!");
//static_assert(offsetof(URCSetAssetByPathBehaviour, AssetClass) == 0x0000A0, "Member 'URCSetAssetByPathBehaviour::AssetClass' has a wrong offset!");
//static_assert(offsetof(URCSetAssetByPathBehaviour, PathStruct) == 0x0000A8, "Member 'URCSetAssetByPathBehaviour::PathStruct' has a wrong offset!");
//static_assert(offsetof(URCSetAssetByPathBehaviour, bInternal) == 0x0000B8, "Member 'URCSetAssetByPathBehaviour::bInternal' has a wrong offset!");
//static_assert(offsetof(URCSetAssetByPathBehaviour, TargetEntityId) == 0x0000BC, "Member 'URCSetAssetByPathBehaviour::TargetEntityId' has a wrong offset!");

// Class RemoteControlLogic.RemoteControlLogicConfig
// 0x0040 (0x0070 - 0x0030)
class URemoteControlLogicConfig final : public UObject
{
public:
	TArray<EPropertyBagPropertyType>              SupportedControllerTypes;                          // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           SupportedControllerStructTypes;                    // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           SupportedControllerObjectClassPaths;               // 0x0050(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           SupportedControllerCustomTypes;                    // 0x0060(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlLogicConfig">();
	}
	static class URemoteControlLogicConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlLogicConfig>();
	}
};
//static_assert(alignof(URemoteControlLogicConfig) == 0x000008, "Wrong alignment on URemoteControlLogicConfig");
//static_assert(sizeof(URemoteControlLogicConfig) == 0x000070, "Wrong size on URemoteControlLogicConfig");
//static_assert(offsetof(URemoteControlLogicConfig, SupportedControllerTypes) == 0x000030, "Member 'URemoteControlLogicConfig::SupportedControllerTypes' has a wrong offset!");
//static_assert(offsetof(URemoteControlLogicConfig, SupportedControllerStructTypes) == 0x000040, "Member 'URemoteControlLogicConfig::SupportedControllerStructTypes' has a wrong offset!");
//static_assert(offsetof(URemoteControlLogicConfig, SupportedControllerObjectClassPaths) == 0x000050, "Member 'URemoteControlLogicConfig::SupportedControllerObjectClassPaths' has a wrong offset!");
//static_assert(offsetof(URemoteControlLogicConfig, SupportedControllerCustomTypes) == 0x000060, "Member 'URemoteControlLogicConfig::SupportedControllerCustomTypes' has a wrong offset!");

// Class RemoteControlLogic.RemoteControlLogicTestData
// 0x0008 (0x0038 - 0x0030)
class URemoteControlLogicTestData final : public UObject
{
public:
	struct FColor                                 Color;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TestInt;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void TestIntFunction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoteControlLogicTestData">();
	}
	static class URemoteControlLogicTestData* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoteControlLogicTestData>();
	}
};
//static_assert(alignof(URemoteControlLogicTestData) == 0x000008, "Wrong alignment on URemoteControlLogicTestData");
//static_assert(sizeof(URemoteControlLogicTestData) == 0x000038, "Wrong size on URemoteControlLogicTestData");
//static_assert(offsetof(URemoteControlLogicTestData, Color) == 0x000030, "Member 'URemoteControlLogicTestData::Color' has a wrong offset!");
//static_assert(offsetof(URemoteControlLogicTestData, TestInt) == 0x000034, "Member 'URemoteControlLogicTestData::TestInt' has a wrong offset!");

}

